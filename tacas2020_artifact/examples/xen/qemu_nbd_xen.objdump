
qemu-nbd-xen:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <_init>:
    3000:	sub    rsp,0x8
    3004:	mov    rax,QWORD PTR [rip+0x23fcd]        # 26fd8 <__gmon_start__>
    300b:	test   rax,rax
    300e:	je     3012 <_init+0x12>
    3010:	call   rax
    3012:	add    rsp,0x8
    3016:	ret    

Disassembly of section .plt:

0000000000003020 <.plt>:
    3020:	push   QWORD PTR [rip+0x23c2a]        # 26c50 <_GLOBAL_OFFSET_TABLE_+0x8>
    3026:	jmp    QWORD PTR [rip+0x23c2c]        # 26c58 <_GLOBAL_OFFSET_TABLE_+0x10>
    302c:	nop    DWORD PTR [rax+0x0]

0000000000003030 <__ctype_toupper_loc@plt>:
    3030:	jmp    QWORD PTR [rip+0x23c2a]        # 26c60 <__ctype_toupper_loc@GLIBC_2.3>
    3036:	push   0x0
    303b:	jmp    3020 <.plt>

0000000000003040 <getenv@plt>:
    3040:	jmp    QWORD PTR [rip+0x23c22]        # 26c68 <getenv@GLIBC_2.2.5>
    3046:	push   0x1
    304b:	jmp    3020 <.plt>

0000000000003050 <sigprocmask@plt>:
    3050:	jmp    QWORD PTR [rip+0x23c1a]        # 26c70 <sigprocmask@GLIBC_2.2.5>
    3056:	push   0x2
    305b:	jmp    3020 <.plt>

0000000000003060 <__snprintf_chk@plt>:
    3060:	jmp    QWORD PTR [rip+0x23c12]        # 26c78 <__snprintf_chk@GLIBC_2.3.4>
    3066:	push   0x3
    306b:	jmp    3020 <.plt>

0000000000003070 <free@plt>:
    3070:	jmp    QWORD PTR [rip+0x23c0a]        # 26c80 <free@GLIBC_2.2.5>
    3076:	push   0x4
    307b:	jmp    3020 <.plt>

0000000000003080 <recv@plt>:
    3080:	jmp    QWORD PTR [rip+0x23c02]        # 26c88 <recv@GLIBC_2.2.5>
    3086:	push   0x5
    308b:	jmp    3020 <.plt>

0000000000003090 <pthread_create@plt>:
    3090:	jmp    QWORD PTR [rip+0x23bfa]        # 26c90 <pthread_create@GLIBC_2.2.5>
    3096:	push   0x6
    309b:	jmp    3020 <.plt>

00000000000030a0 <abort@plt>:
    30a0:	jmp    QWORD PTR [rip+0x23bf2]        # 26c98 <abort@GLIBC_2.2.5>
    30a6:	push   0x7
    30ab:	jmp    3020 <.plt>

00000000000030b0 <__errno_location@plt>:
    30b0:	jmp    QWORD PTR [rip+0x23bea]        # 26ca0 <__errno_location@GLIBC_2.2.5>
    30b6:	push   0x8
    30bb:	jmp    3020 <.plt>

00000000000030c0 <unlink@plt>:
    30c0:	jmp    QWORD PTR [rip+0x23be2]        # 26ca8 <unlink@GLIBC_2.2.5>
    30c6:	push   0x9
    30cb:	jmp    3020 <.plt>

00000000000030d0 <strncmp@plt>:
    30d0:	jmp    QWORD PTR [rip+0x23bda]        # 26cb0 <strncmp@GLIBC_2.2.5>
    30d6:	push   0xa
    30db:	jmp    3020 <.plt>

00000000000030e0 <localtime_r@plt>:
    30e0:	jmp    QWORD PTR [rip+0x23bd2]        # 26cb8 <localtime_r@GLIBC_2.2.5>
    30e6:	push   0xb
    30eb:	jmp    3020 <.plt>

00000000000030f0 <inflate@plt>:
    30f0:	jmp    QWORD PTR [rip+0x23bca]        # 26cc0 <inflate>
    30f6:	push   0xc
    30fb:	jmp    3020 <.plt>

0000000000003100 <mkdir@plt>:
    3100:	jmp    QWORD PTR [rip+0x23bc2]        # 26cc8 <mkdir@GLIBC_2.2.5>
    3106:	push   0xd
    310b:	jmp    3020 <.plt>

0000000000003110 <sigaction@plt>:
    3110:	jmp    QWORD PTR [rip+0x23bba]        # 26cd0 <sigaction@GLIBC_2.2.5>
    3116:	push   0xe
    311b:	jmp    3020 <.plt>

0000000000003120 <setsockopt@plt>:
    3120:	jmp    QWORD PTR [rip+0x23bb2]        # 26cd8 <setsockopt@GLIBC_2.2.5>
    3126:	push   0xf
    312b:	jmp    3020 <.plt>

0000000000003130 <write@plt>:
    3130:	jmp    QWORD PTR [rip+0x23baa]        # 26ce0 <write@GLIBC_2.2.5>
    3136:	push   0x10
    313b:	jmp    3020 <.plt>

0000000000003140 <getpid@plt>:
    3140:	jmp    QWORD PTR [rip+0x23ba2]        # 26ce8 <getpid@GLIBC_2.2.5>
    3146:	push   0x11
    314b:	jmp    3020 <.plt>

0000000000003150 <__xstat64@plt>:
    3150:	jmp    QWORD PTR [rip+0x23b9a]        # 26cf0 <__xstat64@GLIBC_2.2.5>
    3156:	push   0x12
    315b:	jmp    3020 <.plt>

0000000000003160 <opendir@plt>:
    3160:	jmp    QWORD PTR [rip+0x23b92]        # 26cf8 <opendir@GLIBC_2.2.5>
    3166:	push   0x13
    316b:	jmp    3020 <.plt>

0000000000003170 <rmdir@plt>:
    3170:	jmp    QWORD PTR [rip+0x23b8a]        # 26d00 <rmdir@GLIBC_2.2.5>
    3176:	push   0x14
    317b:	jmp    3020 <.plt>

0000000000003180 <strlen@plt>:
    3180:	jmp    QWORD PTR [rip+0x23b82]        # 26d08 <strlen@GLIBC_2.2.5>
    3186:	push   0x15
    318b:	jmp    3020 <.plt>

0000000000003190 <__stack_chk_fail@plt>:
    3190:	jmp    QWORD PTR [rip+0x23b7a]        # 26d10 <__stack_chk_fail@GLIBC_2.4>
    3196:	push   0x16
    319b:	jmp    3020 <.plt>

00000000000031a0 <getopt_long@plt>:
    31a0:	jmp    QWORD PTR [rip+0x23b72]        # 26d18 <getopt_long@GLIBC_2.2.5>
    31a6:	push   0x17
    31ab:	jmp    3020 <.plt>

00000000000031b0 <errx@plt>:
    31b0:	jmp    QWORD PTR [rip+0x23b6a]        # 26d20 <errx@GLIBC_2.2.5>
    31b6:	push   0x18
    31bb:	jmp    3020 <.plt>

00000000000031c0 <send@plt>:
    31c0:	jmp    QWORD PTR [rip+0x23b62]        # 26d28 <send@GLIBC_2.2.5>
    31c6:	push   0x19
    31cb:	jmp    3020 <.plt>

00000000000031d0 <strchr@plt>:
    31d0:	jmp    QWORD PTR [rip+0x23b5a]        # 26d30 <strchr@GLIBC_2.2.5>
    31d6:	push   0x1a
    31db:	jmp    3020 <.plt>

00000000000031e0 <__fdelt_chk@plt>:
    31e0:	jmp    QWORD PTR [rip+0x23b52]        # 26d38 <__fdelt_chk@GLIBC_2.15>
    31e6:	push   0x1b
    31eb:	jmp    3020 <.plt>

00000000000031f0 <snprintf@plt>:
    31f0:	jmp    QWORD PTR [rip+0x23b4a]        # 26d40 <snprintf@GLIBC_2.2.5>
    31f6:	push   0x1c
    31fb:	jmp    3020 <.plt>

0000000000003200 <strrchr@plt>:
    3200:	jmp    QWORD PTR [rip+0x23b42]        # 26d48 <strrchr@GLIBC_2.2.5>
    3206:	push   0x1d
    320b:	jmp    3020 <.plt>

0000000000003210 <gettimeofday@plt>:
    3210:	jmp    QWORD PTR [rip+0x23b3a]        # 26d50 <gettimeofday@GLIBC_2.2.5>
    3216:	push   0x1e
    321b:	jmp    3020 <.plt>

0000000000003220 <__assert_fail@plt>:
    3220:	jmp    QWORD PTR [rip+0x23b32]        # 26d58 <__assert_fail@GLIBC_2.2.5>
    3226:	push   0x1f
    322b:	jmp    3020 <.plt>

0000000000003230 <deflate@plt>:
    3230:	jmp    QWORD PTR [rip+0x23b2a]        # 26d60 <deflate>
    3236:	push   0x20
    323b:	jmp    3020 <.plt>

0000000000003240 <memset@plt>:
    3240:	jmp    QWORD PTR [rip+0x23b22]        # 26d68 <memset@GLIBC_2.2.5>
    3246:	push   0x21
    324b:	jmp    3020 <.plt>

0000000000003250 <ioctl@plt>:
    3250:	jmp    QWORD PTR [rip+0x23b1a]        # 26d70 <ioctl@GLIBC_2.2.5>
    3256:	push   0x22
    325b:	jmp    3020 <.plt>

0000000000003260 <close@plt>:
    3260:	jmp    QWORD PTR [rip+0x23b12]        # 26d78 <close@GLIBC_2.2.5>
    3266:	push   0x23
    326b:	jmp    3020 <.plt>

0000000000003270 <__realpath_chk@plt>:
    3270:	jmp    QWORD PTR [rip+0x23b0a]        # 26d80 <__realpath_chk@GLIBC_2.4>
    3276:	push   0x24
    327b:	jmp    3020 <.plt>

0000000000003280 <pipe@plt>:
    3280:	jmp    QWORD PTR [rip+0x23b02]        # 26d88 <pipe@GLIBC_2.2.5>
    3286:	push   0x25
    328b:	jmp    3020 <.plt>

0000000000003290 <closedir@plt>:
    3290:	jmp    QWORD PTR [rip+0x23afa]        # 26d90 <closedir@GLIBC_2.2.5>
    3296:	push   0x26
    329b:	jmp    3020 <.plt>

00000000000032a0 <deflateInit2_@plt>:
    32a0:	jmp    QWORD PTR [rip+0x23af2]        # 26d98 <deflateInit2_>
    32a6:	push   0x27
    32ab:	jmp    3020 <.plt>

00000000000032b0 <memchr@plt>:
    32b0:	jmp    QWORD PTR [rip+0x23aea]        # 26da0 <memchr@GLIBC_2.2.5>
    32b6:	push   0x28
    32bb:	jmp    3020 <.plt>

00000000000032c0 <read@plt>:
    32c0:	jmp    QWORD PTR [rip+0x23ae2]        # 26da8 <read@GLIBC_2.2.5>
    32c6:	push   0x29
    32cb:	jmp    3020 <.plt>

00000000000032d0 <memcmp@plt>:
    32d0:	jmp    QWORD PTR [rip+0x23ada]        # 26db0 <memcmp@GLIBC_2.2.5>
    32d6:	push   0x2a
    32db:	jmp    3020 <.plt>

00000000000032e0 <mkstemp64@plt>:
    32e0:	jmp    QWORD PTR [rip+0x23ad2]        # 26db8 <mkstemp64@GLIBC_2.2.5>
    32e6:	push   0x2b
    32eb:	jmp    3020 <.plt>

00000000000032f0 <pthread_attr_init@plt>:
    32f0:	jmp    QWORD PTR [rip+0x23aca]        # 26dc0 <pthread_attr_init@GLIBC_2.2.5>
    32f6:	push   0x2c
    32fb:	jmp    3020 <.plt>

0000000000003300 <pthread_cond_signal@plt>:
    3300:	jmp    QWORD PTR [rip+0x23ac2]        # 26dc8 <pthread_cond_signal@GLIBC_2.3.2>
    3306:	push   0x2d
    330b:	jmp    3020 <.plt>

0000000000003310 <calloc@plt>:
    3310:	jmp    QWORD PTR [rip+0x23aba]        # 26dd0 <calloc@GLIBC_2.2.5>
    3316:	push   0x2e
    331b:	jmp    3020 <.plt>

0000000000003320 <__fxstat64@plt>:
    3320:	jmp    QWORD PTR [rip+0x23ab2]        # 26dd8 <__fxstat64@GLIBC_2.2.5>
    3326:	push   0x2f
    332b:	jmp    3020 <.plt>

0000000000003330 <strcmp@plt>:
    3330:	jmp    QWORD PTR [rip+0x23aaa]        # 26de0 <strcmp@GLIBC_2.2.5>
    3336:	push   0x30
    333b:	jmp    3020 <.plt>

0000000000003340 <strtoll@plt>:
    3340:	jmp    QWORD PTR [rip+0x23aa2]        # 26de8 <strtoll@GLIBC_2.2.5>
    3346:	push   0x31
    334b:	jmp    3020 <.plt>

0000000000003350 <gethostbyname@plt>:
    3350:	jmp    QWORD PTR [rip+0x23a9a]        # 26df0 <gethostbyname@GLIBC_2.2.5>
    3356:	push   0x32
    335b:	jmp    3020 <.plt>

0000000000003360 <__memcpy_chk@plt>:
    3360:	jmp    QWORD PTR [rip+0x23a92]        # 26df8 <__memcpy_chk@GLIBC_2.3.4>
    3366:	push   0x33
    336b:	jmp    3020 <.plt>

0000000000003370 <sigemptyset@plt>:
    3370:	jmp    QWORD PTR [rip+0x23a8a]        # 26e00 <sigemptyset@GLIBC_2.2.5>
    3376:	push   0x34
    337b:	jmp    3020 <.plt>

0000000000003380 <basename@plt>:
    3380:	jmp    QWORD PTR [rip+0x23a82]        # 26e08 <basename@GLIBC_2.2.5>
    3386:	push   0x35
    338b:	jmp    3020 <.plt>

0000000000003390 <strtol@plt>:
    3390:	jmp    QWORD PTR [rip+0x23a7a]        # 26e10 <strtol@GLIBC_2.2.5>
    3396:	push   0x36
    339b:	jmp    3020 <.plt>

00000000000033a0 <sigfillset@plt>:
    33a0:	jmp    QWORD PTR [rip+0x23a72]        # 26e18 <sigfillset@GLIBC_2.2.5>
    33a6:	push   0x37
    33ab:	jmp    3020 <.plt>

00000000000033b0 <memcpy@plt>:
    33b0:	jmp    QWORD PTR [rip+0x23a6a]        # 26e20 <memcpy@GLIBC_2.14>
    33b6:	push   0x38
    33bb:	jmp    3020 <.plt>

00000000000033c0 <inflateEnd@plt>:
    33c0:	jmp    QWORD PTR [rip+0x23a62]        # 26e28 <inflateEnd>
    33c6:	push   0x39
    33cb:	jmp    3020 <.plt>

00000000000033d0 <kill@plt>:
    33d0:	jmp    QWORD PTR [rip+0x23a5a]        # 26e30 <kill@GLIBC_2.2.5>
    33d6:	push   0x3a
    33db:	jmp    3020 <.plt>

00000000000033e0 <time@plt>:
    33e0:	jmp    QWORD PTR [rip+0x23a52]        # 26e38 <time@GLIBC_2.2.5>
    33e6:	push   0x3b
    33eb:	jmp    3020 <.plt>

00000000000033f0 <select@plt>:
    33f0:	jmp    QWORD PTR [rip+0x23a4a]        # 26e40 <select@GLIBC_2.2.5>
    33f6:	push   0x3c
    33fb:	jmp    3020 <.plt>

0000000000003400 <inet_aton@plt>:
    3400:	jmp    QWORD PTR [rip+0x23a42]        # 26e48 <inet_aton@GLIBC_2.2.5>
    3406:	push   0x3d
    340b:	jmp    3020 <.plt>

0000000000003410 <pthread_attr_setdetachstate@plt>:
    3410:	jmp    QWORD PTR [rip+0x23a3a]        # 26e50 <pthread_attr_setdetachstate@GLIBC_2.2.5>
    3416:	push   0x3e
    341b:	jmp    3020 <.plt>

0000000000003420 <mmap64@plt>:
    3420:	jmp    QWORD PTR [rip+0x23a32]        # 26e58 <mmap64@GLIBC_2.2.5>
    3426:	push   0x3f
    342b:	jmp    3020 <.plt>

0000000000003430 <pthread_mutex_unlock@plt>:
    3430:	jmp    QWORD PTR [rip+0x23a2a]        # 26e60 <pthread_mutex_unlock@GLIBC_2.2.5>
    3436:	push   0x40
    343b:	jmp    3020 <.plt>

0000000000003440 <__open64_2@plt>:
    3440:	jmp    QWORD PTR [rip+0x23a22]        # 26e68 <__open64_2@GLIBC_2.7>
    3446:	push   0x41
    344b:	jmp    3020 <.plt>

0000000000003450 <malloc@plt>:
    3450:	jmp    QWORD PTR [rip+0x23a1a]        # 26e70 <malloc@GLIBC_2.2.5>
    3456:	push   0x42
    345b:	jmp    3020 <.plt>

0000000000003460 <listen@plt>:
    3460:	jmp    QWORD PTR [rip+0x23a12]        # 26e78 <listen@GLIBC_2.2.5>
    3466:	push   0x43
    346b:	jmp    3020 <.plt>

0000000000003470 <sscanf@plt>:
    3470:	jmp    QWORD PTR [rip+0x23a0a]        # 26e80 <sscanf@GLIBC_2.2.5>
    3476:	push   0x44
    347b:	jmp    3020 <.plt>

0000000000003480 <daemon@plt>:
    3480:	jmp    QWORD PTR [rip+0x23a02]        # 26e88 <daemon@GLIBC_2.2.5>
    3486:	push   0x45
    348b:	jmp    3020 <.plt>

0000000000003490 <deflateEnd@plt>:
    3490:	jmp    QWORD PTR [rip+0x239fa]        # 26e90 <deflateEnd>
    3496:	push   0x46
    349b:	jmp    3020 <.plt>

00000000000034a0 <realloc@plt>:
    34a0:	jmp    QWORD PTR [rip+0x239f2]        # 26e98 <realloc@GLIBC_2.2.5>
    34a6:	push   0x47
    34ab:	jmp    3020 <.plt>

00000000000034b0 <munmap@plt>:
    34b0:	jmp    QWORD PTR [rip+0x239ea]        # 26ea0 <munmap@GLIBC_2.2.5>
    34b6:	push   0x48
    34bb:	jmp    3020 <.plt>

00000000000034c0 <ftruncate64@plt>:
    34c0:	jmp    QWORD PTR [rip+0x239e2]        # 26ea8 <ftruncate64@GLIBC_2.2.5>
    34c6:	push   0x49
    34cb:	jmp    3020 <.plt>

00000000000034d0 <__printf_chk@plt>:
    34d0:	jmp    QWORD PTR [rip+0x239da]        # 26eb0 <__printf_chk@GLIBC_2.3.4>
    34d6:	push   0x4a
    34db:	jmp    3020 <.plt>

00000000000034e0 <inflateInit_@plt>:
    34e0:	jmp    QWORD PTR [rip+0x239d2]        # 26eb8 <inflateInit_>
    34e6:	push   0x4b
    34eb:	jmp    3020 <.plt>

00000000000034f0 <bind@plt>:
    34f0:	jmp    QWORD PTR [rip+0x239ca]        # 26ec0 <bind@GLIBC_2.2.5>
    34f6:	push   0x4c
    34fb:	jmp    3020 <.plt>

0000000000003500 <open64@plt>:
    3500:	jmp    QWORD PTR [rip+0x239c2]        # 26ec8 <open64@GLIBC_2.2.5>
    3506:	push   0x4d
    350b:	jmp    3020 <.plt>

0000000000003510 <strftime@plt>:
    3510:	jmp    QWORD PTR [rip+0x239ba]        # 26ed0 <strftime@GLIBC_2.2.5>
    3516:	push   0x4e
    351b:	jmp    3020 <.plt>

0000000000003520 <fcntl64@plt>:
    3520:	jmp    QWORD PTR [rip+0x239b2]        # 26ed8 <fcntl64@GLIBC_2.28>
    3526:	push   0x4f
    352b:	jmp    3020 <.plt>

0000000000003530 <memmove@plt>:
    3530:	jmp    QWORD PTR [rip+0x239aa]        # 26ee0 <memmove@GLIBC_2.2.5>
    3536:	push   0x50
    353b:	jmp    3020 <.plt>

0000000000003540 <readdir64@plt>:
    3540:	jmp    QWORD PTR [rip+0x239a2]        # 26ee8 <readdir64@GLIBC_2.2.5>
    3546:	push   0x51
    354b:	jmp    3020 <.plt>

0000000000003550 <lockf64@plt>:
    3550:	jmp    QWORD PTR [rip+0x2399a]        # 26ef0 <lockf64@GLIBC_2.2.5>
    3556:	push   0x52
    355b:	jmp    3020 <.plt>

0000000000003560 <fsync@plt>:
    3560:	jmp    QWORD PTR [rip+0x23992]        # 26ef8 <fsync@GLIBC_2.2.5>
    3566:	push   0x53
    356b:	jmp    3020 <.plt>

0000000000003570 <pthread_cond_timedwait@plt>:
    3570:	jmp    QWORD PTR [rip+0x2398a]        # 26f00 <pthread_cond_timedwait@GLIBC_2.3.2>
    3576:	push   0x54
    357b:	jmp    3020 <.plt>

0000000000003580 <inflateInit2_@plt>:
    3580:	jmp    QWORD PTR [rip+0x23982]        # 26f08 <inflateInit2_>
    3586:	push   0x55
    358b:	jmp    3020 <.plt>

0000000000003590 <perror@plt>:
    3590:	jmp    QWORD PTR [rip+0x2397a]        # 26f10 <perror@GLIBC_2.2.5>
    3596:	push   0x56
    359b:	jmp    3020 <.plt>

00000000000035a0 <rename@plt>:
    35a0:	jmp    QWORD PTR [rip+0x23972]        # 26f18 <rename@GLIBC_2.2.5>
    35a6:	push   0x57
    35ab:	jmp    3020 <.plt>

00000000000035b0 <accept@plt>:
    35b0:	jmp    QWORD PTR [rip+0x2396a]        # 26f20 <accept@GLIBC_2.2.5>
    35b6:	push   0x58
    35bb:	jmp    3020 <.plt>

00000000000035c0 <strtoul@plt>:
    35c0:	jmp    QWORD PTR [rip+0x23962]        # 26f28 <strtoul@GLIBC_2.2.5>
    35c6:	push   0x59
    35cb:	jmp    3020 <.plt>

00000000000035d0 <inflateReset@plt>:
    35d0:	jmp    QWORD PTR [rip+0x2395a]        # 26f30 <inflateReset>
    35d6:	push   0x5a
    35db:	jmp    3020 <.plt>

00000000000035e0 <getpagesize@plt>:
    35e0:	jmp    QWORD PTR [rip+0x23952]        # 26f38 <getpagesize@GLIBC_2.2.5>
    35e6:	push   0x5b
    35eb:	jmp    3020 <.plt>

00000000000035f0 <exit@plt>:
    35f0:	jmp    QWORD PTR [rip+0x2394a]        # 26f40 <exit@GLIBC_2.2.5>
    35f6:	push   0x5c
    35fb:	jmp    3020 <.plt>

0000000000003600 <connect@plt>:
    3600:	jmp    QWORD PTR [rip+0x23942]        # 26f48 <connect@GLIBC_2.2.5>
    3606:	push   0x5d
    360b:	jmp    3020 <.plt>

0000000000003610 <fwrite@plt>:
    3610:	jmp    QWORD PTR [rip+0x2393a]        # 26f50 <fwrite@GLIBC_2.2.5>
    3616:	push   0x5e
    361b:	jmp    3020 <.plt>

0000000000003620 <lseek64@plt>:
    3620:	jmp    QWORD PTR [rip+0x23932]        # 26f58 <lseek64@GLIBC_2.2.5>
    3626:	push   0x5f
    362b:	jmp    3020 <.plt>

0000000000003630 <__fprintf_chk@plt>:
    3630:	jmp    QWORD PTR [rip+0x2392a]        # 26f60 <__fprintf_chk@GLIBC_2.3.4>
    3636:	push   0x60
    363b:	jmp    3020 <.plt>

0000000000003640 <posix_memalign@plt>:
    3640:	jmp    QWORD PTR [rip+0x23922]        # 26f68 <posix_memalign@GLIBC_2.2.5>
    3646:	push   0x61
    364b:	jmp    3020 <.plt>

0000000000003650 <strdup@plt>:
    3650:	jmp    QWORD PTR [rip+0x2391a]        # 26f70 <strdup@GLIBC_2.2.5>
    3656:	push   0x62
    365b:	jmp    3020 <.plt>

0000000000003660 <strerror@plt>:
    3660:	jmp    QWORD PTR [rip+0x23912]        # 26f78 <strerror@GLIBC_2.2.5>
    3666:	push   0x63
    366b:	jmp    3020 <.plt>

0000000000003670 <sleep@plt>:
    3670:	jmp    QWORD PTR [rip+0x2390a]        # 26f80 <sleep@GLIBC_2.2.5>
    3676:	push   0x64
    367b:	jmp    3020 <.plt>

0000000000003680 <sigaddset@plt>:
    3680:	jmp    QWORD PTR [rip+0x23902]        # 26f88 <sigaddset@GLIBC_2.2.5>
    3686:	push   0x65
    368b:	jmp    3020 <.plt>

0000000000003690 <fork@plt>:
    3690:	jmp    QWORD PTR [rip+0x238fa]        # 26f90 <fork@GLIBC_2.2.5>
    3696:	push   0x66
    369b:	jmp    3020 <.plt>

00000000000036a0 <strstr@plt>:
    36a0:	jmp    QWORD PTR [rip+0x238f2]        # 26f98 <strstr@GLIBC_2.2.5>
    36a6:	push   0x67
    36ab:	jmp    3020 <.plt>

00000000000036b0 <pthread_mutex_lock@plt>:
    36b0:	jmp    QWORD PTR [rip+0x238ea]        # 26fa0 <pthread_mutex_lock@GLIBC_2.2.5>
    36b6:	push   0x68
    36bb:	jmp    3020 <.plt>

00000000000036c0 <__ctype_tolower_loc@plt>:
    36c0:	jmp    QWORD PTR [rip+0x238e2]        # 26fa8 <__ctype_tolower_loc@GLIBC_2.3>
    36c6:	push   0x69
    36cb:	jmp    3020 <.plt>

00000000000036d0 <__ctype_b_loc@plt>:
    36d0:	jmp    QWORD PTR [rip+0x238da]        # 26fb0 <__ctype_b_loc@GLIBC_2.3>
    36d6:	push   0x6a
    36db:	jmp    3020 <.plt>

00000000000036e0 <__sprintf_chk@plt>:
    36e0:	jmp    QWORD PTR [rip+0x238d2]        # 26fb8 <__sprintf_chk@GLIBC_2.3.4>
    36e6:	push   0x6b
    36eb:	jmp    3020 <.plt>

00000000000036f0 <socket@plt>:
    36f0:	jmp    QWORD PTR [rip+0x238ca]        # 26fc0 <socket@GLIBC_2.2.5>
    36f6:	push   0x6c
    36fb:	jmp    3020 <.plt>

Disassembly of section .plt.got:

0000000000003700 <__cxa_finalize@plt>:
    3700:	jmp    QWORD PTR [rip+0x238f2]        # 26ff8 <__cxa_finalize@GLIBC_2.2.5>
    3706:	xchg   ax,ax

Disassembly of section .text:

0000000000003710 <qemu_malloc.cold.0>:
    3710:	call   30a0 <abort@plt>

0000000000003715 <qemu_realloc.cold.1>:
    3715:	call   30a0 <abort@plt>

000000000000371a <qemu_mallocz.cold.2>:
    371a:	call   30a0 <abort@plt>

000000000000371f <qemu_strdup.cold.3>:
    371f:	call   30a0 <abort@plt>

0000000000003724 <qemu_strndup.cold.4>:
    3724:	call   30a0 <abort@plt>

0000000000003729 <insert_mapping.cold.9>:
    3729:	mov    QWORD PTR ds:0x18,0x0
    3735:	ud2    

0000000000003737 <schedule_rename.cold.10>:
    3737:	mov    QWORD PTR ds:0x0,r15
    373f:	ud2    

0000000000003741 <commit_direntries.cold.11>:
    3741:	mov    eax,DWORD PTR ds:0x14
    3748:	ud2    
    374a:	mov    eax,DWORD PTR ds:0x20
    3751:	ud2    

0000000000003753 <check_directory_consistency.cold.12>:
    3753:	mov    QWORD PTR ds:0x0,0x0
    375f:	ud2    
    3761:	mov    QWORD PTR ds:0x0,r8
    3769:	ud2    
    376b:	mov    QWORD PTR ds:0x0,r12
    3773:	ud2    

0000000000003775 <try_commit.cold.13>:
    3775:	mov    rax,QWORD PTR ds:0x18
    377d:	ud2    

000000000000377f <read_directory.cold.14>:
    377f:	mov    QWORD PTR [r12+0x8080],0x0
    378b:	mov    DWORD PTR ds:0x0,0x0
    3796:	ud2    
    3798:	mov    BYTE PTR ds:0xb,0x0
    37a0:	ud2    

00000000000037a2 <vvfat_open.cold.15>:
    37a2:	mov    BYTE PTR ds:0xb,0x0
    37aa:	ud2    
    37ac:	mov    DWORD PTR ds:0x0,0x0
    37b7:	ud2    
    37b9:	nop    DWORD PTR [rax+0x0]

00000000000037c0 <main>:
    37c0:	push   r15
    37c2:	mov    ecx,0x40
    37c7:	push   r14
    37c9:	lea    r14,[rip+0x188e7]        # 1c0b7 <_IO_stdin_used+0xb7>
    37d0:	push   r13
    37d2:	mov    r13d,edi
    37d5:	push   r12
    37d7:	mov    r12,rsi
    37da:	lea    rsi,[rip+0x2383f]        # 27020 <__dso_handle+0x18>
    37e1:	push   rbp
    37e2:	push   rbx
    37e3:	lea    rbx,[rip+0x18fa2]        # 1c78c <_IO_stdin_used+0x78c>
    37ea:	sub    rsp,0x788
    37f1:	mov    rax,QWORD PTR fs:0x28
    37fa:	mov    QWORD PTR [rsp+0x778],rax
    3802:	xor    eax,eax
    3804:	lea    rbp,[rsp+0x170]
    380c:	mov    BYTE PTR [rsp+0x18],0x0
    3811:	lea    rax,[rip+0x187ec]        # 1c004 <_IO_stdin_used+0x4>
    3818:	mov    rdi,rbp
    381b:	mov    QWORD PTR [rsp+0x48],rax
    3820:	lea    rax,[rsp+0x78]
    3825:	lea    r15,[rsp+0x6c]
    382a:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    382d:	mov    DWORD PTR [rsp+0x68],0x10
    3835:	mov    QWORD PTR [rsp+0x70],0x0
    383e:	mov    DWORD PTR [rsp+0x6c],0x0
    3846:	mov    QWORD PTR [rsp+0x8],0x0
    384f:	mov    DWORD PTR [rsp+0x58],0x0
    3857:	mov    DWORD PTR [rsp+0x28],0x1
    385f:	mov    DWORD PTR [rsp+0x2c],0xffffffff
    3867:	mov    DWORD PTR [rsp+0x10],0x0
    386f:	mov    QWORD PTR [rsp+0x20],0x0
    3878:	mov    QWORD PTR [rsp+0x30],0x0
    3881:	mov    DWORD PTR [rsp+0x40],0x400
    3889:	mov    BYTE PTR [rsp+0x38],0x0
    388e:	mov    QWORD PTR [rsp],rax
    3892:	nop    WORD PTR [rax+rax*1+0x0]
    3898:	mov    r8,r15
    389b:	mov    rcx,rbp
    389e:	mov    rdx,r14
    38a1:	mov    rsi,r12
    38a4:	mov    edi,r13d
    38a7:	call   31a0 <getopt_long@plt>
    38ac:	cmp    eax,0xffffffff
    38af:	je     3a98 <main+0x2d8>
    38b5:	sub    eax,0x3f
    38b8:	cmp    eax,0x37
    38bb:	ja     3898 <main+0xd8>
    38bd:	movsxd rax,DWORD PTR [rbx+rax*4]
    38c1:	add    rax,rbx
    38c4:	jmp    rax
    38c6:	mov    BYTE PTR [rsp+0x18],0x1
    38cb:	jmp    3898 <main+0xd8>
    38cd:	mov    rax,QWORD PTR [rip+0x24c14]        # 284e8 <optarg@@GLIBC_2.2.5>
    38d4:	mov    QWORD PTR [rsp+0x30],rax
    38d9:	jmp    3898 <main+0xd8>
    38db:	mov    rax,QWORD PTR [rip+0x24c06]        # 284e8 <optarg@@GLIBC_2.2.5>
    38e2:	mov    QWORD PTR [rsp+0x48],rax
    38e7:	jmp    3898 <main+0xd8>
    38e9:	mov    rdx,QWORD PTR [r12]
    38ed:	mov    edi,0x1
    38f2:	lea    rsi,[rip+0x18927]        # 1c220 <_IO_stdin_used+0x220>
    38f9:	xor    eax,eax
    38fb:	call   34d0 <__printf_chk@plt>
    3900:	xor    edi,edi
    3902:	call   35f0 <exit@plt>
    3907:	mov    rsi,QWORD PTR [rsp]
    390b:	mov    rdi,QWORD PTR [rip+0x24bd6]        # 284e8 <optarg@@GLIBC_2.2.5>
    3912:	xor    edx,edx
    3914:	call   3390 <strtol@plt>
    3919:	mov    rdx,QWORD PTR [rsp+0x78]
    391e:	mov    DWORD PTR [rsp+0x2c],eax
    3922:	cmp    BYTE PTR [rdx],0x0
    3925:	jne    42c6 <main+0xb06>
    392b:	lea    edx,[rax-0x1]
    392e:	cmp    edx,0x7
    3931:	jbe    3898 <main+0xd8>
    3937:	mov    edx,eax
    3939:	lea    rsi,[rip+0x1873d]        # 1c07d <_IO_stdin_used+0x7d>
    3940:	mov    edi,0x16
    3945:	xor    eax,eax
    3947:	call   31b0 <errx@plt>
    394c:	mov    DWORD PTR [rip+0x24bb6],0x1        # 2850c <verbose>
    3956:	jmp    3898 <main+0xd8>
    395b:	mov    DWORD PTR [rsp+0x58],0x1
    3963:	jmp    3898 <main+0xd8>
    3968:	or     DWORD PTR [rsp+0x10],0x8
    396d:	jmp    3898 <main+0xd8>
    3972:	mov    rsi,QWORD PTR [rsp]
    3976:	mov    rdi,QWORD PTR [rip+0x24b6b]        # 284e8 <optarg@@GLIBC_2.2.5>
    397d:	xor    edx,edx
    397f:	call   3390 <strtol@plt>
    3984:	mov    rdx,QWORD PTR [rsp+0x78]
    3989:	cmp    BYTE PTR [rdx],0x0
    398c:	jne    4292 <main+0xad2>
    3992:	lea    edx,[rax-0x1]
    3995:	cmp    edx,0xfffe
    399b:	ja     41dc <main+0xa1c>
    39a1:	movzx  eax,ax
    39a4:	mov    DWORD PTR [rsp+0x40],eax
    39a8:	jmp    3898 <main+0xd8>
    39ad:	mov    rsi,QWORD PTR [rsp]
    39b1:	mov    rdi,QWORD PTR [rip+0x24b30]        # 284e8 <optarg@@GLIBC_2.2.5>
    39b8:	xor    edx,edx
    39ba:	call   3340 <strtoll@plt>
    39bf:	mov    QWORD PTR [rsp+0x8],rax
    39c4:	mov    rax,QWORD PTR [rsp+0x78]
    39c9:	cmp    BYTE PTR [rax],0x0
    39cc:	jne    4278 <main+0xab8>
    39d2:	cmp    QWORD PTR [rsp+0x8],0x0
    39d8:	jns    3898 <main+0xd8>
    39de:	mov    rdx,QWORD PTR [rip+0x24b03]        # 284e8 <optarg@@GLIBC_2.2.5>
    39e5:	lea    rsi,[rip+0x1865d]        # 1c049 <_IO_stdin_used+0x49>
    39ec:	mov    edi,0x16
    39f1:	xor    eax,eax
    39f3:	call   31b0 <errx@plt>
    39f8:	or     DWORD PTR [rsp+0x10],0x20
    39fd:	jmp    3898 <main+0xd8>
    3a02:	mov    rax,QWORD PTR [rip+0x24adf]        # 284e8 <optarg@@GLIBC_2.2.5>
    3a09:	cmp    BYTE PTR [rax],0x2f
    3a0c:	mov    QWORD PTR [rsp+0x20],rax
    3a11:	je     3898 <main+0xd8>
    3a17:	lea    rsi,[rip+0x18674]        # 1c092 <_IO_stdin_used+0x92>
    3a1e:	mov    edi,0x16
    3a23:	xor    eax,eax
    3a25:	call   31b0 <errx@plt>
    3a2a:	mov    rdx,QWORD PTR [r12]
    3a2e:	mov    edi,0x1
    3a33:	lea    rcx,[rip+0x18676]        # 1c0b0 <_IO_stdin_used+0xb0>
    3a3a:	xor    eax,eax
    3a3c:	lea    rsi,[rip+0x188e5]        # 1c328 <_IO_stdin_used+0x328>
    3a43:	call   34d0 <__printf_chk@plt>
    3a48:	xor    edi,edi
    3a4a:	call   35f0 <exit@plt>
    3a4f:	mov    rsi,QWORD PTR [rsp]
    3a53:	mov    rdi,QWORD PTR [rip+0x24a8e]        # 284e8 <optarg@@GLIBC_2.2.5>
    3a5a:	xor    edx,edx
    3a5c:	call   3390 <strtol@plt>
    3a61:	mov    rdx,QWORD PTR [rsp+0x78]
    3a66:	mov    DWORD PTR [rsp+0x28],eax
    3a6a:	cmp    BYTE PTR [rdx],0x0
    3a6d:	jne    42ac <main+0xaec>
    3a73:	test   eax,eax
    3a75:	jg     3898 <main+0xd8>
    3a7b:	lea    rsi,[rip+0x1876e]        # 1c1f0 <_IO_stdin_used+0x1f0>
    3a82:	mov    edi,0x16
    3a87:	xor    eax,eax
    3a89:	call   31b0 <errx@plt>
    3a8e:	mov    BYTE PTR [rsp+0x38],0x1
    3a93:	jmp    3898 <main+0xd8>
    3a98:	movsxd rax,DWORD PTR [rip+0x24a41]        # 284e0 <optind@@GLIBC_2.2.5>
    3a9f:	sub    r13d,eax
    3aa2:	cmp    r13d,0x1
    3aa6:	jne    4216 <main+0xa56>
    3aac:	cmp    BYTE PTR [rsp+0x18],0x0
    3ab1:	je     3b29 <main+0x369>
    3ab3:	mov    rdi,QWORD PTR [r12+rax*8]
    3ab7:	mov    esi,0x2
    3abc:	xor    eax,eax
    3abe:	call   3500 <open64@plt>
    3ac3:	mov    ebx,eax
    3ac5:	cmp    eax,0xffffffff
    3ac8:	je     41f6 <main+0xa36>
    3ace:	mov    edi,eax
    3ad0:	xor    r13d,r13d
    3ad3:	call   16810 <nbd_disconnect>
    3ad8:	mov    edi,ebx
    3ada:	call   3260 <close@plt>
    3adf:	movsxd rax,DWORD PTR [rip+0x249fa]        # 284e0 <optind@@GLIBC_2.2.5>
    3ae6:	mov    edi,0x1
    3aeb:	lea    rsi,[rip+0x185eb]        # 1c0dd <_IO_stdin_used+0xdd>
    3af2:	mov    rdx,QWORD PTR [r12+rax*8]
    3af6:	xor    eax,eax
    3af8:	call   34d0 <__printf_chk@plt>
    3afd:	mov    rbx,QWORD PTR [rsp+0x778]
    3b05:	xor    rbx,QWORD PTR fs:0x28
    3b0e:	mov    eax,r13d
    3b11:	jne    4273 <main+0xab3>
    3b17:	add    rsp,0x788
    3b1e:	pop    rbx
    3b1f:	pop    rbp
    3b20:	pop    r12
    3b22:	pop    r13
    3b24:	pop    r14
    3b26:	pop    r15
    3b28:	ret    
    3b29:	call   19890 <bdrv_init>
    3b2e:	lea    rdi,[rip+0x185b9]        # 1c0ee <_IO_stdin_used+0xee>
    3b35:	call   17330 <bdrv_new>
    3b3a:	mov    r15,rax
    3b3d:	mov    QWORD PTR [rsp],rax
    3b41:	test   rax,rax
    3b44:	je     3afd <main+0x33d>
    3b46:	movsxd rax,DWORD PTR [rip+0x24993]        # 284e0 <optind@@GLIBC_2.2.5>
    3b4d:	mov    edx,DWORD PTR [rsp+0x10]
    3b51:	mov    rdi,r15
    3b54:	mov    rsi,QWORD PTR [r12+rax*8]
    3b58:	call   18440 <bdrv_open>
    3b5d:	add    eax,0x1
    3b60:	je     3afd <main+0x33d>
    3b62:	cmp    DWORD PTR [rsp+0x2c],0xffffffff
    3b67:	je     3cd1 <main+0x511>
    3b6d:	lea    rbx,[rsp+0x370]
    3b75:	mov    rdi,r15
    3b78:	mov    ecx,0x1
    3b7d:	xor    esi,esi
    3b7f:	mov    rdx,rbx
    3b82:	call   17550 <bdrv_read>
    3b87:	mov    r15d,eax
    3b8a:	test   eax,eax
    3b8c:	jne    424f <main+0xa8f>
    3b92:	cmp    BYTE PTR [rsp+0x56e],0x55
    3b9a:	jne    419e <main+0x9de>
    3ba0:	cmp    BYTE PTR [rsp+0x56f],0xaa
    3ba8:	jne    419e <main+0x9de>
    3bae:	lea    rax,[rsp+0xf0]
    3bb6:	mov    DWORD PTR [rsp+0x8],0x4
    3bbe:	add    rbx,0x1be
    3bc5:	lea    rbp,[rsp+0x90]
    3bcd:	mov    QWORD PTR [rsp+0x10],rax
    3bd2:	mov    rax,r12
    3bd5:	lea    r14,[rsp+0x570]
    3bdd:	mov    r12d,r15d
    3be0:	mov    r15,rax
    3be3:	mov    rsi,rbp
    3be6:	mov    rdi,rbx
    3be9:	call   43d0 <read_partition>
    3bee:	mov    edx,DWORD PTR [rbp+0x14]
    3bf1:	test   edx,edx
    3bf3:	je     3cc7 <main+0x507>
    3bf9:	movzx  eax,BYTE PTR [rbp+0x9]
    3bfd:	cmp    al,0xf
    3bff:	je     3c5f <main+0x49f>
    3c01:	cmp    al,0x5
    3c03:	je     3c5f <main+0x49f>
    3c05:	lea    eax,[r12+0x1]
    3c0a:	cmp    DWORD PTR [rsp+0x2c],eax
    3c0e:	je     41ae <main+0x9ee>
    3c14:	mov    r12d,eax
    3c17:	add    rbx,0x10
    3c1b:	add    rbp,0x18
    3c1f:	cmp    eax,0x4
    3c22:	jne    3be3 <main+0x423>
    3c24:	call   30b0 <__errno_location@plt>
    3c29:	mov    DWORD PTR [rax],0xfffffffe
    3c2f:	call   30b0 <__errno_location@plt>
    3c34:	mov    edx,DWORD PTR [rsp+0x2c]
    3c38:	lea    rsi,[rip+0x184f9]        # 1c138 <_IO_stdin_used+0x138>
    3c3f:	mov    edi,DWORD PTR [rax]
    3c41:	xor    eax,eax
    3c43:	call   31b0 <errx@plt>
    3c48:	mov    rdx,QWORD PTR [r12]
    3c4c:	lea    rsi,[rip+0x18a9d]        # 1c6f0 <_IO_stdin_used+0x6f0>
    3c53:	mov    edi,0x16
    3c58:	xor    eax,eax
    3c5a:	call   31b0 <errx@plt>
    3c5f:	mov    esi,DWORD PTR [rbp+0x10]
    3c62:	mov    rdi,QWORD PTR [rsp]
    3c66:	mov    ecx,0x1
    3c6b:	mov    rdx,r14
    3c6e:	call   17550 <bdrv_read>
    3c73:	mov    ecx,eax
    3c75:	test   eax,eax
    3c77:	jne    424f <main+0xa8f>
    3c7d:	mov    eax,DWORD PTR [rsp+0x8]
    3c81:	mov    r9,QWORD PTR [rsp+0x10]
    3c86:	lea    r10,[r14+0x1be]
    3c8d:	lea    r11d,[rax+0x1]
    3c91:	mov    rsi,r9
    3c94:	mov    rdi,r10
    3c97:	call   43d0 <read_partition>
    3c9c:	mov    edx,DWORD PTR [r9+0x14]
    3ca0:	test   edx,edx
    3ca2:	je     3cb2 <main+0x4f2>
    3ca4:	lea    eax,[r11+rcx*1]
    3ca8:	cmp    DWORD PTR [rsp+0x2c],eax
    3cac:	je     4176 <main+0x9b6>
    3cb2:	add    ecx,0x1
    3cb5:	add    r10,0x10
    3cb9:	add    r9,0x18
    3cbd:	cmp    ecx,0x4
    3cc0:	jne    3c91 <main+0x4d1>
    3cc2:	add    DWORD PTR [rsp+0x8],0x4
    3cc7:	lea    eax,[r12+0x1]
    3ccc:	jmp    3c14 <main+0x454>
    3cd1:	mov    rax,QWORD PTR [rsp]
    3cd5:	mov    rax,QWORD PTR [rax]
    3cd8:	shl    rax,0x9
    3cdc:	mov    QWORD PTR [rsp+0x10],rax
    3ce1:	cmp    QWORD PTR [rsp+0x30],0x0
    3ce7:	je     3ffb <main+0x83b>
    3ced:	cmp    DWORD PTR [rip+0x24818],0x0        # 2850c <verbose>
    3cf4:	je     3fed <main+0x82d>
    3cfa:	cmp    QWORD PTR [rsp+0x20],0x0
    3d00:	je     4032 <main+0x872>
    3d06:	call   3690 <fork@plt>
    3d0b:	mov    ebx,eax
    3d0d:	test   eax,eax
    3d0f:	js     3afd <main+0x33d>
    3d15:	jne    406c <main+0x8ac>
    3d1b:	mov    eax,DWORD PTR [rsp+0x28]
    3d1f:	lea    edi,[rax+0x1]
    3d22:	movsxd rdi,edi
    3d25:	shl    rdi,0x2
    3d29:	call   4cb0 <qemu_malloc>
    3d2e:	mov    rbx,rax
    3d31:	mov    rdi,QWORD PTR [rsp+0x20]
    3d36:	call   16330 <unix_socket_incoming>
    3d3b:	mov    DWORD PTR [rbx],eax
    3d3d:	mov    eax,DWORD PTR [rbx]
    3d3f:	mov    DWORD PTR [rsp+0x5c],eax
    3d43:	add    eax,0x1
    3d46:	je     3afd <main+0x33d>
    3d4c:	mov    esi,0x100000
    3d51:	mov    edi,0x200
    3d56:	call   46f0 <qemu_memalign>
    3d5b:	mov    QWORD PTR [rsp+0x18],rax
    3d60:	test   rax,rax
    3d63:	je     4262 <main+0xaa2>
    3d69:	lea    rax,[rsp+0xf0]
    3d71:	mov    r12d,0x1
    3d77:	mov    QWORD PTR [rsp+0x40],rax
    3d7c:	lea    rax,[rbx+0x4]
    3d80:	mov    QWORD PTR [rsp+0x50],rax
    3d85:	mov    eax,DWORD PTR [rsp+0x5c]
    3d89:	add    eax,0x1
    3d8c:	mov    DWORD PTR [rsp+0x48],eax
    3d90:	movzx  eax,BYTE PTR [rsp+0x38]
    3d95:	mov    DWORD PTR [rsp+0x2c],eax
    3d99:	lea    rax,[rsp+0x70]
    3d9e:	mov    QWORD PTR [rsp+0x30],rax
    3da3:	lea    rax,[rsp+0x90]
    3dab:	mov    QWORD PTR [rsp+0x38],rax
    3db0:	xor    eax,eax
    3db2:	mov    ecx,0x10
    3db7:	mov    rdi,QWORD PTR [rsp+0x40]
    3dbc:	cld    
    3dbd:	rep stos QWORD PTR es:[rdi],rax
    3dc0:	mov    rdi,QWORD PTR [rsp+0x50]
    3dc5:	lea    eax,[r12-0x1]
    3dca:	mov    r14,rbx
    3dcd:	mov    r13d,0x1
    3dd3:	lea    rbp,[rdi+rax*4]
    3dd7:	nop    WORD PTR [rax+rax*1+0x0]
    3de0:	movsxd rdi,DWORD PTR [r14]
    3de3:	add    r14,0x4
    3de7:	call   31e0 <__fdelt_chk@plt>
    3dec:	mov    edx,DWORD PTR [r14-0x4]
    3df0:	mov    esi,edx
    3df2:	sar    esi,0x1f
    3df5:	shr    esi,0x1a
    3df8:	lea    ecx,[rdx+rsi*1]
    3dfb:	mov    rdx,r13
    3dfe:	and    ecx,0x3f
    3e01:	sub    ecx,esi
    3e03:	shl    rdx,cl
    3e06:	or     QWORD PTR [rsp+rax*8+0xf0],rdx
    3e0e:	cmp    rbp,r14
    3e11:	jne    3de0 <main+0x620>
    3e13:	mov    rsi,QWORD PTR [rsp+0x40]
    3e18:	mov    edi,DWORD PTR [rsp+0x48]
    3e1c:	xor    r8d,r8d
    3e1f:	xor    ecx,ecx
    3e21:	xor    edx,edx
    3e23:	call   33f0 <select@plt>
    3e28:	mov    ebp,eax
    3e2a:	cmp    eax,0xffffffff
    3e2d:	je     3f3c <main+0x77c>
    3e33:	movsxd rdi,DWORD PTR [rbx]
    3e36:	call   31e0 <__fdelt_chk@plt>
    3e3b:	movsxd rdi,DWORD PTR [rbx]
    3e3e:	mov    esi,0x40
    3e43:	mov    r8,rax
    3e46:	mov    eax,edi
    3e48:	cdq    
    3e49:	idiv   esi
    3e4b:	mov    ecx,edx
    3e4d:	shl    r13,cl
    3e50:	and    r13,QWORD PTR [rsp+r8*8+0xf0]
    3e58:	cmp    r13,0x1
    3e5c:	adc    ebp,0xffffffff
    3e5f:	cmp    r12d,0x1
    3e63:	jle    3ef8 <main+0x738>
    3e69:	mov    r14d,0x1
    3e6f:	mov    r13d,0x1
    3e75:	test   ebp,ebp
    3e77:	jne    3e8d <main+0x6cd>
    3e79:	jmp    3ef8 <main+0x738>
    3e7b:	nop    DWORD PTR [rax+rax*1+0x0]
    3e80:	add    r14d,0x1
    3e84:	cmp    r12d,r14d
    3e87:	jle    3ef5 <main+0x735>
    3e89:	test   ebp,ebp
    3e8b:	je     3ef5 <main+0x735>
    3e8d:	movsxd rax,r14d
    3e90:	lea    r15,[rbx+rax*4]
    3e94:	movsxd rdi,DWORD PTR [r15]
    3e97:	call   31e0 <__fdelt_chk@plt>
    3e9c:	mov    esi,DWORD PTR [r15]
    3e9f:	mov    edx,esi
    3ea1:	sar    edx,0x1f
    3ea4:	shr    edx,0x1a
    3ea7:	lea    ecx,[rsi+rdx*1]
    3eaa:	and    ecx,0x3f
    3ead:	sub    ecx,edx
    3eaf:	mov    rdx,r13
    3eb2:	shl    rdx,cl
    3eb5:	test   QWORD PTR [rsp+rax*8+0xf0],rdx
    3ebd:	je     3e80 <main+0x6c0>
    3ebf:	push   0x100000
    3ec4:	push   QWORD PTR [rsp+0x20]
    3ec8:	mov    r9d,DWORD PTR [rsp+0x3c]
    3ecd:	mov    r8,QWORD PTR [rsp+0x40]
    3ed2:	mov    rcx,QWORD PTR [rsp+0x18]
    3ed7:	mov    rdx,QWORD PTR [rsp+0x20]
    3edc:	mov    rdi,QWORD PTR [rsp+0x10]
    3ee1:	call   16a70 <nbd_trip>
    3ee6:	pop    rdx
    3ee7:	pop    rcx
    3ee8:	test   eax,eax
    3eea:	jne    3f78 <main+0x7b8>
    3ef0:	sub    ebp,0x1
    3ef3:	jmp    3e80 <main+0x6c0>
    3ef5:	movsxd rdi,DWORD PTR [rbx]
    3ef8:	call   31e0 <__fdelt_chk@plt>
    3efd:	mov    edi,DWORD PTR [rbx]
    3eff:	mov    esi,0x40
    3f04:	mov    r8,rax
    3f07:	mov    eax,edi
    3f09:	cdq    
    3f0a:	idiv   esi
    3f0c:	mov    eax,0x1
    3f11:	mov    ecx,edx
    3f13:	shl    rax,cl
    3f16:	test   QWORD PTR [rsp+r8*8+0xf0],rax
    3f1e:	je     3f27 <main+0x767>
    3f20:	cmp    r12d,DWORD PTR [rsp+0x28]
    3f25:	jle    3f96 <main+0x7d6>
    3f27:	cmp    r12d,0x1
    3f2b:	jg     3db0 <main+0x5f0>
    3f31:	cmp    DWORD PTR [rsp+0x58],0x0
    3f36:	jne    3db0 <main+0x5f0>
    3f3c:	mov    rdi,QWORD PTR [rsp+0x18]
    3f41:	call   4ca0 <qemu_free>
    3f46:	mov    edi,DWORD PTR [rbx]
    3f48:	call   3260 <close@plt>
    3f4d:	mov    rdi,QWORD PTR [rsp]
    3f51:	call   174e0 <bdrv_close>
    3f56:	mov    rdi,rbx
    3f59:	call   4ca0 <qemu_free>
    3f5e:	cmp    QWORD PTR [rsp+0x20],0x0
    3f64:	je     3f70 <main+0x7b0>
    3f66:	mov    rdi,QWORD PTR [rsp+0x20]
    3f6b:	call   30c0 <unlink@plt>
    3f70:	xor    r13d,r13d
    3f73:	jmp    3afd <main+0x33d>
    3f78:	mov    edi,DWORD PTR [r15]
    3f7b:	sub    r12d,0x1
    3f7f:	sub    r14d,0x1
    3f83:	call   3260 <close@plt>
    3f88:	movsxd rax,r12d
    3f8b:	mov    eax,DWORD PTR [rbx+rax*4]
    3f8e:	mov    DWORD PTR [r15],eax
    3f91:	jmp    3ef0 <main+0x730>
    3f96:	mov    rsi,QWORD PTR [rsp+0x38]
    3f9b:	movsxd rax,r12d
    3f9e:	lea    rdx,[rsp+0x68]
    3fa3:	lea    rbp,[rbx+rax*4]
    3fa7:	call   35b0 <accept@plt>
    3fac:	mov    DWORD PTR [rbp+0x0],eax
    3faf:	cmp    eax,0xffffffff
    3fb2:	je     3f27 <main+0x767>
    3fb8:	mov    rsi,QWORD PTR [rsp+0x10]
    3fbd:	mov    edi,eax
    3fbf:	call   164d0 <nbd_negotiate>
    3fc4:	add    eax,0x1
    3fc7:	je     3f27 <main+0x767>
    3fcd:	mov    edi,DWORD PTR [rsp+0x5c]
    3fd1:	mov    eax,DWORD PTR [rbp+0x0]
    3fd4:	cmp    edi,eax
    3fd6:	cmovge eax,edi
    3fd9:	add    r12d,0x1
    3fdd:	mov    DWORD PTR [rsp+0x5c],eax
    3fe1:	add    eax,0x1
    3fe4:	mov    DWORD PTR [rsp+0x48],eax
    3fe8:	jmp    3db0 <main+0x5f0>
    3fed:	xor    esi,esi
    3fef:	xor    edi,edi
    3ff1:	call   3480 <daemon@plt>
    3ff6:	jmp    3cfa <main+0x53a>
    3ffb:	mov    eax,DWORD PTR [rsp+0x28]
    3fff:	lea    edi,[rax+0x1]
    4002:	movsxd rdi,edi
    4005:	shl    rdi,0x2
    4009:	call   4cb0 <qemu_malloc>
    400e:	cmp    QWORD PTR [rsp+0x20],0x0
    4014:	mov    rbx,rax
    4017:	jne    3d31 <main+0x571>
    401d:	mov    esi,DWORD PTR [rsp+0x40]
    4021:	mov    rdi,QWORD PTR [rsp+0x48]
    4026:	call   16210 <tcp_socket_incoming>
    402b:	mov    DWORD PTR [rbx],eax
    402d:	jmp    3d3d <main+0x57d>
    4032:	mov    rdi,QWORD PTR [rsp+0x30]
    4037:	lea    rbx,[rsp+0x570]
    403f:	call   3380 <basename@plt>
    4044:	lea    rcx,[rip+0x180bb]        # 1c106 <_IO_stdin_used+0x106>
    404b:	mov    edx,0x80
    4050:	mov    rdi,rbx
    4053:	mov    r8,rax
    4056:	mov    esi,0x1
    405b:	xor    eax,eax
    405d:	call   36e0 <__sprintf_chk@plt>
    4062:	mov    QWORD PTR [rsp+0x20],rbx
    4067:	jmp    3d06 <main+0x546>
    406c:	mov    rdi,QWORD PTR [rsp]
    4070:	call   174e0 <bdrv_close>
    4075:	mov    rbp,QWORD PTR [rsp+0x20]
    407a:	mov    rdi,rbp
    407d:	call   16410 <unix_socket_outgoing>
    4082:	cmp    eax,0xffffffff
    4085:	je     4149 <main+0x989>
    408b:	mov    rdi,QWORD PTR [rsp+0x30]
    4090:	mov    r14d,eax
    4093:	mov    esi,0x2
    4098:	xor    eax,eax
    409a:	call   3500 <open64@plt>
    409f:	mov    ebp,eax
    40a1:	cmp    eax,0xffffffff
    40a4:	je     4169 <main+0x9a9>
    40aa:	lea    rdx,[rsp+0x88]
    40b2:	lea    rsi,[rsp+0x80]
    40ba:	mov    edi,r14d
    40bd:	call   165a0 <nbd_receive_negotiate>
    40c2:	add    eax,0x1
    40c5:	je     4169 <main+0x9a9>
    40cb:	mov    rcx,QWORD PTR [rsp+0x88]
    40d3:	mov    rdx,QWORD PTR [rsp+0x80]
    40db:	mov    esi,r14d
    40de:	mov    edi,ebp
    40e0:	call   166c0 <nbd_init>
    40e5:	mov    r13d,eax
    40e8:	cmp    eax,0xffffffff
    40eb:	je     4169 <main+0x9a9>
    40ed:	movsxd rax,DWORD PTR [rip+0x243ec]        # 284e0 <optind@@GLIBC_2.2.5>
    40f4:	mov    rdx,QWORD PTR [rsp+0x30]
    40f9:	mov    edi,0x1
    40fe:	lea    rsi,[rip+0x1865b]        # 1c760 <_IO_stdin_used+0x760>
    4105:	mov    rcx,QWORD PTR [r12+rax*8]
    4109:	xor    eax,eax
    410b:	call   34d0 <__printf_chk@plt>
    4110:	call   3690 <fork@plt>
    4115:	test   eax,eax
    4117:	je     422d <main+0xa6d>
    411d:	mov    edi,ebp
    411f:	mov    esi,r14d
    4122:	call   16840 <nbd_client>
    4127:	mov    edi,ebp
    4129:	call   3260 <close@plt>
    412e:	mov    edi,ebx
    4130:	mov    esi,0xf
    4135:	call   33d0 <kill@plt>
    413a:	mov    rdi,QWORD PTR [rsp+0x20]
    413f:	call   30c0 <unlink@plt>
    4144:	jmp    3afd <main+0x33d>
    4149:	call   30b0 <__errno_location@plt>
    414e:	mov    eax,DWORD PTR [rax]
    4150:	cmp    eax,0x2
    4153:	je     415a <main+0x99a>
    4155:	cmp    eax,0x6f
    4158:	jne    4171 <main+0x9b1>
    415a:	mov    edi,0x1
    415f:	call   3670 <sleep@plt>
    4164:	jmp    407a <main+0x8ba>
    4169:	mov    r13d,0x1
    416f:	jmp    412e <main+0x96e>
    4171:	xor    r13d,r13d
    4174:	jmp    412e <main+0x96e>
    4176:	movsxd rax,ecx
    4179:	shl    rdx,0x9
    417d:	mov    r12,r15
    4180:	imul   rax,rax,0x18
    4184:	mov    QWORD PTR [rsp+0x10],rdx
    4189:	mov    eax,DWORD PTR [rsp+rax*1+0x100]
    4190:	shl    rax,0x9
    4194:	mov    QWORD PTR [rsp+0x8],rax
    4199:	jmp    3ce1 <main+0x521>
    419e:	call   30b0 <__errno_location@plt>
    41a3:	mov    DWORD PTR [rax],0xffffffea
    41a9:	jmp    3c2f <main+0x46f>
    41ae:	mov    rax,r15
    41b1:	mov    r15d,r12d
    41b4:	shl    rdx,0x9
    41b8:	mov    r12,rax
    41bb:	movsxd rax,r15d
    41be:	mov    QWORD PTR [rsp+0x10],rdx
    41c3:	imul   rax,rax,0x18
    41c7:	mov    eax,DWORD PTR [rsp+rax*1+0xa0]
    41ce:	shl    rax,0x9
    41d2:	mov    QWORD PTR [rsp+0x8],rax
    41d7:	jmp    3ce1 <main+0x521>
    41dc:	mov    rdx,QWORD PTR [rip+0x24305]        # 284e8 <optarg@@GLIBC_2.2.5>
    41e3:	lea    rsi,[rip+0x17e34]        # 1c01e <_IO_stdin_used+0x1e>
    41ea:	mov    edi,0x16
    41ef:	xor    eax,eax
    41f1:	call   31b0 <errx@plt>
    41f6:	call   30b0 <__errno_location@plt>
    41fb:	movsxd rdx,DWORD PTR [rip+0x242de]        # 284e0 <optind@@GLIBC_2.2.5>
    4202:	lea    rsi,[rip+0x17ec5]        # 1c0ce <_IO_stdin_used+0xce>
    4209:	mov    edi,DWORD PTR [rax]
    420b:	xor    eax,eax
    420d:	mov    rdx,QWORD PTR [r12+rdx*8]
    4211:	call   31b0 <errx@plt>
    4216:	mov    rdx,QWORD PTR [r12]
    421a:	lea    rsi,[rip+0x184f7]        # 1c718 <_IO_stdin_used+0x718>
    4221:	mov    edi,0x16
    4226:	xor    eax,eax
    4228:	call   31b0 <errx@plt>
    422d:	mov    rdi,QWORD PTR [rsp+0x30]
    4232:	mov    esi,0x2
    4237:	call   3500 <open64@plt>
    423c:	cmp    eax,0xffffffff
    423f:	je     4248 <main+0xa88>
    4241:	mov    edi,eax
    4243:	call   3260 <close@plt>
    4248:	xor    edi,edi
    424a:	call   35f0 <exit@plt>
    424f:	lea    rsi,[rip+0x17e9c]        # 1c0f2 <_IO_stdin_used+0xf2>
    4256:	mov    edi,0x16
    425b:	xor    eax,eax
    425d:	call   31b0 <errx@plt>
    4262:	lea    rsi,[rip+0x17eb3]        # 1c11c <_IO_stdin_used+0x11c>
    4269:	mov    edi,0xc
    426e:	call   31b0 <errx@plt>
    4273:	call   3190 <__stack_chk_fail@plt>
    4278:	mov    rdx,QWORD PTR [rip+0x24269]        # 284e8 <optarg@@GLIBC_2.2.5>
    427f:	lea    rsi,[rip+0x17daf]        # 1c035 <_IO_stdin_used+0x35>
    4286:	mov    edi,0x16
    428b:	xor    eax,eax
    428d:	call   31b0 <errx@plt>
    4292:	mov    rdx,QWORD PTR [rip+0x2424f]        # 284e8 <optarg@@GLIBC_2.2.5>
    4299:	lea    rsi,[rip+0x17d6c]        # 1c00c <_IO_stdin_used+0xc>
    42a0:	mov    edi,0x16
    42a5:	xor    eax,eax
    42a7:	call   31b0 <errx@plt>
    42ac:	mov    rdx,QWORD PTR [rip+0x24235]        # 284e8 <optarg@@GLIBC_2.2.5>
    42b3:	lea    rsi,[rip+0x17f0e]        # 1c1c8 <_IO_stdin_used+0x1c8>
    42ba:	mov    edi,0x16
    42bf:	xor    eax,eax
    42c1:	call   31b0 <errx@plt>
    42c6:	mov    rdx,QWORD PTR [rip+0x2421b]        # 284e8 <optarg@@GLIBC_2.2.5>
    42cd:	lea    rsi,[rip+0x17d92]        # 1c066 <_IO_stdin_used+0x66>
    42d4:	mov    edi,0x16
    42d9:	xor    eax,eax
    42db:	call   31b0 <errx@plt>

00000000000042e0 <_start>:
    42e0:	xor    ebp,ebp
    42e2:	mov    r9,rdx
    42e5:	pop    rsi
    42e6:	mov    rdx,rsp
    42e9:	and    rsp,0xfffffffffffffff0
    42ed:	push   rax
    42ee:	push   rsp
    42ef:	lea    r8,[rip+0x1785a]        # 1bb50 <__libc_csu_fini>
    42f6:	lea    rcx,[rip+0x177f3]        # 1baf0 <__libc_csu_init>
    42fd:	lea    rdi,[rip+0xfffffffffffff4bc]        # 37c0 <main>
    4304:	call   QWORD PTR [rip+0x22cc6]        # 26fd0 <__libc_start_main@GLIBC_2.2.5>
    430a:	hlt    
    430b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004310 <deregister_tm_clones>:
    4310:	lea    rdi,[rip+0x241c9]        # 284e0 <optind@@GLIBC_2.2.5>
    4317:	lea    rax,[rip+0x241c2]        # 284e0 <optind@@GLIBC_2.2.5>
    431e:	cmp    rax,rdi
    4321:	je     4338 <deregister_tm_clones+0x28>
    4323:	mov    rax,QWORD PTR [rip+0x22c9e]        # 26fc8 <_ITM_deregisterTMCloneTable>
    432a:	test   rax,rax
    432d:	je     4338 <deregister_tm_clones+0x28>
    432f:	jmp    rax
    4331:	nop    DWORD PTR [rax+0x0]
    4338:	ret    
    4339:	nop    DWORD PTR [rax+0x0]

0000000000004340 <register_tm_clones>:
    4340:	lea    rdi,[rip+0x24199]        # 284e0 <optind@@GLIBC_2.2.5>
    4347:	lea    rsi,[rip+0x24192]        # 284e0 <optind@@GLIBC_2.2.5>
    434e:	sub    rsi,rdi
    4351:	sar    rsi,0x3
    4355:	mov    rax,rsi
    4358:	shr    rax,0x3f
    435c:	add    rsi,rax
    435f:	sar    rsi,1
    4362:	je     4378 <register_tm_clones+0x38>
    4364:	mov    rax,QWORD PTR [rip+0x22c85]        # 26ff0 <_ITM_registerTMCloneTable>
    436b:	test   rax,rax
    436e:	je     4378 <register_tm_clones+0x38>
    4370:	jmp    rax
    4372:	nop    WORD PTR [rax+rax*1+0x0]
    4378:	ret    
    4379:	nop    DWORD PTR [rax+0x0]

0000000000004380 <__do_global_dtors_aux>:
    4380:	cmp    BYTE PTR [rip+0x24181],0x0        # 28508 <completed.7930>
    4387:	jne    43b8 <__do_global_dtors_aux+0x38>
    4389:	push   rbp
    438a:	cmp    QWORD PTR [rip+0x22c66],0x0        # 26ff8 <__cxa_finalize@GLIBC_2.2.5>
    4392:	mov    rbp,rsp
    4395:	je     43a3 <__do_global_dtors_aux+0x23>
    4397:	mov    rdi,QWORD PTR [rip+0x22c6a]        # 27008 <__dso_handle>
    439e:	call   3700 <__cxa_finalize@plt>
    43a3:	call   4310 <deregister_tm_clones>
    43a8:	mov    BYTE PTR [rip+0x24159],0x1        # 28508 <completed.7930>
    43af:	pop    rbp
    43b0:	ret    
    43b1:	nop    DWORD PTR [rax+0x0]
    43b8:	ret    
    43b9:	nop    DWORD PTR [rax+0x0]

00000000000043c0 <frame_dummy>:
    43c0:	jmp    4340 <register_tm_clones>
    43c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
    43cf:	nop

00000000000043d0 <read_partition>:
    43d0:	movzx  eax,BYTE PTR [rdi]
    43d3:	mov    BYTE PTR [rsi],al
    43d5:	movzx  eax,BYTE PTR [rdi+0x1]
    43d9:	mov    BYTE PTR [rsi+0x1],al
    43dc:	movzx  eax,BYTE PTR [rdi+0x2]
    43e0:	movzx  edx,BYTE PTR [rdi+0x3]
    43e4:	shl    eax,0x2
    43e7:	and    eax,0x300
    43ec:	or     eax,edx
    43ee:	mov    DWORD PTR [rsi+0x4],eax
    43f1:	movzx  eax,BYTE PTR [rdi+0x2]
    43f5:	and    eax,0x3f
    43f8:	mov    BYTE PTR [rsi+0x8],al
    43fb:	movzx  eax,BYTE PTR [rdi+0x4]
    43ff:	mov    BYTE PTR [rsi+0x9],al
    4402:	movzx  eax,BYTE PTR [rdi+0x5]
    4406:	mov    BYTE PTR [rsi+0xa],al
    4409:	movzx  eax,BYTE PTR [rdi+0x7]
    440d:	mov    BYTE PTR [rsi+0xb],al
    4410:	movzx  eax,BYTE PTR [rdi+0x6]
    4414:	and    eax,0x3f
    4417:	mov    BYTE PTR [rsi+0xc],al
    441a:	mov    eax,DWORD PTR [rdi+0x8]
    441d:	mov    DWORD PTR [rsi+0x10],eax
    4420:	mov    eax,DWORD PTR [rdi+0xc]
    4423:	mov    DWORD PTR [rsi+0x14],eax
    4426:	ret    
    4427:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004430 <qemu_service_io>:
    4430:	ret    
    4431:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    443c:	nop    DWORD PTR [rax+0x0]

0000000000004440 <term_printf>:
    4440:	ret    
    4441:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    444c:	nop    DWORD PTR [rax+0x0]

0000000000004450 <term_print_filename>:
    4450:	ret    
    4451:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    445c:	nop    DWORD PTR [rax+0x0]

0000000000004460 <qemu_bh_new>:
    4460:	push   rbp
    4461:	mov    rbp,rdi
    4464:	mov    edi,0x10
    4469:	push   rbx
    446a:	mov    rbx,rsi
    446d:	sub    rsp,0x8
    4471:	call   4cb0 <qemu_malloc>
    4476:	mov    QWORD PTR [rax],rbp
    4479:	mov    QWORD PTR [rax+0x8],rbx
    447d:	add    rsp,0x8
    4481:	pop    rbx
    4482:	pop    rbp
    4483:	ret    
    4484:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    448f:	nop

0000000000004490 <qemu_bh_poll>:
    4490:	xor    eax,eax
    4492:	ret    
    4493:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    449e:	xchg   ax,ax

00000000000044a0 <qemu_bh_schedule>:
    44a0:	mov    rax,rdi
    44a3:	mov    rdi,QWORD PTR [rdi+0x8]
    44a7:	jmp    QWORD PTR [rax]
    44a9:	nop    DWORD PTR [rax+0x0]

00000000000044b0 <qemu_bh_cancel>:
    44b0:	ret    
    44b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    44bc:	nop    DWORD PTR [rax+0x0]

00000000000044c0 <qemu_bh_delete>:
    44c0:	jmp    4ca0 <qemu_free>
    44c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000044d0 <qemu_set_fd_handler2>:
    44d0:	xor    eax,eax
    44d2:	ret    
    44d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    44de:	xchg   ax,ax

00000000000044e0 <qemu_get_clock>:
    44e0:	sub    rsp,0x28
    44e4:	xor    esi,esi
    44e6:	mov    rax,QWORD PTR fs:0x28
    44ef:	mov    QWORD PTR [rsp+0x18],rax
    44f4:	xor    eax,eax
    44f6:	mov    rdi,rsp
    44f9:	call   3210 <gettimeofday@plt>
    44fe:	imul   rcx,QWORD PTR [rsp],0x3b9aca00
    4506:	movabs rdx,0x431bde82d7b634db
    4510:	imul   rax,QWORD PTR [rsp+0x8],0x3e8
    4519:	add    rcx,rax
    451c:	mov    rax,rcx
    451f:	sar    rcx,0x3f
    4523:	imul   rdx
    4526:	sar    rdx,0x12
    452a:	mov    rax,rdx
    452d:	sub    rax,rcx
    4530:	mov    rsi,QWORD PTR [rsp+0x18]
    4535:	xor    rsi,QWORD PTR fs:0x28
    453e:	jne    4545 <qemu_get_clock+0x65>
    4540:	add    rsp,0x28
    4544:	ret    
    4545:	call   3190 <__stack_chk_fail@plt>
    454a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004550 <qemu_read>:
    4550:	push   r13
    4552:	mov    r13d,edi
    4555:	push   r12
    4557:	mov    r12,rsi
    455a:	push   rbp
    455b:	xor    ebp,ebp
    455d:	push   rbx
    455e:	mov    rbx,rdx
    4561:	sub    rsp,0x8
    4565:	test   rdx,rdx
    4568:	je     458f <qemu_read+0x3f>
    456a:	mov    rdx,rbx
    456d:	mov    rsi,r12
    4570:	mov    edi,r13d
    4573:	call   32c0 <read@plt>
    4578:	test   rax,rax
    457b:	je     45d0 <qemu_read+0x80>
    457d:	js     45a0 <qemu_read+0x50>
    457f:	cmp    rax,rbx
    4582:	ja     45dd <qemu_read+0x8d>
    4584:	add    rbp,rax
    4587:	add    r12,rax
    458a:	sub    rbx,rax
    458d:	jne    456a <qemu_read+0x1a>
    458f:	add    rsp,0x8
    4593:	mov    rax,rbp
    4596:	pop    rbx
    4597:	pop    rbp
    4598:	pop    r12
    459a:	pop    r13
    459c:	ret    
    459d:	nop    DWORD PTR [rax]
    45a0:	call   30b0 <__errno_location@plt>
    45a5:	cmp    DWORD PTR [rax],0x4
    45a8:	je     456a <qemu_read+0x1a>
    45aa:	test   rbp,rbp
    45ad:	mov    rax,0xffffffffffffffff
    45b4:	cmove  rbp,rax
    45b8:	add    rsp,0x8
    45bc:	pop    rbx
    45bd:	mov    rax,rbp
    45c0:	pop    rbp
    45c1:	pop    r12
    45c3:	pop    r13
    45c5:	ret    
    45c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    45d0:	call   30b0 <__errno_location@plt>
    45d5:	mov    DWORD PTR [rax],0x0
    45db:	jmp    458f <qemu_read+0x3f>
    45dd:	lea    rcx,[rip+0x182b4]        # 1c898 <__PRETTY_FUNCTION__.13430>
    45e4:	mov    edx,0x4b
    45e9:	lea    rsi,[rip+0x1827c]        # 1c86c <_IO_stdin_used+0x86c>
    45f0:	lea    rdi,[rip+0x1827d]        # 1c874 <_IO_stdin_used+0x874>
    45f7:	call   3220 <__assert_fail@plt>
    45fc:	nop    DWORD PTR [rax+0x0]

0000000000004600 <qemu_read_ok>:
    4600:	push   rbx
    4601:	mov    rbx,rdx
    4604:	call   4550 <qemu_read>
    4609:	cmp    rbx,rax
    460c:	pop    rbx
    460d:	sete   al
    4610:	movzx  eax,al
    4613:	lea    eax,[rax+rax*1-0x1]
    4617:	ret    
    4618:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004620 <qemu_write>:
    4620:	push   r13
    4622:	mov    r13d,edi
    4625:	push   r12
    4627:	mov    r12,rsi
    462a:	push   rbp
    462b:	xor    ebp,ebp
    462d:	push   rbx
    462e:	mov    rbx,rdx
    4631:	sub    rsp,0x8
    4635:	test   rdx,rdx
    4638:	je     465f <qemu_write+0x3f>
    463a:	mov    rdx,rbx
    463d:	mov    rsi,r12
    4640:	mov    edi,r13d
    4643:	call   3130 <write@plt>
    4648:	test   rax,rax
    464b:	je     46a0 <qemu_write+0x80>
    464d:	js     4670 <qemu_write+0x50>
    464f:	cmp    rax,rbx
    4652:	ja     46ad <qemu_write+0x8d>
    4654:	add    rbp,rax
    4657:	add    r12,rax
    465a:	sub    rbx,rax
    465d:	jne    463a <qemu_write+0x1a>
    465f:	add    rsp,0x8
    4663:	mov    rax,rbp
    4666:	pop    rbx
    4667:	pop    rbp
    4668:	pop    r12
    466a:	pop    r13
    466c:	ret    
    466d:	nop    DWORD PTR [rax]
    4670:	call   30b0 <__errno_location@plt>
    4675:	cmp    DWORD PTR [rax],0x4
    4678:	je     463a <qemu_write+0x1a>
    467a:	test   rbp,rbp
    467d:	mov    rax,0xffffffffffffffff
    4684:	cmove  rbp,rax
    4688:	add    rsp,0x8
    468c:	pop    rbx
    468d:	mov    rax,rbp
    4690:	pop    rbp
    4691:	pop    r12
    4693:	pop    r13
    4695:	ret    
    4696:	nop    WORD PTR cs:[rax+rax*1+0x0]
    46a0:	call   30b0 <__errno_location@plt>
    46a5:	mov    DWORD PTR [rax],0x0
    46ab:	jmp    465f <qemu_write+0x3f>
    46ad:	lea    rcx,[rip+0x181d4]        # 1c888 <__PRETTY_FUNCTION__.13447>
    46b4:	mov    edx,0x4c
    46b9:	lea    rsi,[rip+0x181ac]        # 1c86c <_IO_stdin_used+0x86c>
    46c0:	lea    rdi,[rip+0x181ad]        # 1c874 <_IO_stdin_used+0x874>
    46c7:	call   3220 <__assert_fail@plt>
    46cc:	nop    DWORD PTR [rax+0x0]

00000000000046d0 <qemu_write_ok>:
    46d0:	push   rbx
    46d1:	mov    rbx,rdx
    46d4:	call   4620 <qemu_write>
    46d9:	cmp    rbx,rax
    46dc:	pop    rbx
    46dd:	sete   al
    46e0:	movzx  eax,al
    46e3:	lea    eax,[rax+rax*1-0x1]
    46e7:	ret    
    46e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000046f0 <qemu_memalign>:
    46f0:	sub    rsp,0x18
    46f4:	mov    rax,rdi
    46f7:	mov    rdx,rsi
    46fa:	mov    rcx,QWORD PTR fs:0x28
    4703:	mov    QWORD PTR [rsp+0x8],rcx
    4708:	xor    ecx,ecx
    470a:	mov    rdi,rsp
    470d:	mov    rsi,rax
    4710:	call   3640 <posix_memalign@plt>
    4715:	mov    rdx,QWORD PTR [rsp]
    4719:	test   eax,eax
    471b:	je     471f <qemu_memalign+0x2f>
    471d:	xor    edx,edx
    471f:	mov    rcx,QWORD PTR [rsp+0x8]
    4724:	xor    rcx,QWORD PTR fs:0x28
    472d:	mov    rax,rdx
    4730:	jne    4737 <qemu_memalign+0x47>
    4732:	add    rsp,0x18
    4736:	ret    
    4737:	call   3190 <__stack_chk_fail@plt>
    473c:	nop    DWORD PTR [rax+0x0]

0000000000004740 <qemu_vmalloc>:
    4740:	push   rbx
    4741:	mov    rbx,rdi
    4744:	sub    rsp,0x10
    4748:	mov    rax,QWORD PTR fs:0x28
    4751:	mov    QWORD PTR [rsp+0x8],rax
    4756:	xor    eax,eax
    4758:	call   35e0 <getpagesize@plt>
    475d:	mov    rdx,rbx
    4760:	mov    rdi,rsp
    4763:	movsxd rsi,eax
    4766:	call   3640 <posix_memalign@plt>
    476b:	mov    rdx,QWORD PTR [rsp]
    476f:	test   eax,eax
    4771:	je     4775 <qemu_vmalloc+0x35>
    4773:	xor    edx,edx
    4775:	mov    rcx,QWORD PTR [rsp+0x8]
    477a:	xor    rcx,QWORD PTR fs:0x28
    4783:	mov    rax,rdx
    4786:	jne    478e <qemu_vmalloc+0x4e>
    4788:	add    rsp,0x10
    478c:	pop    rbx
    478d:	ret    
    478e:	call   3190 <__stack_chk_fail@plt>
    4793:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    479e:	xchg   ax,ax

00000000000047a0 <qemu_vfree>:
    47a0:	jmp    3070 <free@plt>
    47a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000047b0 <qemu_create_pidfile>:
    47b0:	push   r12
    47b2:	mov    edx,0x180
    47b7:	mov    esi,0x42
    47bc:	push   rbp
    47bd:	push   rbx
    47be:	sub    rsp,0x90
    47c5:	mov    rax,QWORD PTR fs:0x28
    47ce:	mov    QWORD PTR [rsp+0x88],rax
    47d6:	xor    eax,eax
    47d8:	call   3500 <open64@plt>
    47dd:	cmp    eax,0xffffffff
    47e0:	je     4860 <qemu_create_pidfile+0xb0>
    47e2:	xor    edx,edx
    47e4:	mov    esi,0x2
    47e9:	mov    edi,eax
    47eb:	mov    ebp,eax
    47ed:	call   3550 <lockf64@plt>
    47f2:	cmp    eax,0xffffffff
    47f5:	je     4860 <qemu_create_pidfile+0xb0>
    47f7:	call   3140 <getpid@plt>
    47fc:	mov    r12,rsp
    47ff:	mov    ecx,0x80
    4804:	lea    r8,[rip+0x18076]        # 1c881 <_IO_stdin_used+0x881>
    480b:	movsxd r9,eax
    480e:	mov    edx,0x1
    4813:	mov    esi,0x80
    4818:	mov    rdi,r12
    481b:	xor    eax,eax
    481d:	call   3060 <__snprintf_chk@plt>
    4822:	mov    rsi,r12
    4825:	mov    edi,ebp
    4827:	movsxd rbx,eax
    482a:	mov    rdx,rbx
    482d:	call   3130 <write@plt>
    4832:	cmp    rbx,rax
    4835:	setne  al
    4838:	movzx  eax,al
    483b:	neg    eax
    483d:	mov    rcx,QWORD PTR [rsp+0x88]
    4845:	xor    rcx,QWORD PTR fs:0x28
    484e:	jne    4867 <qemu_create_pidfile+0xb7>
    4850:	add    rsp,0x90
    4857:	pop    rbx
    4858:	pop    rbp
    4859:	pop    r12
    485b:	ret    
    485c:	nop    DWORD PTR [rax+0x0]
    4860:	mov    eax,0xffffffff
    4865:	jmp    483d <qemu_create_pidfile+0x8d>
    4867:	call   3190 <__stack_chk_fail@plt>
    486c:	nop    DWORD PTR [rax+0x0]

0000000000004870 <socket_set_nonblock>:
    4870:	push   rbx
    4871:	mov    esi,0x3
    4876:	xor    eax,eax
    4878:	mov    ebx,edi
    487a:	call   3520 <fcntl64@plt>
    487f:	mov    edi,ebx
    4881:	mov    esi,0x4
    4886:	pop    rbx
    4887:	or     ah,0x8
    488a:	mov    edx,eax
    488c:	xor    eax,eax
    488e:	jmp    3520 <fcntl64@plt>
    4893:	nop    WORD PTR cs:[rax+rax*1+0x0]
    489d:	nop    DWORD PTR [rax]

00000000000048a0 <pstrcpy>:
    48a0:	test   rsi,rsi
    48a3:	je     48db <pstrcpy+0x3b>
    48a5:	movzx  eax,BYTE PTR [rdx]
    48a8:	lea    rcx,[rdx+0x1]
    48ac:	test   al,al
    48ae:	je     48d8 <pstrcpy+0x38>
    48b0:	lea    rdx,[rdi+rsi*1-0x1]
    48b5:	cmp    rdi,rdx
    48b8:	jb     48c5 <pstrcpy+0x25>
    48ba:	jmp    48d8 <pstrcpy+0x38>
    48bc:	nop    DWORD PTR [rax+0x0]
    48c0:	cmp    rdi,rdx
    48c3:	je     48d8 <pstrcpy+0x38>
    48c5:	add    rdi,0x1
    48c9:	add    rcx,0x1
    48cd:	mov    BYTE PTR [rdi-0x1],al
    48d0:	movzx  eax,BYTE PTR [rcx-0x1]
    48d4:	test   al,al
    48d6:	jne    48c0 <pstrcpy+0x20>
    48d8:	mov    BYTE PTR [rdi],0x0
    48db:	ret    
    48dc:	nop    DWORD PTR [rax+0x0]

00000000000048e0 <pstrcat>:
    48e0:	push   r12
    48e2:	mov    r12,rdx
    48e5:	push   rbp
    48e6:	mov    rbp,rdi
    48e9:	push   rbx
    48ea:	mov    rbx,rsi
    48ed:	call   3180 <strlen@plt>
    48f2:	cdqe   
    48f4:	cmp    rax,rbx
    48f7:	jb     4908 <pstrcat+0x28>
    48f9:	mov    rax,rbp
    48fc:	pop    rbx
    48fd:	pop    rbp
    48fe:	pop    r12
    4900:	ret    
    4901:	nop    DWORD PTR [rax+0x0]
    4908:	movzx  edx,BYTE PTR [r12]
    490d:	sub    rbx,0x1
    4911:	add    rax,rbp
    4914:	lea    rcx,[r12+0x1]
    4919:	test   dl,dl
    491b:	je     4948 <pstrcat+0x68>
    491d:	add    rbx,rbp
    4920:	cmp    rax,rbx
    4923:	jb     4935 <pstrcat+0x55>
    4925:	jmp    4948 <pstrcat+0x68>
    4927:	nop    WORD PTR [rax+rax*1+0x0]
    4930:	cmp    rax,rbx
    4933:	je     4948 <pstrcat+0x68>
    4935:	add    rax,0x1
    4939:	add    rcx,0x1
    493d:	mov    BYTE PTR [rax-0x1],dl
    4940:	movzx  edx,BYTE PTR [rcx-0x1]
    4944:	test   dl,dl
    4946:	jne    4930 <pstrcat+0x50>
    4948:	mov    BYTE PTR [rax],0x0
    494b:	mov    rax,rbp
    494e:	pop    rbx
    494f:	pop    rbp
    4950:	pop    r12
    4952:	ret    
    4953:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    495e:	xchg   ax,ax

0000000000004960 <strstart>:
    4960:	jmp    4974 <strstart+0x14>
    4962:	nop    WORD PTR [rax+rax*1+0x0]
    4968:	cmp    BYTE PTR [rdi],al
    496a:	jne    4990 <strstart+0x30>
    496c:	add    rdi,0x1
    4970:	add    rsi,0x1
    4974:	movzx  eax,BYTE PTR [rsi]
    4977:	test   al,al
    4979:	jne    4968 <strstart+0x8>
    497b:	mov    eax,0x1
    4980:	test   rdx,rdx
    4983:	je     4992 <strstart+0x32>
    4985:	mov    QWORD PTR [rdx],rdi
    4988:	ret    
    4989:	nop    DWORD PTR [rax+0x0]
    4990:	xor    eax,eax
    4992:	ret    
    4993:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    499e:	xchg   ax,ax

00000000000049a0 <stristart>:
    49a0:	push   r13
    49a2:	mov    r13,rdx
    49a5:	push   r12
    49a7:	mov    r12,rdi
    49aa:	push   rbp
    49ab:	push   rbx
    49ac:	sub    rsp,0x8
    49b0:	movzx  ebx,BYTE PTR [rsi]
    49b3:	test   bl,bl
    49b5:	je     49f8 <stristart+0x58>
    49b7:	mov    rbp,rsi
    49ba:	call   3030 <__ctype_toupper_loc@plt>
    49bf:	mov    rax,QWORD PTR [rax]
    49c2:	jmp    49d8 <stristart+0x38>
    49c4:	nop    DWORD PTR [rax+0x0]
    49c8:	add    rbp,0x1
    49cc:	movzx  ebx,BYTE PTR [rbp+0x0]
    49d0:	add    r12,0x1
    49d4:	test   bl,bl
    49d6:	je     49f8 <stristart+0x58>
    49d8:	movzx  ecx,BYTE PTR [r12]
    49dd:	mov    edx,DWORD PTR [rax+rbx*4]
    49e0:	cmp    DWORD PTR [rax+rcx*4],edx
    49e3:	je     49c8 <stristart+0x28>
    49e5:	xor    eax,eax
    49e7:	add    rsp,0x8
    49eb:	pop    rbx
    49ec:	pop    rbp
    49ed:	pop    r12
    49ef:	pop    r13
    49f1:	ret    
    49f2:	nop    WORD PTR [rax+rax*1+0x0]
    49f8:	mov    eax,0x1
    49fd:	test   r13,r13
    4a00:	je     49e7 <stristart+0x47>
    4a02:	mov    QWORD PTR [r13+0x0],r12
    4a06:	add    rsp,0x8
    4a0a:	pop    rbx
    4a0b:	pop    rbp
    4a0c:	pop    r12
    4a0e:	pop    r13
    4a10:	ret    
    4a11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4a1c:	nop    DWORD PTR [rax+0x0]

0000000000004a20 <mktimegm>:
    4a20:	mov    edx,DWORD PTR [rdi+0x10]
    4a23:	mov    esi,DWORD PTR [rdi+0x14]
    4a26:	mov    ecx,DWORD PTR [rdi+0xc]
    4a29:	lea    eax,[rdx+0x1]
    4a2c:	cmp    eax,0x2
    4a2f:	jle    4ac0 <mktimegm+0xa0>
    4a35:	add    esi,0x76c
    4a3b:	imul   eax,eax,0x99
    4a41:	mov    edx,0x66666667
    4a46:	lea    r8d,[rax-0x1c9]
    4a4d:	mov    eax,r8d
    4a50:	sar    r8d,0x1f
    4a54:	imul   edx
    4a56:	mov    eax,esi
    4a58:	sar    edx,1
    4a5a:	sub    edx,r8d
    4a5d:	add    edx,ecx
    4a5f:	imul   ecx,esi,0x16d
    4a65:	add    edx,ecx
    4a67:	test   esi,esi
    4a69:	lea    ecx,[rsi+0x3]
    4a6c:	cmovns ecx,esi
    4a6f:	sar    esi,0x1f
    4a72:	mov    r9d,esi
    4a75:	sar    ecx,0x2
    4a78:	add    ecx,edx
    4a7a:	mov    edx,0x51eb851f
    4a7f:	imul   edx
    4a81:	mov    eax,edx
    4a83:	sar    edx,0x7
    4a86:	sar    eax,0x5
    4a89:	sub    edx,esi
    4a8b:	sub    r9d,eax
    4a8e:	add    ecx,r9d
    4a91:	lea    eax,[rcx+rdx*1-0xafa6d]
    4a98:	imul   eax,eax,0x15180
    4a9e:	imul   edx,DWORD PTR [rdi+0x8],0xe10
    4aa5:	movsxd rcx,eax
    4aa8:	imul   eax,DWORD PTR [rdi+0x4],0x3c
    4aac:	add    edx,eax
    4aae:	mov    eax,DWORD PTR [rdi]
    4ab0:	add    eax,edx
    4ab2:	cdqe   
    4ab4:	add    rax,rcx
    4ab7:	ret    
    4ab8:	nop    DWORD PTR [rax+rax*1+0x0]
    4ac0:	lea    eax,[rdx+0xd]
    4ac3:	add    esi,0x76b
    4ac9:	jmp    4a3b <mktimegm+0x1b>
    4ace:	xchg   ax,ax

0000000000004ad0 <qemu_fls>:
    4ad0:	xor    eax,eax
    4ad2:	test   edi,edi
    4ad4:	je     4ae3 <qemu_fls+0x13>
    4ad6:	bsr    edi,edi
    4ad9:	mov    eax,0x20
    4ade:	xor    edi,0x1f
    4ae1:	sub    eax,edi
    4ae3:	ret    
    4ae4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4aef:	nop

0000000000004af0 <qemu_iovec_init>:
    4af0:	push   rbp
    4af1:	push   rbx
    4af2:	mov    rbx,rdi
    4af5:	movsxd rdi,esi
    4af8:	mov    rbp,rdi
    4afb:	shl    rdi,0x4
    4aff:	sub    rsp,0x8
    4b03:	call   4cb0 <qemu_malloc>
    4b08:	mov    DWORD PTR [rbx+0xc],ebp
    4b0b:	mov    QWORD PTR [rbx],rax
    4b0e:	mov    DWORD PTR [rbx+0x8],0x0
    4b15:	mov    QWORD PTR [rbx+0x10],0x0
    4b1d:	add    rsp,0x8
    4b21:	pop    rbx
    4b22:	pop    rbp
    4b23:	ret    
    4b24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4b2f:	nop

0000000000004b30 <qemu_iovec_add>:
    4b30:	push   rbp
    4b31:	mov    rbp,rsi
    4b34:	push   rbx
    4b35:	mov    rbx,rdi
    4b38:	sub    rsp,0x18
    4b3c:	movsxd rcx,DWORD PTR [rdi+0x8]
    4b40:	mov    rax,QWORD PTR [rdi]
    4b43:	cmp    ecx,DWORD PTR [rdi+0xc]
    4b46:	je     4b70 <qemu_iovec_add+0x40>
    4b48:	shl    rcx,0x4
    4b4c:	mov    QWORD PTR [rax+rcx*1],rbp
    4b50:	movsxd rax,DWORD PTR [rbx+0x8]
    4b54:	shl    rax,0x4
    4b58:	add    rax,QWORD PTR [rbx]
    4b5b:	mov    QWORD PTR [rax+0x8],rdx
    4b5f:	add    QWORD PTR [rbx+0x10],rdx
    4b63:	add    DWORD PTR [rbx+0x8],0x1
    4b67:	add    rsp,0x18
    4b6b:	pop    rbx
    4b6c:	pop    rbp
    4b6d:	ret    
    4b6e:	xchg   ax,ax
    4b70:	lea    esi,[rcx+rcx*1+0x1]
    4b74:	mov    QWORD PTR [rsp+0x8],rdx
    4b79:	mov    DWORD PTR [rdi+0xc],esi
    4b7c:	movsxd rsi,esi
    4b7f:	mov    rdi,rax
    4b82:	shl    rsi,0x4
    4b86:	call   4cd0 <qemu_realloc>
    4b8b:	movsxd rcx,DWORD PTR [rbx+0x8]
    4b8f:	mov    rdx,QWORD PTR [rsp+0x8]
    4b94:	mov    QWORD PTR [rbx],rax
    4b97:	jmp    4b48 <qemu_iovec_add+0x18>
    4b99:	nop    DWORD PTR [rax+0x0]

0000000000004ba0 <qemu_iovec_destroy>:
    4ba0:	mov    rdi,QWORD PTR [rdi]
    4ba3:	jmp    4ca0 <qemu_free>
    4ba8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004bb0 <qemu_iovec_reset>:
    4bb0:	mov    DWORD PTR [rdi+0x8],0x0
    4bb7:	mov    QWORD PTR [rdi+0x10],0x0
    4bbf:	ret    

0000000000004bc0 <qemu_iovec_to_buffer>:
    4bc0:	mov    eax,DWORD PTR [rdi+0x8]
    4bc3:	test   eax,eax
    4bc5:	jle    4c18 <qemu_iovec_to_buffer+0x58>
    4bc7:	push   r12
    4bc9:	mov    rcx,rsi
    4bcc:	mov    r12,rdi
    4bcf:	push   rbp
    4bd0:	push   rbx
    4bd1:	mov    rax,QWORD PTR [rdi]
    4bd4:	xor    ebx,ebx
    4bd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4be0:	mov    rbp,rbx
    4be3:	mov    rdi,rcx
    4be6:	add    rbx,0x1
    4bea:	shl    rbp,0x4
    4bee:	add    rax,rbp
    4bf1:	mov    rsi,QWORD PTR [rax]
    4bf4:	mov    rdx,QWORD PTR [rax+0x8]
    4bf8:	call   33b0 <memcpy@plt>
    4bfd:	mov    rcx,rax
    4c00:	mov    rax,QWORD PTR [r12]
    4c04:	add    rcx,QWORD PTR [rax+rbp*1+0x8]
    4c09:	cmp    DWORD PTR [r12+0x8],ebx
    4c0e:	jg     4be0 <qemu_iovec_to_buffer+0x20>
    4c10:	pop    rbx
    4c11:	pop    rbp
    4c12:	pop    r12
    4c14:	ret    
    4c15:	nop    DWORD PTR [rax]
    4c18:	ret    
    4c19:	nop    DWORD PTR [rax+0x0]

0000000000004c20 <qemu_iovec_from_buffer>:
    4c20:	mov    eax,DWORD PTR [rdi+0x8]
    4c23:	test   eax,eax
    4c25:	jle    4c8a <qemu_iovec_from_buffer+0x6a>
    4c27:	push   r14
    4c29:	push   r13
    4c2b:	push   r12
    4c2d:	push   rbp
    4c2e:	push   rbx
    4c2f:	mov    rbx,rdx
    4c32:	test   rdx,rdx
    4c35:	je     4c81 <qemu_iovec_from_buffer+0x61>
    4c37:	mov    r14,rdi
    4c3a:	mov    r13,rsi
    4c3d:	xor    r12d,r12d
    4c40:	mov    rax,r12
    4c43:	mov    rbp,rbx
    4c46:	mov    rsi,r13
    4c49:	shl    rax,0x4
    4c4d:	add    rax,QWORD PTR [r14]
    4c50:	cmp    QWORD PTR [rax+0x8],rbx
    4c54:	cmovbe rbp,QWORD PTR [rax+0x8]
    4c59:	mov    rdi,QWORD PTR [rax]
    4c5c:	mov    rdx,rbp
    4c5f:	add    r13,rbp
    4c62:	call   33b0 <memcpy@plt>
    4c67:	lea    eax,[r12+0x1]
    4c6c:	cmp    DWORD PTR [r14+0x8],eax
    4c70:	setg   dl
    4c73:	sub    rbx,rbp
    4c76:	setne  al
    4c79:	add    r12,0x1
    4c7d:	test   dl,al
    4c7f:	jne    4c40 <qemu_iovec_from_buffer+0x20>
    4c81:	pop    rbx
    4c82:	pop    rbp
    4c83:	pop    r12
    4c85:	pop    r13
    4c87:	pop    r14
    4c89:	ret    
    4c8a:	ret    
    4c8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004c90 <get_mmap_addr>:
    4c90:	xor    eax,eax
    4c92:	ret    
    4c93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4c9e:	xchg   ax,ax

0000000000004ca0 <qemu_free>:
    4ca0:	jmp    3070 <free@plt>
    4ca5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000004cb0 <qemu_malloc>:
    4cb0:	sub    rsp,0x8
    4cb4:	call   3450 <malloc@plt>
    4cb9:	test   rax,rax
    4cbc:	je     3710 <qemu_malloc.cold.0>
    4cc2:	add    rsp,0x8
    4cc6:	ret    
    4cc7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004cd0 <qemu_realloc>:
    4cd0:	test   rsi,rsi
    4cd3:	je     4cf0 <qemu_realloc+0x20>
    4cd5:	sub    rsp,0x8
    4cd9:	call   34a0 <realloc@plt>
    4cde:	test   rax,rax
    4ce1:	je     3715 <qemu_realloc.cold.1>
    4ce7:	add    rsp,0x8
    4ceb:	ret    
    4cec:	nop    DWORD PTR [rax+0x0]
    4cf0:	xor    esi,esi
    4cf2:	jmp    34a0 <realloc@plt>
    4cf7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004d00 <qemu_mallocz>:
    4d00:	sub    rsp,0x8
    4d04:	mov    esi,0x1
    4d09:	call   3310 <calloc@plt>
    4d0e:	test   rax,rax
    4d11:	je     371a <qemu_mallocz.cold.2>
    4d17:	add    rsp,0x8
    4d1b:	ret    
    4d1c:	nop    DWORD PTR [rax+0x0]

0000000000004d20 <qemu_strdup>:
    4d20:	push   rbp
    4d21:	mov    rbp,rdi
    4d24:	push   rbx
    4d25:	sub    rsp,0x8
    4d29:	call   3180 <strlen@plt>
    4d2e:	lea    rbx,[rax+0x1]
    4d32:	mov    rdi,rbx
    4d35:	call   3450 <malloc@plt>
    4d3a:	test   rax,rax
    4d3d:	je     371f <qemu_strdup.cold.3>
    4d43:	mov    rdx,rbx
    4d46:	mov    rsi,rbp
    4d49:	mov    rdi,rax
    4d4c:	call   33b0 <memcpy@plt>
    4d51:	add    rsp,0x8
    4d55:	pop    rbx
    4d56:	pop    rbp
    4d57:	ret    
    4d58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004d60 <qemu_strndup>:
    4d60:	push   rbp
    4d61:	mov    rdx,rsi
    4d64:	mov    rbp,rdi
    4d67:	push   rbx
    4d68:	mov    rbx,rsi
    4d6b:	xor    esi,esi
    4d6d:	sub    rsp,0x8
    4d71:	call   32b0 <memchr@plt>
    4d76:	mov    rdx,rax
    4d79:	sub    rdx,rbp
    4d7c:	test   rax,rax
    4d7f:	cmovne rbx,rdx
    4d83:	lea    rdi,[rbx+0x1]
    4d87:	call   3450 <malloc@plt>
    4d8c:	test   rax,rax
    4d8f:	je     3724 <qemu_strndup.cold.4>
    4d95:	mov    BYTE PTR [rax+rbx*1],0x0
    4d99:	add    rsp,0x8
    4d9d:	mov    rdx,rbx
    4da0:	mov    rsi,rbp
    4da3:	pop    rbx
    4da4:	mov    rdi,rax
    4da7:	pop    rbp
    4da8:	jmp    33b0 <memcpy@plt>
    4dad:	nop    DWORD PTR [rax]

0000000000004db0 <cow_is_allocated>:
    4db0:	mov    rax,QWORD PTR [rdi+0x40]
    4db4:	mov    r9,rcx
    4db7:	mov    r8,QWORD PTR [rax+0x8]
    4dbb:	test   r8,r8
    4dbe:	je     4e98 <cow_is_allocated+0xe8>
    4dc4:	test   edx,edx
    4dc6:	je     4e98 <cow_is_allocated+0xe8>
    4dcc:	test   rsi,rsi
    4dcf:	lea    rax,[rsi+0x7]
    4dd3:	mov    rdi,rsi
    4dd6:	cmovns rax,rsi
    4dda:	sar    rdi,0x3f
    4dde:	shr    rdi,0x3d
    4de2:	sar    rax,0x3
    4de6:	lea    rcx,[rsi+rdi*1]
    4dea:	movzx  eax,BYTE PTR [r8+rax*1]
    4def:	and    ecx,0x7
    4df2:	mov    DWORD PTR [r9],0x1
    4df9:	sub    rcx,rdi
    4dfc:	sar    eax,cl
    4dfe:	and    eax,0x1
    4e01:	cmp    edx,0x1
    4e04:	jle    4e94 <cow_is_allocated+0xe4>
    4e0a:	mov    rcx,rsi
    4e0d:	lea    rdi,[rsi+0x8]
    4e11:	add    rcx,0x1
    4e15:	mov    r10,rcx
    4e18:	cmovns rdi,rcx
    4e1c:	sar    r10,0x3f
    4e20:	shr    r10,0x3d
    4e24:	sar    rdi,0x3
    4e28:	add    rcx,r10
    4e2b:	movzx  edi,BYTE PTR [r8+rdi*1]
    4e30:	and    ecx,0x7
    4e33:	sub    rcx,r10
    4e36:	sar    edi,cl
    4e38:	and    edi,0x1
    4e3b:	cmp    eax,edi
    4e3d:	jne    4e94 <cow_is_allocated+0xe4>
    4e3f:	lea    rdi,[rsi+0x2]
    4e43:	lea    r10d,[rdx-0x2]
    4e47:	add    r10,rdi
    4e4a:	jmp    4e88 <cow_is_allocated+0xd8>
    4e4c:	nop    DWORD PTR [rax+0x0]
    4e50:	mov    rcx,rdi
    4e53:	add    rdi,0x1
    4e57:	lea    rdx,[rcx+0x7]
    4e5b:	test   rcx,rcx
    4e5e:	mov    r11,rcx
    4e61:	cmovns rdx,rcx
    4e65:	sar    r11,0x3f
    4e69:	shr    r11,0x3d
    4e6d:	sar    rdx,0x3
    4e71:	add    rcx,r11
    4e74:	movzx  edx,BYTE PTR [r8+rdx*1]
    4e79:	and    ecx,0x7
    4e7c:	sub    rcx,r11
    4e7f:	sar    edx,cl
    4e81:	and    edx,0x1
    4e84:	cmp    edx,eax
    4e86:	jne    4e94 <cow_is_allocated+0xe4>
    4e88:	mov    edx,edi
    4e8a:	sub    edx,esi
    4e8c:	mov    DWORD PTR [r9],edx
    4e8f:	cmp    rdi,r10
    4e92:	jne    4e50 <cow_is_allocated+0xa0>
    4e94:	ret    
    4e95:	nop    DWORD PTR [rax]
    4e98:	mov    DWORD PTR [r9],edx
    4e9b:	xor    eax,eax
    4e9d:	ret    
    4e9e:	xchg   ax,ax

0000000000004ea0 <cow_close>:
    4ea0:	push   rbx
    4ea1:	mov    rbx,QWORD PTR [rdi+0x40]
    4ea5:	mov    rdi,QWORD PTR [rbx+0x10]
    4ea9:	movsxd rsi,DWORD PTR [rbx+0x18]
    4ead:	call   34b0 <munmap@plt>
    4eb2:	mov    edi,DWORD PTR [rbx]
    4eb4:	pop    rbx
    4eb5:	jmp    3260 <close@plt>
    4eba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004ec0 <cow_write>:
    4ec0:	push   r14
    4ec2:	mov    r14,rsi
    4ec5:	shl    rsi,0x9
    4ec9:	push   r13
    4ecb:	mov    r13,rdx
    4ece:	xor    edx,edx
    4ed0:	push   r12
    4ed2:	push   rbp
    4ed3:	mov    ebp,ecx
    4ed5:	push   rbx
    4ed6:	mov    rbx,QWORD PTR [rdi+0x40]
    4eda:	mov    r12d,ebp
    4edd:	shl    r12d,0x9
    4ee1:	mov    edi,DWORD PTR [rbx]
    4ee3:	add    rsi,QWORD PTR [rbx+0x20]
    4ee7:	call   3620 <lseek64@plt>
    4eec:	mov    edi,DWORD PTR [rbx]
    4eee:	movsxd rdx,r12d
    4ef1:	mov    rsi,r13
    4ef4:	call   3130 <write@plt>
    4ef9:	cmp    r12d,eax
    4efc:	jne    4f5a <cow_write+0x9a>
    4efe:	test   ebp,ebp
    4f00:	jle    4f4f <cow_write+0x8f>
    4f02:	lea    eax,[rbp-0x1]
    4f05:	mov    rsi,r14
    4f08:	mov    edi,0x1
    4f0d:	lea    r8,[r14+rax*1+0x1]
    4f12:	nop    WORD PTR [rax+rax*1+0x0]
    4f18:	test   rsi,rsi
    4f1b:	lea    rax,[rsi+0x7]
    4f1f:	mov    rdx,rsi
    4f22:	cmovns rax,rsi
    4f26:	sar    rdx,0x3f
    4f2a:	shr    rdx,0x3d
    4f2e:	lea    rcx,[rsi+rdx*1]
    4f32:	sar    rax,0x3
    4f36:	add    rsi,0x1
    4f3a:	add    rax,QWORD PTR [rbx+0x8]
    4f3e:	and    ecx,0x7
    4f41:	sub    rcx,rdx
    4f44:	mov    edx,edi
    4f46:	shl    edx,cl
    4f48:	or     BYTE PTR [rax],dl
    4f4a:	cmp    r8,rsi
    4f4d:	jne    4f18 <cow_write+0x58>
    4f4f:	xor    eax,eax
    4f51:	pop    rbx
    4f52:	pop    rbp
    4f53:	pop    r12
    4f55:	pop    r13
    4f57:	pop    r14
    4f59:	ret    
    4f5a:	mov    eax,0xffffffff
    4f5f:	jmp    4f51 <cow_write+0x91>
    4f61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    4f6c:	nop    DWORD PTR [rax+0x0]

0000000000004f70 <cow_read>:
    4f70:	push   r15
    4f72:	push   r14
    4f74:	push   r13
    4f76:	push   r12
    4f78:	push   rbp
    4f79:	push   rbx
    4f7a:	sub    rsp,0x18
    4f7e:	mov    rbx,QWORD PTR [rdi+0x40]
    4f82:	test   ecx,ecx
    4f84:	jle    50b8 <cow_read+0x148>
    4f8a:	mov    rbp,rdi
    4f8d:	mov    r14,rsi
    4f90:	mov    r15,rdx
    4f93:	mov    r13d,ecx
    4f96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4fa0:	mov    rdi,QWORD PTR [rbx+0x8]
    4fa4:	test   rdi,rdi
    4fa7:	je     50d0 <cow_read+0x160>
    4fad:	test   r14,r14
    4fb0:	lea    rax,[r14+0x7]
    4fb4:	cmovns rax,r14
    4fb8:	sar    rax,0x3
    4fbc:	movzx  esi,BYTE PTR [rdi+rax*1]
    4fc0:	mov    rax,r14
    4fc3:	sar    rax,0x3f
    4fc7:	shr    rax,0x3d
    4fcb:	lea    rcx,[r14+rax*1]
    4fcf:	and    ecx,0x7
    4fd2:	sub    rcx,rax
    4fd5:	sar    esi,cl
    4fd7:	and    esi,0x1
    4fda:	cmp    r13d,0x1
    4fde:	je     5160 <cow_read+0x1f0>
    4fe4:	mov    rax,r14
    4fe7:	lea    rdx,[r14+0x8]
    4feb:	add    rax,0x1
    4fef:	mov    r8,rax
    4ff2:	cmovns rdx,rax
    4ff6:	sar    r8,0x3f
    4ffa:	shr    r8,0x3d
    4ffe:	sar    rdx,0x3
    5002:	lea    rcx,[rax+r8*1]
    5006:	movzx  edx,BYTE PTR [rdi+rdx*1]
    500a:	and    ecx,0x7
    500d:	sub    rcx,r8
    5010:	sar    edx,cl
    5012:	and    edx,0x1
    5015:	cmp    edx,esi
    5017:	jne    5160 <cow_read+0x1f0>
    501d:	lea    rdx,[r14+0x2]
    5021:	mov    r12d,0x1
    5027:	jmp    5067 <cow_read+0xf7>
    5029:	nop    DWORD PTR [rax+0x0]
    5030:	mov    rcx,rdx
    5033:	add    rdx,0x1
    5037:	lea    rax,[rcx+0x7]
    503b:	test   rcx,rcx
    503e:	mov    r8,rcx
    5041:	cmovns rax,rcx
    5045:	sar    r8,0x3f
    5049:	shr    r8,0x3d
    504d:	sar    rax,0x3
    5051:	add    rcx,r8
    5054:	movzx  eax,BYTE PTR [rdi+rax*1]
    5058:	and    ecx,0x7
    505b:	sub    rcx,r8
    505e:	sar    eax,cl
    5060:	and    eax,0x1
    5063:	cmp    esi,eax
    5065:	jne    5070 <cow_read+0x100>
    5067:	add    r12d,0x1
    506b:	cmp    r12d,r13d
    506e:	jne    5030 <cow_read+0xc0>
    5070:	test   esi,esi
    5072:	jne    5108 <cow_read+0x198>
    5078:	mov    rdi,QWORD PTR [rbp+0x850]
    507f:	mov    ecx,r12d
    5082:	test   rdi,rdi
    5085:	je     50e2 <cow_read+0x172>
    5087:	mov    rdx,r15
    508a:	mov    rsi,r14
    508d:	call   17550 <bdrv_read>
    5092:	test   eax,eax
    5094:	js     5144 <cow_read+0x1d4>
    509a:	mov    ecx,r12d
    509d:	shl    ecx,0x9
    50a0:	movsxd rcx,ecx
    50a3:	sub    r13d,r12d
    50a6:	movsxd r12,r12d
    50a9:	add    r15,rcx
    50ac:	add    r14,r12
    50af:	test   r13d,r13d
    50b2:	jg     4fa0 <cow_read+0x30>
    50b8:	add    rsp,0x18
    50bc:	xor    eax,eax
    50be:	pop    rbx
    50bf:	pop    rbp
    50c0:	pop    r12
    50c2:	pop    r13
    50c4:	pop    r14
    50c6:	pop    r15
    50c8:	ret    
    50c9:	nop    DWORD PTR [rax+0x0]
    50d0:	mov    rdi,QWORD PTR [rbp+0x850]
    50d7:	mov    r12d,r13d
    50da:	mov    ecx,r12d
    50dd:	test   rdi,rdi
    50e0:	jne    5087 <cow_read+0x117>
    50e2:	shl    ecx,0x9
    50e5:	xor    esi,esi
    50e7:	mov    rdi,r15
    50ea:	movsxd rcx,ecx
    50ed:	mov    rdx,rcx
    50f0:	mov    QWORD PTR [rsp+0x8],rcx
    50f5:	call   3240 <memset@plt>
    50fa:	mov    rcx,QWORD PTR [rsp+0x8]
    50ff:	jmp    50a3 <cow_read+0x133>
    5101:	nop    DWORD PTR [rax+0x0]
    5108:	mov    edi,DWORD PTR [rbx]
    510a:	mov    rsi,r14
    510d:	xor    edx,edx
    510f:	shl    rsi,0x9
    5113:	add    rsi,QWORD PTR [rbx+0x20]
    5117:	call   3620 <lseek64@plt>
    511c:	mov    ecx,r12d
    511f:	mov    edi,DWORD PTR [rbx]
    5121:	mov    rsi,r15
    5124:	shl    ecx,0x9
    5127:	movsxd rcx,ecx
    512a:	mov    rdx,rcx
    512d:	mov    QWORD PTR [rsp+0x8],rcx
    5132:	call   4600 <qemu_read_ok>
    5137:	mov    rcx,QWORD PTR [rsp+0x8]
    513c:	test   eax,eax
    513e:	jns    50a3 <cow_read+0x133>
    5144:	add    rsp,0x18
    5148:	mov    eax,0xffffffff
    514d:	pop    rbx
    514e:	pop    rbp
    514f:	pop    r12
    5151:	pop    r13
    5153:	pop    r14
    5155:	pop    r15
    5157:	ret    
    5158:	nop    DWORD PTR [rax+rax*1+0x0]
    5160:	mov    r12d,0x1
    5166:	jmp    5070 <cow_read+0x100>
    516b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005170 <cow_open>:
    5170:	push   r13
    5172:	mov    r13,rsi
    5175:	mov    esi,0x2
    517a:	push   r12
    517c:	push   rbp
    517d:	push   rbx
    517e:	mov    rbx,rdi
    5181:	sub    rsp,0x438
    5188:	mov    rbp,QWORD PTR [rdi+0x40]
    518c:	mov    rdi,r13
    518f:	mov    rax,QWORD PTR fs:0x28
    5198:	mov    QWORD PTR [rsp+0x428],rax
    51a0:	xor    eax,eax
    51a2:	call   3500 <open64@plt>
    51a7:	mov    r12d,eax
    51aa:	test   eax,eax
    51ac:	js     52b0 <cow_open+0x140>
    51b2:	mov    DWORD PTR [rbp+0x0],r12d
    51b6:	mov    r13,rsp
    51b9:	mov    edx,0x420
    51be:	mov    edi,r12d
    51c1:	mov    rsi,r13
    51c4:	call   4600 <qemu_read_ok>
    51c9:	test   eax,eax
    51cb:	js     52d0 <cow_open+0x160>
    51d1:	cmp    DWORD PTR [rsp],0x4d4f4f4f
    51d8:	jne    52d0 <cow_open+0x160>
    51de:	cmp    DWORD PTR [rsp+0x4],0x2000000
    51e6:	jne    52d0 <cow_open+0x160>
    51ec:	lea    rdx,[r13+0x8]
    51f0:	mov    rax,QWORD PTR [rsp+0x410]
    51f8:	mov    esi,0x400
    51fd:	lea    rdi,[rbx+0x448]
    5204:	bswap  rax
    5207:	mov    rcx,rax
    520a:	lea    rax,[rax+0x1ff]
    5211:	test   rcx,rcx
    5214:	cmovns rax,rcx
    5218:	sar    rax,0x9
    521c:	mov    QWORD PTR [rbx],rax
    521f:	call   48a0 <pstrcpy>
    5224:	mov    rbx,QWORD PTR [rbx]
    5227:	mov    r13d,DWORD PTR [rbp+0x0]
    522b:	add    rbx,0x7
    522f:	sar    rbx,0x3
    5233:	add    ebx,0x420
    5239:	mov    DWORD PTR [rbp+0x18],ebx
    523c:	movsxd rbx,ebx
    523f:	mov    rdi,rbx
    5242:	call   4c90 <get_mmap_addr>
    5247:	xor    r9d,r9d
    524a:	mov    r8d,r13d
    524d:	mov    ecx,0x1
    5252:	mov    edx,0x3
    5257:	mov    rsi,rbx
    525a:	mov    rdi,rax
    525d:	call   3420 <mmap64@plt>
    5262:	mov    QWORD PTR [rbp+0x10],rax
    5266:	cmp    rax,0xffffffffffffffff
    526a:	je     52d0 <cow_open+0x160>
    526c:	add    rax,0x420
    5272:	mov    QWORD PTR [rbp+0x8],rax
    5276:	mov    eax,DWORD PTR [rbp+0x18]
    5279:	add    eax,0x1ff
    527e:	and    eax,0xfffffe00
    5283:	cdqe   
    5285:	mov    QWORD PTR [rbp+0x20],rax
    5289:	xor    eax,eax
    528b:	mov    rcx,QWORD PTR [rsp+0x428]
    5293:	xor    rcx,QWORD PTR fs:0x28
    529c:	jne    52df <cow_open+0x16f>
    529e:	add    rsp,0x438
    52a5:	pop    rbx
    52a6:	pop    rbp
    52a7:	pop    r12
    52a9:	pop    r13
    52ab:	ret    
    52ac:	nop    DWORD PTR [rax+0x0]
    52b0:	xor    esi,esi
    52b2:	mov    rdi,r13
    52b5:	xor    eax,eax
    52b7:	call   3500 <open64@plt>
    52bc:	mov    r12d,eax
    52bf:	test   eax,eax
    52c1:	jns    51b2 <cow_open+0x42>
    52c7:	mov    eax,0xffffffff
    52cc:	jmp    528b <cow_open+0x11b>
    52ce:	xchg   ax,ax
    52d0:	mov    edi,r12d
    52d3:	call   3260 <close@plt>
    52d8:	mov    eax,0xffffffff
    52dd:	jmp    528b <cow_open+0x11b>
    52df:	call   3190 <__stack_chk_fail@plt>
    52e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    52ef:	nop

00000000000052f0 <cow_flush>:
    52f0:	sub    rsp,0x8
    52f4:	mov    rax,QWORD PTR [rdi+0x40]
    52f8:	mov    edi,DWORD PTR [rax]
    52fa:	call   3560 <fsync@plt>
    52ff:	test   eax,eax
    5301:	je     530a <cow_flush+0x1a>
    5303:	call   30b0 <__errno_location@plt>
    5308:	mov    eax,DWORD PTR [rax]
    530a:	add    rsp,0x8
    530e:	ret    
    530f:	nop

0000000000005310 <cow_probe>:
    5310:	xor    eax,eax
    5312:	cmp    esi,0x41f
    5318:	ja     5320 <cow_probe+0x10>
    531a:	ret    
    531b:	nop    DWORD PTR [rax+rax*1+0x0]
    5320:	cmp    DWORD PTR [rdi],0x4d4f4f4f
    5326:	jne    531a <cow_probe+0xa>
    5328:	cmp    DWORD PTR [rdi+0x4],0x2000000
    532f:	mov    edx,0x64
    5334:	cmove  eax,edx
    5337:	ret    
    5338:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005340 <cow_create>:
    5340:	push   r14
    5342:	push   r13
    5344:	push   r12
    5346:	push   rbp
    5347:	push   rbx
    5348:	sub    rsp,0x4c0
    534f:	mov    rax,QWORD PTR fs:0x28
    5358:	mov    QWORD PTR [rsp+0x4b8],rax
    5360:	xor    eax,eax
    5362:	test   ecx,ecx
    5364:	jne    5490 <cow_create+0x150>
    536a:	mov    rbx,rsi
    536d:	mov    r13,rdx
    5370:	mov    esi,0x241
    5375:	mov    edx,0x1a4
    537a:	call   3500 <open64@plt>
    537f:	mov    ebp,eax
    5381:	test   eax,eax
    5383:	js     54a0 <cow_create+0x160>
    5389:	lea    r12,[rsp+0x90]
    5391:	xor    eax,eax
    5393:	mov    ecx,0x84
    5398:	mov    rdi,r12
    539b:	rep stos QWORD PTR es:[rdi],rax
    539e:	movabs rax,0x20000004d4f4f4f
    53a8:	mov    QWORD PTR [rsp+0x90],rax
    53b0:	test   r13,r13
    53b3:	je     5407 <cow_create+0xc7>
    53b5:	xor    esi,esi
    53b7:	mov    rdi,r13
    53ba:	xor    eax,eax
    53bc:	call   3500 <open64@plt>
    53c1:	mov    r14d,eax
    53c4:	test   eax,eax
    53c6:	js     53f5 <cow_create+0xb5>
    53c8:	mov    edi,0x1
    53cd:	mov    rdx,rsp
    53d0:	mov    esi,eax
    53d2:	call   3320 <__fxstat64@plt>
    53d7:	mov    edi,r14d
    53da:	test   eax,eax
    53dc:	jne    5480 <cow_create+0x140>
    53e2:	call   3260 <close@plt>
    53e7:	mov    rax,QWORD PTR [rsp+0x58]
    53ec:	bswap  eax
    53ee:	mov    DWORD PTR [rsp+0x498],eax
    53f5:	lea    rdi,[r12+0x8]
    53fa:	mov    rdx,r13
    53fd:	mov    esi,0x400
    5402:	call   48a0 <pstrcpy>
    5407:	mov    rax,rbx
    540a:	mov    edx,0x420
    540f:	mov    rsi,r12
    5412:	mov    edi,ebp
    5414:	mov    DWORD PTR [rsp+0x4a8],0x20000
    541f:	shl    rax,0x9
    5423:	bswap  rax
    5426:	mov    QWORD PTR [rsp+0x4a0],rax
    542e:	call   3130 <write@plt>
    5433:	lea    rsi,[rbx+0x7]
    5437:	mov    edi,ebp
    5439:	mov    rbx,rsi
    543c:	sar    rbx,0x3
    5440:	lea    rsi,[rbx+0x420]
    5447:	call   34c0 <ftruncate64@plt>
    544c:	mov    edi,ebp
    544e:	call   3260 <close@plt>
    5453:	xor    eax,eax
    5455:	mov    rdx,QWORD PTR [rsp+0x4b8]
    545d:	xor    rdx,QWORD PTR fs:0x28
    5466:	jne    54a7 <cow_create+0x167>
    5468:	add    rsp,0x4c0
    546f:	pop    rbx
    5470:	pop    rbp
    5471:	pop    r12
    5473:	pop    r13
    5475:	pop    r14
    5477:	ret    
    5478:	nop    DWORD PTR [rax+rax*1+0x0]
    5480:	call   3260 <close@plt>
    5485:	jmp    53f5 <cow_create+0xb5>
    548a:	nop    WORD PTR [rax+rax*1+0x0]
    5490:	mov    eax,0xffffffa1
    5495:	jmp    5455 <cow_create+0x115>
    5497:	nop    WORD PTR [rax+rax*1+0x0]
    54a0:	mov    eax,0xffffffff
    54a5:	jmp    5455 <cow_create+0x115>
    54a7:	call   3190 <__stack_chk_fail@plt>
    54ac:	nop    DWORD PTR [rax+0x0]

00000000000054b0 <qcow_get_info>:
    54b0:	mov    rax,QWORD PTR [rdi+0x40]
    54b4:	mov    eax,DWORD PTR [rax+0xc]
    54b7:	mov    DWORD PTR [rsi],eax
    54b9:	xor    eax,eax
    54bb:	ret    
    54bc:	nop    DWORD PTR [rax+0x0]

00000000000054c0 <qcow_make_empty>:
    54c0:	push   r12
    54c2:	xor    esi,esi
    54c4:	push   rbp
    54c5:	push   rbx
    54c6:	mov    rbx,QWORD PTR [rdi+0x40]
    54ca:	mov    eax,DWORD PTR [rbx+0x1c]
    54cd:	mov    rdi,QWORD PTR [rbx+0x30]
    54d1:	lea    r12d,[rax*8+0x0]
    54d9:	mov    rdx,r12
    54dc:	call   3240 <memset@plt>
    54e1:	mov    rdx,QWORD PTR [rbx+0x30]
    54e5:	mov    rsi,QWORD PTR [rbx+0x28]
    54e9:	mov    ecx,r12d
    54ec:	mov    rdi,QWORD PTR [rbx]
    54ef:	call   18450 <bdrv_pwrite>
    54f4:	test   eax,eax
    54f6:	js     5580 <qcow_make_empty+0xc0>
    54fc:	mov    rsi,QWORD PTR [rbx+0x28]
    5500:	mov    rdi,QWORD PTR [rbx]
    5503:	add    rsi,r12
    5506:	call   184d0 <bdrv_truncate>
    550b:	test   eax,eax
    550d:	js     5574 <qcow_make_empty+0xb4>
    550f:	mov    edx,DWORD PTR [rbx+0x18]
    5512:	mov    rdi,QWORD PTR [rbx+0x38]
    5516:	xor    esi,esi
    5518:	shl    edx,0x4
    551b:	movsxd rdx,edx
    551e:	shl    rdx,0x3
    5522:	call   3240 <memset@plt>
    5527:	lea    rdi,[rbx+0x48]
    552b:	mov    eax,ebx
    552d:	pxor   xmm0,xmm0
    5531:	and    rdi,0xfffffffffffffff8
    5535:	mov    QWORD PTR [rbx+0x40],0x0
    553d:	mov    QWORD PTR [rbx+0xb8],0x0
    5548:	sub    eax,edi
    554a:	lea    ecx,[rax+0xc0]
    5550:	xor    eax,eax
    5552:	shr    ecx,0x3
    5555:	rep stos QWORD PTR es:[rdi],rax
    5558:	movups XMMWORD PTR [rbx+0xc0],xmm0
    555f:	movups XMMWORD PTR [rbx+0xd0],xmm0
    5566:	movups XMMWORD PTR [rbx+0xe0],xmm0
    556d:	movups XMMWORD PTR [rbx+0xf0],xmm0
    5574:	pop    rbx
    5575:	pop    rbp
    5576:	pop    r12
    5578:	ret    
    5579:	nop    DWORD PTR [rax+0x0]
    5580:	mov    eax,0xffffffff
    5585:	jmp    5574 <qcow_make_empty+0xb4>
    5587:	nop    WORD PTR [rax+rax*1+0x0]

0000000000005590 <qcow_aio_flush>:
    5590:	mov    rax,QWORD PTR [rdi+0x40]
    5594:	mov    rdi,QWORD PTR [rax]
    5597:	jmp    19870 <bdrv_aio_flush>
    559c:	nop    DWORD PTR [rax+0x0]

00000000000055a0 <qcow_aio_cancel>:
    55a0:	push   rbx
    55a1:	mov    rbx,rdi
    55a4:	mov    rdi,QWORD PTR [rdi+0x50]
    55a8:	test   rdi,rdi
    55ab:	je     55b2 <qcow_aio_cancel+0x12>
    55ad:	call   19860 <bdrv_aio_cancel>
    55b2:	mov    rdi,rbx
    55b5:	pop    rbx
    55b6:	jmp    19ba0 <qemu_aio_release>
    55bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000055c0 <qcow_flush>:
    55c0:	mov    rax,QWORD PTR [rdi+0x40]
    55c4:	mov    rdi,QWORD PTR [rax]
    55c7:	jmp    18a40 <bdrv_flush>
    55cc:	nop    DWORD PTR [rax+0x0]

00000000000055d0 <qcow_close>:
    55d0:	push   rbx
    55d1:	mov    rbx,QWORD PTR [rdi+0x40]
    55d5:	mov    rdi,QWORD PTR [rbx+0x30]
    55d9:	call   4ca0 <qemu_free>
    55de:	mov    rdi,QWORD PTR [rbx+0x38]
    55e2:	call   4ca0 <qemu_free>
    55e7:	mov    rdi,QWORD PTR [rbx+0x100]
    55ee:	call   4ca0 <qemu_free>
    55f3:	mov    rdi,QWORD PTR [rbx+0x108]
    55fa:	call   4ca0 <qemu_free>
    55ff:	mov    rdi,QWORD PTR [rbx]
    5602:	pop    rbx
    5603:	jmp    17470 <bdrv_delete>
    5608:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005610 <qcow_open>:
    5610:	push   r13
    5612:	push   r12
    5614:	push   rbp
    5615:	mov    rbp,rdi
    5618:	push   rbx
    5619:	sub    rsp,0x58
    561d:	mov    rbx,QWORD PTR [rdi+0x40]
    5621:	mov    rax,QWORD PTR fs:0x28
    562a:	mov    QWORD PTR [rsp+0x48],rax
    562f:	xor    eax,eax
    5631:	mov    rdi,rbx
    5634:	call   183c0 <bdrv_file_open>
    5639:	mov    r12d,eax
    563c:	test   eax,eax
    563e:	js     588d <qcow_open+0x27d>
    5644:	mov    rdi,QWORD PTR [rbx]
    5647:	xor    esi,esi
    5649:	lea    rdx,[rsp+0x10]
    564e:	mov    ecx,0x30
    5653:	call   17e40 <bdrv_pread>
    5658:	cmp    eax,0x30
    565b:	jne    59b0 <qcow_open+0x3a0>
    5661:	mov    eax,DWORD PTR [rsp+0x10]
    5665:	mov    rdx,QWORD PTR [rsp+0x28]
    566a:	mov    rcx,QWORD PTR [rsp+0x38]
    566f:	bswap  eax
    5671:	mov    DWORD PTR [rsp+0x10],eax
    5675:	mov    eax,DWORD PTR [rsp+0x14]
    5679:	bswap  rdx
    567c:	bswap  rcx
    567f:	mov    QWORD PTR [rsp+0x28],rdx
    5684:	bswap  eax
    5686:	mov    DWORD PTR [rsp+0x14],eax
    568a:	mov    rax,QWORD PTR [rsp+0x18]
    568f:	mov    QWORD PTR [rsp+0x38],rcx
    5694:	movabs rcx,0x1514649fb
    569e:	bswap  rax
    56a1:	mov    QWORD PTR [rsp+0x18],rax
    56a6:	mov    eax,DWORD PTR [rsp+0x20]
    56aa:	bswap  eax
    56ac:	mov    DWORD PTR [rsp+0x20],eax
    56b0:	mov    eax,DWORD PTR [rsp+0x24]
    56b4:	bswap  eax
    56b6:	mov    DWORD PTR [rsp+0x24],eax
    56ba:	mov    eax,DWORD PTR [rsp+0x34]
    56be:	bswap  eax
    56c0:	mov    DWORD PTR [rsp+0x34],eax
    56c4:	cmp    QWORD PTR [rsp+0x10],rcx
    56c9:	jne    59b0 <qcow_open+0x3a0>
    56cf:	cmp    rdx,0x1
    56d3:	jbe    59b0 <qcow_open+0x3a0>
    56d9:	movzx  ecx,BYTE PTR [rsp+0x30]
    56de:	cmp    cl,0x8
    56e1:	jbe    59b0 <qcow_open+0x3a0>
    56e7:	cmp    eax,0x1
    56ea:	ja     59b0 <qcow_open+0x3a0>
    56f0:	mov    DWORD PTR [rbx+0x11c],eax
    56f6:	test   eax,eax
    56f8:	jne    58b0 <qcow_open+0x2a0>
    56fe:	mov    eax,0x1
    5703:	movzx  edx,cl
    5706:	mov    esi,eax
    5708:	mov    DWORD PTR [rbx+0x8],edx
    570b:	shl    esi,cl
    570d:	lea    ecx,[rdx-0x9]
    5710:	mov    edx,eax
    5712:	shl    edx,cl
    5714:	mov    DWORD PTR [rbx+0xc],esi
    5717:	mov    DWORD PTR [rbx+0x10],edx
    571a:	movzx  ecx,BYTE PTR [rsp+0x31]
    571f:	shl    eax,cl
    5721:	mov    DWORD PTR [rbx+0x14],ecx
    5724:	mov    DWORD PTR [rbx+0x18],eax
    5727:	mov    rdx,QWORD PTR [rsp+0x28]
    572c:	mov    rax,rdx
    572f:	shr    rax,0x9
    5733:	mov    QWORD PTR [rbp+0x0],rax
    5737:	mov    ecx,DWORD PTR [rbx+0x8]
    573a:	movabs rax,0x8000000000000000
    5744:	shr    rax,cl
    5747:	add    ecx,DWORD PTR [rbx+0x14]
    574a:	sub    rax,0x1
    574e:	mov    QWORD PTR [rbx+0x20],rax
    5752:	mov    eax,0x1
    5757:	shl    rax,cl
    575a:	lea    rdi,[rdx+rax*1-0x1]
    575f:	shr    rdi,cl
    5762:	mov    DWORD PTR [rbx+0x1c],edi
    5765:	mov    rax,QWORD PTR [rsp+0x38]
    576a:	movsxd rdi,edi
    576d:	shl    rdi,0x3
    5771:	mov    QWORD PTR [rbx+0x28],rax
    5775:	call   4cb0 <qemu_malloc>
    577a:	mov    QWORD PTR [rbx+0x30],rax
    577e:	test   rax,rax
    5781:	je     59b4 <qcow_open+0x3a4>
    5787:	mov    esi,DWORD PTR [rbx+0x1c]
    578a:	mov    rdi,QWORD PTR [rbx]
    578d:	mov    rdx,rax
    5790:	lea    ecx,[rsi*8+0x0]
    5797:	mov    rsi,QWORD PTR [rbx+0x28]
    579b:	call   17e40 <bdrv_pread>
    57a0:	movsxd r12,DWORD PTR [rbx+0x1c]
    57a4:	cdqe   
    57a6:	mov    rdx,r12
    57a9:	shl    r12,0x3
    57ad:	cmp    rax,r12
    57b0:	jne    59b0 <qcow_open+0x3a0>
    57b6:	cmp    QWORD PTR [rsp+0x18],0x0
    57bc:	jne    57ca <qcow_open+0x1ba>
    57be:	test   WORD PTR [rbx+0x28],0xfff
    57c4:	je     58c0 <qcow_open+0x2b0>
    57ca:	xor    eax,eax
    57cc:	test   edx,edx
    57ce:	jle    57ea <qcow_open+0x1da>
    57d0:	mov    rdx,QWORD PTR [rbx+0x30]
    57d4:	lea    rcx,[rdx+rax*8]
    57d8:	add    rax,0x1
    57dc:	mov    rdx,QWORD PTR [rcx]
    57df:	bswap  rdx
    57e2:	mov    QWORD PTR [rcx],rdx
    57e5:	cmp    DWORD PTR [rbx+0x1c],eax
    57e8:	jg     57d0 <qcow_open+0x1c0>
    57ea:	mov    edi,DWORD PTR [rbx+0x18]
    57ed:	shl    edi,0x4
    57f0:	movsxd rdi,edi
    57f3:	shl    rdi,0x3
    57f7:	call   4cb0 <qemu_malloc>
    57fc:	mov    QWORD PTR [rbx+0x38],rax
    5800:	test   rax,rax
    5803:	je     59b0 <qcow_open+0x3a0>
    5809:	movsxd rdi,DWORD PTR [rbx+0xc]
    580d:	call   4cb0 <qemu_malloc>
    5812:	mov    QWORD PTR [rbx+0x100],rax
    5819:	test   rax,rax
    581c:	je     59b0 <qcow_open+0x3a0>
    5822:	movsxd rdi,DWORD PTR [rbx+0xc]
    5826:	call   4cb0 <qemu_malloc>
    582b:	mov    QWORD PTR [rbx+0x108],rax
    5832:	test   rax,rax
    5835:	je     59b0 <qcow_open+0x3a0>
    583b:	mov    rsi,QWORD PTR [rsp+0x18]
    5840:	xor    r12d,r12d
    5843:	mov    QWORD PTR [rbx+0x110],0xffffffffffffffff
    584e:	test   rsi,rsi
    5851:	je     588d <qcow_open+0x27d>
    5853:	mov    r13d,DWORD PTR [rsp+0x20]
    5858:	mov    eax,0x3ff
    585d:	mov    rdi,QWORD PTR [rbx]
    5860:	lea    rdx,[rbp+0x448]
    5867:	cmp    r13d,0x3ff
    586e:	cmovg  r13d,eax
    5872:	mov    ecx,r13d
    5875:	call   17e40 <bdrv_pread>
    587a:	cmp    eax,r13d
    587d:	jne    59b0 <qcow_open+0x3a0>
    5883:	cdqe   
    5885:	mov    BYTE PTR [rbp+rax*1+0x448],0x0
    588d:	mov    rsi,QWORD PTR [rsp+0x48]
    5892:	xor    rsi,QWORD PTR fs:0x28
    589b:	mov    eax,r12d
    589e:	jne    59f8 <qcow_open+0x3e8>
    58a4:	add    rsp,0x58
    58a8:	pop    rbx
    58a9:	pop    rbp
    58aa:	pop    r12
    58ac:	pop    r13
    58ae:	ret    
    58af:	nop
    58b0:	mov    DWORD PTR [rbp+0x14],0x1
    58b7:	jmp    56fe <qcow_open+0xee>
    58bc:	nop    DWORD PTR [rax+0x0]
    58c0:	mov    r13,rsp
    58c3:	mov    rdi,QWORD PTR [rbx]
    58c6:	mov    ecx,0x10
    58cb:	mov    esi,0x30
    58d0:	mov    rdx,r13
    58d3:	call   17e40 <bdrv_pread>
    58d8:	cmp    eax,0x10
    58db:	jne    59f0 <qcow_open+0x3e0>
    58e1:	mov    eax,DWORD PTR [rsp]
    58e4:	bswap  eax
    58e6:	mov    DWORD PTR [rsp],eax
    58e9:	cmp    eax,0x58454efb
    58ee:	jne    59f0 <qcow_open+0x3e0>
    58f4:	mov    eax,DWORD PTR [rsp+0xc]
    58f8:	bswap  eax
    58fa:	mov    DWORD PTR [rsp+0xc],eax
    58fe:	test   al,0x2
    5900:	jne    59f0 <qcow_open+0x3e0>
    5906:	mov    rcx,QWORD PTR [rip+0x22bf3]        # 28500 <stderr@@GLIBC_2.2.5>
    590d:	mov    edx,0x2e
    5912:	mov    esi,0x1
    5917:	lea    rdi,[rip+0x16f8a]        # 1c8a8 <__PRETTY_FUNCTION__.13430+0x10>
    591e:	call   3610 <fwrite@plt>
    5923:	mov    edx,DWORD PTR [rbx+0x1c]
    5926:	xor    eax,eax
    5928:	test   edx,edx
    592a:	jle    594a <qcow_open+0x33a>
    592c:	nop    DWORD PTR [rax+0x0]
    5930:	mov    rdx,QWORD PTR [rbx+0x30]
    5934:	lea    rcx,[rdx+rax*8]
    5938:	add    rax,0x1
    593c:	mov    rdx,QWORD PTR [rcx]
    593f:	bswap  rdx
    5942:	mov    QWORD PTR [rcx],rdx
    5945:	cmp    DWORD PTR [rbx+0x1c],eax
    5948:	jg     5930 <qcow_open+0x320>
    594a:	mov    rdx,QWORD PTR [rbx+0x30]
    594e:	mov    rsi,QWORD PTR [rbx+0x28]
    5952:	mov    ecx,r12d
    5955:	mov    rdi,QWORD PTR [rbx]
    5958:	call   18450 <bdrv_pwrite>
    595d:	cdqe   
    595f:	cmp    r12,rax
    5962:	jne    59fd <qcow_open+0x3ed>
    5968:	mov    eax,DWORD PTR [rsp+0xc]
    596c:	mov    ecx,0x10
    5971:	mov    rdx,r13
    5974:	mov    esi,0x30
    5979:	or     eax,0x2
    597c:	bswap  eax
    597e:	mov    DWORD PTR [rsp+0xc],eax
    5982:	mov    rdi,QWORD PTR [rbx]
    5985:	call   18450 <bdrv_pwrite>
    598a:	cmp    eax,0x10
    598d:	je     59f0 <qcow_open+0x3e0>
    598f:	mov    rcx,QWORD PTR [rip+0x22b6a]        # 28500 <stderr@@GLIBC_2.2.5>
    5996:	mov    edx,0x26
    599b:	mov    esi,0x1
    59a0:	lea    rdi,[rip+0x16f59]        # 1c900 <__PRETTY_FUNCTION__.13430+0x68>
    59a7:	call   3610 <fwrite@plt>
    59ac:	nop    DWORD PTR [rax+0x0]
    59b0:	mov    rax,QWORD PTR [rbx+0x30]
    59b4:	mov    rdi,rax
    59b7:	mov    r12d,0xffffffff
    59bd:	call   4ca0 <qemu_free>
    59c2:	mov    rdi,QWORD PTR [rbx+0x38]
    59c6:	call   4ca0 <qemu_free>
    59cb:	mov    rdi,QWORD PTR [rbx+0x100]
    59d2:	call   4ca0 <qemu_free>
    59d7:	mov    rdi,QWORD PTR [rbx+0x108]
    59de:	call   4ca0 <qemu_free>
    59e3:	mov    rdi,QWORD PTR [rbx]
    59e6:	call   17470 <bdrv_delete>
    59eb:	jmp    588d <qcow_open+0x27d>
    59f0:	mov    edx,DWORD PTR [rbx+0x1c]
    59f3:	jmp    57ca <qcow_open+0x1ba>
    59f8:	call   3190 <__stack_chk_fail@plt>
    59fd:	mov    rcx,QWORD PTR [rip+0x22afc]        # 28500 <stderr@@GLIBC_2.2.5>
    5a04:	mov    edx,0x23
    5a09:	mov    esi,0x1
    5a0e:	lea    rdi,[rip+0x16ec3]        # 1c8d8 <__PRETTY_FUNCTION__.13430+0x40>
    5a15:	call   3610 <fwrite@plt>
    5a1a:	jmp    59b0 <qcow_open+0x3a0>
    5a1c:	nop    DWORD PTR [rax+0x0]

0000000000005a20 <encrypt_sectors.isra.0>:
    5a20:	push   r15
    5a22:	push   r14
    5a24:	push   r13
    5a26:	push   r12
    5a28:	push   rbp
    5a29:	push   rbx
    5a2a:	sub    rsp,0x38
    5a2e:	mov    rax,QWORD PTR fs:0x28
    5a37:	mov    QWORD PTR [rsp+0x28],rax
    5a3c:	xor    eax,eax
    5a3e:	test   ecx,ecx
    5a40:	jle    5aab <encrypt_sectors.isra.0+0x8b>
    5a42:	lea    r12d,[rcx-0x1]
    5a46:	lea    rbx,[rdi+0x1]
    5a4a:	mov    rbp,rsi
    5a4d:	mov    r15,rdx
    5a50:	lea    rax,[rsp+0x10]
    5a55:	mov    r13d,r8d
    5a58:	mov    r14,r9
    5a5b:	add    r12,rbx
    5a5e:	mov    QWORD PTR [rsp+0x8],rax
    5a63:	jmp    5a6c <encrypt_sectors.isra.0+0x4c>
    5a65:	nop    DWORD PTR [rax]
    5a68:	add    rbx,0x1
    5a6c:	mov    r8,QWORD PTR [rsp+0x8]
    5a71:	mov    QWORD PTR [rsp+0x10],rdi
    5a76:	mov    rsi,rbp
    5a79:	mov    rdi,r15
    5a7c:	mov    r9d,r13d
    5a7f:	mov    rcx,r14
    5a82:	mov    edx,0x200
    5a87:	mov    QWORD PTR [rsp+0x18],0x0
    5a90:	add    r15,0x200
    5a97:	add    rbp,0x200
    5a9e:	call   7970 <AES_cbc_encrypt>
    5aa3:	mov    rdi,rbx
    5aa6:	cmp    rbx,r12
    5aa9:	jne    5a68 <encrypt_sectors.isra.0+0x48>
    5aab:	mov    rax,QWORD PTR [rsp+0x28]
    5ab0:	xor    rax,QWORD PTR fs:0x28
    5ab9:	jne    5aca <encrypt_sectors.isra.0+0xaa>
    5abb:	add    rsp,0x38
    5abf:	pop    rbx
    5ac0:	pop    rbp
    5ac1:	pop    r12
    5ac3:	pop    r13
    5ac5:	pop    r14
    5ac7:	pop    r15
    5ac9:	ret    
    5aca:	call   3190 <__stack_chk_fail@plt>
    5acf:	nop

0000000000005ad0 <decompress_cluster>:
    5ad0:	push   r15
    5ad2:	push   r14
    5ad4:	push   r13
    5ad6:	push   r12
    5ad8:	push   rbp
    5ad9:	xor    ebp,ebp
    5adb:	push   rbx
    5adc:	sub    rsp,0x88
    5ae3:	mov    r12,QWORD PTR [rdi+0x20]
    5ae7:	mov    rax,QWORD PTR fs:0x28
    5af0:	mov    QWORD PTR [rsp+0x78],rax
    5af5:	xor    eax,eax
    5af7:	and    r12,rsi
    5afa:	cmp    QWORD PTR [rdi+0x110],r12
    5b01:	jne    5b30 <decompress_cluster+0x60>
    5b03:	mov    rdi,QWORD PTR [rsp+0x78]
    5b08:	xor    rdi,QWORD PTR fs:0x28
    5b11:	mov    eax,ebp
    5b13:	jne    5c27 <decompress_cluster+0x157>
    5b19:	add    rsp,0x88
    5b20:	pop    rbx
    5b21:	pop    rbp
    5b22:	pop    r12
    5b24:	pop    r13
    5b26:	pop    r14
    5b28:	pop    r15
    5b2a:	ret    
    5b2b:	nop    DWORD PTR [rax+rax*1+0x0]
    5b30:	mov    eax,DWORD PTR [rdi+0xc]
    5b33:	mov    ecx,0x3f
    5b38:	sub    ecx,DWORD PTR [rdi+0x8]
    5b3b:	mov    rbx,rdi
    5b3e:	shr    rsi,cl
    5b41:	mov    rdx,QWORD PTR [rdi+0x108]
    5b48:	mov    rdi,QWORD PTR [rdi]
    5b4b:	lea    ebp,[rax-0x1]
    5b4e:	and    ebp,esi
    5b50:	mov    rsi,r12
    5b53:	mov    ecx,ebp
    5b55:	call   17e40 <bdrv_pread>
    5b5a:	cmp    ebp,eax
    5b5c:	jne    5c08 <decompress_cluster+0x138>
    5b62:	mov    r15,rsp
    5b65:	xor    eax,eax
    5b67:	mov    ecx,0xc
    5b6c:	mov    r13d,DWORD PTR [rbx+0xc]
    5b70:	lea    rdi,[r15+0x10]
    5b74:	mov    rdx,QWORD PTR [rbx+0x108]
    5b7b:	mov    esi,0xfffffff4
    5b80:	mov    r14,QWORD PTR [rbx+0x100]
    5b87:	mov    QWORD PTR [rsp+0xc],0x0
    5b90:	mov    QWORD PTR [r15+0x68],0x0
    5b98:	rep stos QWORD PTR es:[rdi],rax
    5b9b:	mov    QWORD PTR [rsp],rdx
    5b9f:	mov    ecx,0x70
    5ba4:	mov    rdi,r15
    5ba7:	lea    rdx,[rip+0x16d79]        # 1c927 <__PRETTY_FUNCTION__.13430+0x8f>
    5bae:	mov    DWORD PTR [rsp+0x8],ebp
    5bb2:	mov    QWORD PTR [rsp+0x18],r14
    5bb7:	mov    DWORD PTR [rsp+0x20],r13d
    5bbc:	call   3580 <inflateInit2_@plt>
    5bc1:	mov    ebp,eax
    5bc3:	test   eax,eax
    5bc5:	jne    5c08 <decompress_cluster+0x138>
    5bc7:	mov    rdi,r15
    5bca:	mov    esi,0x4
    5bcf:	call   30f0 <inflate@plt>
    5bd4:	mov    rdx,QWORD PTR [rsp+0x18]
    5bd9:	mov    rdi,r15
    5bdc:	sub    rdx,r14
    5bdf:	cmp    r13d,edx
    5be2:	jne    5c18 <decompress_cluster+0x148>
    5be4:	cmp    eax,0x1
    5be7:	setne  dl
    5bea:	cmp    eax,0xfffffffb
    5bed:	setne  al
    5bf0:	test   dl,al
    5bf2:	jne    5c18 <decompress_cluster+0x148>
    5bf4:	call   33c0 <inflateEnd@plt>
    5bf9:	mov    QWORD PTR [rbx+0x110],r12
    5c00:	jmp    5b03 <decompress_cluster+0x33>
    5c05:	nop    DWORD PTR [rax]
    5c08:	mov    ebp,0xffffffff
    5c0d:	jmp    5b03 <decompress_cluster+0x33>
    5c12:	nop    WORD PTR [rax+rax*1+0x0]
    5c18:	call   33c0 <inflateEnd@plt>
    5c1d:	mov    ebp,0xffffffff
    5c22:	jmp    5b03 <decompress_cluster+0x33>
    5c27:	call   3190 <__stack_chk_fail@plt>
    5c2c:	nop    DWORD PTR [rax+0x0]

0000000000005c30 <qcow_set_key>:
    5c30:	push   r12
    5c32:	pxor   xmm0,xmm0
    5c36:	push   rbp
    5c37:	mov    rbp,rsi
    5c3a:	push   rbx
    5c3b:	sub    rsp,0x20
    5c3f:	mov    r12,QWORD PTR [rdi+0x40]
    5c43:	mov    rdi,rsi
    5c46:	mov    rax,QWORD PTR fs:0x28
    5c4f:	mov    QWORD PTR [rsp+0x18],rax
    5c54:	xor    eax,eax
    5c56:	movaps XMMWORD PTR [rsp],xmm0
    5c5a:	mov    rbx,rsp
    5c5d:	call   3180 <strlen@plt>
    5c62:	mov    edi,0x10
    5c67:	cmp    eax,0x10
    5c6a:	cmovle edi,eax
    5c6d:	test   eax,eax
    5c6f:	jle    5c90 <qcow_set_key+0x60>
    5c71:	xor    eax,eax
    5c73:	mov    rbx,rsp
    5c76:	nop    WORD PTR cs:[rax+rax*1+0x0]
    5c80:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
    5c85:	mov    BYTE PTR [rbx+rax*1],cl
    5c88:	add    rax,0x1
    5c8c:	cmp    edi,eax
    5c8e:	jg     5c80 <qcow_set_key+0x50>
    5c90:	mov    eax,DWORD PTR [r12+0x11c]
    5c98:	lea    rdx,[r12+0x120]
    5ca0:	mov    esi,0x80
    5ca5:	mov    rdi,rbx
    5ca8:	mov    DWORD PTR [r12+0x118],eax
    5cb0:	call   6bc0 <AES_set_encrypt_key>
    5cb5:	test   eax,eax
    5cb7:	jne    5cf1 <qcow_set_key+0xc1>
    5cb9:	lea    rdx,[r12+0x214]
    5cc1:	mov    esi,0x80
    5cc6:	mov    rdi,rbx
    5cc9:	call   6ff0 <AES_set_decrypt_key>
    5cce:	test   eax,eax
    5cd0:	setne  al
    5cd3:	movzx  eax,al
    5cd6:	neg    eax
    5cd8:	mov    rsi,QWORD PTR [rsp+0x18]
    5cdd:	xor    rsi,QWORD PTR fs:0x28
    5ce6:	jne    5cf8 <qcow_set_key+0xc8>
    5ce8:	add    rsp,0x20
    5cec:	pop    rbx
    5ced:	pop    rbp
    5cee:	pop    r12
    5cf0:	ret    
    5cf1:	mov    eax,0xffffffff
    5cf6:	jmp    5cd8 <qcow_set_key+0xa8>
    5cf8:	call   3190 <__stack_chk_fail@plt>
    5cfd:	nop    DWORD PTR [rax]

0000000000005d00 <get_cluster_offset.isra.1>:
    5d00:	push   r15
    5d02:	mov    r15d,edx
    5d05:	push   r14
    5d07:	mov    r14,rsi
    5d0a:	push   r13
    5d0c:	push   r12
    5d0e:	mov    r12,rsi
    5d11:	push   rbp
    5d12:	push   rbx
    5d13:	mov    rbx,rdi
    5d16:	sub    rsp,0x48
    5d1a:	mov    edi,DWORD PTR [rdi+0x14]
    5d1d:	mov    DWORD PTR [rsp+0x10],ecx
    5d21:	mov    ecx,DWORD PTR [rbx+0x8]
    5d24:	mov    DWORD PTR [rsp+0x8],r8d
    5d29:	mov    DWORD PTR [rsp+0xc],r9d
    5d2e:	add    ecx,edi
    5d30:	shr    r12,cl
    5d33:	movsxd r12,r12d
    5d36:	mov    rax,QWORD PTR fs:0x28
    5d3f:	mov    QWORD PTR [rsp+0x38],rax
    5d44:	xor    eax,eax
    5d46:	mov    rax,QWORD PTR [rbx+0x30]
    5d4a:	mov    rbp,QWORD PTR [rax+r12*8]
    5d4e:	test   rbp,rbp
    5d51:	jne    5d88 <get_cluster_offset.isra.1+0x88>
    5d53:	test   edx,edx
    5d55:	jne    5e30 <get_cluster_offset.isra.1+0x130>
    5d5b:	xor    r12d,r12d
    5d5e:	mov    rdi,QWORD PTR [rsp+0x38]
    5d63:	xor    rdi,QWORD PTR fs:0x28
    5d6c:	mov    rax,r12
    5d6f:	jne    617d <get_cluster_offset.isra.1+0x47d>
    5d75:	add    rsp,0x48
    5d79:	pop    rbx
    5d7a:	pop    rbp
    5d7b:	pop    r12
    5d7d:	pop    r13
    5d7f:	pop    r14
    5d81:	pop    r15
    5d83:	ret    
    5d84:	nop    DWORD PTR [rax+0x0]
    5d88:	xor    esi,esi
    5d8a:	xor    eax,eax
    5d8c:	nop    DWORD PTR [rax+0x0]
    5d90:	mov    edx,eax
    5d92:	cmp    QWORD PTR [rbx+rax*8+0x40],rbp
    5d97:	je     5ea0 <get_cluster_offset.isra.1+0x1a0>
    5d9d:	add    rax,0x1
    5da1:	cmp    rax,0x10
    5da5:	jne    5d90 <get_cluster_offset.isra.1+0x90>
    5da7:	xor    eax,eax
    5da9:	xor    r12d,r12d
    5dac:	mov    ecx,0xffffffff
    5db1:	nop    DWORD PTR [rax+0x0]
    5db8:	mov    edx,DWORD PTR [rbx+rax*4+0xc0]
    5dbf:	cmp    edx,ecx
    5dc1:	jae    5dc8 <get_cluster_offset.isra.1+0xc8>
    5dc3:	mov    ecx,edx
    5dc5:	movsxd r12,eax
    5dc8:	add    rax,0x1
    5dcc:	cmp    rax,0x10
    5dd0:	jne    5db8 <get_cluster_offset.isra.1+0xb8>
    5dd2:	mov    ecx,edi
    5dd4:	mov    eax,r12d
    5dd7:	mov    rdx,QWORD PTR [rbx+0x38]
    5ddb:	shl    eax,cl
    5ddd:	cdqe   
    5ddf:	lea    r13,[rdx+rax*8]
    5de3:	movsxd rdx,DWORD PTR [rbx+0x18]
    5de7:	mov    rcx,rdx
    5dea:	test   esi,esi
    5dec:	jne    60d0 <get_cluster_offset.isra.1+0x3d0>
    5df2:	mov    rdi,QWORD PTR [rbx]
    5df5:	shl    ecx,0x3
    5df8:	mov    rdx,r13
    5dfb:	mov    rsi,rbp
    5dfe:	call   17e40 <bdrv_pread>
    5e03:	movsxd rcx,DWORD PTR [rbx+0x18]
    5e07:	cdqe   
    5e09:	mov    rdx,rcx
    5e0c:	shl    rcx,0x3
    5e10:	cmp    rax,rcx
    5e13:	jne    5d5b <get_cluster_offset.isra.1+0x5b>
    5e19:	mov    QWORD PTR [rbx+r12*8+0x40],rbp
    5e1e:	mov    DWORD PTR [rbx+r12*4+0xc0],0x1
    5e2a:	jmp    5ed0 <get_cluster_offset.isra.1+0x1d0>
    5e2f:	nop
    5e30:	mov    rdi,QWORD PTR [rbx]
    5e33:	lea    r13,[r12*8+0x0]
    5e3b:	call   18500 <bdrv_getlength>
    5e40:	movsxd rcx,DWORD PTR [rbx+0xc]
    5e44:	mov    rdx,rcx
    5e47:	lea    rsi,[rax+rcx*1-0x1]
    5e4c:	mov    rax,QWORD PTR [rbx+0x30]
    5e50:	mov    ecx,0x8
    5e55:	neg    edx
    5e57:	movsxd rbp,edx
    5e5a:	lea    rdx,[rsp+0x30]
    5e5f:	and    rbp,rsi
    5e62:	mov    QWORD PTR [rax+r12*8],rbp
    5e66:	mov    rsi,QWORD PTR [rbx+0x28]
    5e6a:	mov    rax,rbp
    5e6d:	mov    rdi,QWORD PTR [rbx]
    5e70:	bswap  rax
    5e73:	mov    QWORD PTR [rsp+0x30],rax
    5e78:	add    rsi,r13
    5e7b:	call   18450 <bdrv_pwrite>
    5e80:	cmp    eax,0x8
    5e83:	jne    5d5b <get_cluster_offset.isra.1+0x5b>
    5e89:	mov    edi,DWORD PTR [rbx+0x14]
    5e8c:	mov    esi,0x1
    5e91:	jmp    5d8a <get_cluster_offset.isra.1+0x8a>
    5e96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    5ea0:	cdqe   
    5ea2:	lea    rcx,[rbx+rax*4]
    5ea6:	mov    eax,DWORD PTR [rcx+0xc0]
    5eac:	add    eax,0x1
    5eaf:	mov    DWORD PTR [rcx+0xc0],eax
    5eb5:	cmp    eax,0xffffffff
    5eb8:	je     6100 <get_cluster_offset.isra.1+0x400>
    5ebe:	mov    ecx,edi
    5ec0:	mov    rax,QWORD PTR [rbx+0x38]
    5ec4:	shl    edx,cl
    5ec6:	movsxd rdx,edx
    5ec9:	lea    r13,[rax+rdx*8]
    5ecd:	mov    edx,DWORD PTR [rbx+0x18]
    5ed0:	mov    ecx,DWORD PTR [rbx+0x8]
    5ed3:	mov    rsi,r14
    5ed6:	sub    edx,0x1
    5ed9:	shr    rsi,cl
    5edc:	and    edx,esi
    5ede:	movsxd rsi,edx
    5ee1:	lea    rax,[rsi*8+0x0]
    5ee9:	add    r13,rax
    5eec:	mov    QWORD PTR [rsp+0x18],rax
    5ef1:	mov    r12,QWORD PTR [r13+0x0]
    5ef5:	bswap  r12
    5ef8:	test   r12,r12
    5efb:	je     6060 <get_cluster_offset.isra.1+0x360>
    5f01:	jns    5d5e <get_cluster_offset.isra.1+0x5e>
    5f07:	cmp    r15d,0x1
    5f0b:	jne    5d5e <get_cluster_offset.isra.1+0x5e>
    5f11:	mov    eax,DWORD PTR [rsp+0xc]
    5f15:	sub    eax,DWORD PTR [rsp+0x8]
    5f19:	cmp    eax,DWORD PTR [rbx+0x10]
    5f1c:	jl     6120 <get_cluster_offset.isra.1+0x420>
    5f22:	mov    rdi,QWORD PTR [rbx]
    5f25:	call   18500 <bdrv_getlength>
    5f2a:	mov    rcx,rax
    5f2d:	movsxd rax,DWORD PTR [rbx+0xc]
    5f31:	mov    rdi,QWORD PTR [rbx]
    5f34:	mov    rdx,rax
    5f37:	lea    rcx,[rcx+rax*1-0x1]
    5f3c:	neg    edx
    5f3e:	movsxd r12,edx
    5f41:	and    r12,rcx
    5f44:	lea    rsi,[rax+r12*1]
    5f48:	call   184d0 <bdrv_truncate>
    5f4d:	mov    edx,DWORD PTR [rbx+0x118]
    5f53:	test   edx,edx
    5f55:	je     6099 <get_cluster_offset.isra.1+0x399>
    5f5b:	mov    eax,DWORD PTR [rsp+0xc]
    5f5f:	sub    eax,DWORD PTR [rsp+0x8]
    5f63:	cmp    eax,DWORD PTR [rbx+0x10]
    5f66:	jge    6099 <get_cluster_offset.isra.1+0x399>
    5f6c:	mov    eax,DWORD PTR [rbx+0xc]
    5f6f:	neg    eax
    5f71:	cdqe   
    5f73:	and    rax,r14
    5f76:	mov    r10,rax
    5f79:	mov    rax,QWORD PTR [rbx+0x108]
    5f80:	shr    r10,0x9
    5f84:	lea    rdi,[rax+0x208]
    5f8b:	mov    QWORD PTR [rsp+0x10],r10
    5f90:	mov    QWORD PTR [rax+0x200],0x0
    5f9b:	and    rdi,0xfffffffffffffff8
    5f9f:	mov    QWORD PTR [rax+0x3f8],0x0
    5faa:	sub    eax,edi
    5fac:	lea    ecx,[rax+0x400]
    5fb2:	xor    eax,eax
    5fb4:	shr    ecx,0x3
    5fb7:	rep stos QWORD PTR es:[rdi],rax
    5fba:	mov    eax,DWORD PTR [rbx+0x10]
    5fbd:	test   eax,eax
    5fbf:	jle    6099 <get_cluster_offset.isra.1+0x399>
    5fc5:	lea    rax,[rbx+0x120]
    5fcc:	mov    QWORD PTR [rsp+0x28],rbp
    5fd1:	xor    r14d,r14d
    5fd4:	mov    ebp,DWORD PTR [rsp+0x8]
    5fd8:	mov    QWORD PTR [rsp+0x20],rax
    5fdd:	mov    r15d,DWORD PTR [rsp+0xc]
    5fe2:	jmp    5ffb <get_cluster_offset.isra.1+0x2fb>
    5fe4:	nop    DWORD PTR [rax+0x0]
    5fe8:	cmp    r15d,r14d
    5feb:	jle    6000 <get_cluster_offset.isra.1+0x300>
    5fed:	add    r14,0x1
    5ff1:	cmp    DWORD PTR [rbx+0x10],r14d
    5ff5:	jle    6173 <get_cluster_offset.isra.1+0x473>
    5ffb:	cmp    ebp,r14d
    5ffe:	jle    5fe8 <get_cluster_offset.isra.1+0x2e8>
    6000:	mov    rax,QWORD PTR [rsp+0x10]
    6005:	mov    r9,QWORD PTR [rsp+0x20]
    600a:	mov    ecx,0x1
    600f:	mov    r8d,0x1
    6015:	mov    rsi,QWORD PTR [rbx+0x108]
    601c:	lea    rdi,[rax+r14*1]
    6020:	lea    rdx,[rsi+0x200]
    6027:	call   5a20 <encrypt_sectors.isra.0>
    602c:	mov    esi,r14d
    602f:	mov    rdi,QWORD PTR [rbx]
    6032:	mov    ecx,0x200
    6037:	shl    esi,0x9
    603a:	mov    rdx,QWORD PTR [rbx+0x108]
    6041:	movsxd rsi,esi
    6044:	add    rsi,r12
    6047:	call   18450 <bdrv_pwrite>
    604c:	cmp    eax,0x200
    6051:	je     5fed <get_cluster_offset.isra.1+0x2ed>
    6053:	mov    r12,0xffffffffffffffff
    605a:	jmp    5d5e <get_cluster_offset.isra.1+0x5e>
    605f:	nop
    6060:	test   r15d,r15d
    6063:	je     5d5b <get_cluster_offset.isra.1+0x5b>
    6069:	mov    rdi,QWORD PTR [rbx]
    606c:	call   18500 <bdrv_getlength>
    6071:	mov    rcx,rax
    6074:	cmp    r15d,0x1
    6078:	je     5f2d <get_cluster_offset.isra.1+0x22d>
    607e:	movsxd r14,DWORD PTR [rsp+0x10]
    6083:	mov    ecx,0x3f
    6088:	sub    ecx,DWORD PTR [rbx+0x8]
    608b:	shl    r14,cl
    608e:	or     r14,rax
    6091:	bts    r14,0x3f
    6096:	mov    r12,r14
    6099:	mov    rax,r12
    609c:	mov    rsi,QWORD PTR [rsp+0x18]
    60a1:	lea    rdx,[rsp+0x30]
    60a6:	mov    ecx,0x8
    60ab:	bswap  rax
    60ae:	mov    QWORD PTR [rsp+0x30],rax
    60b3:	mov    QWORD PTR [r13+0x0],rax
    60b7:	mov    rdi,QWORD PTR [rbx]
    60ba:	add    rsi,rbp
    60bd:	call   18450 <bdrv_pwrite>
    60c2:	cmp    eax,0x8
    60c5:	jne    5d5b <get_cluster_offset.isra.1+0x5b>
    60cb:	jmp    5d5e <get_cluster_offset.isra.1+0x5e>
    60d0:	shl    rdx,0x3
    60d4:	xor    esi,esi
    60d6:	mov    rdi,r13
    60d9:	call   3240 <memset@plt>
    60de:	mov    eax,DWORD PTR [rbx+0x18]
    60e1:	mov    rdi,QWORD PTR [rbx]
    60e4:	mov    rdx,r13
    60e7:	mov    rsi,rbp
    60ea:	lea    ecx,[rax*8+0x0]
    60f1:	call   18450 <bdrv_pwrite>
    60f6:	jmp    5e03 <get_cluster_offset.isra.1+0x103>
    60fb:	nop    DWORD PTR [rax+rax*1+0x0]
    6100:	lea    rax,[rbx+0xc0]
    6107:	lea    rcx,[rbx+0x100]
    610e:	xchg   ax,ax
    6110:	shr    DWORD PTR [rax],1
    6112:	add    rax,0x4
    6116:	cmp    rcx,rax
    6119:	jne    6110 <get_cluster_offset.isra.1+0x410>
    611b:	jmp    5ebe <get_cluster_offset.isra.1+0x1be>
    6120:	mov    rsi,r12
    6123:	mov    rdi,rbx
    6126:	call   5ad0 <decompress_cluster>
    612b:	test   eax,eax
    612d:	js     5d5b <get_cluster_offset.isra.1+0x5b>
    6133:	mov    rdi,QWORD PTR [rbx]
    6136:	call   18500 <bdrv_getlength>
    613b:	movsxd rdx,DWORD PTR [rbx+0xc]
    613f:	mov    rdi,QWORD PTR [rbx]
    6142:	mov    r12d,edx
    6145:	lea    rax,[rax+rdx*1-0x1]
    614a:	mov    rcx,rdx
    614d:	mov    rdx,QWORD PTR [rbx+0x100]
    6154:	neg    r12d
    6157:	movsxd r12,r12d
    615a:	and    r12,rax
    615d:	mov    rsi,r12
    6160:	call   18450 <bdrv_pwrite>
    6165:	cmp    eax,DWORD PTR [rbx+0xc]
    6168:	je     6099 <get_cluster_offset.isra.1+0x399>
    616e:	jmp    6053 <get_cluster_offset.isra.1+0x353>
    6173:	mov    rbp,QWORD PTR [rsp+0x28]
    6178:	jmp    6099 <get_cluster_offset.isra.1+0x399>
    617d:	call   3190 <__stack_chk_fail@plt>
    6182:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    618d:	nop    DWORD PTR [rax]

0000000000006190 <qcow_write_compressed>:
    6190:	push   r15
    6192:	push   r14
    6194:	push   r13
    6196:	push   r12
    6198:	mov    r12,rsi
    619b:	push   rbp
    619c:	push   rbx
    619d:	sub    rsp,0xb8
    61a4:	mov    rbx,QWORD PTR [rdi+0x40]
    61a8:	mov    QWORD PTR [rsp+0x8],rdi
    61ad:	mov    rsi,QWORD PTR fs:0x28
    61b6:	mov    QWORD PTR [rsp+0xa8],rsi
    61be:	xor    esi,esi
    61c0:	cmp    DWORD PTR [rbx+0x10],ecx
    61c3:	jne    6468 <qcow_write_compressed+0x2d8>
    61c9:	mov    ecx,DWORD PTR [rbx+0xc]
    61cc:	mov    r13,rdx
    61cf:	mov    edx,0x10624dd3
    61d4:	mov    eax,ecx
    61d6:	imul   edx
    61d8:	mov    eax,ecx
    61da:	sar    eax,0x1f
    61dd:	sar    edx,0x6
    61e0:	sub    edx,eax
    61e2:	lea    edi,[rcx+rdx*1+0x80]
    61e9:	movsxd rdi,edi
    61ec:	call   4cb0 <qemu_malloc>
    61f1:	mov    r14,rax
    61f4:	test   rax,rax
    61f7:	je     6495 <qcow_write_compressed+0x305>
    61fd:	lea    r15,[rsp+0x30]
    6202:	xor    eax,eax
    6204:	mov    ecx,0xe
    6209:	xor    r9d,r9d
    620c:	mov    rdi,r15
    620f:	mov    esi,0xffffffff
    6214:	mov    r8d,0x9
    621a:	mov    edx,0x8
    621f:	rep stos QWORD PTR es:[rdi],rax
    6222:	lea    rax,[rip+0x166fe]        # 1c927 <__PRETTY_FUNCTION__.13430+0x8f>
    6229:	push   0x70
    622b:	mov    rdi,r15
    622e:	push   rax
    622f:	mov    ecx,0xfffffff4
    6234:	call   32a0 <deflateInit2_@plt>
    6239:	mov    DWORD PTR [rsp+0x24],eax
    623d:	pop    rcx
    623e:	pop    rsi
    623f:	test   eax,eax
    6241:	jne    6450 <qcow_write_compressed+0x2c0>
    6247:	mov    eax,DWORD PTR [rbx+0xc]
    624a:	mov    esi,0x4
    624f:	mov    rdi,r15
    6252:	mov    QWORD PTR [rsp+0x30],r13
    6257:	mov    QWORD PTR [rsp+0x48],r14
    625c:	mov    DWORD PTR [rsp+0x38],eax
    6260:	mov    DWORD PTR [rsp+0x50],eax
    6264:	call   3230 <deflate@plt>
    6269:	mov    ebp,eax
    626b:	cmp    eax,0x1
    626e:	ja     6478 <qcow_write_compressed+0x2e8>
    6274:	mov    rax,QWORD PTR [rsp+0x48]
    6279:	mov    rdi,r15
    627c:	mov    QWORD PTR [rsp+0x18],rax
    6281:	call   3490 <deflateEnd@plt>
    6286:	cmp    ebp,0x1
    6289:	jne    63e8 <qcow_write_compressed+0x258>
    628f:	mov    rbp,QWORD PTR [rsp+0x18]
    6294:	mov    rax,QWORD PTR [rsp+0x8]
    6299:	sub    rbp,r14
    629c:	mov    r15,QWORD PTR [rax+0x40]
    62a0:	cmp    DWORD PTR [rbx+0xc],ebp
    62a3:	jg     6418 <qcow_write_compressed+0x288>
    62a9:	mov    ebp,DWORD PTR [rbx+0x10]
    62ac:	test   ebp,ebp
    62ae:	jle    6408 <qcow_write_compressed+0x278>
    62b4:	lea    rax,[r15+0x120]
    62bb:	mov    QWORD PTR [rsp+0x28],r14
    62c0:	mov    rdi,r15
    62c3:	mov    r14,r15
    62c6:	mov    QWORD PTR [rsp+0x20],rax
    62cb:	jmp    6335 <qcow_write_compressed+0x1a5>
    62cd:	nop    DWORD PTR [rax]
    62d0:	mov    rsi,QWORD PTR [r14+0x108]
    62d7:	mov    ecx,ebx
    62d9:	mov    rdx,r13
    62dc:	mov    rdi,r12
    62df:	mov    r9,QWORD PTR [rsp+0x20]
    62e4:	mov    r8d,0x1
    62ea:	mov    QWORD PTR [rsp+0x18],rax
    62ef:	call   5a20 <encrypt_sectors.isra.0>
    62f4:	mov    rax,QWORD PTR [rsp+0x18]
    62f9:	mov    rdi,QWORD PTR [r14]
    62fc:	mov    ecx,r15d
    62ff:	mov    rdx,QWORD PTR [r14+0x108]
    6306:	mov    rsi,rax
    6309:	call   18450 <bdrv_pwrite>
    630e:	cmp    eax,r15d
    6311:	jne    63ab <qcow_write_compressed+0x21b>
    6317:	sub    ebp,ebx
    6319:	cdqe   
    631b:	movsxd rbx,ebx
    631e:	add    r12,rbx
    6321:	add    r13,rax
    6324:	test   ebp,ebp
    6326:	jle    6400 <qcow_write_compressed+0x270>
    632c:	mov    rax,QWORD PTR [rsp+0x8]
    6331:	mov    rdi,QWORD PTR [rax+0x40]
    6335:	mov    ebx,DWORD PTR [r14+0x10]
    6339:	mov    rsi,r12
    633c:	mov    edx,0x1
    6341:	lea    r10d,[rbx-0x1]
    6345:	and    r10d,r12d
    6348:	sub    ebx,r10d
    634b:	mov    r8d,r10d
    634e:	mov    DWORD PTR [rsp+0x18],r10d
    6353:	cmp    ebx,ebp
    6355:	cmovg  ebx,ebp
    6358:	shl    rsi,0x9
    635c:	xor    ecx,ecx
    635e:	lea    r9d,[r10+rbx*1]
    6362:	call   5d00 <get_cluster_offset.isra.1>
    6367:	test   rax,rax
    636a:	je     63ab <qcow_write_compressed+0x21b>
    636c:	mov    r10d,DWORD PTR [rsp+0x18]
    6371:	mov    edx,DWORD PTR [r14+0x118]
    6378:	mov    r15d,ebx
    637b:	shl    r15d,0x9
    637f:	shl    r10d,0x9
    6383:	movsxd r10,r10d
    6386:	add    rax,r10
    6389:	test   edx,edx
    638b:	jne    62d0 <qcow_write_compressed+0x140>
    6391:	mov    rdi,QWORD PTR [r14]
    6394:	mov    ecx,r15d
    6397:	mov    rdx,r13
    639a:	mov    rsi,rax
    639d:	call   18450 <bdrv_pwrite>
    63a2:	cmp    eax,r15d
    63a5:	je     6317 <qcow_write_compressed+0x187>
    63ab:	mov    r14,QWORD PTR [rsp+0x28]
    63b0:	mov    rdi,r14
    63b3:	call   4ca0 <qemu_free>
    63b8:	mov    rcx,QWORD PTR [rsp+0xa8]
    63c0:	xor    rcx,QWORD PTR fs:0x28
    63c9:	mov    eax,DWORD PTR [rsp+0x14]
    63cd:	jne    64a2 <qcow_write_compressed+0x312>
    63d3:	add    rsp,0xb8
    63da:	pop    rbx
    63db:	pop    rbp
    63dc:	pop    r12
    63de:	pop    r13
    63e0:	pop    r14
    63e2:	pop    r15
    63e4:	ret    
    63e5:	nop    DWORD PTR [rax]
    63e8:	mov    rax,QWORD PTR [rsp+0x8]
    63ed:	mov    r15,QWORD PTR [rax+0x40]
    63f1:	jmp    62a9 <qcow_write_compressed+0x119>
    63f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    6400:	mov    r15,r14
    6403:	mov    r14,QWORD PTR [rsp+0x28]
    6408:	mov    QWORD PTR [r15+0x110],0xffffffffffffffff
    6413:	jmp    63b0 <qcow_write_compressed+0x220>
    6415:	nop    DWORD PTR [rax]
    6418:	mov    rsi,r12
    641b:	xor    r9d,r9d
    641e:	xor    r8d,r8d
    6421:	mov    ecx,ebp
    6423:	shl    rsi,0x9
    6427:	mov    edx,0x2
    642c:	mov    rdi,r15
    642f:	call   5d00 <get_cluster_offset.isra.1>
    6434:	mov    rdi,QWORD PTR [rbx]
    6437:	and    rax,QWORD PTR [rbx+0x20]
    643b:	mov    ecx,ebp
    643d:	mov    rsi,rax
    6440:	mov    rdx,r14
    6443:	call   18450 <bdrv_pwrite>
    6448:	cmp    eax,ebp
    644a:	je     63b0 <qcow_write_compressed+0x220>
    6450:	mov    rdi,r14
    6453:	call   4ca0 <qemu_free>
    6458:	mov    DWORD PTR [rsp+0x14],0xffffffff
    6460:	jmp    63b8 <qcow_write_compressed+0x228>
    6465:	nop    DWORD PTR [rax]
    6468:	mov    DWORD PTR [rsp+0x14],0xffffffea
    6470:	jmp    63b8 <qcow_write_compressed+0x228>
    6475:	nop    DWORD PTR [rax]
    6478:	mov    rdi,r14
    647b:	call   4ca0 <qemu_free>
    6480:	mov    rdi,r15
    6483:	call   3490 <deflateEnd@plt>
    6488:	mov    DWORD PTR [rsp+0x14],0xffffffff
    6490:	jmp    63b8 <qcow_write_compressed+0x228>
    6495:	mov    DWORD PTR [rsp+0x14],0xffffffff
    649d:	jmp    63b8 <qcow_write_compressed+0x228>
    64a2:	call   3190 <__stack_chk_fail@plt>
    64a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000064b0 <qcow_is_allocated>:
    64b0:	push   r13
    64b2:	xor    r9d,r9d
    64b5:	xor    r8d,r8d
    64b8:	push   r12
    64ba:	mov    r12,rcx
    64bd:	xor    ecx,ecx
    64bf:	push   rbp
    64c0:	mov    rbp,rsi
    64c3:	shl    rsi,0x9
    64c7:	push   rbx
    64c8:	mov    ebx,edx
    64ca:	xor    edx,edx
    64cc:	sub    rsp,0x8
    64d0:	mov    r13,QWORD PTR [rdi+0x40]
    64d4:	mov    rdi,r13
    64d7:	call   5d00 <get_cluster_offset.isra.1>
    64dc:	mov    edx,DWORD PTR [r13+0x10]
    64e0:	lea    esi,[rdx-0x1]
    64e3:	and    esi,ebp
    64e5:	sub    edx,esi
    64e7:	cmp    edx,ebx
    64e9:	cmovg  edx,ebx
    64ec:	test   rax,rax
    64ef:	setne  al
    64f2:	mov    DWORD PTR [r12],edx
    64f6:	add    rsp,0x8
    64fa:	movzx  eax,al
    64fd:	pop    rbx
    64fe:	pop    rbp
    64ff:	pop    r12
    6501:	pop    r13
    6503:	ret    
    6504:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    650f:	nop

0000000000006510 <qcow_aio_write_cb>:
    6510:	push   r14
    6512:	push   r13
    6514:	push   r12
    6516:	push   rbp
    6517:	mov    ebp,esi
    6519:	push   rbx
    651a:	mov    rcx,QWORD PTR [rdi+0x8]
    651e:	mov    rbx,rdi
    6521:	mov    r12,QWORD PTR [rcx+0x40]
    6525:	mov    QWORD PTR [rdi+0x50],0x0
    652d:	test   esi,esi
    652f:	js     6630 <qcow_aio_write_cb+0x120>
    6535:	movsxd rsi,DWORD PTR [rdi+0x3c]
    6539:	mov    edx,DWORD PTR [rdi+0x38]
    653c:	mov    rax,rsi
    653f:	sub    edx,esi
    6541:	add    rsi,QWORD PTR [rdi+0x28]
    6545:	shl    eax,0x9
    6548:	mov    DWORD PTR [rdi+0x38],edx
    654b:	cdqe   
    654d:	mov    QWORD PTR [rdi+0x28],rsi
    6551:	add    QWORD PTR [rdi+0x30],rax
    6555:	test   edx,edx
    6557:	je     65f0 <qcow_aio_write_cb+0xe0>
    655d:	mov    r9d,DWORD PTR [r12+0x10]
    6562:	lea    r13d,[r9-0x1]
    6566:	mov    eax,r9d
    6569:	and    r13d,esi
    656c:	sub    eax,r13d
    656f:	cmp    edx,eax
    6571:	jl     6640 <qcow_aio_write_cb+0x130>
    6577:	mov    DWORD PTR [rdi+0x3c],eax
    657a:	mov    rdi,QWORD PTR [rcx+0x40]
    657e:	shl    rsi,0x9
    6582:	mov    r8d,r13d
    6585:	xor    ecx,ecx
    6587:	mov    edx,0x1
    658c:	call   5d00 <get_cluster_offset.isra.1>
    6591:	mov    r14,rax
    6594:	test   rax,rax
    6597:	je     6680 <qcow_aio_write_cb+0x170>
    659d:	test   eax,0x1ff
    65a2:	jne    6680 <qcow_aio_write_cb+0x170>
    65a8:	mov    eax,DWORD PTR [r12+0x118]
    65b0:	test   eax,eax
    65b2:	jne    6650 <qcow_aio_write_cb+0x140>
    65b8:	mov    rdx,QWORD PTR [rbx+0x30]
    65bc:	mov    ecx,DWORD PTR [rbx+0x3c]
    65bf:	shr    r14,0x9
    65c3:	movsxd rsi,r13d
    65c6:	mov    rdi,QWORD PTR [r12]
    65ca:	add    rsi,r14
    65cd:	mov    r9,rbx
    65d0:	lea    r8,[rip+0xffffffffffffff39]        # 6510 <qcow_aio_write_cb>
    65d7:	call   194e0 <bdrv_aio_write>
    65dc:	mov    QWORD PTR [rbx+0x50],rax
    65e0:	test   rax,rax
    65e3:	je     6630 <qcow_aio_write_cb+0x120>
    65e5:	pop    rbx
    65e6:	pop    rbp
    65e7:	pop    r12
    65e9:	pop    r13
    65eb:	pop    r14
    65ed:	ret    
    65ee:	xchg   ax,ax
    65f0:	mov    rdi,QWORD PTR [rdi+0x18]
    65f4:	xor    esi,esi
    65f6:	call   QWORD PTR [rbx+0x10]
    65f9:	mov    rdi,rbx
    65fc:	pop    rbx
    65fd:	pop    rbp
    65fe:	pop    r12
    6600:	pop    r13
    6602:	pop    r14
    6604:	jmp    19ba0 <qemu_aio_release>
    6609:	nop    DWORD PTR [rax+0x0]
    6610:	movsxd rdi,DWORD PTR [r12+0xc]
    6615:	call   4d00 <qemu_mallocz>
    661a:	mov    rsi,rax
    661d:	mov    QWORD PTR [rbx+0x48],rax
    6621:	test   rax,rax
    6624:	jne    6659 <qcow_aio_write_cb+0x149>
    6626:	mov    ebp,0xfffffff4
    662b:	nop    DWORD PTR [rax+rax*1+0x0]
    6630:	mov    rdi,QWORD PTR [rbx+0x18]
    6634:	mov    esi,ebp
    6636:	jmp    65f6 <qcow_aio_write_cb+0xe6>
    6638:	nop    DWORD PTR [rax+rax*1+0x0]
    6640:	mov    DWORD PTR [rdi+0x3c],edx
    6643:	lea    r9d,[rdx+r13*1]
    6647:	jmp    657a <qcow_aio_write_cb+0x6a>
    664c:	nop    DWORD PTR [rax+0x0]
    6650:	mov    rsi,QWORD PTR [rbx+0x48]
    6654:	test   rsi,rsi
    6657:	je     6610 <qcow_aio_write_cb+0x100>
    6659:	mov    rdx,QWORD PTR [rbx+0x30]
    665d:	mov    ecx,DWORD PTR [rbx+0x3c]
    6660:	lea    r9,[r12+0x120]
    6668:	mov    r8d,0x1
    666e:	mov    rdi,QWORD PTR [rbx+0x28]
    6672:	call   5a20 <encrypt_sectors.isra.0>
    6677:	mov    rdx,QWORD PTR [rbx+0x48]
    667b:	jmp    65bc <qcow_aio_write_cb+0xac>
    6680:	mov    ebp,0xfffffffb
    6685:	mov    rdi,QWORD PTR [rbx+0x18]
    6689:	mov    esi,ebp
    668b:	jmp    65f6 <qcow_aio_write_cb+0xe6>

0000000000006690 <qcow_aio_write>:
    6690:	push   r13
    6692:	mov    r13d,ecx
    6695:	push   r12
    6697:	mov    r12,rsi
    669a:	mov    rsi,r8
    669d:	push   rbp
    669e:	mov    rbp,rdx
    66a1:	mov    rdx,r9
    66a4:	push   rbx
    66a5:	sub    rsp,0x8
    66a9:	mov    rax,QWORD PTR [rdi+0x40]
    66ad:	mov    QWORD PTR [rax+0x110],0xffffffffffffffff
    66b8:	call   199c0 <qemu_aio_get>
    66bd:	mov    rbx,rax
    66c0:	test   rax,rax
    66c3:	je     66ea <qcow_aio_write+0x5a>
    66c5:	mov    QWORD PTR [rax+0x50],0x0
    66cd:	xor    esi,esi
    66cf:	mov    rdi,rax
    66d2:	mov    QWORD PTR [rax+0x28],r12
    66d6:	mov    QWORD PTR [rax+0x30],rbp
    66da:	mov    DWORD PTR [rax+0x38],r13d
    66de:	mov    DWORD PTR [rax+0x3c],0x0
    66e5:	call   6510 <qcow_aio_write_cb>
    66ea:	add    rsp,0x8
    66ee:	mov    rax,rbx
    66f1:	pop    rbx
    66f2:	pop    rbp
    66f3:	pop    r12
    66f5:	pop    r13
    66f7:	ret    
    66f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000006700 <qcow_aio_read_cb>:
    6700:	push   r15
    6702:	push   r14
    6704:	push   r13
    6706:	mov    r13d,esi
    6709:	push   r12
    670b:	push   rbp
    670c:	push   rbx
    670d:	mov    rbx,rdi
    6710:	sub    rsp,0x8
    6714:	mov    r12,QWORD PTR [rdi+0x8]
    6718:	mov    rbp,QWORD PTR [r12+0x40]
    671d:	mov    QWORD PTR [rdi+0x50],0x0
    6725:	lea    r14,[rbp+0x214]
    672c:	test   esi,esi
    672e:	js     6850 <qcow_aio_read_cb+0x150>
    6734:	nop    DWORD PTR [rax+0x0]
    6738:	cmp    QWORD PTR [rbx+0x40],0x0
    673d:	mov    ecx,DWORD PTR [rbx+0x3c]
    6740:	mov    rax,QWORD PTR [rbx+0x30]
    6744:	mov    rdi,QWORD PTR [rbx+0x28]
    6748:	jle    6758 <qcow_aio_read_cb+0x58>
    674a:	mov    edx,DWORD PTR [rbp+0x118]
    6750:	test   edx,edx
    6752:	jne    6828 <qcow_aio_read_cb+0x128>
    6758:	mov    edx,DWORD PTR [rbx+0x38]
    675b:	movsxd rsi,ecx
    675e:	add    rsi,rdi
    6761:	sub    edx,ecx
    6763:	shl    ecx,0x9
    6766:	mov    QWORD PTR [rbx+0x28],rsi
    676a:	movsxd rcx,ecx
    676d:	mov    DWORD PTR [rbx+0x38],edx
    6770:	add    rcx,rax
    6773:	mov    QWORD PTR [rbx+0x30],rcx
    6777:	test   edx,edx
    6779:	je     6870 <qcow_aio_read_cb+0x170>
    677f:	mov    rdi,QWORD PTR [r12+0x40]
    6784:	shl    rsi,0x9
    6788:	xor    ecx,ecx
    678a:	xor    edx,edx
    678c:	xor    r9d,r9d
    678f:	xor    r8d,r8d
    6792:	call   5d00 <get_cluster_offset.isra.1>
    6797:	mov    rsi,QWORD PTR [rbx+0x28]
    679b:	mov    edx,DWORD PTR [rbx+0x38]
    679e:	mov    QWORD PTR [rbx+0x40],rax
    67a2:	mov    ecx,DWORD PTR [rbp+0x10]
    67a5:	lea    r15d,[rcx-0x1]
    67a9:	and    r15d,esi
    67ac:	sub    ecx,r15d
    67af:	cmp    ecx,edx
    67b1:	cmovg  ecx,edx
    67b4:	mov    DWORD PTR [rbx+0x3c],ecx
    67b7:	test   rax,rax
    67ba:	jne    67e8 <qcow_aio_read_cb+0xe8>
    67bc:	mov    rax,QWORD PTR [r12+0x850]
    67c4:	mov    rdi,QWORD PTR [rbx+0x30]
    67c8:	test   rax,rax
    67cb:	jne    68c0 <qcow_aio_read_cb+0x1c0>
    67d1:	shl    ecx,0x9
    67d4:	xor    esi,esi
    67d6:	movsxd rdx,ecx
    67d9:	call   3240 <memset@plt>
    67de:	jmp    6738 <qcow_aio_read_cb+0x38>
    67e3:	nop    DWORD PTR [rax+rax*1+0x0]
    67e8:	jns    6880 <qcow_aio_read_cb+0x180>
    67ee:	mov    rsi,rax
    67f1:	mov    rdi,rbp
    67f4:	call   5ad0 <decompress_cluster>
    67f9:	test   eax,eax
    67fb:	js     6850 <qcow_aio_read_cb+0x150>
    67fd:	mov    edx,DWORD PTR [rbx+0x3c]
    6800:	shl    r15d,0x9
    6804:	mov    rdi,QWORD PTR [rbx+0x30]
    6808:	movsxd rsi,r15d
    680b:	add    rsi,QWORD PTR [rbp+0x100]
    6812:	shl    edx,0x9
    6815:	movsxd rdx,edx
    6818:	call   33b0 <memcpy@plt>
    681d:	jmp    6738 <qcow_aio_read_cb+0x38>
    6822:	nop    WORD PTR [rax+rax*1+0x0]
    6828:	mov    rdx,rax
    682b:	mov    rsi,rax
    682e:	mov    r9,r14
    6831:	xor    r8d,r8d
    6834:	call   5a20 <encrypt_sectors.isra.0>
    6839:	mov    ecx,DWORD PTR [rbx+0x3c]
    683c:	mov    rdi,QWORD PTR [rbx+0x28]
    6840:	mov    rax,QWORD PTR [rbx+0x30]
    6844:	jmp    6758 <qcow_aio_read_cb+0x58>
    6849:	mov    r13d,0xfffffffb
    684f:	nop
    6850:	mov    rdi,QWORD PTR [rbx+0x18]
    6854:	mov    esi,r13d
    6857:	call   QWORD PTR [rbx+0x10]
    685a:	add    rsp,0x8
    685e:	mov    rdi,rbx
    6861:	pop    rbx
    6862:	pop    rbp
    6863:	pop    r12
    6865:	pop    r13
    6867:	pop    r14
    6869:	pop    r15
    686b:	jmp    19ba0 <qemu_aio_release>
    6870:	mov    rdi,QWORD PTR [rbx+0x18]
    6874:	xor    esi,esi
    6876:	jmp    6857 <qcow_aio_read_cb+0x157>
    6878:	nop    DWORD PTR [rax+rax*1+0x0]
    6880:	test   eax,0x1ff
    6885:	jne    6849 <qcow_aio_read_cb+0x149>
    6887:	shr    rax,0x9
    688b:	mov    rdx,QWORD PTR [rbx+0x30]
    688f:	movsxd rsi,r15d
    6892:	mov    rdi,QWORD PTR [rbp+0x0]
    6896:	add    rsi,rax
    6899:	mov    r9,rbx
    689c:	lea    r8,[rip+0xfffffffffffffe5d]        # 6700 <qcow_aio_read_cb>
    68a3:	call   193b0 <bdrv_aio_read>
    68a8:	mov    QWORD PTR [rbx+0x50],rax
    68ac:	test   rax,rax
    68af:	je     6850 <qcow_aio_read_cb+0x150>
    68b1:	add    rsp,0x8
    68b5:	pop    rbx
    68b6:	pop    rbp
    68b7:	pop    r12
    68b9:	pop    r13
    68bb:	pop    r14
    68bd:	pop    r15
    68bf:	ret    
    68c0:	mov    rdx,rdi
    68c3:	mov    r9,rbx
    68c6:	lea    r8,[rip+0xfffffffffffffe33]        # 6700 <qcow_aio_read_cb>
    68cd:	mov    rdi,rax
    68d0:	call   193b0 <bdrv_aio_read>
    68d5:	mov    QWORD PTR [rbx+0x50],rax
    68d9:	test   rax,rax
    68dc:	je     6850 <qcow_aio_read_cb+0x150>
    68e2:	add    rsp,0x8
    68e6:	pop    rbx
    68e7:	pop    rbp
    68e8:	pop    r12
    68ea:	pop    r13
    68ec:	pop    r14
    68ee:	pop    r15
    68f0:	ret    
    68f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    68fc:	nop    DWORD PTR [rax+0x0]

0000000000006900 <qcow_aio_read>:
    6900:	push   r13
    6902:	mov    r13d,ecx
    6905:	push   r12
    6907:	mov    r12,rsi
    690a:	mov    rsi,r8
    690d:	push   rbp
    690e:	mov    rbp,rdx
    6911:	mov    rdx,r9
    6914:	push   rbx
    6915:	sub    rsp,0x8
    6919:	call   199c0 <qemu_aio_get>
    691e:	mov    rbx,rax
    6921:	test   rax,rax
    6924:	je     6953 <qcow_aio_read+0x53>
    6926:	mov    QWORD PTR [rax+0x50],0x0
    692e:	xor    esi,esi
    6930:	mov    rdi,rax
    6933:	mov    QWORD PTR [rax+0x28],r12
    6937:	mov    QWORD PTR [rax+0x30],rbp
    693b:	mov    DWORD PTR [rax+0x38],r13d
    693f:	mov    DWORD PTR [rax+0x3c],0x0
    6946:	mov    QWORD PTR [rax+0x40],0x0
    694e:	call   6700 <qcow_aio_read_cb>
    6953:	add    rsp,0x8
    6957:	mov    rax,rbx
    695a:	pop    rbx
    695b:	pop    rbp
    695c:	pop    r12
    695e:	pop    r13
    6960:	ret    
    6961:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    696c:	nop    DWORD PTR [rax+0x0]

0000000000006970 <qcow_probe>:
    6970:	xor    eax,eax
    6972:	cmp    esi,0x2f
    6975:	ja     6980 <qcow_probe+0x10>
    6977:	ret    
    6978:	nop    DWORD PTR [rax+rax*1+0x0]
    6980:	cmp    DWORD PTR [rdi],0xfb494651
    6986:	jne    6977 <qcow_probe+0x7>
    6988:	cmp    DWORD PTR [rdi+0x4],0x1000000
    698f:	mov    edx,0x64
    6994:	cmove  eax,edx
    6997:	ret    
    6998:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000069a0 <qcow_create>:
    69a0:	push   r15
    69a2:	mov    r15,rdx
    69a5:	mov    edx,0x1a4
    69aa:	push   r14
    69ac:	push   r13
    69ae:	push   r12
    69b0:	push   rbp
    69b1:	push   rbx
    69b2:	mov    rbx,rsi
    69b5:	mov    esi,0x241
    69ba:	sub    rsp,0x68
    69be:	mov    DWORD PTR [rsp+0x4],ecx
    69c2:	mov    rax,QWORD PTR fs:0x28
    69cb:	mov    QWORD PTR [rsp+0x58],rax
    69d0:	xor    eax,eax
    69d2:	call   3500 <open64@plt>
    69d7:	test   eax,eax
    69d9:	js     6bb1 <qcow_create+0x211>
    69df:	mov    ebp,eax
    69e1:	shl    rbx,0x9
    69e5:	lea    r9,[rsp+0x20]
    69ea:	pxor   xmm0,xmm0
    69ee:	movabs rax,0x1000000fb494651
    69f8:	movups XMMWORD PTR [rsp+0x28],xmm0
    69fd:	mov    QWORD PTR [rsp+0x20],rax
    6a02:	mov    rax,rbx
    6a05:	movups XMMWORD PTR [r9+0x18],xmm0
    6a0a:	bswap  rax
    6a0d:	mov    QWORD PTR [r9+0x28],0x0
    6a15:	mov    QWORD PTR [rsp+0x38],rax
    6a1a:	test   r15,r15
    6a1d:	je     6b90 <qcow_create+0x1f0>
    6a23:	mov    ecx,0x5
    6a28:	lea    rdi,[rip+0x15eff]        # 1c92e <__PRETTY_FUNCTION__.13430+0x96>
    6a2f:	mov    rsi,r15
    6a32:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    6a34:	seta   dl
    6a37:	sbb    dl,0x0
    6a3a:	movsx  ecx,dl
    6a3d:	test   ecx,ecx
    6a3f:	jne    6b40 <qcow_create+0x1a0>
    6a45:	movabs rax,0x3000000000000000
    6a4f:	mov    r12d,0x30
    6a55:	xor    r15d,r15d
    6a58:	mov    edx,0xc09
    6a5d:	mov    WORD PTR [rsp+0x40],dx
    6a62:	lea    r13,[rbx+0x1fffff]
    6a69:	mov    QWORD PTR [rsp+0x48],rax
    6a6e:	sar    r13,0x15
    6a72:	mov    r14d,r13d
    6a75:	test   BYTE PTR [rsp+0x4],0x1
    6a7a:	je     6a84 <qcow_create+0xe4>
    6a7c:	mov    DWORD PTR [rsp+0x44],0x1000000
    6a84:	mov    edx,0x30
    6a89:	mov    rsi,r9
    6a8c:	mov    edi,ebp
    6a8e:	mov    DWORD PTR [rsp+0x4],ecx
    6a92:	call   46d0 <qemu_write_ok>
    6a97:	test   eax,eax
    6a99:	js     6aff <qcow_create+0x15f>
    6a9b:	test   r15,r15
    6a9e:	mov    ecx,DWORD PTR [rsp+0x4]
    6aa2:	je     6ab5 <qcow_create+0x115>
    6aa4:	movsxd rdx,ecx
    6aa7:	mov    rsi,r15
    6aaa:	mov    edi,ebp
    6aac:	call   46d0 <qemu_write_ok>
    6ab1:	test   eax,eax
    6ab3:	js     6aff <qcow_create+0x15f>
    6ab5:	movsxd rsi,r12d
    6ab8:	xor    edx,edx
    6aba:	mov    edi,ebp
    6abc:	xor    ebx,ebx
    6abe:	call   3620 <lseek64@plt>
    6ac3:	lea    r12,[rsp+0x18]
    6ac8:	mov    QWORD PTR [rsp+0x18],0x0
    6ad1:	test   r13d,r13d
    6ad4:	jg     6aec <qcow_create+0x14c>
    6ad6:	jmp    6b80 <qcow_create+0x1e0>
    6adb:	nop    DWORD PTR [rax+rax*1+0x0]
    6ae0:	add    ebx,0x1
    6ae3:	cmp    r14d,ebx
    6ae6:	je     6b80 <qcow_create+0x1e0>
    6aec:	mov    edx,0x8
    6af1:	mov    rsi,r12
    6af4:	mov    edi,ebp
    6af6:	call   46d0 <qemu_write_ok>
    6afb:	test   eax,eax
    6afd:	jns    6ae0 <qcow_create+0x140>
    6aff:	call   30b0 <__errno_location@plt>
    6b04:	mov    edi,ebp
    6b06:	mov    r12d,DWORD PTR [rax]
    6b09:	mov    rbx,rax
    6b0c:	call   3260 <close@plt>
    6b11:	mov    eax,0xffffffff
    6b16:	mov    DWORD PTR [rbx],r12d
    6b19:	mov    rcx,QWORD PTR [rsp+0x58]
    6b1e:	xor    rcx,QWORD PTR fs:0x28
    6b27:	jne    6bbb <qcow_create+0x21b>
    6b2d:	add    rsp,0x68
    6b31:	pop    rbx
    6b32:	pop    rbp
    6b33:	pop    r12
    6b35:	pop    r13
    6b37:	pop    r14
    6b39:	pop    r15
    6b3b:	ret    
    6b3c:	nop    DWORD PTR [rax+0x0]
    6b40:	movabs rax,0x3000000000000000
    6b4a:	mov    rdi,r15
    6b4d:	mov    QWORD PTR [rsp+0x8],r9
    6b52:	mov    QWORD PTR [rsp+0x28],rax
    6b57:	call   3180 <strlen@plt>
    6b5c:	mov    r9,QWORD PTR [rsp+0x8]
    6b61:	lea    r12d,[rax+0x37]
    6b65:	mov    edx,eax
    6b67:	mov    ecx,eax
    6b69:	and    r12d,0xfffffff8
    6b6d:	bswap  edx
    6b6f:	mov    DWORD PTR [rsp+0x30],edx
    6b73:	movsxd rax,r12d
    6b76:	bswap  rax
    6b79:	jmp    6a58 <qcow_create+0xb8>
    6b7e:	xchg   ax,ax
    6b80:	mov    edi,ebp
    6b82:	call   3260 <close@plt>
    6b87:	xor    eax,eax
    6b89:	jmp    6b19 <qcow_create+0x179>
    6b8b:	nop    DWORD PTR [rax+rax*1+0x0]
    6b90:	mov    eax,0x90c
    6b95:	mov    r12d,0x30
    6b9b:	xor    ecx,ecx
    6b9d:	mov    WORD PTR [rsp+0x40],ax
    6ba2:	movabs rax,0x3000000000000000
    6bac:	jmp    6a62 <qcow_create+0xc2>
    6bb1:	mov    eax,0xffffffff
    6bb6:	jmp    6b19 <qcow_create+0x179>
    6bbb:	call   3190 <__stack_chk_fail@plt>

0000000000006bc0 <AES_set_encrypt_key>:
    6bc0:	test   rdi,rdi
    6bc3:	je     6fd9 <AES_set_encrypt_key+0x419>
    6bc9:	test   rdx,rdx
    6bcc:	je     6fd9 <AES_set_encrypt_key+0x419>
    6bd2:	mov    eax,esi
    6bd4:	and    eax,0xffffffbf
    6bd7:	cmp    eax,0x80
    6bdc:	jne    6d60 <AES_set_encrypt_key+0x1a0>
    6be2:	cmp    esi,0x80
    6be8:	jne    6d80 <AES_set_encrypt_key+0x1c0>
    6bee:	mov    DWORD PTR [rdx+0xf0],0xa
    6bf8:	push   r14
    6bfa:	push   r12
    6bfc:	push   rbp
    6bfd:	push   rbx
    6bfe:	movzx  eax,BYTE PTR [rdi]
    6c01:	movzx  r8d,BYTE PTR [rdi+0x1]
    6c06:	shl    eax,0x18
    6c09:	shl    r8d,0x10
    6c0d:	xor    eax,r8d
    6c10:	movzx  r8d,BYTE PTR [rdi+0x3]
    6c15:	xor    eax,r8d
    6c18:	movzx  r8d,BYTE PTR [rdi+0x2]
    6c1d:	shl    r8d,0x8
    6c21:	xor    r8d,eax
    6c24:	mov    DWORD PTR [rdx],r8d
    6c27:	movzx  r9d,BYTE PTR [rdi+0x4]
    6c2c:	movzx  eax,BYTE PTR [rdi+0x5]
    6c30:	shl    r9d,0x18
    6c34:	shl    eax,0x10
    6c37:	xor    r9d,eax
    6c3a:	movzx  eax,BYTE PTR [rdi+0x7]
    6c3e:	xor    r9d,eax
    6c41:	movzx  eax,BYTE PTR [rdi+0x6]
    6c45:	shl    eax,0x8
    6c48:	xor    r9d,eax
    6c4b:	mov    DWORD PTR [rdx+0x4],r9d
    6c4f:	movzx  r10d,BYTE PTR [rdi+0x8]
    6c54:	movzx  eax,BYTE PTR [rdi+0x9]
    6c58:	shl    r10d,0x18
    6c5c:	shl    eax,0x10
    6c5f:	xor    r10d,eax
    6c62:	movzx  eax,BYTE PTR [rdi+0xb]
    6c66:	xor    r10d,eax
    6c69:	movzx  eax,BYTE PTR [rdi+0xa]
    6c6d:	shl    eax,0x8
    6c70:	xor    r10d,eax
    6c73:	mov    DWORD PTR [rdx+0x8],r10d
    6c77:	movzx  ecx,BYTE PTR [rdi+0xc]
    6c7b:	movzx  eax,BYTE PTR [rdi+0xd]
    6c7f:	shl    ecx,0x18
    6c82:	shl    eax,0x10
    6c85:	xor    ecx,eax
    6c87:	movzx  eax,BYTE PTR [rdi+0xf]
    6c8b:	xor    ecx,eax
    6c8d:	movzx  eax,BYTE PTR [rdi+0xe]
    6c91:	shl    eax,0x8
    6c94:	xor    ecx,eax
    6c96:	mov    DWORD PTR [rdx+0xc],ecx
    6c99:	cmp    esi,0x80
    6c9f:	je     6da0 <AES_set_encrypt_key+0x1e0>
    6ca5:	movzx  eax,BYTE PTR [rdi+0x10]
    6ca9:	movzx  r11d,BYTE PTR [rdi+0x11]
    6cae:	shl    eax,0x18
    6cb1:	shl    r11d,0x10
    6cb5:	xor    eax,r11d
    6cb8:	movzx  r11d,BYTE PTR [rdi+0x13]
    6cbd:	xor    eax,r11d
    6cc0:	movzx  r11d,BYTE PTR [rdi+0x12]
    6cc5:	shl    r11d,0x8
    6cc9:	xor    eax,r11d
    6ccc:	mov    DWORD PTR [rdx+0x10],eax
    6ccf:	movzx  ebx,BYTE PTR [rdi+0x14]
    6cd3:	movzx  eax,BYTE PTR [rdi+0x15]
    6cd7:	shl    ebx,0x18
    6cda:	shl    eax,0x10
    6cdd:	xor    ebx,eax
    6cdf:	movzx  eax,BYTE PTR [rdi+0x17]
    6ce3:	xor    ebx,eax
    6ce5:	movzx  eax,BYTE PTR [rdi+0x16]
    6ce9:	shl    eax,0x8
    6cec:	xor    ebx,eax
    6cee:	mov    DWORD PTR [rdx+0x14],ebx
    6cf1:	cmp    esi,0xc0
    6cf7:	je     6e30 <AES_set_encrypt_key+0x270>
    6cfd:	movzx  eax,BYTE PTR [rdi+0x18]
    6d01:	movzx  r11d,BYTE PTR [rdi+0x19]
    6d06:	shl    eax,0x18
    6d09:	shl    r11d,0x10
    6d0d:	xor    eax,r11d
    6d10:	movzx  r11d,BYTE PTR [rdi+0x1b]
    6d15:	xor    eax,r11d
    6d18:	movzx  r11d,BYTE PTR [rdi+0x1a]
    6d1d:	shl    r11d,0x8
    6d21:	xor    eax,r11d
    6d24:	mov    DWORD PTR [rdx+0x18],eax
    6d27:	movzx  ebx,BYTE PTR [rdi+0x1c]
    6d2b:	movzx  eax,BYTE PTR [rdi+0x1d]
    6d2f:	shl    ebx,0x18
    6d32:	shl    eax,0x10
    6d35:	xor    ebx,eax
    6d37:	movzx  eax,BYTE PTR [rdi+0x1f]
    6d3b:	xor    ebx,eax
    6d3d:	movzx  eax,BYTE PTR [rdi+0x1e]
    6d41:	shl    eax,0x8
    6d44:	xor    ebx,eax
    6d46:	mov    DWORD PTR [rdx+0x1c],ebx
    6d49:	cmp    esi,0x100
    6d4f:	je     6ee0 <AES_set_encrypt_key+0x320>
    6d55:	pop    rbx
    6d56:	xor    eax,eax
    6d58:	pop    rbp
    6d59:	pop    r12
    6d5b:	pop    r14
    6d5d:	ret    
    6d5e:	xchg   ax,ax
    6d60:	cmp    esi,0x100
    6d66:	jne    6fdf <AES_set_encrypt_key+0x41f>
    6d6c:	mov    DWORD PTR [rdx+0xf0],0xe
    6d76:	jmp    6bf8 <AES_set_encrypt_key+0x38>
    6d7b:	nop    DWORD PTR [rax+rax*1+0x0]
    6d80:	cmp    esi,0xc0
    6d86:	jne    6d6c <AES_set_encrypt_key+0x1ac>
    6d88:	mov    DWORD PTR [rdx+0xf0],0xc
    6d92:	jmp    6bf8 <AES_set_encrypt_key+0x38>
    6d97:	nop    WORD PTR [rax+rax*1+0x0]
    6da0:	lea    rdi,[rip+0x15b9d]        # 1c944 <rcon+0x4>
    6da7:	add    rdx,0x10
    6dab:	mov    r11d,0x1000000
    6db1:	lea    rbx,[rdi+0x24]
    6db5:	lea    rsi,[rip+0x16fc4]        # 1dd80 <Te4>
    6dbc:	jmp    6dcb <AES_set_encrypt_key+0x20b>
    6dbe:	xchg   ax,ax
    6dc0:	mov    r11d,DWORD PTR [rdi]
    6dc3:	add    rdx,0x10
    6dc7:	add    rdi,0x4
    6dcb:	movzx  eax,cl
    6dce:	mov    ebp,ecx
    6dd0:	mov    eax,DWORD PTR [rsi+rax*4]
    6dd3:	shr    ebp,0x18
    6dd6:	movzx  ebp,BYTE PTR [rsi+rbp*4]
    6dda:	and    eax,0xff00
    6ddf:	or     eax,ebp
    6de1:	mov    ebp,ecx
    6de3:	shr    ebp,0x10
    6de6:	movzx  ebp,bpl
    6dea:	mov    ebp,DWORD PTR [rsi+rbp*4]
    6ded:	and    ebp,0xff000000
    6df3:	xor    eax,ebp
    6df5:	movzx  ebp,ch
    6df8:	mov    ebp,DWORD PTR [rsi+rbp*4]
    6dfb:	and    ebp,0xff0000
    6e01:	xor    eax,ebp
    6e03:	xor    eax,r8d
    6e06:	xor    eax,r11d
    6e09:	xor    r9d,eax
    6e0c:	mov    r8d,eax
    6e0f:	mov    DWORD PTR [rdx],eax
    6e11:	xor    r10d,r9d
    6e14:	mov    DWORD PTR [rdx+0x4],r9d
    6e18:	xor    ecx,r10d
    6e1b:	mov    DWORD PTR [rdx+0x8],r10d
    6e1f:	mov    DWORD PTR [rdx+0xc],ecx
    6e22:	cmp    rbx,rdi
    6e25:	jne    6dc0 <AES_set_encrypt_key+0x200>
    6e27:	pop    rbx
    6e28:	xor    eax,eax
    6e2a:	pop    rbp
    6e2b:	pop    r12
    6e2d:	pop    r14
    6e2f:	ret    
    6e30:	lea    rdi,[rip+0x15b09]        # 1c940 <rcon>
    6e37:	add    rdx,0x18
    6e3b:	mov    r11d,0x1000000
    6e41:	lea    r14,[rdi+0x20]
    6e45:	lea    rsi,[rip+0x16f34]        # 1dd80 <Te4>
    6e4c:	jmp    6e64 <AES_set_encrypt_key+0x2a4>
    6e4e:	xchg   ax,ax
    6e50:	mov    eax,DWORD PTR [rdx-0x8]
    6e53:	add    rdx,0x18
    6e57:	xor    eax,ecx
    6e59:	xor    ebx,eax
    6e5b:	mov    DWORD PTR [rdx-0x8],eax
    6e5e:	mov    DWORD PTR [rdx-0x4],ebx
    6e61:	mov    r11d,DWORD PTR [rdi]
    6e64:	movzx  eax,bl
    6e67:	mov    r12d,ebx
    6e6a:	movzx  ebp,bh
    6e6d:	add    rdi,0x4
    6e71:	mov    eax,DWORD PTR [rsi+rax*4]
    6e74:	shr    r12d,0x18
    6e78:	movzx  r12d,BYTE PTR [rsi+r12*4]
    6e7d:	and    eax,0xff00
    6e82:	or     eax,r12d
    6e85:	mov    r12d,ebx
    6e88:	shr    r12d,0x10
    6e8c:	movzx  r12d,r12b
    6e90:	mov    r12d,DWORD PTR [rsi+r12*4]
    6e94:	and    r12d,0xff000000
    6e9b:	xor    eax,r12d
    6e9e:	mov    r12d,DWORD PTR [rsi+rbp*4]
    6ea2:	and    r12d,0xff0000
    6ea9:	xor    eax,r12d
    6eac:	xor    eax,r8d
    6eaf:	xor    eax,r11d
    6eb2:	xor    r9d,eax
    6eb5:	mov    r8d,eax
    6eb8:	mov    DWORD PTR [rdx],eax
    6eba:	xor    r10d,r9d
    6ebd:	mov    DWORD PTR [rdx+0x4],r9d
    6ec1:	xor    ecx,r10d
    6ec4:	mov    DWORD PTR [rdx+0x8],r10d
    6ec8:	mov    DWORD PTR [rdx+0xc],ecx
    6ecb:	cmp    r14,rdi
    6ece:	jne    6e50 <AES_set_encrypt_key+0x290>
    6ed0:	pop    rbx
    6ed1:	xor    eax,eax
    6ed3:	pop    rbp
    6ed4:	pop    r12
    6ed6:	pop    r14
    6ed8:	ret    
    6ed9:	nop    DWORD PTR [rax+0x0]
    6ee0:	lea    rdi,[rip+0x15a59]        # 1c940 <rcon>
    6ee7:	add    rdx,0x20
    6eeb:	mov    r11d,0x1000000
    6ef1:	lea    r14,[rdi+0x1c]
    6ef5:	lea    rsi,[rip+0x16e84]        # 1dd80 <Te4>
    6efc:	jmp    6f60 <AES_set_encrypt_key+0x3a0>
    6efe:	xchg   ax,ax
    6f00:	mov    eax,ecx
    6f02:	movzx  ebp,ch
    6f05:	movzx  r12d,cl
    6f09:	add    rdx,0x20
    6f0d:	shr    eax,0x10
    6f10:	mov    r11d,DWORD PTR [rsi+rbp*4]
    6f14:	movzx  r12d,BYTE PTR [rsi+r12*4]
    6f19:	movzx  eax,al
    6f1c:	mov    eax,DWORD PTR [rsi+rax*4]
    6f1f:	and    r11d,0xff00
    6f26:	and    eax,0xff0000
    6f2b:	or     eax,r11d
    6f2e:	mov    r11d,ecx
    6f31:	xor    eax,DWORD PTR [rdx-0x30]
    6f34:	shr    r11d,0x18
    6f38:	mov    r11d,DWORD PTR [rsi+r11*4]
    6f3c:	and    r11d,0xff000000
    6f43:	or     r11d,r12d
    6f46:	xor    eax,r11d
    6f49:	mov    DWORD PTR [rdx-0x10],eax
    6f4c:	xor    eax,DWORD PTR [rdx-0x2c]
    6f4f:	mov    DWORD PTR [rdx-0xc],eax
    6f52:	xor    eax,DWORD PTR [rdx-0x28]
    6f55:	xor    ebx,eax
    6f57:	mov    DWORD PTR [rdx-0x8],eax
    6f5a:	mov    DWORD PTR [rdx-0x4],ebx
    6f5d:	mov    r11d,DWORD PTR [rdi]
    6f60:	movzx  eax,bl
    6f63:	mov    r12d,ebx
    6f66:	movzx  ebp,bh
    6f69:	add    rdi,0x4
    6f6d:	mov    eax,DWORD PTR [rsi+rax*4]
    6f70:	shr    r12d,0x18
    6f74:	movzx  r12d,BYTE PTR [rsi+r12*4]
    6f79:	and    eax,0xff00
    6f7e:	or     eax,r12d
    6f81:	mov    r12d,ebx
    6f84:	shr    r12d,0x10
    6f88:	movzx  r12d,r12b
    6f8c:	mov    r12d,DWORD PTR [rsi+r12*4]
    6f90:	and    r12d,0xff000000
    6f97:	xor    eax,r12d
    6f9a:	mov    r12d,DWORD PTR [rsi+rbp*4]
    6f9e:	and    r12d,0xff0000
    6fa5:	xor    eax,r12d
    6fa8:	xor    eax,r8d
    6fab:	xor    eax,r11d
    6fae:	xor    r9d,eax
    6fb1:	mov    r8d,eax
    6fb4:	mov    DWORD PTR [rdx],eax
    6fb6:	xor    r10d,r9d
    6fb9:	mov    DWORD PTR [rdx+0x4],r9d
    6fbd:	xor    ecx,r10d
    6fc0:	mov    DWORD PTR [rdx+0x8],r10d
    6fc4:	mov    DWORD PTR [rdx+0xc],ecx
    6fc7:	cmp    r14,rdi
    6fca:	jne    6f00 <AES_set_encrypt_key+0x340>
    6fd0:	pop    rbx
    6fd1:	xor    eax,eax
    6fd3:	pop    rbp
    6fd4:	pop    r12
    6fd6:	pop    r14
    6fd8:	ret    
    6fd9:	mov    eax,0xffffffff
    6fde:	ret    
    6fdf:	mov    eax,0xfffffffe
    6fe4:	ret    
    6fe5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000006ff0 <AES_set_decrypt_key>:
    6ff0:	push   r14
    6ff2:	mov    r14,rdx
    6ff5:	push   rbp
    6ff6:	push   rbx
    6ff7:	call   6bc0 <AES_set_encrypt_key>
    6ffc:	test   eax,eax
    6ffe:	js     71d1 <AES_set_decrypt_key+0x1e1>
    7004:	mov    eax,DWORD PTR [r14+0xf0]
    700b:	mov    rdx,r14
    700e:	lea    r9d,[rax*4+0x0]
    7016:	test   r9d,r9d
    7019:	jle    7081 <AES_set_decrypt_key+0x91>
    701b:	movsxd rax,r9d
    701e:	mov    rcx,r14
    7021:	xor    esi,esi
    7023:	lea    rax,[r14+rax*4]
    7027:	nop    WORD PTR [rax+rax*1+0x0]
    7030:	mov    edi,DWORD PTR [rcx]
    7032:	mov    r8d,DWORD PTR [rax]
    7035:	add    esi,0x4
    7038:	add    rcx,0x10
    703c:	sub    rax,0x10
    7040:	mov    DWORD PTR [rcx-0x10],r8d
    7044:	mov    r8d,DWORD PTR [rax+0x14]
    7048:	mov    DWORD PTR [rax+0x10],edi
    704b:	mov    edi,DWORD PTR [rcx-0xc]
    704e:	mov    DWORD PTR [rcx-0xc],r8d
    7052:	mov    r8d,DWORD PTR [rax+0x18]
    7056:	mov    DWORD PTR [rax+0x14],edi
    7059:	mov    edi,DWORD PTR [rcx-0x8]
    705c:	mov    DWORD PTR [rcx-0x8],r8d
    7060:	mov    r8d,DWORD PTR [rax+0x1c]
    7064:	mov    DWORD PTR [rax+0x18],edi
    7067:	mov    edi,DWORD PTR [rcx-0x4]
    706a:	mov    DWORD PTR [rcx-0x4],r8d
    706e:	mov    DWORD PTR [rax+0x1c],edi
    7071:	mov    edi,r9d
    7074:	sub    edi,esi
    7076:	cmp    esi,edi
    7078:	jl     7030 <AES_set_decrypt_key+0x40>
    707a:	mov    eax,DWORD PTR [r14+0xf0]
    7081:	cmp    eax,0x1
    7084:	jle    71cf <AES_set_decrypt_key+0x1df>
    708a:	mov    r10d,0x1
    7090:	lea    r9,[rip+0x168e9]        # 1d980 <Td0>
    7097:	lea    rax,[rip+0x16ce2]        # 1dd80 <Te4>
    709e:	lea    r8,[rip+0x15cdb]        # 1cd80 <Td3>
    70a5:	lea    rdi,[rip+0x164d4]        # 1d580 <Td1>
    70ac:	lea    rsi,[rip+0x160cd]        # 1d180 <Td2>
    70b3:	nop    DWORD PTR [rax+rax*1+0x0]
    70b8:	add    rdx,0x10
    70bc:	mov    r11d,DWORD PTR [rdx]
    70bf:	add    r10d,0x1
    70c3:	mov    ecx,r11d
    70c6:	movzx  ebp,r11b
    70ca:	mov    ebx,r11d
    70cd:	shr    ecx,0x18
    70d0:	movzx  ebp,BYTE PTR [rax+rbp*4]
    70d4:	movzx  ebx,bh
    70d7:	movzx  ecx,BYTE PTR [rax+rcx*4]
    70db:	mov    ecx,DWORD PTR [r9+rcx*4]
    70df:	xor    ecx,DWORD PTR [r8+rbp*4]
    70e3:	mov    ebp,r11d
    70e6:	shr    ebp,0x10
    70e9:	movzx  r11d,BYTE PTR [rax+rbx*4]
    70ee:	movzx  ebp,bpl
    70f2:	movzx  ebp,BYTE PTR [rax+rbp*4]
    70f6:	xor    ecx,DWORD PTR [rdi+rbp*4]
    70f9:	xor    ecx,DWORD PTR [rsi+r11*4]
    70fd:	mov    r11d,DWORD PTR [rdx+0x4]
    7101:	mov    DWORD PTR [rdx],ecx
    7103:	mov    ecx,r11d
    7106:	movzx  ebp,r11b
    710a:	mov    ebx,r11d
    710d:	shr    ecx,0x18
    7110:	movzx  ebp,BYTE PTR [rax+rbp*4]
    7114:	movzx  ebx,bh
    7117:	movzx  ecx,BYTE PTR [rax+rcx*4]
    711b:	mov    ecx,DWORD PTR [r9+rcx*4]
    711f:	xor    ecx,DWORD PTR [r8+rbp*4]
    7123:	mov    ebp,r11d
    7126:	shr    ebp,0x10
    7129:	movzx  r11d,BYTE PTR [rax+rbx*4]
    712e:	movzx  ebp,bpl
    7132:	movzx  ebp,BYTE PTR [rax+rbp*4]
    7136:	xor    ecx,DWORD PTR [rdi+rbp*4]
    7139:	xor    ecx,DWORD PTR [rsi+r11*4]
    713d:	mov    r11d,DWORD PTR [rdx+0x8]
    7141:	mov    DWORD PTR [rdx+0x4],ecx
    7144:	mov    ecx,r11d
    7147:	movzx  ebp,r11b
    714b:	mov    ebx,r11d
    714e:	shr    ecx,0x18
    7151:	movzx  ebp,BYTE PTR [rax+rbp*4]
    7155:	movzx  ebx,bh
    7158:	movzx  ecx,BYTE PTR [rax+rcx*4]
    715c:	mov    ecx,DWORD PTR [r9+rcx*4]
    7160:	xor    ecx,DWORD PTR [r8+rbp*4]
    7164:	mov    ebp,r11d
    7167:	shr    ebp,0x10
    716a:	movzx  r11d,BYTE PTR [rax+rbx*4]
    716f:	movzx  ebp,bpl
    7173:	movzx  ebp,BYTE PTR [rax+rbp*4]
    7177:	xor    ecx,DWORD PTR [rdi+rbp*4]
    717a:	xor    ecx,DWORD PTR [rsi+r11*4]
    717e:	mov    r11d,DWORD PTR [rdx+0xc]
    7182:	mov    DWORD PTR [rdx+0x8],ecx
    7185:	mov    ecx,r11d
    7188:	movzx  ebp,r11b
    718c:	mov    ebx,r11d
    718f:	shr    ecx,0x18
    7192:	movzx  ebx,bh
    7195:	movzx  ecx,BYTE PTR [rax+rcx*4]
    7199:	movzx  ebp,BYTE PTR [rax+rbp*4]
    719d:	mov    ecx,DWORD PTR [r9+rcx*4]
    71a1:	xor    ecx,DWORD PTR [r8+rbp*4]
    71a5:	mov    ebp,r11d
    71a8:	shr    ebp,0x10
    71ab:	movzx  r11d,BYTE PTR [rax+rbx*4]
    71b0:	movzx  ebp,bpl
    71b4:	movzx  ebp,BYTE PTR [rax+rbp*4]
    71b8:	xor    ecx,DWORD PTR [rdi+rbp*4]
    71bb:	xor    ecx,DWORD PTR [rsi+r11*4]
    71bf:	mov    DWORD PTR [rdx+0xc],ecx
    71c2:	cmp    DWORD PTR [r14+0xf0],r10d
    71c9:	jg     70b8 <AES_set_decrypt_key+0xc8>
    71cf:	xor    eax,eax
    71d1:	pop    rbx
    71d2:	pop    rbp
    71d3:	pop    r14
    71d5:	ret    
    71d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000071e0 <AES_encrypt>:
    71e0:	push   r15
    71e2:	lea    r11,[rip+0x17b97]        # 1ed80 <Te0>
    71e9:	lea    r10,[rip+0x16f90]        # 1e180 <Te3>
    71f0:	push   r14
    71f2:	lea    r9,[rip+0x17787]        # 1e980 <Te1>
    71f9:	lea    r8,[rip+0x17380]        # 1e580 <Te2>
    7200:	push   r13
    7202:	push   r12
    7204:	push   rbp
    7205:	push   rbx
    7206:	mov    rbx,rdx
    7209:	movzx  eax,BYTE PTR [rdi]
    720c:	movzx  ebp,BYTE PTR [rdi+0x4]
    7210:	movzx  r12d,BYTE PTR [rdi+0x8]
    7215:	shl    eax,0x18
    7218:	mov    QWORD PTR [rsp-0x18],rdx
    721d:	movzx  edx,BYTE PTR [rdi+0x1]
    7221:	shl    ebp,0x18
    7224:	shl    r12d,0x18
    7228:	mov    QWORD PTR [rsp-0x10],rsi
    722d:	movzx  esi,BYTE PTR [rdi+0xc]
    7231:	shl    edx,0x10
    7234:	xor    eax,edx
    7236:	movzx  edx,BYTE PTR [rdi+0x3]
    723a:	shl    esi,0x18
    723d:	xor    eax,edx
    723f:	movzx  edx,BYTE PTR [rdi+0x2]
    7243:	shl    edx,0x8
    7246:	xor    eax,edx
    7248:	movzx  edx,BYTE PTR [rdi+0x5]
    724c:	xor    eax,DWORD PTR [rbx]
    724e:	shl    edx,0x10
    7251:	xor    ebp,edx
    7253:	movzx  edx,BYTE PTR [rdi+0x7]
    7257:	xor    ebp,edx
    7259:	movzx  edx,BYTE PTR [rdi+0x6]
    725d:	shl    edx,0x8
    7260:	xor    ebp,edx
    7262:	movzx  edx,BYTE PTR [rdi+0x9]
    7266:	xor    ebp,DWORD PTR [rbx+0x4]
    7269:	shl    edx,0x10
    726c:	xor    r12d,edx
    726f:	movzx  edx,BYTE PTR [rdi+0xb]
    7273:	xor    r12d,edx
    7276:	movzx  edx,BYTE PTR [rdi+0xa]
    727a:	shl    edx,0x8
    727d:	xor    r12d,edx
    7280:	movzx  edx,BYTE PTR [rdi+0xd]
    7284:	xor    r12d,DWORD PTR [rbx+0x8]
    7288:	shl    edx,0x10
    728b:	xor    esi,edx
    728d:	movzx  edx,BYTE PTR [rdi+0xf]
    7291:	xor    esi,edx
    7293:	movzx  edx,BYTE PTR [rdi+0xe]
    7297:	mov    rdi,rbx
    729a:	shl    edx,0x8
    729d:	xor    esi,edx
    729f:	xor    esi,DWORD PTR [rbx+0xc]
    72a2:	mov    ebx,DWORD PTR [rbx+0xf0]
    72a8:	mov    edx,ebx
    72aa:	mov    DWORD PTR [rsp-0x40],ebx
    72ae:	sar    edx,1
    72b0:	sub    edx,0x1
    72b3:	mov    DWORD PTR [rsp-0x4],edx
    72b7:	add    rdx,0x1
    72bb:	shl    rdx,0x5
    72bf:	add    rdx,rdi
    72c2:	mov    QWORD PTR [rsp-0x20],rdx
    72c7:	jmp    7346 <AES_encrypt+0x166>
    72c9:	nop    DWORD PTR [rax+0x0]
    72d0:	mov    edx,DWORD PTR [rsp-0x3c]
    72d4:	mov    eax,DWORD PTR [r11+r12*4]
    72d8:	mov    esi,esi
    72da:	mov    ebx,ebx
    72dc:	xor    eax,DWORD PTR [r10+r13*4]
    72e0:	xor    eax,r14d
    72e3:	xor    eax,DWORD PTR [r9+rbp*4]
    72e7:	mov    ebp,DWORD PTR [r11+rdx*4]
    72eb:	xor    eax,DWORD PTR [r8+rsi*4]
    72ef:	mov    edx,DWORD PTR [rsp-0x38]
    72f3:	mov    esi,DWORD PTR [rsp-0x30]
    72f7:	xor    ebp,DWORD PTR [r10+rsi*4]
    72fb:	xor    ebp,DWORD PTR [rdi+0x4]
    72fe:	xor    ebp,DWORD PTR [r9+rdx*4]
    7302:	mov    edx,DWORD PTR [rsp-0x34]
    7306:	xor    ebp,DWORD PTR [r8+rdx*4]
    730a:	mov    edx,DWORD PTR [rsp-0x2c]
    730e:	mov    r12d,DWORD PTR [r11+rdx*4]
    7312:	mov    edx,DWORD PTR [rsp-0x24]
    7316:	xor    r12d,DWORD PTR [r10+r15*4]
    731a:	mov    r15d,DWORD PTR [rsp-0x28]
    731f:	xor    r12d,DWORD PTR [rdi+0x8]
    7323:	xor    r12d,DWORD PTR [r9+r15*4]
    7327:	xor    r12d,DWORD PTR [r8+rdx*4]
    732b:	mov    edx,DWORD PTR [rsp-0x8]
    732f:	mov    esi,DWORD PTR [r11+rdx*4]
    7333:	mov    edx,DWORD PTR [rsp-0x40]
    7337:	xor    esi,DWORD PTR [r10+rcx*4]
    733b:	xor    esi,DWORD PTR [rdi+0xc]
    733e:	xor    esi,DWORD PTR [r9+rdx*4]
    7342:	xor    esi,DWORD PTR [r8+rbx*4]
    7346:	mov    edx,eax
    7348:	movzx  ecx,sil
    734c:	mov    ebx,r12d
    734f:	movzx  r13d,al
    7353:	shr    edx,0x18
    7356:	add    rdi,0x20
    735a:	mov    edx,DWORD PTR [r11+rdx*4]
    735e:	xor    edx,DWORD PTR [r10+rcx*4]
    7362:	mov    ecx,ebp
    7364:	shr    ecx,0x10
    7367:	xor    edx,DWORD PTR [rdi-0x10]
    736a:	movzx  ecx,cl
    736d:	xor    edx,DWORD PTR [r9+rcx*4]
    7371:	movzx  ecx,bh
    7374:	xor    edx,DWORD PTR [r8+rcx*4]
    7378:	mov    ecx,ebp
    737a:	shr    ecx,0x18
    737d:	mov    r14d,edx
    7380:	movzx  edx,ah
    7383:	shr    eax,0x10
    7386:	mov    ebx,DWORD PTR [r11+rcx*4]
    738a:	mov    ecx,r12d
    738d:	xor    ebx,DWORD PTR [r10+r13*4]
    7391:	movzx  r13d,bpl
    7395:	shr    ecx,0x10
    7398:	xor    ebx,DWORD PTR [rdi-0xc]
    739b:	mov    DWORD PTR [rsp-0x40],r14d
    73a0:	movzx  eax,al
    73a3:	movzx  ecx,cl
    73a6:	xor    ebx,DWORD PTR [r9+rcx*4]
    73aa:	mov    ecx,esi
    73ac:	movzx  ecx,ch
    73af:	xor    ebx,DWORD PTR [r8+rcx*4]
    73b3:	mov    ecx,r12d
    73b6:	movzx  r12d,r12b
    73ba:	shr    ecx,0x18
    73bd:	mov    ecx,DWORD PTR [r11+rcx*4]
    73c1:	xor    ecx,DWORD PTR [r10+r13*4]
    73c5:	mov    r13d,esi
    73c8:	shr    esi,0x18
    73cb:	shr    r13d,0x10
    73cf:	xor    ecx,DWORD PTR [rdi-0x8]
    73d2:	mov    esi,DWORD PTR [r11+rsi*4]
    73d6:	movzx  r13d,r13b
    73da:	xor    esi,DWORD PTR [r10+r12*4]
    73de:	xor    esi,DWORD PTR [rdi-0x4]
    73e1:	mov    r12d,r14d
    73e4:	xor    ecx,DWORD PTR [r9+r13*4]
    73e8:	xor    ecx,DWORD PTR [r8+rdx*4]
    73ec:	mov    edx,ebp
    73ee:	mov    ebp,ebx
    73f0:	mov    r15d,ecx
    73f3:	xor    esi,DWORD PTR [r9+rax*4]
    73f7:	mov    r14d,DWORD PTR [rdi]
    73fa:	shr    ebp,0x10
    73fd:	shr    r15d,0x10
    7401:	mov    eax,esi
    7403:	movzx  esi,dh
    7406:	mov    edx,ebx
    7408:	movzx  r15d,r15b
    740c:	xor    eax,DWORD PTR [r8+rsi*4]
    7410:	shr    edx,0x18
    7413:	movzx  esi,ch
    7416:	mov    DWORD PTR [rsp-0x3c],edx
    741a:	movzx  edx,ah
    741d:	movzx  r13d,al
    7421:	shr    r12d,0x18
    7425:	mov    DWORD PTR [rsp-0x38],r15d
    742a:	movzx  r15d,BYTE PTR [rsp-0x40]
    7430:	movzx  ebp,bpl
    7434:	mov    DWORD PTR [rsp-0x34],edx
    7438:	mov    DWORD PTR [rsp-0x30],r15d
    743d:	mov    r15d,ecx
    7440:	movzx  ecx,cl
    7443:	shr    r15d,0x18
    7447:	mov    DWORD PTR [rsp-0x2c],r15d
    744c:	mov    r15d,eax
    744f:	shr    eax,0x18
    7452:	shr    r15d,0x10
    7456:	mov    DWORD PTR [rsp-0x8],eax
    745a:	movzx  edx,r15b
    745e:	movzx  r15d,bl
    7462:	movzx  ebx,bh
    7465:	mov    DWORD PTR [rsp-0x28],edx
    7469:	mov    edx,DWORD PTR [rsp-0x40]
    746d:	movzx  edx,dh
    7470:	mov    DWORD PTR [rsp-0x24],edx
    7474:	mov    edx,DWORD PTR [rsp-0x40]
    7478:	shr    edx,0x10
    747b:	movzx  eax,dl
    747e:	mov    DWORD PTR [rsp-0x40],eax
    7482:	cmp    rdi,QWORD PTR [rsp-0x20]
    7487:	jne    72d0 <AES_encrypt+0xf0>
    748d:	mov    edx,DWORD PTR [rsp-0x4]
    7491:	mov    r8,QWORD PTR [rsp-0x18]
    7496:	mov    eax,r14d
    7499:	mov    r14d,esi
    749c:	lea    rdi,[rip+0x168dd]        # 1dd80 <Te4>
    74a3:	mov    r9,QWORD PTR [rsp-0x10]
    74a8:	mov    ebx,ebx
    74aa:	add    rdx,0x1
    74ae:	movzx  esi,BYTE PTR [rdi+r13*4]
    74b3:	shl    rdx,0x5
    74b7:	add    r8,rdx
    74ba:	mov    edx,DWORD PTR [rdi+r14*4]
    74be:	and    edx,0xff00
    74c4:	or     edx,esi
    74c6:	mov    esi,edx
    74c8:	mov    edx,DWORD PTR [rdi+rbp*4]
    74cb:	xor    esi,eax
    74cd:	mov    eax,DWORD PTR [rdi+r12*4]
    74d1:	and    edx,0xff0000
    74d7:	and    eax,0xff000000
    74dc:	or     eax,edx
    74de:	xor    eax,esi
    74e0:	bswap  eax
    74e2:	mov    DWORD PTR [r9],eax
    74e5:	mov    eax,DWORD PTR [rsp-0x34]
    74e9:	mov    edx,DWORD PTR [rdi+rax*4]
    74ec:	mov    eax,DWORD PTR [rsp-0x30]
    74f0:	movzx  eax,BYTE PTR [rdi+rax*4]
    74f4:	and    edx,0xff00
    74fa:	or     edx,eax
    74fc:	mov    eax,DWORD PTR [rsp-0x3c]
    7500:	xor    edx,DWORD PTR [r8+0x4]
    7504:	mov    eax,DWORD PTR [rdi+rax*4]
    7507:	and    eax,0xff000000
    750c:	mov    esi,eax
    750e:	mov    eax,DWORD PTR [rsp-0x38]
    7512:	mov    eax,DWORD PTR [rdi+rax*4]
    7515:	and    eax,0xff0000
    751a:	or     eax,esi
    751c:	xor    edx,eax
    751e:	mov    eax,DWORD PTR [rsp-0x24]
    7522:	bswap  edx
    7524:	mov    DWORD PTR [r9+0x4],edx
    7528:	movzx  edx,BYTE PTR [rdi+r15*4]
    752d:	mov    eax,DWORD PTR [rdi+rax*4]
    7530:	mov    r15d,DWORD PTR [rsp-0x28]
    7535:	and    eax,0xff00
    753a:	mov    esi,DWORD PTR [rdi+r15*4]
    753e:	or     eax,edx
    7540:	xor    eax,DWORD PTR [r8+0x8]
    7544:	mov    edx,eax
    7546:	mov    eax,DWORD PTR [rsp-0x2c]
    754a:	and    esi,0xff0000
    7550:	mov    eax,DWORD PTR [rdi+rax*4]
    7553:	and    eax,0xff000000
    7558:	or     eax,esi
    755a:	mov    esi,DWORD PTR [rsp-0x8]
    755e:	xor    eax,edx
    7560:	movzx  edx,BYTE PTR [rdi+rcx*4]
    7564:	bswap  eax
    7566:	mov    DWORD PTR [r9+0x8],eax
    756a:	mov    eax,DWORD PTR [rdi+rbx*4]
    756d:	and    eax,0xff00
    7572:	or     eax,edx
    7574:	mov    edx,DWORD PTR [rdi+rsi*4]
    7577:	xor    eax,DWORD PTR [r8+0xc]
    757b:	mov    ecx,edx
    757d:	mov    edx,DWORD PTR [rsp-0x40]
    7581:	and    ecx,0xff000000
    7587:	mov    edx,DWORD PTR [rdi+rdx*4]
    758a:	and    edx,0xff0000
    7590:	or     edx,ecx
    7592:	xor    eax,edx
    7594:	bswap  eax
    7596:	mov    DWORD PTR [r9+0xc],eax
    759a:	pop    rbx
    759b:	pop    rbp
    759c:	pop    r12
    759e:	pop    r13
    75a0:	pop    r14
    75a2:	pop    r15
    75a4:	ret    
    75a5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000075b0 <AES_decrypt>:
    75b0:	push   r15
    75b2:	lea    r11,[rip+0x163c7]        # 1d980 <Td0>
    75b9:	lea    r10,[rip+0x157c0]        # 1cd80 <Td3>
    75c0:	push   r14
    75c2:	lea    r9,[rip+0x15fb7]        # 1d580 <Td1>
    75c9:	lea    r8,[rip+0x15bb0]        # 1d180 <Td2>
    75d0:	push   r13
    75d2:	push   r12
    75d4:	push   rbp
    75d5:	push   rbx
    75d6:	mov    rbx,rdx
    75d9:	movzx  eax,BYTE PTR [rdi]
    75dc:	movzx  ebp,BYTE PTR [rdi+0x4]
    75e0:	movzx  r12d,BYTE PTR [rdi+0x8]
    75e5:	shl    eax,0x18
    75e8:	mov    QWORD PTR [rsp-0x18],rdx
    75ed:	movzx  edx,BYTE PTR [rdi+0x1]
    75f1:	shl    ebp,0x18
    75f4:	shl    r12d,0x18
    75f8:	mov    QWORD PTR [rsp-0x10],rsi
    75fd:	movzx  esi,BYTE PTR [rdi+0xc]
    7601:	shl    edx,0x10
    7604:	xor    eax,edx
    7606:	movzx  edx,BYTE PTR [rdi+0x3]
    760a:	shl    esi,0x18
    760d:	xor    eax,edx
    760f:	movzx  edx,BYTE PTR [rdi+0x2]
    7613:	shl    edx,0x8
    7616:	xor    eax,edx
    7618:	movzx  edx,BYTE PTR [rdi+0x5]
    761c:	xor    eax,DWORD PTR [rbx]
    761e:	shl    edx,0x10
    7621:	xor    ebp,edx
    7623:	movzx  edx,BYTE PTR [rdi+0x7]
    7627:	xor    ebp,edx
    7629:	movzx  edx,BYTE PTR [rdi+0x6]
    762d:	shl    edx,0x8
    7630:	xor    ebp,edx
    7632:	movzx  edx,BYTE PTR [rdi+0x9]
    7636:	xor    ebp,DWORD PTR [rbx+0x4]
    7639:	shl    edx,0x10
    763c:	xor    r12d,edx
    763f:	movzx  edx,BYTE PTR [rdi+0xb]
    7643:	xor    r12d,edx
    7646:	movzx  edx,BYTE PTR [rdi+0xa]
    764a:	shl    edx,0x8
    764d:	xor    r12d,edx
    7650:	movzx  edx,BYTE PTR [rdi+0xd]
    7654:	xor    r12d,DWORD PTR [rbx+0x8]
    7658:	shl    edx,0x10
    765b:	xor    esi,edx
    765d:	movzx  edx,BYTE PTR [rdi+0xf]
    7661:	xor    esi,edx
    7663:	movzx  edx,BYTE PTR [rdi+0xe]
    7667:	mov    rdi,rbx
    766a:	shl    edx,0x8
    766d:	xor    esi,edx
    766f:	xor    esi,DWORD PTR [rbx+0xc]
    7672:	mov    ebx,DWORD PTR [rbx+0xf0]
    7678:	mov    edx,ebx
    767a:	mov    DWORD PTR [rsp-0x44],ebx
    767e:	sar    edx,1
    7680:	sub    edx,0x1
    7683:	mov    DWORD PTR [rsp-0x4],edx
    7687:	add    rdx,0x1
    768b:	shl    rdx,0x5
    768f:	add    rdx,rdi
    7692:	mov    QWORD PTR [rsp-0x20],rdx
    7697:	jmp    7716 <AES_decrypt+0x166>
    7699:	nop    DWORD PTR [rax+0x0]
    76a0:	mov    edx,DWORD PTR [rsp-0x40]
    76a4:	mov    eax,DWORD PTR [r11+r12*4]
    76a8:	mov    esi,esi
    76aa:	mov    ebx,ebx
    76ac:	xor    eax,DWORD PTR [r10+r13*4]
    76b0:	xor    eax,r14d
    76b3:	xor    eax,DWORD PTR [r9+rbp*4]
    76b7:	mov    ebp,DWORD PTR [r11+rdx*4]
    76bb:	xor    eax,DWORD PTR [r8+rsi*4]
    76bf:	mov    edx,DWORD PTR [rsp-0x3c]
    76c3:	mov    esi,DWORD PTR [rsp-0x34]
    76c7:	xor    ebp,DWORD PTR [r10+rsi*4]
    76cb:	xor    ebp,DWORD PTR [rdi+0x4]
    76ce:	xor    ebp,DWORD PTR [r9+rdx*4]
    76d2:	mov    edx,DWORD PTR [rsp-0x38]
    76d6:	xor    ebp,DWORD PTR [r8+rdx*4]
    76da:	mov    edx,DWORD PTR [rsp-0x30]
    76de:	mov    r12d,DWORD PTR [r11+rdx*4]
    76e2:	mov    edx,DWORD PTR [rsp-0x28]
    76e6:	xor    r12d,DWORD PTR [r10+r15*4]
    76ea:	mov    r15d,DWORD PTR [rsp-0x2c]
    76ef:	xor    r12d,DWORD PTR [rdi+0x8]
    76f3:	xor    r12d,DWORD PTR [r9+r15*4]
    76f7:	xor    r12d,DWORD PTR [r8+rdx*4]
    76fb:	mov    edx,DWORD PTR [rsp-0x24]
    76ff:	mov    esi,DWORD PTR [r11+rdx*4]
    7703:	mov    edx,DWORD PTR [rsp-0x8]
    7707:	xor    esi,DWORD PTR [r10+rcx*4]
    770b:	xor    esi,DWORD PTR [rdi+0xc]
    770e:	xor    esi,DWORD PTR [r9+rdx*4]
    7712:	xor    esi,DWORD PTR [r8+rbx*4]
    7716:	mov    edx,eax
    7718:	movzx  ebx,bpl
    771c:	movzx  r13d,r12b
    7720:	movzx  r14d,al
    7724:	shr    edx,0x18
    7727:	add    rdi,0x20
    772b:	mov    ecx,DWORD PTR [r11+rdx*4]
    772f:	mov    edx,esi
    7731:	xor    ecx,DWORD PTR [r10+rbx*4]
    7735:	mov    ebx,r12d
    7738:	shr    edx,0x10
    773b:	xor    ecx,DWORD PTR [rdi-0x10]
    773e:	movzx  edx,dl
    7741:	xor    ecx,DWORD PTR [r9+rdx*4]
    7745:	movzx  edx,bh
    7748:	xor    ecx,DWORD PTR [r8+rdx*4]
    774c:	mov    edx,ebp
    774e:	shr    edx,0x18
    7751:	mov    r15d,ecx
    7754:	movzx  ecx,ah
    7757:	mov    ebx,DWORD PTR [r11+rdx*4]
    775b:	mov    edx,eax
    775d:	xor    ebx,DWORD PTR [r10+r13*4]
    7761:	movzx  r13d,sil
    7765:	shr    edx,0x10
    7768:	xor    ebx,DWORD PTR [rdi-0xc]
    776b:	mov    DWORD PTR [rsp-0x44],r15d
    7770:	movzx  edx,dl
    7773:	xor    ebx,DWORD PTR [r9+rdx*4]
    7777:	mov    edx,esi
    7779:	shr    esi,0x18
    777c:	movzx  edx,dh
    777f:	mov    eax,DWORD PTR [r11+rsi*4]
    7783:	xor    eax,DWORD PTR [r10+r14*4]
    7787:	xor    ebx,DWORD PTR [r8+rdx*4]
    778b:	mov    edx,r12d
    778e:	shr    r12d,0x10
    7792:	xor    eax,DWORD PTR [rdi-0x4]
    7795:	shr    edx,0x18
    7798:	movzx  r12d,r12b
    779c:	mov    edx,DWORD PTR [r11+rdx*4]
    77a0:	xor    edx,DWORD PTR [r10+r13*4]
    77a4:	mov    r13d,ebp
    77a7:	shr    r13d,0x10
    77ab:	xor    eax,DWORD PTR [r9+r12*4]
    77af:	mov    r12d,r15d
    77b2:	shr    r15d,0x10
    77b6:	movzx  r13d,r13b
    77ba:	xor    edx,DWORD PTR [rdi-0x8]
    77bd:	movzx  r15d,r15b
    77c1:	shr    r12d,0x18
    77c5:	xor    edx,DWORD PTR [r9+r13*4]
    77c9:	mov    r14d,DWORD PTR [rdi]
    77cc:	mov    DWORD PTR [rsp-0x3c],r15d
    77d1:	movzx  r13d,bl
    77d5:	xor    edx,DWORD PTR [r8+rcx*4]
    77d9:	mov    ecx,ebp
    77db:	movzx  r15d,dl
    77df:	movzx  esi,ch
    77e2:	mov    ecx,ebx
    77e4:	mov    DWORD PTR [rsp-0x34],r15d
    77e9:	mov    r15d,edx
    77ec:	xor    eax,DWORD PTR [r8+rsi*4]
    77f0:	shr    ecx,0x18
    77f3:	shr    r15d,0x18
    77f7:	mov    DWORD PTR [rsp-0x40],ecx
    77fb:	movzx  ecx,ah
    77fe:	mov    ebp,eax
    7800:	mov    DWORD PTR [rsp-0x30],r15d
    7805:	mov    r15d,ebx
    7808:	shr    ebp,0x10
    780b:	movzx  esi,dh
    780e:	shr    r15d,0x10
    7812:	mov    DWORD PTR [rsp-0x38],ecx
    7816:	movzx  ebp,bpl
    781a:	movzx  ebx,bh
    781d:	movzx  ecx,r15b
    7821:	movzx  r15d,al
    7825:	shr    eax,0x18
    7828:	mov    DWORD PTR [rsp-0x2c],ecx
    782c:	mov    ecx,DWORD PTR [rsp-0x44]
    7830:	shr    edx,0x10
    7833:	mov    DWORD PTR [rsp-0x24],eax
    7837:	movzx  eax,dl
    783a:	movzx  ecx,ch
    783d:	mov    DWORD PTR [rsp-0x8],eax
    7841:	mov    DWORD PTR [rsp-0x28],ecx
    7845:	movzx  ecx,BYTE PTR [rsp-0x44]
    784a:	cmp    rdi,QWORD PTR [rsp-0x20]
    784f:	jne    76a0 <AES_decrypt+0xf0>
    7855:	mov    edx,DWORD PTR [rsp-0x4]
    7859:	mov    r8,QWORD PTR [rsp-0x18]
    785e:	mov    eax,r14d
    7861:	mov    r14d,esi
    7864:	lea    rdi,[rip+0x15115]        # 1c980 <Td4>
    786b:	mov    r9,QWORD PTR [rsp-0x10]
    7870:	mov    ebx,ebx
    7872:	add    rdx,0x1
    7876:	movzx  esi,BYTE PTR [rdi+r13*4]
    787b:	shl    rdx,0x5
    787f:	add    r8,rdx
    7882:	mov    edx,DWORD PTR [rdi+r14*4]
    7886:	and    edx,0xff00
    788c:	or     edx,esi
    788e:	mov    esi,edx
    7890:	mov    edx,DWORD PTR [rdi+rbp*4]
    7893:	xor    esi,eax
    7895:	mov    eax,DWORD PTR [rdi+r12*4]
    7899:	and    edx,0xff0000
    789f:	and    eax,0xff000000
    78a4:	or     eax,edx
    78a6:	xor    eax,esi
    78a8:	bswap  eax
    78aa:	mov    DWORD PTR [r9],eax
    78ad:	mov    eax,DWORD PTR [rsp-0x38]
    78b1:	mov    edx,DWORD PTR [rdi+rax*4]
    78b4:	mov    eax,DWORD PTR [rsp-0x34]
    78b8:	movzx  eax,BYTE PTR [rdi+rax*4]
    78bc:	and    edx,0xff00
    78c2:	or     edx,eax
    78c4:	mov    eax,DWORD PTR [rsp-0x40]
    78c8:	xor    edx,DWORD PTR [r8+0x4]
    78cc:	mov    eax,DWORD PTR [rdi+rax*4]
    78cf:	and    eax,0xff000000
    78d4:	mov    esi,eax
    78d6:	mov    eax,DWORD PTR [rsp-0x3c]
    78da:	mov    eax,DWORD PTR [rdi+rax*4]
    78dd:	and    eax,0xff0000
    78e2:	or     eax,esi
    78e4:	xor    edx,eax
    78e6:	mov    eax,DWORD PTR [rsp-0x28]
    78ea:	bswap  edx
    78ec:	mov    DWORD PTR [r9+0x4],edx
    78f0:	movzx  edx,BYTE PTR [rdi+r15*4]
    78f5:	mov    eax,DWORD PTR [rdi+rax*4]
    78f8:	mov    r15d,DWORD PTR [rsp-0x2c]
    78fd:	and    eax,0xff00
    7902:	mov    esi,DWORD PTR [rdi+r15*4]
    7906:	or     eax,edx
    7908:	xor    eax,DWORD PTR [r8+0x8]
    790c:	mov    edx,eax
    790e:	mov    eax,DWORD PTR [rsp-0x30]
    7912:	and    esi,0xff0000
    7918:	mov    eax,DWORD PTR [rdi+rax*4]
    791b:	and    eax,0xff000000
    7920:	or     eax,esi
    7922:	mov    esi,DWORD PTR [rsp-0x24]
    7926:	xor    eax,edx
    7928:	movzx  edx,BYTE PTR [rdi+rcx*4]
    792c:	bswap  eax
    792e:	mov    DWORD PTR [r9+0x8],eax
    7932:	mov    eax,DWORD PTR [rdi+rbx*4]
    7935:	and    eax,0xff00
    793a:	or     eax,edx
    793c:	mov    edx,DWORD PTR [rdi+rsi*4]
    793f:	xor    eax,DWORD PTR [r8+0xc]
    7943:	mov    ecx,edx
    7945:	mov    edx,DWORD PTR [rsp-0x8]
    7949:	and    ecx,0xff000000
    794f:	mov    edx,DWORD PTR [rdi+rdx*4]
    7952:	and    edx,0xff0000
    7958:	or     edx,ecx
    795a:	xor    eax,edx
    795c:	bswap  eax
    795e:	mov    DWORD PTR [r9+0xc],eax
    7962:	pop    rbx
    7963:	pop    rbp
    7964:	pop    r12
    7966:	pop    r13
    7968:	pop    r14
    796a:	pop    r15
    796c:	ret    
    796d:	nop    DWORD PTR [rax]

0000000000007970 <AES_cbc_encrypt>:
    7970:	push   r15
    7972:	mov    r15,rdx
    7975:	push   r14
    7977:	mov    r14,r8
    797a:	push   r13
    797c:	push   r12
    797e:	push   rbp
    797f:	mov    rbp,rcx
    7982:	push   rbx
    7983:	mov    rbx,rsi
    7986:	sub    rsp,0x48
    798a:	mov    QWORD PTR [rsp+0x8],rdi
    798f:	mov    rax,QWORD PTR fs:0x28
    7998:	mov    QWORD PTR [rsp+0x38],rax
    799d:	xor    eax,eax
    799f:	test   r9d,r9d
    79a2:	jne    7a53 <AES_cbc_encrypt+0xe3>
    79a8:	mov    r12,rsi
    79ab:	cmp    rdx,0xf
    79af:	jbe    7a27 <AES_cbc_encrypt+0xb7>
    79b1:	lea    rax,[rdx-0x10]
    79b5:	mov    r13,QWORD PTR [rsp+0x8]
    79ba:	and    rax,0xfffffffffffffff0
    79be:	add    rax,0x10
    79c2:	mov    QWORD PTR [rsp+0x10],rax
    79c7:	lea    r12,[rsi+rax*1]
    79cb:	nop    DWORD PTR [rax+rax*1+0x0]
    79d0:	movdqu xmm2,XMMWORD PTR [r13+0x0]
    79d6:	mov    rdx,rbp
    79d9:	mov    rsi,rbx
    79dc:	mov    rdi,r13
    79df:	movaps XMMWORD PTR [rsp+0x20],xmm2
    79e4:	call   75b0 <AES_decrypt>
    79e9:	xor    eax,eax
    79eb:	nop    DWORD PTR [rax+rax*1+0x0]
    79f0:	movzx  edx,BYTE PTR [r14+rax*1]
    79f5:	xor    BYTE PTR [rbx+rax*1],dl
    79f8:	add    rax,0x1
    79fc:	cmp    rax,0x10
    7a00:	jne    79f0 <AES_cbc_encrypt+0x80>
    7a02:	movdqa xmm3,XMMWORD PTR [rsp+0x20]
    7a08:	add    rbx,0x10
    7a0c:	add    r13,0x10
    7a10:	movups XMMWORD PTR [r14],xmm3
    7a14:	cmp    rbx,r12
    7a17:	jne    79d0 <AES_cbc_encrypt+0x60>
    7a19:	mov    rcx,QWORD PTR [rsp+0x10]
    7a1e:	add    QWORD PTR [rsp+0x8],rcx
    7a23:	and    r15d,0xf
    7a27:	test   r15,r15
    7a2a:	jne    7b41 <AES_cbc_encrypt+0x1d1>
    7a30:	mov    rax,QWORD PTR [rsp+0x38]
    7a35:	xor    rax,QWORD PTR fs:0x28
    7a3e:	jne    7b98 <AES_cbc_encrypt+0x228>
    7a44:	add    rsp,0x48
    7a48:	pop    rbx
    7a49:	pop    rbp
    7a4a:	pop    r12
    7a4c:	pop    r13
    7a4e:	pop    r14
    7a50:	pop    r15
    7a52:	ret    
    7a53:	cmp    rdx,0xf
    7a57:	jbe    7b8e <AES_cbc_encrypt+0x21e>
    7a5d:	lea    rax,[rdx-0x10]
    7a61:	mov    r12,QWORD PTR [rsp+0x8]
    7a66:	lea    r13,[rsp+0x20]
    7a6b:	and    rax,0xfffffffffffffff0
    7a6f:	add    rax,0x10
    7a73:	mov    QWORD PTR [rsp+0x18],rax
    7a78:	add    rax,rsi
    7a7b:	mov    QWORD PTR [rsp+0x10],rax
    7a80:	xor    eax,eax
    7a82:	nop    WORD PTR [rax+rax*1+0x0]
    7a88:	movzx  edx,BYTE PTR [r12+rax*1]
    7a8d:	xor    dl,BYTE PTR [r14+rax*1]
    7a91:	mov    BYTE PTR [r13+rax*1+0x0],dl
    7a96:	add    rax,0x1
    7a9a:	cmp    rax,0x10
    7a9e:	jne    7a88 <AES_cbc_encrypt+0x118>
    7aa0:	mov    rsi,rbx
    7aa3:	mov    rdx,rbp
    7aa6:	mov    rdi,r13
    7aa9:	add    r12,0x10
    7aad:	call   71e0 <AES_encrypt>
    7ab2:	movdqu xmm1,XMMWORD PTR [rbx]
    7ab6:	add    rbx,0x10
    7aba:	movups XMMWORD PTR [r14],xmm1
    7abe:	cmp    rbx,QWORD PTR [rsp+0x10]
    7ac3:	jne    7a80 <AES_cbc_encrypt+0x110>
    7ac5:	mov    rcx,QWORD PTR [rsp+0x18]
    7aca:	add    QWORD PTR [rsp+0x8],rcx
    7acf:	and    r15d,0xf
    7ad3:	test   r15,r15
    7ad6:	je     7a30 <AES_cbc_encrypt+0xc0>
    7adc:	xor    eax,eax
    7ade:	lea    r13,[rsp+0x20]
    7ae3:	nop    DWORD PTR [rax+rax*1+0x0]
    7ae8:	mov    rcx,QWORD PTR [rsp+0x8]
    7aed:	movzx  edx,BYTE PTR [rcx+rax*1]
    7af1:	xor    dl,BYTE PTR [r14+rax*1]
    7af5:	mov    BYTE PTR [r13+rax*1+0x0],dl
    7afa:	add    rax,0x1
    7afe:	cmp    rax,r15
    7b01:	jne    7ae8 <AES_cbc_encrypt+0x178>
    7b03:	nop    DWORD PTR [rax+rax*1+0x0]
    7b08:	movzx  eax,BYTE PTR [r14+r15*1]
    7b0d:	mov    BYTE PTR [r13+r15*1+0x0],al
    7b12:	add    r15,0x1
    7b16:	cmp    r15,0x10
    7b1a:	jne    7b08 <AES_cbc_encrypt+0x198>
    7b1c:	mov    rdx,rbp
    7b1f:	mov    rsi,r13
    7b22:	mov    rdi,r13
    7b25:	call   71e0 <AES_encrypt>
    7b2a:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    7b30:	mov    rax,QWORD PTR [rsp+0x10]
    7b35:	movups XMMWORD PTR [rax],xmm0
    7b38:	movups XMMWORD PTR [r14],xmm0
    7b3c:	jmp    7a30 <AES_cbc_encrypt+0xc0>
    7b41:	mov    rax,QWORD PTR [rsp+0x8]
    7b46:	lea    r13,[rsp+0x20]
    7b4b:	mov    rdx,rbp
    7b4e:	mov    rsi,r13
    7b51:	mov    rdi,r13
    7b54:	movdqu xmm4,XMMWORD PTR [rax]
    7b58:	movaps XMMWORD PTR [rsp+0x20],xmm4
    7b5d:	call   75b0 <AES_decrypt>
    7b62:	xor    eax,eax
    7b64:	nop    DWORD PTR [rax+0x0]
    7b68:	movzx  edx,BYTE PTR [r13+rax*1+0x0]
    7b6e:	xor    dl,BYTE PTR [r14+rax*1]
    7b72:	mov    BYTE PTR [r12+rax*1],dl
    7b76:	add    rax,0x1
    7b7a:	cmp    rax,r15
    7b7d:	jne    7b68 <AES_cbc_encrypt+0x1f8>
    7b7f:	movdqa xmm5,XMMWORD PTR [rsp+0x20]
    7b85:	movups XMMWORD PTR [r14],xmm5
    7b89:	jmp    7a30 <AES_cbc_encrypt+0xc0>
    7b8e:	mov    QWORD PTR [rsp+0x10],rsi
    7b93:	jmp    7ad3 <AES_cbc_encrypt+0x163>
    7b98:	call   3190 <__stack_chk_fail@plt>
    7b9d:	nop    DWORD PTR [rax]

0000000000007ba0 <vmdk_flush>:
    7ba0:	mov    rax,QWORD PTR [rdi+0x40]
    7ba4:	mov    rdi,QWORD PTR [rax]
    7ba7:	jmp    18a40 <bdrv_flush>
    7bac:	nop    DWORD PTR [rax+0x0]

0000000000007bb0 <vmdk_snapshot_create>:
    7bb0:	push   r15
    7bb2:	mov    edx,0x1a4
    7bb7:	mov    r15,rsi
    7bba:	mov    esi,0x242
    7bbf:	push   r14
    7bc1:	push   r13
    7bc3:	push   r12
    7bc5:	push   rbp
    7bc6:	mov    rbp,rdi
    7bc9:	push   rbx
    7bca:	sub    rsp,0x5298
    7bd1:	mov    rax,QWORD PTR fs:0x28
    7bda:	mov    QWORD PTR [rsp+0x5288],rax
    7be2:	xor    eax,eax
    7be4:	call   3500 <open64@plt>
    7be9:	test   eax,eax
    7beb:	js     7fc0 <vmdk_snapshot_create+0x410>
    7bf1:	mov    r12d,eax
    7bf4:	xor    esi,esi
    7bf6:	mov    rdi,r15
    7bf9:	xor    eax,eax
    7bfb:	call   3500 <open64@plt>
    7c00:	mov    r13d,eax
    7c03:	test   eax,eax
    7c05:	js     7fa8 <vmdk_snapshot_create+0x3f8>
    7c0b:	xor    edx,edx
    7c0d:	xor    esi,esi
    7c0f:	mov    edi,eax
    7c11:	call   3620 <lseek64@plt>
    7c16:	cmp    rax,0xffffffffffffffff
    7c1a:	je     7fa0 <vmdk_snapshot_create+0x3f0>
    7c20:	lea    rbx,[rsp+0x80]
    7c28:	mov    edx,0x200
    7c2d:	mov    edi,r13d
    7c30:	mov    rsi,rbx
    7c33:	call   4600 <qemu_read_ok>
    7c38:	test   eax,eax
    7c3a:	js     7fa0 <vmdk_snapshot_create+0x3f0>
    7c40:	xor    edx,edx
    7c42:	xor    esi,esi
    7c44:	mov    edi,r12d
    7c47:	call   3620 <lseek64@plt>
    7c4c:	cmp    rax,0xffffffffffffffff
    7c50:	je     7fa0 <vmdk_snapshot_create+0x3f0>
    7c56:	mov    edx,0x200
    7c5b:	mov    rsi,rbx
    7c5e:	mov    edi,r12d
    7c61:	call   46d0 <qemu_write_ok>
    7c66:	cmp    eax,0xffffffff
    7c69:	je     7fa0 <vmdk_snapshot_create+0x3f0>
    7c6f:	mov    rax,QWORD PTR [rsp+0x94]
    7c77:	mov    edi,r12d
    7c7a:	movdqu xmm2,XMMWORD PTR [rsp+0xa4]
    7c83:	mov    rdx,QWORD PTR [rsp+0xc4]
    7c8b:	movdqu xmm3,XMMWORD PTR [rsp+0xb4]
    7c94:	movdqu xmm0,XMMWORD PTR [rsp+0x84]
    7c9d:	movaps XMMWORD PTR [rsp+0x50],xmm2
    7ca2:	movdqu xmm1,XMMWORD PTR [rsp+0x94]
    7cab:	mov    QWORD PTR [rsp+0x18],rax
    7cb0:	mov    eax,DWORD PTR [rsp+0x58]
    7cb4:	movaps XMMWORD PTR [rsp+0x60],xmm3
    7cb9:	mov    r14,QWORD PTR [rsp+0x64]
    7cbe:	mov    QWORD PTR [rsp+0x70],rdx
    7cc3:	mov    rsi,QWORD PTR [rsp+0x6c]
    7cc8:	movzx  edx,BYTE PTR [rsp+0xcc]
    7cd0:	mov    DWORD PTR [rsp+0xc],eax
    7cd4:	mov    rax,QWORD PTR [rsp+0x5c]
    7cd9:	shl    rsi,0x9
    7cdd:	movaps XMMWORD PTR [rsp+0x30],xmm0
    7ce2:	mov    rbx,QWORD PTR [rsp+0x38]
    7ce7:	mov    BYTE PTR [rsp+0x78],dl
    7ceb:	movaps XMMWORD PTR [rsp+0x40],xmm1
    7cf0:	mov    QWORD PTR [rsp+0x10],rax
    7cf5:	call   34c0 <ftruncate64@plt>
    7cfa:	xor    edx,edx
    7cfc:	mov    esi,0x200
    7d01:	mov    edi,r13d
    7d04:	call   3620 <lseek64@plt>
    7d09:	cmp    rax,0xffffffffffffffff
    7d0d:	je     7fa0 <vmdk_snapshot_create+0x3f0>
    7d13:	lea    rcx,[rsp+0x280]
    7d1b:	mov    edx,0x2800
    7d20:	mov    edi,r13d
    7d23:	mov    rsi,rcx
    7d26:	mov    QWORD PTR [rsp],rcx
    7d2a:	call   4600 <qemu_read_ok>
    7d2f:	test   eax,eax
    7d31:	js     7fa0 <vmdk_snapshot_create+0x3f0>
    7d37:	mov    rcx,QWORD PTR [rsp]
    7d3b:	lea    rsi,[rip+0x17447]        # 1f189 <Te0+0x409>
    7d42:	mov    rdi,rcx
    7d45:	call   36a0 <strstr@plt>
    7d4a:	test   rax,rax
    7d4d:	je     7d66 <vmdk_snapshot_create+0x1b6>
    7d4f:	lea    rdi,[rax+0x4]
    7d53:	lea    rdx,[rsp+0x2c]
    7d58:	xor    eax,eax
    7d5a:	lea    rsi,[rip+0x1741f]        # 1f180 <Te0+0x400>
    7d61:	call   3470 <sscanf@plt>
    7d66:	mov    rdi,rbp
    7d69:	mov    esi,0x5c
    7d6e:	call   3200 <strrchr@plt>
    7d73:	mov    esi,0x2f
    7d78:	lea    rdx,[rax+0x1]
    7d7c:	test   rax,rax
    7d7f:	cmovne rbp,rdx
    7d83:	mov    rdi,rbp
    7d86:	call   3200 <strrchr@plt>
    7d8b:	mov    esi,0x3a
    7d90:	lea    rdx,[rax+0x1]
    7d94:	test   rax,rax
    7d97:	cmovne rbp,rdx
    7d9b:	mov    rdi,rbp
    7d9e:	call   3200 <strrchr@plt>
    7da3:	mov    r9d,DWORD PTR [rsp+0x2c]
    7da8:	lea    r10,[rsp+0x2a80]
    7db0:	mov    esi,0x2800
    7db5:	test   rax,rax
    7db8:	lea    rdx,[rax+0x1]
    7dbc:	mov    rdi,r10
    7dbf:	mov    ecx,0x2800
    7dc4:	cmovne rbp,rdx
    7dc8:	lea    r8,[rip+0x17431]        # 1f200 <desc_template.13799>
    7dcf:	mov    edx,0x1
    7dd4:	xor    eax,eax
    7dd6:	push   rbp
    7dd7:	push   rbx
    7dd8:	push   r15
    7dda:	push   r9
    7ddc:	mov    QWORD PTR [rsp+0x20],r10
    7de1:	call   3060 <__snprintf_chk@plt>
    7de6:	add    rsp,0x20
    7dea:	xor    edx,edx
    7dec:	mov    esi,0x200
    7df1:	mov    edi,r12d
    7df4:	call   3620 <lseek64@plt>
    7df9:	cmp    rax,0xffffffffffffffff
    7dfd:	je     7fa0 <vmdk_snapshot_create+0x3f0>
    7e03:	mov    r10,QWORD PTR [rsp]
    7e07:	mov    rdx,r10
    7e0a:	mov    ecx,DWORD PTR [rdx]
    7e0c:	add    rdx,0x4
    7e10:	lea    eax,[rcx-0x1010101]
    7e16:	not    ecx
    7e18:	and    eax,ecx
    7e1a:	and    eax,0x80808080
    7e1f:	je     7e0a <vmdk_snapshot_create+0x25a>
    7e21:	mov    ecx,eax
    7e23:	mov    rsi,r10
    7e26:	mov    edi,r12d
    7e29:	shr    ecx,0x10
    7e2c:	test   eax,0x8080
    7e31:	cmove  eax,ecx
    7e34:	lea    rcx,[rdx+0x2]
    7e38:	cmove  rdx,rcx
    7e3c:	mov    ecx,eax
    7e3e:	add    cl,al
    7e40:	sbb    rdx,0x3
    7e44:	sub    rdx,r10
    7e47:	call   46d0 <qemu_write_ok>
    7e4c:	cmp    eax,0xffffffff
    7e4f:	je     7fa0 <vmdk_snapshot_create+0x3f0>
    7e55:	movsxd rcx,DWORD PTR [rsp+0xc]
    7e5a:	mov    rbp,QWORD PTR [rsp+0x10]
    7e5f:	mov    rax,rbx
    7e62:	shl    r14,0x9
    7e66:	imul   rcx,QWORD PTR [rsp+0x18]
    7e6c:	shl    rax,0x9
    7e70:	shl    rbp,0x9
    7e74:	shl    rcx,0x9
    7e78:	je     7fa0 <vmdk_snapshot_create+0x3f0>
    7e7e:	cqo    
    7e80:	idiv   rcx
    7e83:	lea    ebx,[rax*4+0x0]
    7e8a:	mov    rdi,rbx
    7e8d:	call   4cb0 <qemu_malloc>
    7e92:	xor    edx,edx
    7e94:	mov    rsi,rbp
    7e97:	mov    edi,r13d
    7e9a:	mov    r15,rax
    7e9d:	call   3620 <lseek64@plt>
    7ea2:	cmp    rax,0xffffffffffffffff
    7ea6:	je     7f98 <vmdk_snapshot_create+0x3e8>
    7eac:	mov    rdx,rbx
    7eaf:	mov    rsi,r15
    7eb2:	mov    edi,r13d
    7eb5:	call   4600 <qemu_read_ok>
    7eba:	test   eax,eax
    7ebc:	js     7f98 <vmdk_snapshot_create+0x3e8>
    7ec2:	xor    edx,edx
    7ec4:	mov    rsi,rbp
    7ec7:	mov    edi,r12d
    7eca:	call   3620 <lseek64@plt>
    7ecf:	cmp    rax,0xffffffffffffffff
    7ed3:	je     7f98 <vmdk_snapshot_create+0x3e8>
    7ed9:	mov    rdx,rbx
    7edc:	mov    rsi,r15
    7edf:	mov    edi,r12d
    7ee2:	call   46d0 <qemu_write_ok>
    7ee7:	cmp    eax,0xffffffff
    7eea:	je     7f98 <vmdk_snapshot_create+0x3e8>
    7ef0:	mov    rdi,r15
    7ef3:	call   4ca0 <qemu_free>
    7ef8:	mov    rdi,rbx
    7efb:	call   4cb0 <qemu_malloc>
    7f00:	xor    edx,edx
    7f02:	mov    rsi,r14
    7f05:	mov    edi,r13d
    7f08:	mov    rbp,rax
    7f0b:	call   3620 <lseek64@plt>
    7f10:	cmp    rax,0xffffffffffffffff
    7f14:	je     7f90 <vmdk_snapshot_create+0x3e0>
    7f16:	mov    rdx,rbx
    7f19:	mov    rsi,rbp
    7f1c:	mov    edi,r13d
    7f1f:	call   4600 <qemu_read_ok>
    7f24:	test   eax,eax
    7f26:	js     7f90 <vmdk_snapshot_create+0x3e0>
    7f28:	xor    edx,edx
    7f2a:	mov    rsi,r14
    7f2d:	mov    edi,r12d
    7f30:	call   3620 <lseek64@plt>
    7f35:	cmp    rax,0xffffffffffffffff
    7f39:	je     7f90 <vmdk_snapshot_create+0x3e0>
    7f3b:	mov    rdx,rbx
    7f3e:	mov    rsi,rbp
    7f41:	mov    edi,r12d
    7f44:	call   46d0 <qemu_write_ok>
    7f49:	cmp    eax,0xffffffff
    7f4c:	je     7f90 <vmdk_snapshot_create+0x3e0>
    7f4e:	mov    rdi,rbp
    7f51:	call   4ca0 <qemu_free>
    7f56:	mov    edi,r13d
    7f59:	call   3260 <close@plt>
    7f5e:	mov    edi,r12d
    7f61:	call   3260 <close@plt>
    7f66:	xor    eax,eax
    7f68:	mov    rbx,QWORD PTR [rsp+0x5288]
    7f70:	xor    rbx,QWORD PTR fs:0x28
    7f79:	jne    7fc7 <vmdk_snapshot_create+0x417>
    7f7b:	add    rsp,0x5298
    7f82:	pop    rbx
    7f83:	pop    rbp
    7f84:	pop    r12
    7f86:	pop    r13
    7f88:	pop    r14
    7f8a:	pop    r15
    7f8c:	ret    
    7f8d:	nop    DWORD PTR [rax]
    7f90:	mov    rdi,rbp
    7f93:	call   4ca0 <qemu_free>
    7f98:	mov    rdi,r15
    7f9b:	call   4ca0 <qemu_free>
    7fa0:	mov    edi,r13d
    7fa3:	call   3260 <close@plt>
    7fa8:	mov    edi,r12d
    7fab:	call   3260 <close@plt>
    7fb0:	mov    eax,0xffffffff
    7fb5:	jmp    7f68 <vmdk_snapshot_create+0x3b8>
    7fb7:	nop    WORD PTR [rax+rax*1+0x0]
    7fc0:	mov    eax,0xffffffff
    7fc5:	jmp    7f68 <vmdk_snapshot_create+0x3b8>
    7fc7:	call   3190 <__stack_chk_fail@plt>
    7fcc:	nop    DWORD PTR [rax+0x0]

0000000000007fd0 <vmdk_close>:
    7fd0:	push   rbx
    7fd1:	mov    rbx,QWORD PTR [rdi+0x40]
    7fd5:	mov    rdi,QWORD PTR [rbx+0x18]
    7fd9:	call   4ca0 <qemu_free>
    7fde:	mov    rdi,QWORD PTR [rbx+0x38]
    7fe2:	call   4ca0 <qemu_free>
    7fe7:	mov    rdi,QWORD PTR [rbx]
    7fea:	mov    rax,QWORD PTR [rdi+0x850]
    7ff1:	test   rax,rax
    7ff4:	je     8001 <vmdk_close+0x31>
    7ff6:	mov    rdi,rax
    7ff9:	call   174e0 <bdrv_close>
    7ffe:	mov    rdi,QWORD PTR [rbx]
    8001:	pop    rbx
    8002:	jmp    17470 <bdrv_delete>
    8007:	nop    WORD PTR [rax+rax*1+0x0]

0000000000008010 <vmdk_probe>:
    8010:	xor    eax,eax
    8012:	cmp    esi,0x3
    8015:	jg     8020 <vmdk_probe+0x10>
    8017:	ret    
    8018:	nop    DWORD PTR [rax+rax*1+0x0]
    8020:	mov    edx,DWORD PTR [rdi]
    8022:	bswap  edx
    8024:	cmp    edx,0x434f5744
    802a:	je     8034 <vmdk_probe+0x24>
    802c:	cmp    edx,0x4b444d56
    8032:	jne    8017 <vmdk_probe+0x7>
    8034:	mov    eax,0x64
    8039:	ret    
    803a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000008040 <vmdk_read_cid.isra.2>:
    8040:	push   r12
    8042:	mov    ecx,0x2800
    8047:	mov    r12d,esi
    804a:	mov    esi,0x200
    804f:	push   rbp
    8050:	push   rbx
    8051:	sub    rsp,0x2820
    8058:	mov    rdi,QWORD PTR [rdi]
    805b:	mov    rax,QWORD PTR fs:0x28
    8064:	mov    QWORD PTR [rsp+0x2818],rax
    806c:	xor    eax,eax
    806e:	lea    rbp,[rsp+0x10]
    8073:	mov    rdx,rbp
    8076:	call   17e40 <bdrv_pread>
    807b:	xor    edx,edx
    807d:	cmp    eax,0x2800
    8082:	jne    80d0 <vmdk_read_cid.isra.2+0x90>
    8084:	cmp    r12d,0x1
    8088:	lea    rsi,[rip+0x170f4]        # 1f183 <Te0+0x403>
    808f:	lea    rax,[rip+0x170f3]        # 1f189 <Te0+0x409>
    8096:	mov    rdi,rbp
    8099:	sbb    rbx,rbx
    809c:	and    rbx,0xfffffffffffffffa
    80a0:	add    rbx,0xa
    80a4:	test   r12d,r12d
    80a7:	cmove  rsi,rax
    80ab:	call   36a0 <strstr@plt>
    80b0:	test   rax,rax
    80b3:	je     80cc <vmdk_read_cid.isra.2+0x8c>
    80b5:	lea    rdi,[rax+rbx*1]
    80b9:	lea    rdx,[rsp+0xc]
    80be:	xor    eax,eax
    80c0:	lea    rsi,[rip+0x170b9]        # 1f180 <Te0+0x400>
    80c7:	call   3470 <sscanf@plt>
    80cc:	mov    edx,DWORD PTR [rsp+0xc]
    80d0:	mov    rcx,QWORD PTR [rsp+0x2818]
    80d8:	xor    rcx,QWORD PTR fs:0x28
    80e1:	mov    eax,edx
    80e3:	jne    80f1 <vmdk_read_cid.isra.2+0xb1>
    80e5:	add    rsp,0x2820
    80ec:	pop    rbx
    80ed:	pop    rbp
    80ee:	pop    r12
    80f0:	ret    
    80f1:	call   3190 <__stack_chk_fail@plt>
    80f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000008100 <vmdk_is_cid_valid.isra.3>:
    8100:	mov    rax,QWORD PTR [rdi]
    8103:	mov    rdx,QWORD PTR [rax+0x850]
    810a:	test   rdx,rdx
    810d:	je     8130 <vmdk_is_cid_valid.isra.3+0x30>
    810f:	push   rbx
    8110:	mov    rbx,rdi
    8113:	mov    rdi,QWORD PTR [rdx+0x40]
    8117:	xor    esi,esi
    8119:	call   8040 <vmdk_read_cid.isra.2>
    811e:	cmp    DWORD PTR [rbx+0xc4],eax
    8124:	pop    rbx
    8125:	sete   al
    8128:	movzx  eax,al
    812b:	ret    
    812c:	nop    DWORD PTR [rax+0x0]
    8130:	mov    eax,0x1
    8135:	ret    
    8136:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000008140 <get_cluster_offset>:
    8140:	push   rbp
    8141:	mov    r8,rdi
    8144:	mov    r9,rdx
    8147:	mov    r10d,ecx
    814a:	mov    rbp,rsp
    814d:	push   r15
    814f:	push   r14
    8151:	mov    r14,rsi
    8154:	push   r13
    8156:	push   r12
    8158:	push   rbx
    8159:	sub    rsp,0x58
    815d:	mov    rbx,QWORD PTR [rdi+0x40]
    8161:	mov    rax,QWORD PTR fs:0x28
    816a:	mov    QWORD PTR [rbp-0x38],rax
    816e:	xor    eax,eax
    8170:	test   rsi,rsi
    8173:	je     817c <get_cluster_offset+0x3c>
    8175:	mov    DWORD PTR [rsi+0x10],0x0
    817c:	mov    r13,r9
    817f:	mov    ecx,DWORD PTR [rbx+0x2c]
    8182:	xor    edx,edx
    8184:	shr    r13,0x9
    8188:	mov    rax,r13
    818b:	div    rcx
    818e:	mov    r11,rax
    8191:	cmp    DWORD PTR [rbx+0x28],eax
    8194:	jbe    8240 <get_cluster_offset+0x100>
    819a:	mov    rdx,QWORD PTR [rbx+0x18]
    819e:	mov    eax,eax
    81a0:	mov    r12d,DWORD PTR [rdx+rax*4]
    81a4:	test   r12d,r12d
    81a7:	je     8240 <get_cluster_offset+0x100>
    81ad:	xor    eax,eax
    81af:	nop
    81b0:	movsxd rdx,eax
    81b3:	cmp    DWORD PTR [rbx+rax*4+0x40],r12d
    81b8:	je     8270 <get_cluster_offset+0x130>
    81be:	add    rax,0x1
    81c2:	cmp    rax,0x10
    81c6:	jne    81b0 <get_cluster_offset+0x70>
    81c8:	xor    eax,eax
    81ca:	mov    ecx,0xffffffff
    81cf:	xor    r15d,r15d
    81d2:	nop    WORD PTR [rax+rax*1+0x0]
    81d8:	mov    edx,DWORD PTR [rbx+rax*4+0x80]
    81df:	cmp    edx,ecx
    81e1:	jae    81e8 <get_cluster_offset+0xa8>
    81e3:	mov    ecx,edx
    81e5:	movsxd r15,eax
    81e8:	add    rax,0x1
    81ec:	cmp    rax,0x10
    81f0:	jne    81d8 <get_cluster_offset+0x98>
    81f2:	mov    ecx,DWORD PTR [rbx+0x30]
    81f5:	mov    edx,r15d
    81f8:	mov    rax,QWORD PTR [rbx+0x38]
    81fc:	mov    esi,r12d
    81ff:	mov    rdi,QWORD PTR [rbx]
    8202:	shl    rsi,0x9
    8206:	mov    QWORD PTR [rbp-0x68],r8
    820a:	imul   edx,ecx
    820d:	shl    ecx,0x2
    8210:	mov    QWORD PTR [rbp-0x60],r9
    8214:	mov    DWORD PTR [rbp-0x58],r10d
    8218:	mov    QWORD PTR [rbp-0x50],r11
    821c:	lea    rdx,[rax+rdx*4]
    8220:	mov    QWORD PTR [rbp-0x48],rdx
    8224:	call   17e40 <bdrv_pread>
    8229:	mov    ecx,DWORD PTR [rbx+0x30]
    822c:	cdqe   
    822e:	lea    rdx,[rcx*4+0x0]
    8236:	cmp    rax,rdx
    8239:	je     83a8 <get_cluster_offset+0x268>
    823f:	nop
    8240:	xor    r13d,r13d
    8243:	mov    rdi,QWORD PTR [rbp-0x38]
    8247:	xor    rdi,QWORD PTR fs:0x28
    8250:	mov    rax,r13
    8253:	jne    84da <get_cluster_offset+0x39a>
    8259:	lea    rsp,[rbp-0x28]
    825d:	pop    rbx
    825e:	pop    r12
    8260:	pop    r13
    8262:	pop    r14
    8264:	pop    r15
    8266:	pop    rbp
    8267:	ret    
    8268:	nop    DWORD PTR [rax+rax*1+0x0]
    8270:	lea    rcx,[rbx+rdx*4]
    8274:	mov    edi,DWORD PTR [rcx+0x80]
    827a:	lea    edx,[rdi+0x1]
    827d:	mov    DWORD PTR [rcx+0x80],edx
    8283:	cmp    edx,0xffffffff
    8286:	je     83d0 <get_cluster_offset+0x290>
    828c:	mov    ecx,DWORD PTR [rbx+0x30]
    828f:	mov    rdx,QWORD PTR [rbx+0x38]
    8293:	imul   eax,ecx
    8296:	lea    rax,[rdx+rax*4]
    829a:	mov    QWORD PTR [rbp-0x48],rax
    829e:	mov    esi,DWORD PTR [rbx+0xc0]
    82a4:	mov    rax,r13
    82a7:	xor    edx,edx
    82a9:	div    rsi
    82ac:	xor    edx,edx
    82ae:	div    rcx
    82b1:	mov    rax,QWORD PTR [rbp-0x48]
    82b5:	mov    r15,rdx
    82b8:	lea    rdx,[rax+rdx*4]
    82bc:	mov    r13d,DWORD PTR [rdx]
    82bf:	test   r13,r13
    82c2:	jne    8398 <get_cluster_offset+0x258>
    82c8:	test   r10d,r10d
    82cb:	je     8240 <get_cluster_offset+0x100>
    82d1:	mov    eax,DWORD PTR [rbx+0xc8]
    82d7:	xor    r10d,r10d
    82da:	mov    DWORD PTR [rbp-0x48],0x0
    82e1:	test   eax,eax
    82e3:	je     8478 <get_cluster_offset+0x338>
    82e9:	mov    rdx,QWORD PTR [r8+0x40]
    82ed:	mov    rdi,rsp
    82f0:	mov    QWORD PTR [rbp-0x50],rdi
    82f4:	mov    eax,DWORD PTR [rdx+0xc0]
    82fa:	shl    eax,0x9
    82fd:	mov    ebx,eax
    82ff:	mov    DWORD PTR [rbp-0x58],eax
    8302:	mov    rax,QWORD PTR [rdx]
    8305:	sub    rsp,rbx
    8308:	mov    rax,QWORD PTR [rax+0x850]
    830f:	test   rax,rax
    8312:	je     8470 <get_cluster_offset+0x330>
    8318:	mov    rax,QWORD PTR [rax+0x40]
    831c:	mov    rdi,rdx
    831f:	mov    QWORD PTR [rbp-0x78],r11
    8323:	mov    QWORD PTR [rbp-0x70],r9
    8327:	mov    QWORD PTR [rbp-0x68],r10
    832b:	mov    QWORD PTR [rbp-0x80],rax
    832f:	mov    QWORD PTR [rbp-0x60],rdx
    8333:	call   8100 <vmdk_is_cid_valid.isra.3>
    8338:	test   eax,eax
    833a:	je     8464 <get_cluster_offset+0x324>
    8340:	mov    rdx,QWORD PTR [rbp-0x60]
    8344:	mov    r9,QWORD PTR [rbp-0x70]
    8348:	xor    esi,esi
    834a:	mov    ecx,0x1
    834f:	mov    rax,QWORD PTR [rdx]
    8352:	mov    rdx,r9
    8355:	mov    rdi,QWORD PTR [rax+0x850]
    835c:	call   8140 <get_cluster_offset>
    8361:	mov    r10,QWORD PTR [rbp-0x68]
    8365:	mov    r11,QWORD PTR [rbp-0x78]
    8369:	test   rax,rax
    836c:	jne    83f0 <get_cluster_offset+0x2b0>
    8372:	mov    rsp,QWORD PTR [rbp-0x50]
    8376:	mov    r13,r10
    8379:	test   r14,r14
    837c:	je     8398 <get_cluster_offset+0x258>
    837e:	mov    eax,DWORD PTR [rbp-0x48]
    8381:	mov    DWORD PTR [r14+0x4],r11d
    8385:	mov    DWORD PTR [r14+0x8],r15d
    8389:	mov    DWORD PTR [r14],eax
    838c:	mov    DWORD PTR [r14+0xc],r12d
    8390:	mov    DWORD PTR [r14+0x10],0x1
    8398:	shl    r13,0x9
    839c:	jmp    8243 <get_cluster_offset+0x103>
    83a1:	nop    DWORD PTR [rax+0x0]
    83a8:	lea    rax,[rbx+r15*4]
    83ac:	mov    r8,QWORD PTR [rbp-0x68]
    83b0:	mov    r9,QWORD PTR [rbp-0x60]
    83b4:	mov    r10d,DWORD PTR [rbp-0x58]
    83b8:	mov    r11,QWORD PTR [rbp-0x50]
    83bc:	mov    DWORD PTR [rax+0x40],r12d
    83c0:	mov    DWORD PTR [rax+0x80],0x1
    83ca:	jmp    829e <get_cluster_offset+0x15e>
    83cf:	nop
    83d0:	lea    rdx,[rbx+0x80]
    83d7:	lea    rcx,[rbx+0xc0]
    83de:	xchg   ax,ax
    83e0:	shr    DWORD PTR [rdx],1
    83e2:	add    rdx,0x4
    83e6:	cmp    rcx,rdx
    83e9:	jne    83e0 <get_cluster_offset+0x2a0>
    83eb:	jmp    828c <get_cluster_offset+0x14c>
    83f0:	mov    rdi,QWORD PTR [rbp-0x80]
    83f4:	mov    rdx,QWORD PTR [rip+0x20125]        # 28520 <activeBDRV>
    83fb:	mov    QWORD PTR [rbp-0x70],r10
    83ff:	mov    esi,DWORD PTR [rdi+0xc0]
    8405:	mov    r8,QWORD PTR [rdx+0x40]
    8409:	mov    rdx,rsp
    840c:	mov    rdi,QWORD PTR [rdi]
    840f:	mov    ecx,esi
    8411:	mov    DWORD PTR [rbp-0x60],esi
    8414:	mov    rsi,rax
    8417:	shl    ecx,0x9
    841a:	mov    QWORD PTR [rbp-0x68],r8
    841e:	call   17e40 <bdrv_pread>
    8423:	mov    rdi,QWORD PTR [rbp-0x80]
    8427:	mov    edx,DWORD PTR [rdi+0xc0]
    842d:	shl    edx,0x9
    8430:	cmp    eax,edx
    8432:	jne    8464 <get_cluster_offset+0x324>
    8434:	mov    r8,QWORD PTR [rbp-0x68]
    8438:	mov    rsi,QWORD PTR [rip+0x200e9]        # 28528 <activeBDRV+0x8>
    843f:	mov    rdx,rsp
    8442:	mov    ecx,DWORD PTR [rbp-0x58]
    8445:	mov    rdi,QWORD PTR [r8]
    8448:	shl    rsi,0x9
    844c:	call   18450 <bdrv_pwrite>
    8451:	mov    r10,QWORD PTR [rbp-0x70]
    8455:	mov    r11,QWORD PTR [rbp-0x78]
    8459:	cdqe   
    845b:	cmp    rbx,rax
    845e:	je     8372 <get_cluster_offset+0x232>
    8464:	mov    rsp,QWORD PTR [rbp-0x50]
    8468:	jmp    8243 <get_cluster_offset+0x103>
    846d:	nop    DWORD PTR [rax]
    8470:	mov    rsp,rdi
    8473:	jmp    8376 <get_cluster_offset+0x236>
    8478:	mov    rdi,QWORD PTR [rbx]
    847b:	mov    QWORD PTR [rbp-0x68],r11
    847f:	mov    QWORD PTR [rbp-0x60],r9
    8483:	mov    QWORD PTR [rbp-0x58],r8
    8487:	mov    QWORD PTR [rbp-0x50],rdx
    848b:	call   18500 <bdrv_getlength>
    8490:	mov    esi,DWORD PTR [rbx+0xc0]
    8496:	mov    rdi,QWORD PTR [rbx]
    8499:	mov    QWORD PTR [rbp-0x48],rax
    849d:	shl    esi,0x9
    84a0:	add    rsi,rax
    84a3:	call   184d0 <bdrv_truncate>
    84a8:	mov    r10,QWORD PTR [rbp-0x48]
    84ac:	mov    rdx,QWORD PTR [rbp-0x50]
    84b0:	mov    r8,QWORD PTR [rbp-0x58]
    84b4:	mov    r11,QWORD PTR [rbp-0x68]
    84b8:	shr    r10,0x9
    84bc:	mov    r9,QWORD PTR [rbp-0x60]
    84c0:	mov    DWORD PTR [rbp-0x48],r10d
    84c4:	mov    DWORD PTR [rdx],r10d
    84c7:	mov    QWORD PTR [rip+0x2005a],r10        # 28528 <activeBDRV+0x8>
    84ce:	mov    QWORD PTR [rip+0x2004b],r8        # 28520 <activeBDRV>
    84d5:	jmp    82e9 <get_cluster_offset+0x1a9>
    84da:	call   3190 <__stack_chk_fail@plt>
    84df:	nop

00000000000084e0 <vmdk_is_allocated>:
    84e0:	push   r13
    84e2:	push   r12
    84e4:	mov    r12,rcx
    84e7:	xor    ecx,ecx
    84e9:	push   rbp
    84ea:	mov    ebp,edx
    84ec:	mov    rdx,rsi
    84ef:	push   rbx
    84f0:	shl    rdx,0x9
    84f4:	mov    rbx,rsi
    84f7:	xor    esi,esi
    84f9:	sub    rsp,0x8
    84fd:	mov    r13,QWORD PTR [rdi+0x40]
    8501:	call   8140 <get_cluster_offset>
    8506:	mov    rdi,rax
    8509:	mov    esi,DWORD PTR [r13+0xc0]
    8510:	mov    rax,rbx
    8513:	cqo    
    8515:	idiv   rsi
    8518:	mov    rcx,rsi
    851b:	sub    ecx,edx
    851d:	cmp    ecx,ebp
    851f:	cmovg  ecx,ebp
    8522:	xor    eax,eax
    8524:	test   rdi,rdi
    8527:	setne  al
    852a:	mov    DWORD PTR [r12],ecx
    852e:	add    rsp,0x8
    8532:	pop    rbx
    8533:	pop    rbp
    8534:	pop    r12
    8536:	pop    r13
    8538:	ret    
    8539:	nop    DWORD PTR [rax+0x0]

0000000000008540 <vmdk_read>:
    8540:	push   r15
    8542:	push   r14
    8544:	push   r13
    8546:	push   r12
    8548:	push   rbp
    8549:	push   rbx
    854a:	sub    rsp,0x18
    854e:	mov    r14,QWORD PTR [rdi+0x40]
    8552:	test   ecx,ecx
    8554:	jle    8680 <vmdk_read+0x140>
    855a:	mov    r15,rdi
    855d:	mov    rbp,rsi
    8560:	mov    r13,rdx
    8563:	mov    r12d,ecx
    8566:	jmp    85ce <vmdk_read+0x8e>
    8568:	nop    DWORD PTR [rax+rax*1+0x0]
    8570:	mov    rax,QWORD PTR [r14]
    8573:	cmp    QWORD PTR [rax+0x850],0x0
    857b:	je     8640 <vmdk_read+0x100>
    8581:	mov    rdi,QWORD PTR [r15+0x40]
    8585:	call   8100 <vmdk_is_cid_valid.isra.3>
    858a:	test   eax,eax
    858c:	je     8668 <vmdk_read+0x128>
    8592:	mov    rax,QWORD PTR [r14]
    8595:	mov    ecx,ebx
    8597:	mov    rdx,r13
    859a:	mov    rsi,rbp
    859d:	mov    rdi,QWORD PTR [rax+0x850]
    85a4:	call   17550 <bdrv_read>
    85a9:	test   eax,eax
    85ab:	js     8668 <vmdk_read+0x128>
    85b1:	mov    ecx,ebx
    85b3:	shl    ecx,0x9
    85b6:	movsxd rcx,ecx
    85b9:	sub    r12d,ebx
    85bc:	movsxd rbx,ebx
    85bf:	add    r13,rcx
    85c2:	add    rbp,rbx
    85c5:	test   r12d,r12d
    85c8:	jle    8680 <vmdk_read+0x140>
    85ce:	mov    rdx,rbp
    85d1:	xor    ecx,ecx
    85d3:	xor    esi,esi
    85d5:	mov    rdi,r15
    85d8:	shl    rdx,0x9
    85dc:	call   8140 <get_cluster_offset>
    85e1:	mov    esi,DWORD PTR [r14+0xc0]
    85e8:	mov    rcx,rax
    85eb:	mov    rax,rbp
    85ee:	cqo    
    85f0:	mov    rbx,rsi
    85f3:	idiv   rsi
    85f6:	sub    ebx,edx
    85f8:	cmp    ebx,r12d
    85fb:	cmovg  ebx,r12d
    85ff:	test   rcx,rcx
    8602:	je     8570 <vmdk_read+0x30>
    8608:	shl    edx,0x9
    860b:	mov    r8d,ebx
    860e:	mov    rdi,QWORD PTR [r14]
    8611:	shl    r8d,0x9
    8615:	movsxd rsi,edx
    8618:	mov    rdx,r13
    861b:	add    rsi,rcx
    861e:	mov    ecx,r8d
    8621:	mov    DWORD PTR [rsp+0x8],r8d
    8626:	call   17e40 <bdrv_pread>
    862b:	mov    r8d,DWORD PTR [rsp+0x8]
    8630:	cmp    r8d,eax
    8633:	jne    8668 <vmdk_read+0x128>
    8635:	movsxd rcx,r8d
    8638:	jmp    85b9 <vmdk_read+0x79>
    863d:	nop    DWORD PTR [rax]
    8640:	mov    ecx,ebx
    8642:	xor    esi,esi
    8644:	mov    rdi,r13
    8647:	shl    ecx,0x9
    864a:	movsxd rcx,ecx
    864d:	mov    rdx,rcx
    8650:	mov    QWORD PTR [rsp+0x8],rcx
    8655:	call   3240 <memset@plt>
    865a:	mov    rcx,QWORD PTR [rsp+0x8]
    865f:	jmp    85b9 <vmdk_read+0x79>
    8664:	nop    DWORD PTR [rax+0x0]
    8668:	add    rsp,0x18
    866c:	mov    eax,0xffffffff
    8671:	pop    rbx
    8672:	pop    rbp
    8673:	pop    r12
    8675:	pop    r13
    8677:	pop    r14
    8679:	pop    r15
    867b:	ret    
    867c:	nop    DWORD PTR [rax+0x0]
    8680:	add    rsp,0x18
    8684:	xor    eax,eax
    8686:	pop    rbx
    8687:	pop    rbp
    8688:	pop    r12
    868a:	pop    r13
    868c:	pop    r14
    868e:	pop    r15
    8690:	ret    
    8691:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    869c:	nop    DWORD PTR [rax+0x0]

00000000000086a0 <vmdk_write_cid.isra.7>:
    86a0:	push   r13
    86a2:	mov    ecx,0x2800
    86a7:	mov    r13d,esi
    86aa:	mov    esi,0x200
    86af:	push   r12
    86b1:	push   rbp
    86b2:	mov    rbp,rdi
    86b5:	push   rbx
    86b6:	sub    rsp,0x5018
    86bd:	mov    rdi,QWORD PTR [rdi]
    86c0:	mov    rax,QWORD PTR fs:0x28
    86c9:	mov    QWORD PTR [rsp+0x5008],rax
    86d1:	xor    eax,eax
    86d3:	mov    rbx,rsp
    86d6:	mov    rdx,rbx
    86d9:	call   17e40 <bdrv_pread>
    86de:	cmp    eax,0x2800
    86e3:	jne    87b0 <vmdk_write_cid.isra.7+0x110>
    86e9:	lea    rsi,[rip+0x16a93]        # 1f183 <Te0+0x403>
    86f0:	mov    rdi,rbx
    86f3:	lea    r12,[rsp+0x2800]
    86fb:	call   36a0 <strstr@plt>
    8700:	mov    esi,0x2800
    8705:	mov    rdi,r12
    8708:	mov    rdx,rax
    870b:	call   48a0 <pstrcpy>
    8710:	lea    rsi,[rip+0x16a72]        # 1f189 <Te0+0x409>
    8717:	mov    rdi,rbx
    871a:	call   36a0 <strstr@plt>
    871f:	test   rax,rax
    8722:	je     8762 <vmdk_write_cid.isra.7+0xc2>
    8724:	lea    rdi,[rax+0x4]
    8728:	mov    rax,rbx
    872b:	mov    edx,0x1
    8730:	mov    r9d,r13d
    8733:	sub    rax,rdi
    8736:	lea    r8,[rip+0x16a50]        # 1f18d <Te0+0x40d>
    873d:	mov    rcx,0xffffffffffffffff
    8744:	lea    rsi,[rax+0x2800]
    874b:	xor    eax,eax
    874d:	call   3060 <__snprintf_chk@plt>
    8752:	mov    rdx,r12
    8755:	mov    esi,0x2800
    875a:	mov    rdi,rbx
    875d:	call   48e0 <pstrcat>
    8762:	mov    rdi,QWORD PTR [rbp+0x0]
    8766:	mov    ecx,0x2800
    876b:	mov    rdx,rbx
    876e:	mov    esi,0x200
    8773:	call   18450 <bdrv_pwrite>
    8778:	cmp    eax,0x2800
    877d:	setne  al
    8780:	movzx  eax,al
    8783:	neg    eax
    8785:	mov    rcx,QWORD PTR [rsp+0x5008]
    878d:	xor    rcx,QWORD PTR fs:0x28
    8796:	jne    87b7 <vmdk_write_cid.isra.7+0x117>
    8798:	add    rsp,0x5018
    879f:	pop    rbx
    87a0:	pop    rbp
    87a1:	pop    r12
    87a3:	pop    r13
    87a5:	ret    
    87a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    87b0:	mov    eax,0xffffffff
    87b5:	jmp    8785 <vmdk_write_cid.isra.7+0xe5>
    87b7:	call   3190 <__stack_chk_fail@plt>
    87bc:	nop    DWORD PTR [rax+0x0]

00000000000087c0 <vmdk_write>:
    87c0:	push   r15
    87c2:	push   r14
    87c4:	push   r13
    87c6:	push   r12
    87c8:	mov    r12,rsi
    87cb:	push   rbp
    87cc:	mov    ebp,ecx
    87ce:	push   rbx
    87cf:	sub    rsp,0x48
    87d3:	mov    r8,QWORD PTR [rdi]
    87d6:	mov    r14,QWORD PTR [rdi+0x40]
    87da:	mov    QWORD PTR [rsp+0x10],rdi
    87df:	mov    rcx,QWORD PTR fs:0x28
    87e8:	mov    QWORD PTR [rsp+0x38],rcx
    87ed:	xor    ecx,ecx
    87ef:	cmp    r8,rsi
    87f2:	jl     8982 <vmdk_write+0x1c2>
    87f8:	lea    rax,[rsp+0x20]
    87fd:	mov    r13,rdx
    8800:	mov    QWORD PTR [rsp+0x18],rax
    8805:	test   ebp,ebp
    8807:	jg     8834 <vmdk_write+0x74>
    8809:	jmp    897e <vmdk_write+0x1be>
    880e:	xchg   ax,ax
    8810:	mov    eax,DWORD PTR [rip+0x1fcfa]        # 28510 <cid_update.13920>
    8816:	sub    ebp,ebx
    8818:	movsxd r9,r15d
    881b:	movsxd rbx,ebx
    881e:	add    r12,rbx
    8821:	add    r13,r9
    8824:	test   eax,eax
    8826:	je     8958 <vmdk_write+0x198>
    882c:	test   ebp,ebp
    882e:	jle    897e <vmdk_write+0x1be>
    8834:	mov    ebx,DWORD PTR [r14+0xc0]
    883b:	mov    rdx,r12
    883e:	mov    rsi,QWORD PTR [rsp+0x18]
    8843:	mov    ecx,0x1
    8848:	mov    rdi,QWORD PTR [rsp+0x10]
    884d:	lea    r8d,[rbx-0x1]
    8851:	and    r8d,r12d
    8854:	sub    ebx,r8d
    8857:	mov    DWORD PTR [rsp+0x8],r8d
    885c:	cmp    ebx,ebp
    885e:	cmovg  ebx,ebp
    8861:	shl    rdx,0x9
    8865:	call   8140 <get_cluster_offset>
    886a:	mov    r8d,DWORD PTR [rsp+0x8]
    886f:	test   rax,rax
    8872:	je     8930 <vmdk_write+0x170>
    8878:	shl    r8d,0x9
    887c:	mov    r15d,ebx
    887f:	mov    rdi,QWORD PTR [r14]
    8882:	mov    rdx,r13
    8885:	shl    r15d,0x9
    8889:	movsxd rsi,r8d
    888c:	add    rsi,rax
    888f:	mov    ecx,r15d
    8892:	call   18450 <bdrv_pwrite>
    8897:	cmp    r15d,eax
    889a:	jne    8930 <vmdk_write+0x170>
    88a0:	mov    edx,DWORD PTR [rsp+0x30]
    88a4:	test   edx,edx
    88a6:	je     8810 <vmdk_write+0x50>
    88ac:	mov    rax,QWORD PTR [rsp+0x10]
    88b1:	mov    edx,DWORD PTR [rsp+0x28]
    88b5:	mov    ecx,0x4
    88ba:	mov    r8,QWORD PTR [rax+0x40]
    88be:	mov    eax,DWORD PTR [rsp+0x2c]
    88c2:	shl    rax,0x9
    88c6:	mov    rdi,QWORD PTR [r8]
    88c9:	mov    QWORD PTR [rsp+0x8],r8
    88ce:	lea    rsi,[rax+rdx*4]
    88d2:	mov    rdx,QWORD PTR [rsp+0x18]
    88d7:	call   18450 <bdrv_pwrite>
    88dc:	cmp    eax,0x4
    88df:	jne    8930 <vmdk_write+0x170>
    88e1:	mov    r8,QWORD PTR [rsp+0x8]
    88e6:	cmp    QWORD PTR [r8+0x10],0x0
    88eb:	je     8810 <vmdk_write+0x50>
    88f1:	mov    edx,DWORD PTR [rsp+0x24]
    88f5:	mov    rax,QWORD PTR [r8+0x20]
    88f9:	mov    ecx,0x4
    88fe:	mov    eax,DWORD PTR [rax+rdx*4]
    8901:	mov    edx,DWORD PTR [rsp+0x28]
    8905:	mov    DWORD PTR [rsp+0x2c],eax
    8909:	shl    rax,0x9
    890d:	mov    rdi,QWORD PTR [r8]
    8910:	lea    rsi,[rax+rdx*4]
    8914:	mov    rdx,QWORD PTR [rsp+0x18]
    8919:	call   18450 <bdrv_pwrite>
    891e:	cmp    eax,0x4
    8921:	je     8810 <vmdk_write+0x50>
    8927:	nop    WORD PTR [rax+rax*1+0x0]
    8930:	mov    eax,0xffffffff
    8935:	mov    rcx,QWORD PTR [rsp+0x38]
    893a:	xor    rcx,QWORD PTR fs:0x28
    8943:	jne    89a6 <vmdk_write+0x1e6>
    8945:	add    rsp,0x48
    8949:	pop    rbx
    894a:	pop    rbp
    894b:	pop    r12
    894d:	pop    r13
    894f:	pop    r14
    8951:	pop    r15
    8953:	ret    
    8954:	nop    DWORD PTR [rax+0x0]
    8958:	xor    edi,edi
    895a:	call   33e0 <time@plt>
    895f:	mov    rcx,QWORD PTR [rsp+0x10]
    8964:	mov    esi,eax
    8966:	mov    rdi,QWORD PTR [rcx+0x40]
    896a:	call   86a0 <vmdk_write_cid.isra.7>
    896f:	add    DWORD PTR [rip+0x1fb9a],0x1        # 28510 <cid_update.13920>
    8976:	test   ebp,ebp
    8978:	jg     8834 <vmdk_write+0x74>
    897e:	xor    eax,eax
    8980:	jmp    8935 <vmdk_write+0x175>
    8982:	mov    rdi,QWORD PTR [rip+0x1fb77]        # 28500 <stderr@@GLIBC_2.2.5>
    8989:	mov    rcx,rsi
    898c:	lea    rdx,[rip+0x1681d]        # 1f1b0 <Te0+0x430>
    8993:	xor    eax,eax
    8995:	mov    esi,0x1
    899a:	call   3630 <__fprintf_chk@plt>
    899f:	mov    eax,0xffffffff
    89a4:	jmp    8935 <vmdk_write+0x175>
    89a6:	call   3190 <__stack_chk_fail@plt>
    89ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000089b0 <vmdk_parent_open.isra.8>:
    89b0:	push   r12
    89b2:	mov    ecx,0x2800
    89b7:	mov    r12,rsi
    89ba:	mov    esi,0x200
    89bf:	push   rbp
    89c0:	mov    rbp,rdi
    89c3:	push   rbx
    89c4:	sub    rsp,0x2ca0
    89cb:	mov    rdi,QWORD PTR [rdi]
    89ce:	mov    rax,QWORD PTR fs:0x28
    89d7:	mov    QWORD PTR [rsp+0x2c98],rax
    89df:	xor    eax,eax
    89e1:	lea    rbx,[rsp+0x490]
    89e9:	mov    rdx,rbx
    89ec:	call   17e40 <bdrv_pread>
    89f1:	cmp    eax,0x2800
    89f6:	jne    8b40 <vmdk_parent_open.isra.8+0x190>
    89fc:	mov    rdi,rbx
    89ff:	lea    rsi,[rip+0x1678b]        # 1f191 <Te0+0x411>
    8a06:	call   36a0 <strstr@plt>
    8a0b:	mov    rbx,rax
    8a0e:	xor    eax,eax
    8a10:	test   rbx,rbx
    8a13:	je     8ae5 <vmdk_parent_open.isra.8+0x135>
    8a19:	add    rbx,0x14
    8a1d:	mov    esi,0x22
    8a22:	mov    rdi,rbx
    8a25:	call   31d0 <strchr@plt>
    8a2a:	test   rax,rax
    8a2d:	je     8b40 <vmdk_parent_open.isra.8+0x190>
    8a33:	sub    rax,rbx
    8a36:	cmp    rax,0x3ff
    8a3c:	ja     8b40 <vmdk_parent_open.isra.8+0x190>
    8a42:	lea    rsi,[rax+0x1]
    8a46:	mov    rax,QWORD PTR [rbp+0x0]
    8a4a:	mov    rdx,rbx
    8a4d:	lea    rdi,[rax+0x448]
    8a54:	call   48a0 <pstrcpy>
    8a59:	mov    rax,QWORD PTR [rbp+0x0]
    8a5d:	mov    rdx,rsp
    8a60:	mov    edi,0x1
    8a65:	lea    rsi,[rax+0x448]
    8a6c:	call   3150 <__xstat64@plt>
    8a71:	test   eax,eax
    8a73:	mov    rax,QWORD PTR [rbp+0x0]
    8a77:	jne    8b08 <vmdk_parent_open.isra.8+0x158>
    8a7d:	lea    rbx,[rsp+0x90]
    8a85:	lea    rdx,[rax+0x448]
    8a8c:	mov    esi,0x400
    8a91:	mov    rdi,rbx
    8a94:	call   48a0 <pstrcpy>
    8a99:	mov    r12,QWORD PTR [rbp+0x0]
    8a9d:	lea    rdi,[rip+0x16b9e]        # 1f642 <desc_template.13939+0x382>
    8aa4:	call   17330 <bdrv_new>
    8aa9:	mov    QWORD PTR [r12+0x850],rax
    8ab1:	mov    rax,QWORD PTR [rbp+0x0]
    8ab5:	mov    rdi,QWORD PTR [rax+0x850]
    8abc:	test   rdi,rdi
    8abf:	je     8b30 <vmdk_parent_open.isra.8+0x180>
    8ac1:	mov    DWORD PTR [rip+0x1fa49],0x1        # 28514 <parent_open>
    8acb:	xor    edx,edx
    8acd:	mov    rsi,rbx
    8ad0:	call   18440 <bdrv_open>
    8ad5:	test   eax,eax
    8ad7:	js     8b2c <vmdk_parent_open.isra.8+0x17c>
    8ad9:	mov    DWORD PTR [rip+0x1fa31],0x0        # 28514 <parent_open>
    8ae3:	xor    eax,eax
    8ae5:	mov    rcx,QWORD PTR [rsp+0x2c98]
    8aed:	xor    rcx,QWORD PTR fs:0x28
    8af6:	jne    8b47 <vmdk_parent_open.isra.8+0x197>
    8af8:	add    rsp,0x2ca0
    8aff:	pop    rbx
    8b00:	pop    rbp
    8b01:	pop    r12
    8b03:	ret    
    8b04:	nop    DWORD PTR [rax+0x0]
    8b08:	lea    rbx,[rsp+0x90]
    8b10:	lea    rcx,[rax+0x448]
    8b17:	mov    rdx,r12
    8b1a:	mov    esi,0x400
    8b1f:	mov    rdi,rbx
    8b22:	call   17220 <path_combine>
    8b27:	jmp    8a99 <vmdk_parent_open.isra.8+0xe9>
    8b2c:	mov    rax,QWORD PTR [rbp+0x0]
    8b30:	mov    rdi,rax
    8b33:	call   174e0 <bdrv_close>
    8b38:	nop    DWORD PTR [rax+rax*1+0x0]
    8b40:	mov    eax,0xffffffff
    8b45:	jmp    8ae5 <vmdk_parent_open.isra.8+0x135>
    8b47:	call   3190 <__stack_chk_fail@plt>
    8b4c:	nop    DWORD PTR [rax+0x0]

0000000000008b50 <vmdk_open>:
    8b50:	push   r13
    8b52:	push   r12
    8b54:	mov    r12,rsi
    8b57:	push   rbp
    8b58:	mov    rbp,rdi
    8b5b:	push   rbx
    8b5c:	sub    rsp,0xa8
    8b63:	mov    ecx,DWORD PTR [rip+0x1f9ab]        # 28514 <parent_open>
    8b69:	mov    rbx,QWORD PTR [rdi+0x40]
    8b6d:	mov    rax,QWORD PTR fs:0x28
    8b76:	mov    QWORD PTR [rsp+0x98],rax
    8b7e:	xor    eax,eax
    8b80:	test   ecx,ecx
    8b82:	mov    rdi,rbx
    8b85:	cmovne edx,eax
    8b88:	call   183c0 <bdrv_file_open>
    8b8d:	test   eax,eax
    8b8f:	js     8cfd <vmdk_open+0x1ad>
    8b95:	mov    rdi,QWORD PTR [rbx]
    8b98:	xor    esi,esi
    8b9a:	lea    rdx,[rsp+0xc]
    8b9f:	mov    ecx,0x4
    8ba4:	call   17e40 <bdrv_pread>
    8ba9:	cmp    eax,0x4
    8bac:	jne    8d90 <vmdk_open+0x240>
    8bb2:	mov    eax,DWORD PTR [rsp+0xc]
    8bb6:	bswap  eax
    8bb8:	mov    DWORD PTR [rsp+0xc],eax
    8bbc:	cmp    eax,0x434f5744
    8bc1:	je     8d28 <vmdk_open+0x1d8>
    8bc7:	cmp    eax,0x4b444d56
    8bcc:	jne    8d90 <vmdk_open+0x240>
    8bd2:	mov    rdi,QWORD PTR [rbx]
    8bd5:	lea    rdx,[rsp+0x40]
    8bda:	mov    ecx,0x49
    8bdf:	mov    esi,0x4
    8be4:	call   17e40 <bdrv_pread>
    8be9:	cmp    eax,0x49
    8bec:	jne    8d90 <vmdk_open+0x240>
    8bf2:	mov    rax,QWORD PTR [rsp+0x48]
    8bf7:	mov    rdx,QWORD PTR [rsp+0x50]
    8bfc:	mov    QWORD PTR [rbp+0x0],rax
    8c00:	mov    eax,DWORD PTR [rsp+0x68]
    8c04:	mov    DWORD PTR [rbx+0xc0],edx
    8c0a:	mov    DWORD PTR [rbx+0x30],eax
    8c0d:	imul   eax,edx
    8c10:	mov    DWORD PTR [rbx+0x2c],eax
    8c13:	test   eax,eax
    8c15:	je     8d90 <vmdk_open+0x240>
    8c1b:	mov    ecx,eax
    8c1d:	mov    rax,QWORD PTR [rbp+0x0]
    8c21:	mov    rsi,r12
    8c24:	add    rax,rcx
    8c27:	sub    rax,0x1
    8c2b:	cqo    
    8c2d:	idiv   rcx
    8c30:	mov    edx,DWORD PTR [rip+0x1f8de]        # 28514 <parent_open>
    8c36:	mov    DWORD PTR [rbx+0x28],eax
    8c39:	mov    rax,QWORD PTR [rsp+0x6c]
    8c3e:	shl    rax,0x9
    8c42:	mov    QWORD PTR [rbx+0x8],rax
    8c46:	mov    rax,QWORD PTR [rsp+0x74]
    8c4b:	shl    rax,0x9
    8c4f:	mov    QWORD PTR [rbx+0x10],rax
    8c53:	xor    eax,eax
    8c55:	test   edx,edx
    8c57:	setne  al
    8c5a:	mov    DWORD PTR [rbx+0xc8],eax
    8c60:	mov    rdi,QWORD PTR [rbp+0x40]
    8c64:	call   89b0 <vmdk_parent_open.isra.8>
    8c69:	test   eax,eax
    8c6b:	jne    8d90 <vmdk_open+0x240>
    8c71:	mov    rdi,QWORD PTR [rbp+0x40]
    8c75:	mov    esi,0x1
    8c7a:	call   8040 <vmdk_read_cid.isra.2>
    8c7f:	mov    DWORD PTR [rbx+0xc4],eax
    8c85:	mov    eax,DWORD PTR [rbx+0x28]
    8c88:	lea    ebp,[rax*4+0x0]
    8c8f:	movsxd r13,ebp
    8c92:	mov    rdi,r13
    8c95:	call   4cb0 <qemu_malloc>
    8c9a:	mov    rsi,QWORD PTR [rbx+0x8]
    8c9e:	mov    rdi,QWORD PTR [rbx]
    8ca1:	mov    ecx,ebp
    8ca3:	mov    QWORD PTR [rbx+0x18],rax
    8ca7:	mov    rdx,rax
    8caa:	call   17e40 <bdrv_pread>
    8caf:	mov    r12d,eax
    8cb2:	cmp    eax,ebp
    8cb4:	jne    8d90 <vmdk_open+0x240>
    8cba:	cmp    QWORD PTR [rbx+0x10],0x0
    8cbf:	je     8ce8 <vmdk_open+0x198>
    8cc1:	mov    rdi,r13
    8cc4:	call   4cb0 <qemu_malloc>
    8cc9:	mov    rsi,QWORD PTR [rbx+0x10]
    8ccd:	mov    rdi,QWORD PTR [rbx]
    8cd0:	mov    ecx,r12d
    8cd3:	mov    QWORD PTR [rbx+0x20],rax
    8cd7:	mov    rdx,rax
    8cda:	call   17e40 <bdrv_pread>
    8cdf:	cmp    eax,r12d
    8ce2:	jne    8d90 <vmdk_open+0x240>
    8ce8:	mov    edi,DWORD PTR [rbx+0x30]
    8ceb:	shl    edi,0x4
    8cee:	shl    rdi,0x2
    8cf2:	call   4cb0 <qemu_malloc>
    8cf7:	mov    QWORD PTR [rbx+0x38],rax
    8cfb:	xor    eax,eax
    8cfd:	mov    rcx,QWORD PTR [rsp+0x98]
    8d05:	xor    rcx,QWORD PTR fs:0x28
    8d0e:	jne    8dbd <vmdk_open+0x26d>
    8d14:	add    rsp,0xa8
    8d1b:	pop    rbx
    8d1c:	pop    rbp
    8d1d:	pop    r12
    8d1f:	pop    r13
    8d21:	ret    
    8d22:	nop    WORD PTR [rax+rax*1+0x0]
    8d28:	mov    rdi,QWORD PTR [rbx]
    8d2b:	lea    rdx,[rsp+0x10]
    8d30:	mov    ecx,0x28
    8d35:	mov    esi,0x4
    8d3a:	call   17e40 <bdrv_pread>
    8d3f:	cmp    eax,0x28
    8d42:	jne    8d90 <vmdk_open+0x240>
    8d44:	mov    eax,DWORD PTR [rsp+0x1c]
    8d48:	mov    DWORD PTR [rbx+0x30],0x200
    8d4f:	mov    DWORD PTR [rbx+0x28],0x40
    8d56:	mov    DWORD PTR [rbx+0xc0],eax
    8d5c:	mov    eax,DWORD PTR [rsp+0x18]
    8d60:	mov    QWORD PTR [rbp+0x0],rax
    8d64:	mov    eax,DWORD PTR [rsp+0x20]
    8d68:	mov    QWORD PTR [rbx+0x10],0x0
    8d70:	shl    eax,0x9
    8d73:	mov    QWORD PTR [rbx+0x8],rax
    8d77:	mov    eax,DWORD PTR [rbx+0x30]
    8d7a:	imul   eax,DWORD PTR [rbx+0xc0]
    8d81:	mov    DWORD PTR [rbx+0x2c],eax
    8d84:	jmp    8c85 <vmdk_open+0x135>
    8d89:	nop    DWORD PTR [rax+0x0]
    8d90:	mov    rdi,QWORD PTR [rbx+0x20]
    8d94:	call   4ca0 <qemu_free>
    8d99:	mov    rdi,QWORD PTR [rbx+0x18]
    8d9d:	call   4ca0 <qemu_free>
    8da2:	mov    rdi,QWORD PTR [rbx+0x38]
    8da6:	call   4ca0 <qemu_free>
    8dab:	mov    rdi,QWORD PTR [rbx]
    8dae:	call   17470 <bdrv_delete>
    8db3:	mov    eax,0xffffffff
    8db8:	jmp    8cfd <vmdk_open+0x1ad>
    8dbd:	call   3190 <__stack_chk_fail@plt>
    8dc2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    8dcd:	nop    DWORD PTR [rax]

0000000000008dd0 <vmdk_create.part.5>:
    8dd0:	push   r15
    8dd2:	mov    r15,rsi
    8dd5:	mov    esi,0x241
    8dda:	push   r14
    8ddc:	mov    r14,rdi
    8ddf:	push   r13
    8de1:	push   r12
    8de3:	push   rbp
    8de4:	push   rbx
    8de5:	sub    rsp,0x488
    8dec:	mov    DWORD PTR [rsp+0x4],edx
    8df0:	mov    edx,0x1a4
    8df5:	mov    rax,QWORD PTR fs:0x28
    8dfe:	mov    QWORD PTR [rsp+0x478],rax
    8e06:	xor    eax,eax
    8e08:	call   3500 <open64@plt>
    8e0d:	test   eax,eax
    8e0f:	js     9103 <vmdk_create.part.5+0x333>
    8e15:	mov    ebx,eax
    8e17:	lea    rsi,[rsp+0x1c]
    8e1c:	movabs rax,0x300000001
    8e26:	mov    DWORD PTR [rsp+0x1c],0x564d444b
    8e2e:	mov    QWORD PTR [rsp+0x20],rax
    8e33:	mov    rax,r15
    8e36:	mov    edi,ebx
    8e38:	lea    rbp,[rsp+0x20]
    8e3d:	add    rax,0x7f
    8e41:	lea    r12,[r15+0xfe]
    8e48:	mov    BYTE PTR [rsp+0x64],0x0
    8e4d:	cmovns r12,rax
    8e51:	mov    QWORD PTR [rsp+0x28],r15
    8e56:	mov    QWORD PTR [rsp+0x30],0x80
    8e5f:	sar    r12,0x7
    8e63:	mov    DWORD PTR [rsp+0x48],0x200
    8e6b:	add    r12d,0x1ff
    8e72:	mov    QWORD PTR [rsp+0x38],0x1
    8e7b:	shr    r12d,0x9
    8e7f:	mov    DWORD PTR [rsp+0x65],0xa0d200a
    8e87:	mov    eax,r12d
    8e8a:	lea    edx,[r12*4+0x0]
    8e92:	mov    QWORD PTR [rsp+0x40],0x14
    8e9b:	lea    rax,[rax*4+0x1ff]
    8ea3:	mov    QWORD PTR [rsp+0x4c],0x15
    8eac:	mov    r13,rax
    8eaf:	shr    r13,0x9
    8eb3:	lea    rax,[r13+rdx*1+0x15]
    8eb8:	mov    QWORD PTR [rsp+0x8],r13
    8ebd:	mov    QWORD PTR [rsp+0x54],rax
    8ec2:	add    rax,r13
    8ec5:	lea    rax,[rdx+rax*1+0x7f]
    8eca:	mov    edx,0x4
    8ecf:	and    eax,0x3fffff80
    8ed4:	mov    QWORD PTR [rsp+0x5c],rax
    8ed9:	call   3130 <write@plt>
    8ede:	mov    edx,0x49
    8ee3:	mov    rsi,rbp
    8ee6:	mov    edi,ebx
    8ee8:	call   3130 <write@plt>
    8eed:	mov    rsi,QWORD PTR [rsp+0x5c]
    8ef2:	mov    edi,ebx
    8ef4:	shl    rsi,0x9
    8ef8:	call   34c0 <ftruncate64@plt>
    8efd:	mov    rsi,QWORD PTR [rsp+0x4c]
    8f02:	xor    edx,edx
    8f04:	mov    edi,ebx
    8f06:	shl    rsi,0x9
    8f0a:	call   3620 <lseek64@plt>
    8f0f:	mov    eax,DWORD PTR [rsp+0x4c]
    8f13:	add    eax,r13d
    8f16:	mov    DWORD PTR [rsp+0x18],eax
    8f1a:	test   r12d,r12d
    8f1d:	je     90e0 <vmdk_create.part.5+0x310>
    8f23:	xor    ebp,ebp
    8f25:	lea    r13,[rsp+0x18]
    8f2a:	jmp    8f32 <vmdk_create.part.5+0x162>
    8f2c:	nop    DWORD PTR [rax+0x0]
    8f30:	mov    ebp,eax
    8f32:	mov    edx,0x4
    8f37:	mov    rsi,r13
    8f3a:	mov    edi,ebx
    8f3c:	call   3130 <write@plt>
    8f41:	lea    eax,[rbp+0x1]
    8f44:	add    DWORD PTR [rsp+0x18],0x4
    8f49:	cmp    eax,r12d
    8f4c:	jne    8f30 <vmdk_create.part.5+0x160>
    8f4e:	mov    rsi,QWORD PTR [rsp+0x54]
    8f53:	xor    edx,edx
    8f55:	mov    edi,ebx
    8f57:	xor    r12d,r12d
    8f5a:	shl    rsi,0x9
    8f5e:	call   3620 <lseek64@plt>
    8f63:	mov    eax,DWORD PTR [rsp+0x8]
    8f67:	add    eax,DWORD PTR [rsp+0x54]
    8f6b:	mov    DWORD PTR [rsp+0x18],eax
    8f6f:	jmp    8f7b <vmdk_create.part.5+0x1ab>
    8f71:	nop    DWORD PTR [rax+0x0]
    8f78:	mov    r12d,eax
    8f7b:	mov    edx,0x4
    8f80:	mov    rsi,r13
    8f83:	mov    edi,ebx
    8f85:	call   3130 <write@plt>
    8f8a:	lea    eax,[r12+0x1]
    8f8f:	add    DWORD PTR [rsp+0x18],0x4
    8f94:	cmp    r12d,ebp
    8f97:	jne    8f78 <vmdk_create.part.5+0x1a8>
    8f99:	mov    rdi,r14
    8f9c:	mov    esi,0x5c
    8fa1:	lea    r12,[rsp+0x70]
    8fa6:	call   3200 <strrchr@plt>
    8fab:	mov    esi,0x2f
    8fb0:	lea    rdx,[rax+0x1]
    8fb4:	test   rax,rax
    8fb7:	cmovne r14,rdx
    8fbb:	mov    rdi,r14
    8fbe:	call   3200 <strrchr@plt>
    8fc3:	mov    esi,0x3a
    8fc8:	lea    rdx,[rax+0x1]
    8fcc:	test   rax,rax
    8fcf:	cmovne r14,rdx
    8fd3:	mov    rdi,r14
    8fd6:	call   3200 <strrchr@plt>
    8fdb:	test   rax,rax
    8fde:	lea    rdx,[rax+0x1]
    8fe2:	mov    rax,r15
    8fe5:	cmovne r14,rdx
    8fe9:	movabs rdx,0x8208208208208209
    8ff3:	imul   rdx
    8ff6:	mov    rax,r15
    8ff9:	sar    rax,0x3f
    8ffd:	lea    rbp,[rdx+r15*1]
    9001:	sar    rbp,0x9
    9005:	sub    rbp,rax
    9008:	mov    eax,DWORD PTR [rsp+0x4]
    900c:	and    eax,0x4
    900f:	cmp    eax,0x1
    9012:	sbb    r13d,r13d
    9015:	xor    edi,edi
    9017:	call   33e0 <time@plt>
    901c:	and    r13d,0xfffffffe
    9020:	push   rbp
    9021:	mov    ecx,0x400
    9026:	add    r13d,0x6
    902a:	mov    r9d,eax
    902d:	lea    r8,[rip+0x1628c]        # 1f2c0 <desc_template.13939>
    9034:	xor    eax,eax
    9036:	push   r13
    9038:	mov    edx,0x1
    903d:	mov    esi,0x400
    9042:	mov    rdi,r12
    9045:	push   r14
    9047:	push   r15
    9049:	call   3060 <__snprintf_chk@plt>
    904e:	add    rsp,0x20
    9052:	mov    rsi,QWORD PTR [rsp+0x38]
    9057:	xor    edx,edx
    9059:	mov    edi,ebx
    905b:	shl    rsi,0x9
    905f:	call   3620 <lseek64@plt>
    9064:	mov    rdx,r12
    9067:	mov    ecx,DWORD PTR [rdx]
    9069:	add    rdx,0x4
    906d:	lea    eax,[rcx-0x1010101]
    9073:	not    ecx
    9075:	and    eax,ecx
    9077:	and    eax,0x80808080
    907c:	je     9067 <vmdk_create.part.5+0x297>
    907e:	mov    ecx,eax
    9080:	mov    rsi,r12
    9083:	mov    edi,ebx
    9085:	shr    ecx,0x10
    9088:	test   eax,0x8080
    908d:	cmove  eax,ecx
    9090:	lea    rcx,[rdx+0x2]
    9094:	cmove  rdx,rcx
    9098:	mov    ecx,eax
    909a:	add    cl,al
    909c:	sbb    rdx,0x3
    90a0:	sub    rdx,r12
    90a3:	call   3130 <write@plt>
    90a8:	mov    edi,ebx
    90aa:	call   3260 <close@plt>
    90af:	xor    eax,eax
    90b1:	mov    rcx,QWORD PTR [rsp+0x478]
    90b9:	xor    rcx,QWORD PTR fs:0x28
    90c2:	jne    910a <vmdk_create.part.5+0x33a>
    90c4:	add    rsp,0x488
    90cb:	pop    rbx
    90cc:	pop    rbp
    90cd:	pop    r12
    90cf:	pop    r13
    90d1:	pop    r14
    90d3:	pop    r15
    90d5:	ret    
    90d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    90e0:	mov    rsi,QWORD PTR [rsp+0x54]
    90e5:	xor    edx,edx
    90e7:	mov    edi,ebx
    90e9:	shl    rsi,0x9
    90ed:	call   3620 <lseek64@plt>
    90f2:	mov    eax,DWORD PTR [rsp+0x8]
    90f6:	add    eax,DWORD PTR [rsp+0x54]
    90fa:	mov    DWORD PTR [rsp+0x18],eax
    90fe:	jmp    8f99 <vmdk_create.part.5+0x1c9>
    9103:	mov    eax,0xffffffff
    9108:	jmp    90b1 <vmdk_create.part.5+0x2e1>
    910a:	call   3190 <__stack_chk_fail@plt>
    910f:	nop

0000000000009110 <vmdk_create>:
    9110:	test   rdx,rdx
    9113:	je     9120 <vmdk_create+0x10>
    9115:	mov    rsi,rdx
    9118:	jmp    7bb0 <vmdk_snapshot_create>
    911d:	nop    DWORD PTR [rax]
    9120:	mov    edx,ecx
    9122:	jmp    8dd0 <vmdk_create.part.5>
    9127:	nop    WORD PTR [rax+rax*1+0x0]

0000000000009130 <cloop_close>:
    9130:	push   rbx
    9131:	mov    rbx,QWORD PTR [rdi+0x40]
    9135:	mov    edi,DWORD PTR [rbx]
    9137:	call   3260 <close@plt>
    913c:	mov    eax,DWORD PTR [rbx+0x8]
    913f:	test   eax,eax
    9141:	jne    9160 <cloop_close+0x30>
    9143:	mov    rdi,QWORD PTR [rbx+0x20]
    9147:	call   3070 <free@plt>
    914c:	mov    rdi,QWORD PTR [rbx+0x28]
    9150:	call   3070 <free@plt>
    9155:	lea    rdi,[rbx+0x30]
    9159:	pop    rbx
    915a:	jmp    33c0 <inflateEnd@plt>
    915f:	nop
    9160:	mov    rdi,QWORD PTR [rbx+0x10]
    9164:	call   3070 <free@plt>
    9169:	jmp    9143 <cloop_close+0x13>
    916b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000009170 <cloop_read>:
    9170:	push   r15
    9172:	push   r14
    9174:	push   r13
    9176:	push   r12
    9178:	push   rbp
    9179:	push   rbx
    917a:	sub    rsp,0x18
    917e:	mov    rbp,QWORD PTR [rdi+0x40]
    9182:	test   ecx,ecx
    9184:	jle    929a <cloop_read+0x12a>
    918a:	lea    eax,[rcx-0x1]
    918d:	mov    r13,rsi
    9190:	mov    r12,rdx
    9193:	lea    rax,[rsi+rax*1+0x1]
    9198:	mov    QWORD PTR [rsp],rax
    919c:	lea    rax,[rbp+0x30]
    91a0:	mov    QWORD PTR [rsp+0x8],rax
    91a5:	nop    DWORD PTR [rax]
    91a8:	mov    ebx,DWORD PTR [rbp+0x18]
    91ab:	mov    rax,r13
    91ae:	cqo    
    91b0:	idiv   rbx
    91b3:	mov    rbx,rdx
    91b6:	mov    r14,rax
    91b9:	cmp    eax,DWORD PTR [rbp+0x1c]
    91bc:	je     9247 <cloop_read+0xd7>
    91c2:	mov    rdx,QWORD PTR [rbp+0x10]
    91c6:	cdqe   
    91c8:	mov    edi,DWORD PTR [rbp+0x0]
    91cb:	add    rax,0x1
    91cf:	mov    rsi,QWORD PTR [rdx+rax*8-0x8]
    91d4:	mov    r15,QWORD PTR [rdx+rax*8]
    91d8:	xor    edx,edx
    91da:	sub    r15d,esi
    91dd:	call   3620 <lseek64@plt>
    91e2:	mov    rsi,QWORD PTR [rbp+0x20]
    91e6:	mov    edi,DWORD PTR [rbp+0x0]
    91e9:	mov    edx,r15d
    91ec:	call   4600 <qemu_read_ok>
    91f1:	test   eax,eax
    91f3:	js     92b0 <cloop_read+0x140>
    91f9:	mov    rax,QWORD PTR [rbp+0x20]
    91fd:	mov    DWORD PTR [rbp+0x38],r15d
    9201:	mov    r15,QWORD PTR [rsp+0x8]
    9206:	mov    QWORD PTR [rbp+0x30],rax
    920a:	mov    rax,QWORD PTR [rbp+0x28]
    920e:	mov    rdi,r15
    9211:	mov    QWORD PTR [rbp+0x48],rax
    9215:	mov    eax,DWORD PTR [rbp+0x4]
    9218:	mov    DWORD PTR [rbp+0x50],eax
    921b:	call   35d0 <inflateReset@plt>
    9220:	test   eax,eax
    9222:	jne    92b0 <cloop_read+0x140>
    9228:	mov    esi,0x4
    922d:	mov    rdi,r15
    9230:	call   30f0 <inflate@plt>
    9235:	cmp    eax,0x1
    9238:	jne    92b0 <cloop_read+0x140>
    923a:	mov    eax,DWORD PTR [rbp+0x4]
    923d:	cmp    QWORD PTR [rbp+0x58],rax
    9241:	jne    92b0 <cloop_read+0x140>
    9243:	mov    DWORD PTR [rbp+0x1c],r14d
    9247:	shl    ebx,0x9
    924a:	lea    rdi,[r12+0x8]
    924f:	mov    rcx,r12
    9252:	add    r13,0x1
    9256:	mov    esi,ebx
    9258:	add    rsi,QWORD PTR [rbp+0x28]
    925c:	and    rdi,0xfffffffffffffff8
    9260:	add    r12,0x200
    9267:	mov    rax,QWORD PTR [rsi]
    926a:	sub    rcx,rdi
    926d:	mov    QWORD PTR [r12-0x200],rax
    9275:	mov    rax,QWORD PTR [rsi+0x1f8]
    927c:	sub    rsi,rcx
    927f:	add    ecx,0x200
    9285:	shr    ecx,0x3
    9288:	mov    QWORD PTR [r12-0x8],rax
    928d:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    9290:	cmp    QWORD PTR [rsp],r13
    9294:	jne    91a8 <cloop_read+0x38>
    929a:	add    rsp,0x18
    929e:	xor    eax,eax
    92a0:	pop    rbx
    92a1:	pop    rbp
    92a2:	pop    r12
    92a4:	pop    r13
    92a6:	pop    r14
    92a8:	pop    r15
    92aa:	ret    
    92ab:	nop    DWORD PTR [rax+rax*1+0x0]
    92b0:	add    rsp,0x18
    92b4:	mov    eax,0xffffffff
    92b9:	pop    rbx
    92ba:	pop    rbp
    92bb:	pop    r12
    92bd:	pop    r13
    92bf:	pop    r14
    92c1:	pop    r15
    92c3:	ret    
    92c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    92cf:	nop

00000000000092d0 <cloop_probe>:
    92d0:	sub    rsp,0x8
    92d4:	mov    eax,0x53
    92d9:	cmp    esi,0x53
    92dc:	cmovge esi,eax
    92df:	movsxd rdx,esi
    92e2:	mov    rsi,rdi
    92e5:	lea    rdi,[rip+0x160fc]        # 1f3e8 <desc_template.13939+0x128>
    92ec:	call   32d0 <memcmp@plt>
    92f1:	test   eax,eax
    92f3:	sete   al
    92f6:	add    rsp,0x8
    92fa:	movzx  eax,al
    92fd:	add    eax,eax
    92ff:	ret    

0000000000009300 <cloop_open>:
    9300:	push   r12
    9302:	xor    eax,eax
    9304:	push   rbp
    9305:	mov    rbp,rdi
    9308:	mov    rdi,rsi
    930b:	xor    esi,esi
    930d:	push   rbx
    930e:	mov    rbx,QWORD PTR [rbp+0x40]
    9312:	call   3500 <open64@plt>
    9317:	mov    DWORD PTR [rbx],eax
    9319:	test   eax,eax
    931b:	js     9468 <cloop_open+0x168>
    9321:	mov    DWORD PTR [rbp+0x8],0x1
    9328:	mov    edi,DWORD PTR [rbx]
    932a:	xor    edx,edx
    932c:	mov    esi,0x80
    9331:	call   3620 <lseek64@plt>
    9336:	test   rax,rax
    9339:	js     9476 <cloop_open+0x176>
    933f:	mov    edi,DWORD PTR [rbx]
    9341:	lea    rsi,[rbx+0x4]
    9345:	mov    edx,0x4
    934a:	call   4600 <qemu_read_ok>
    934f:	test   eax,eax
    9351:	js     9476 <cloop_open+0x176>
    9357:	mov    eax,DWORD PTR [rbx+0x4]
    935a:	mov    edi,DWORD PTR [rbx]
    935c:	lea    rsi,[rbx+0x8]
    9360:	mov    edx,0x4
    9365:	bswap  eax
    9367:	mov    DWORD PTR [rbx+0x4],eax
    936a:	call   4600 <qemu_read_ok>
    936f:	test   eax,eax
    9371:	js     9476 <cloop_open+0x176>
    9377:	mov    r12d,DWORD PTR [rbx+0x8]
    937b:	bswap  r12d
    937e:	mov    DWORD PTR [rbx+0x8],r12d
    9382:	shl    r12d,0x3
    9386:	mov    rdi,r12
    9389:	call   3450 <malloc@plt>
    938e:	mov    edi,DWORD PTR [rbx]
    9390:	mov    QWORD PTR [rbx+0x10],rax
    9394:	test   rax,rax
    9397:	je     9478 <cloop_open+0x178>
    939d:	mov    rdx,r12
    93a0:	mov    rsi,rax
    93a3:	call   32c0 <read@plt>
    93a8:	cmp    r12,rax
    93ab:	jg     9476 <cloop_open+0x176>
    93b1:	mov    eax,DWORD PTR [rbx+0x8]
    93b4:	mov    edi,0x2
    93b9:	test   eax,eax
    93bb:	je     9417 <cloop_open+0x117>
    93bd:	mov    rdx,QWORD PTR [rbx+0x10]
    93c1:	xor    ecx,ecx
    93c3:	mov    r8d,0x1
    93c9:	mov    rax,QWORD PTR [rdx]
    93cc:	bswap  rax
    93cf:	mov    QWORD PTR [rdx],rax
    93d2:	lea    eax,[rcx+0x1]
    93d5:	cmp    DWORD PTR [rbx+0x8],eax
    93d8:	jbe    9413 <cloop_open+0x113>
    93da:	nop    WORD PTR [rax+rax*1+0x0]
    93e0:	mov    rdx,QWORD PTR [rbx+0x10]
    93e4:	mov    edi,eax
    93e6:	lea    rsi,[rdx+rdi*8]
    93ea:	mov    rdx,QWORD PTR [rsi]
    93ed:	bswap  rdx
    93f0:	mov    QWORD PTR [rsi],rdx
    93f3:	test   eax,eax
    93f5:	je     9409 <cloop_open+0x109>
    93f7:	mov    rsi,QWORD PTR [rbx+0x10]
    93fb:	mov    rdx,QWORD PTR [rsi+rdi*8]
    93ff:	sub    edx,DWORD PTR [rsi+rcx*8]
    9402:	cmp    r8d,edx
    9405:	cmovb  r8d,edx
    9409:	mov    ecx,eax
    940b:	lea    eax,[rcx+0x1]
    940e:	cmp    DWORD PTR [rbx+0x8],eax
    9411:	ja     93e0 <cloop_open+0xe0>
    9413:	lea    edi,[r8+0x1]
    9417:	call   4cb0 <qemu_malloc>
    941c:	mov    edi,DWORD PTR [rbx+0x4]
    941f:	mov    QWORD PTR [rbx+0x20],rax
    9423:	call   4cb0 <qemu_malloc>
    9428:	lea    rdi,[rbx+0x30]
    942c:	mov    edx,0x70
    9431:	lea    rsi,[rip+0x134ef]        # 1c927 <__PRETTY_FUNCTION__.13430+0x8f>
    9438:	mov    QWORD PTR [rbx+0x28],rax
    943c:	call   34e0 <inflateInit_@plt>
    9441:	test   eax,eax
    9443:	jne    9476 <cloop_open+0x176>
    9445:	mov    ecx,DWORD PTR [rbx+0x4]
    9448:	mov    edx,DWORD PTR [rbx+0x8]
    944b:	shr    ecx,0x9
    944e:	mov    DWORD PTR [rbx+0x1c],edx
    9451:	imul   edx,ecx
    9454:	mov    DWORD PTR [rbx+0x18],ecx
    9457:	mov    ecx,edx
    9459:	mov    QWORD PTR [rbp+0x0],rcx
    945d:	pop    rbx
    945e:	pop    rbp
    945f:	pop    r12
    9461:	ret    
    9462:	nop    WORD PTR [rax+rax*1+0x0]
    9468:	call   30b0 <__errno_location@plt>
    946d:	pop    rbx
    946e:	pop    rbp
    946f:	mov    eax,DWORD PTR [rax]
    9471:	pop    r12
    9473:	neg    eax
    9475:	ret    
    9476:	mov    edi,DWORD PTR [rbx]
    9478:	call   3260 <close@plt>
    947d:	mov    eax,0xffffffff
    9482:	jmp    945d <cloop_open+0x15d>
    9484:	nop    WORD PTR cs:[rax+rax*1+0x0]
    948e:	xchg   ax,ax

0000000000009490 <dmg_close>:
    9490:	push   rbx
    9491:	mov    rbx,QWORD PTR [rdi+0x40]
    9495:	mov    edi,DWORD PTR [rbx]
    9497:	call   3260 <close@plt>
    949c:	mov    eax,DWORD PTR [rbx+0x4]
    949f:	test   eax,eax
    94a1:	jne    94c0 <dmg_close+0x30>
    94a3:	mov    rdi,QWORD PTR [rbx+0x38]
    94a7:	call   3070 <free@plt>
    94ac:	mov    rdi,QWORD PTR [rbx+0x40]
    94b0:	call   3070 <free@plt>
    94b5:	lea    rdi,[rbx+0x48]
    94b9:	pop    rbx
    94ba:	jmp    33c0 <inflateEnd@plt>
    94bf:	nop
    94c0:	mov    rdi,QWORD PTR [rbx+0x8]
    94c4:	call   3070 <free@plt>
    94c9:	mov    rdi,QWORD PTR [rbx+0x10]
    94cd:	call   3070 <free@plt>
    94d2:	mov    rdi,QWORD PTR [rbx+0x18]
    94d6:	call   3070 <free@plt>
    94db:	mov    rdi,QWORD PTR [rbx+0x20]
    94df:	call   3070 <free@plt>
    94e4:	mov    rdi,QWORD PTR [rbx+0x28]
    94e8:	call   3070 <free@plt>
    94ed:	jmp    94a3 <dmg_close+0x13>
    94ef:	nop

00000000000094f0 <dmg_read>:
    94f0:	push   r15
    94f2:	push   r14
    94f4:	push   r13
    94f6:	push   r12
    94f8:	push   rbp
    94f9:	push   rbx
    94fa:	sub    rsp,0x18
    94fe:	mov    r13,QWORD PTR [rdi+0x40]
    9502:	test   ecx,ecx
    9504:	jle    9655 <dmg_read+0x165>
    950a:	lea    rax,[r13+0x48]
    950e:	mov    r15d,esi
    9511:	lea    ebp,[rcx+rsi*1]
    9514:	mov    r14,rdx
    9517:	mov    QWORD PTR [rsp+0x8],rax
    951c:	nop    DWORD PTR [rax+0x0]
    9520:	mov    eax,DWORD PTR [r13+0x30]
    9524:	mov    r8d,DWORD PTR [r13+0x4]
    9528:	cmp    eax,r8d
    952b:	jae    9551 <dmg_read+0x61>
    952d:	mov    rdx,QWORD PTR [r13+0x20]
    9531:	movsxd rcx,r15d
    9534:	mov    rdx,QWORD PTR [rdx+rax*8]
    9538:	cmp    rdx,rcx
    953b:	ja     9551 <dmg_read+0x61>
    953d:	mov    rsi,QWORD PTR [r13+0x28]
    9541:	mov    rdi,QWORD PTR [rsi+rax*8]
    9545:	add    rdi,rdx
    9548:	cmp    rcx,rdi
    954b:	jb     9600 <dmg_read+0x110>
    9551:	mov    r10d,r8d
    9554:	xor    ecx,ecx
    9556:	movsxd rdi,r15d
    9559:	cmp    ecx,r10d
    955c:	je     959e <dmg_read+0xae>
    955e:	lea    eax,[rcx+r10*1]
    9562:	mov    rsi,QWORD PTR [r13+0x20]
    9566:	shr    eax,1
    9568:	mov    edx,eax
    956a:	mov    ebx,eax
    956c:	lea    r9,[rdx*8+0x0]
    9574:	mov    rdx,QWORD PTR [rsi+rdx*8]
    9578:	cmp    rdi,rdx
    957b:	jb     959a <dmg_read+0xaa>
    957d:	jmp    95bb <dmg_read+0xcb>
    957f:	nop
    9580:	lea    ebx,[rcx+rax*1]
    9583:	shr    ebx,1
    9585:	mov    edx,ebx
    9587:	lea    r9,[rdx*8+0x0]
    958f:	mov    rdx,QWORD PTR [rsi+rdx*8]
    9593:	cmp    rdx,rdi
    9596:	jbe    95b8 <dmg_read+0xc8>
    9598:	mov    eax,ebx
    959a:	cmp    ecx,eax
    959c:	jne    9580 <dmg_read+0x90>
    959e:	add    rsp,0x18
    95a2:	mov    eax,0xffffffff
    95a7:	pop    rbx
    95a8:	pop    rbp
    95a9:	pop    r12
    95ab:	pop    r13
    95ad:	pop    r14
    95af:	pop    r15
    95b1:	ret    
    95b2:	nop    WORD PTR [rax+rax*1+0x0]
    95b8:	mov    r10d,eax
    95bb:	mov    rax,QWORD PTR [r13+0x28]
    95bf:	mov    ecx,ebx
    95c1:	add    rdx,QWORD PTR [rax+r9*1]
    95c5:	cmp    rdx,rdi
    95c8:	jbe    9559 <dmg_read+0x69>
    95ca:	cmp    r8d,ebx
    95cd:	jbe    959e <dmg_read+0xae>
    95cf:	mov    rdx,QWORD PTR [r13+0x8]
    95d3:	mov    r12d,ebx
    95d6:	mov    DWORD PTR [r13+0x30],r8d
    95da:	mov    edx,DWORD PTR [rdx+r12*4]
    95de:	cmp    edx,0x2
    95e1:	je     9750 <dmg_read+0x260>
    95e7:	cmp    edx,0x80000005
    95ed:	je     96a0 <dmg_read+0x1b0>
    95f3:	cmp    edx,0x1
    95f6:	je     9670 <dmg_read+0x180>
    95f8:	mov    DWORD PTR [r13+0x30],ebx
    95fc:	mov    rdx,QWORD PTR [rsi+r12*8]
    9600:	mov    esi,r15d
    9603:	lea    rdi,[r14+0x8]
    9607:	add    r15d,0x1
    960b:	sub    esi,edx
    960d:	and    rdi,0xfffffffffffffff8
    9611:	shl    esi,0x9
    9614:	add    rsi,QWORD PTR [r13+0x40]
    9618:	mov    rax,QWORD PTR [rsi]
    961b:	mov    QWORD PTR [r14],rax
    961e:	mov    rax,QWORD PTR [rsi+0x1f8]
    9625:	mov    QWORD PTR [r14+0x1f8],rax
    962c:	mov    rax,r14
    962f:	add    r14,0x200
    9636:	sub    rax,rdi
    9639:	lea    ecx,[rax+0x200]
    963f:	sub    rsi,rax
    9642:	mov    eax,ecx
    9644:	shr    eax,0x3
    9647:	mov    ecx,eax
    9649:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    964c:	cmp    ebp,r15d
    964f:	jne    9520 <dmg_read+0x30>
    9655:	add    rsp,0x18
    9659:	xor    eax,eax
    965b:	pop    rbx
    965c:	pop    rbp
    965d:	pop    r12
    965f:	pop    r13
    9661:	pop    r14
    9663:	pop    r15
    9665:	ret    
    9666:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9670:	mov    rax,QWORD PTR [r13+0x18]
    9674:	mov    rsi,QWORD PTR [r13+0x40]
    9678:	mov    edi,DWORD PTR [r13+0x0]
    967c:	mov    rdx,QWORD PTR [rax+r12*8]
    9680:	call   4600 <qemu_read_ok>
    9685:	test   eax,eax
    9687:	js     959e <dmg_read+0xae>
    968d:	mov    rsi,QWORD PTR [r13+0x20]
    9691:	jmp    95f8 <dmg_read+0x108>
    9696:	nop    WORD PTR cs:[rax+rax*1+0x0]
    96a0:	mov    rax,QWORD PTR [r13+0x10]
    96a4:	mov    edi,DWORD PTR [r13+0x0]
    96a8:	xor    edx,edx
    96aa:	mov    rsi,QWORD PTR [rax+r12*8]
    96ae:	call   3620 <lseek64@plt>
    96b3:	test   eax,eax
    96b5:	js     959e <dmg_read+0xae>
    96bb:	mov    rax,QWORD PTR [r13+0x18]
    96bf:	mov    rsi,QWORD PTR [r13+0x38]
    96c3:	mov    edi,DWORD PTR [r13+0x0]
    96c7:	mov    rdx,QWORD PTR [rax+r12*8]
    96cb:	call   4600 <qemu_read_ok>
    96d0:	test   eax,eax
    96d2:	js     959e <dmg_read+0xae>
    96d8:	mov    rax,QWORD PTR [r13+0x38]
    96dc:	mov    rdi,QWORD PTR [rsp+0x8]
    96e1:	mov    QWORD PTR [r13+0x48],rax
    96e5:	mov    rax,QWORD PTR [r13+0x18]
    96e9:	mov    rax,QWORD PTR [rax+r12*8]
    96ed:	mov    DWORD PTR [r13+0x50],eax
    96f1:	mov    rax,QWORD PTR [r13+0x40]
    96f5:	mov    QWORD PTR [r13+0x60],rax
    96f9:	mov    rax,QWORD PTR [r13+0x28]
    96fd:	mov    rax,QWORD PTR [rax+r12*8]
    9701:	shl    eax,0x9
    9704:	mov    DWORD PTR [r13+0x68],eax
    9708:	call   35d0 <inflateReset@plt>
    970d:	test   eax,eax
    970f:	jne    959e <dmg_read+0xae>
    9715:	mov    rdi,QWORD PTR [rsp+0x8]
    971a:	mov    esi,0x4
    971f:	call   30f0 <inflate@plt>
    9724:	cmp    eax,0x1
    9727:	jne    959e <dmg_read+0xae>
    972d:	mov    rax,QWORD PTR [r13+0x28]
    9731:	mov    rax,QWORD PTR [rax+r12*8]
    9735:	shl    rax,0x9
    9739:	cmp    QWORD PTR [r13+0x70],rax
    973d:	je     968d <dmg_read+0x19d>
    9743:	jmp    959e <dmg_read+0xae>
    9748:	nop    DWORD PTR [rax+rax*1+0x0]
    9750:	mov    rdx,QWORD PTR [rax+r12*8]
    9754:	mov    rdi,QWORD PTR [r13+0x40]
    9758:	xor    esi,esi
    975a:	shl    rdx,0x9
    975e:	call   3240 <memset@plt>
    9763:	jmp    968d <dmg_read+0x19d>
    9768:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000009770 <read_uint32>:
    9770:	sub    rsp,0x18
    9774:	mov    edx,0x4
    9779:	mov    rax,QWORD PTR fs:0x28
    9782:	mov    QWORD PTR [rsp+0x8],rax
    9787:	xor    eax,eax
    9789:	lea    rsi,[rsp+0x4]
    978e:	call   4600 <qemu_read_ok>
    9793:	xor    edx,edx
    9795:	test   eax,eax
    9797:	js     97a1 <read_uint32+0x31>
    9799:	mov    edx,DWORD PTR [rsp+0x4]
    979d:	bswap  edx
    979f:	mov    edx,edx
    97a1:	mov    rcx,QWORD PTR [rsp+0x8]
    97a6:	xor    rcx,QWORD PTR fs:0x28
    97af:	mov    rax,rdx
    97b2:	jne    97b9 <read_uint32+0x49>
    97b4:	add    rsp,0x18
    97b8:	ret    
    97b9:	call   3190 <__stack_chk_fail@plt>
    97be:	xchg   ax,ax

00000000000097c0 <read_off>:
    97c0:	sub    rsp,0x18
    97c4:	mov    edx,0x8
    97c9:	mov    rax,QWORD PTR fs:0x28
    97d2:	mov    QWORD PTR [rsp+0x8],rax
    97d7:	xor    eax,eax
    97d9:	mov    rsi,rsp
    97dc:	call   4600 <qemu_read_ok>
    97e1:	xor    edx,edx
    97e3:	test   eax,eax
    97e5:	js     97ee <read_off+0x2e>
    97e7:	mov    rdx,QWORD PTR [rsp]
    97eb:	bswap  rdx
    97ee:	mov    rcx,QWORD PTR [rsp+0x8]
    97f3:	xor    rcx,QWORD PTR fs:0x28
    97fc:	mov    rax,rdx
    97ff:	jne    9806 <read_off+0x46>
    9801:	add    rsp,0x18
    9805:	ret    
    9806:	call   3190 <__stack_chk_fail@plt>
    980b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000009810 <dmg_open>:
    9810:	push   r15
    9812:	xor    eax,eax
    9814:	push   r14
    9816:	push   r13
    9818:	mov    r13d,edx
    981b:	push   r12
    981d:	push   rbp
    981e:	mov    rbp,rsi
    9821:	xor    esi,esi
    9823:	push   rbx
    9824:	mov    rbx,rdi
    9827:	sub    rsp,0x38
    982b:	mov    r15,QWORD PTR [rdi+0x40]
    982f:	mov    rdi,rbp
    9832:	call   3500 <open64@plt>
    9837:	mov    DWORD PTR [r15],eax
    983a:	test   eax,eax
    983c:	js     98f0 <dmg_open+0xe0>
    9842:	mov    DWORD PTR [rbx+0x8],0x1
    9849:	mov    edi,DWORD PTR [r15]
    984c:	mov    edx,0x2
    9851:	mov    rsi,0xfffffffffffffe28
    9858:	mov    DWORD PTR [r15+0x4],0x0
    9860:	mov    QWORD PTR [r15+0x28],0x0
    9868:	mov    QWORD PTR [r15+0x20],0x0
    9870:	mov    QWORD PTR [r15+0x18],0x0
    9878:	mov    QWORD PTR [r15+0x10],0x0
    9880:	call   3620 <lseek64@plt>
    9885:	test   rax,rax
    9888:	js     98bc <dmg_open+0xac>
    988a:	mov    edi,DWORD PTR [r15]
    988d:	call   97c0 <read_off>
    9892:	mov    r12,rax
    9895:	test   rax,rax
    9898:	je     98bc <dmg_open+0xac>
    989a:	mov    edi,DWORD PTR [r15]
    989d:	xor    edx,edx
    989f:	mov    rsi,rax
    98a2:	call   3620 <lseek64@plt>
    98a7:	test   rax,rax
    98aa:	js     98bc <dmg_open+0xac>
    98ac:	mov    edi,DWORD PTR [r15]
    98af:	call   9770 <read_uint32>
    98b4:	cmp    rax,0x100
    98ba:	je     9910 <dmg_open+0x100>
    98bc:	mov    edi,DWORD PTR [r15]
    98bf:	call   3260 <close@plt>
    98c4:	mov    edx,r13d
    98c7:	mov    rsi,rbp
    98ca:	mov    rdi,rbx
    98cd:	lea    rax,[rip+0x1eacc]        # 283a0 <bdrv_raw>
    98d4:	mov    QWORD PTR [rbx+0x38],rax
    98d8:	add    rsp,0x38
    98dc:	pop    rbx
    98dd:	pop    rbp
    98de:	pop    r12
    98e0:	pop    r13
    98e2:	pop    r14
    98e4:	pop    r15
    98e6:	jmp    QWORD PTR [rip+0x1eacc]        # 283b8 <bdrv_raw+0x18>
    98ec:	nop    DWORD PTR [rax+0x0]
    98f0:	call   30b0 <__errno_location@plt>
    98f5:	mov    eax,DWORD PTR [rax]
    98f7:	neg    eax
    98f9:	add    rsp,0x38
    98fd:	pop    rbx
    98fe:	pop    rbp
    98ff:	pop    r12
    9901:	pop    r13
    9903:	pop    r14
    9905:	pop    r15
    9907:	ret    
    9908:	nop    DWORD PTR [rax+rax*1+0x0]
    9910:	mov    edi,DWORD PTR [r15]
    9913:	call   9770 <read_uint32>
    9918:	test   eax,eax
    991a:	je     98bc <dmg_open+0xac>
    991c:	mov    eax,eax
    991e:	mov    edi,DWORD PTR [r15]
    9921:	mov    edx,0x1
    9926:	mov    esi,0xf8
    992b:	add    rax,r12
    992e:	mov    QWORD PTR [rsp+0x18],rax
    9933:	call   3620 <lseek64@plt>
    9938:	test   rax,rax
    993b:	js     98bc <dmg_open+0xac>
    9941:	mov    DWORD PTR [rsp+0x10],0x1
    9949:	mov    DWORD PTR [rsp+0x14],0x1
    9951:	mov    QWORD PTR [rsp+0x28],0x0
    995a:	mov    QWORD PTR [rsp+0x20],0x0
    9963:	mov    edi,DWORD PTR [r15]
    9966:	xor    esi,esi
    9968:	mov    edx,0x1
    996d:	call   3620 <lseek64@plt>
    9972:	cmp    rax,QWORD PTR [rsp+0x18]
    9977:	jge    9b97 <dmg_open+0x387>
    997d:	mov    edi,DWORD PTR [r15]
    9980:	call   9770 <read_uint32>
    9985:	mov    r12,rax
    9988:	test   eax,eax
    998a:	je     98bc <dmg_open+0xac>
    9990:	mov    edi,DWORD PTR [r15]
    9993:	call   9770 <read_uint32>
    9998:	cmp    eax,0x6d697368
    999d:	jne    99a8 <dmg_open+0x198>
    999f:	cmp    r12d,0xf3
    99a6:	ja     99c0 <dmg_open+0x1b0>
    99a8:	mov    edi,DWORD PTR [r15]
    99ab:	lea    esi,[r12-0x4]
    99b0:	mov    edx,0x1
    99b5:	call   3620 <lseek64@plt>
    99ba:	jmp    9963 <dmg_open+0x153>
    99bc:	nop    DWORD PTR [rax+0x0]
    99c0:	mov    edi,DWORD PTR [r15]
    99c3:	mov    edx,0x1
    99c8:	mov    esi,0xc8
    99cd:	call   3620 <lseek64@plt>
    99d2:	test   rax,rax
    99d5:	js     98bc <dmg_open+0xac>
    99db:	sub    r12d,0xcc
    99e2:	mov    eax,0xcccccccd
    99e7:	mov    r14d,DWORD PTR [r15+0x4]
    99eb:	mov    rdi,QWORD PTR [r15+0x8]
    99ef:	mul    r12d
    99f2:	mov    r12d,edx
    99f5:	shr    r12d,0x5
    99f9:	add    r14d,r12d
    99fc:	mov    DWORD PTR [rsp+0xc],r12d
    9a01:	shl    r14d,0x3
    9a05:	mov    esi,r14d
    9a08:	movsxd r14,r14d
    9a0b:	sar    esi,1
    9a0d:	movsxd rsi,esi
    9a10:	call   4cd0 <qemu_realloc>
    9a15:	mov    rdi,QWORD PTR [r15+0x10]
    9a19:	mov    rsi,r14
    9a1c:	mov    QWORD PTR [r15+0x8],rax
    9a20:	call   4cd0 <qemu_realloc>
    9a25:	mov    rdi,QWORD PTR [r15+0x18]
    9a29:	mov    rsi,r14
    9a2c:	mov    QWORD PTR [r15+0x10],rax
    9a30:	call   4cd0 <qemu_realloc>
    9a35:	mov    rdi,QWORD PTR [r15+0x20]
    9a39:	mov    rsi,r14
    9a3c:	mov    QWORD PTR [r15+0x18],rax
    9a40:	call   4cd0 <qemu_realloc>
    9a45:	mov    rdi,QWORD PTR [r15+0x28]
    9a49:	mov    rsi,r14
    9a4c:	mov    QWORD PTR [r15+0x20],rax
    9a50:	call   4cd0 <qemu_realloc>
    9a55:	mov    r14d,DWORD PTR [r15+0x4]
    9a59:	mov    QWORD PTR [r15+0x28],rax
    9a5d:	lea    eax,[r12+r14*1]
    9a61:	cmp    r14d,eax
    9a64:	jae    9b00 <dmg_open+0x2f0>
    9a6a:	nop    WORD PTR [rax+rax*1+0x0]
    9a70:	mov    edi,DWORD PTR [r15]
    9a73:	mov    r12d,r14d
    9a76:	call   9770 <read_uint32>
    9a7b:	mov    rsi,QWORD PTR [r15+0x8]
    9a7f:	mov    DWORD PTR [rsi+r12*4],eax
    9a83:	mov    rax,QWORD PTR [r15+0x8]
    9a87:	mov    eax,DWORD PTR [rax+r12*4]
    9a8b:	lea    esi,[rax-0x1]
    9a8e:	cmp    esi,0x1
    9a91:	jbe    9b10 <dmg_open+0x300>
    9a93:	cmp    eax,0x80000005
    9a98:	je     9b10 <dmg_open+0x300>
    9a9a:	lea    edx,[r14-0x1]
    9a9e:	cmp    eax,0xffffffff
    9aa1:	jne    9acf <dmg_open+0x2bf>
    9aa3:	mov    eax,edx
    9aa5:	mov    rsi,QWORD PTR [r15+0x10]
    9aa9:	mov    rdx,QWORD PTR [r15+0x18]
    9aad:	mov    rdx,QWORD PTR [rdx+rax*8]
    9ab1:	add    rdx,QWORD PTR [rsi+rax*8]
    9ab5:	mov    QWORD PTR [rsp+0x20],rdx
    9aba:	mov    rsi,QWORD PTR [r15+0x20]
    9abe:	mov    rdx,QWORD PTR [r15+0x28]
    9ac2:	mov    rdx,QWORD PTR [rdx+rax*8]
    9ac6:	add    rdx,QWORD PTR [rsi+rax*8]
    9aca:	mov    QWORD PTR [rsp+0x28],rdx
    9acf:	mov    edi,DWORD PTR [r15]
    9ad2:	mov    edx,0x1
    9ad7:	mov    esi,0x24
    9adc:	call   3620 <lseek64@plt>
    9ae1:	test   rax,rax
    9ae4:	js     98bc <dmg_open+0xac>
    9aea:	sub    DWORD PTR [rsp+0xc],0x1
    9aef:	mov    eax,DWORD PTR [rsp+0xc]
    9af3:	add    eax,DWORD PTR [r15+0x4]
    9af7:	cmp    eax,r14d
    9afa:	ja     9a70 <dmg_open+0x260>
    9b00:	mov    DWORD PTR [r15+0x4],eax
    9b04:	jmp    9963 <dmg_open+0x153>
    9b09:	nop    DWORD PTR [rax+0x0]
    9b10:	mov    edi,DWORD PTR [r15]
    9b13:	call   9770 <read_uint32>
    9b18:	mov    edi,DWORD PTR [r15]
    9b1b:	call   97c0 <read_off>
    9b20:	mov    rsi,QWORD PTR [r15+0x20]
    9b24:	add    rax,QWORD PTR [rsp+0x28]
    9b29:	mov    QWORD PTR [rsi+r12*8],rax
    9b2d:	mov    edi,DWORD PTR [r15]
    9b30:	call   97c0 <read_off>
    9b35:	mov    rsi,QWORD PTR [r15+0x28]
    9b39:	mov    QWORD PTR [rsi+r12*8],rax
    9b3d:	mov    edi,DWORD PTR [r15]
    9b40:	call   97c0 <read_off>
    9b45:	mov    rsi,QWORD PTR [r15+0x10]
    9b49:	add    rax,QWORD PTR [rsp+0x20]
    9b4e:	mov    QWORD PTR [rsi+r12*8],rax
    9b52:	mov    edi,DWORD PTR [r15]
    9b55:	call   97c0 <read_off>
    9b5a:	mov    rsi,QWORD PTR [r15+0x18]
    9b5e:	mov    edx,DWORD PTR [rsp+0x10]
    9b62:	mov    QWORD PTR [rsi+r12*8],rax
    9b66:	mov    rax,QWORD PTR [r15+0x18]
    9b6a:	mov    esi,DWORD PTR [rsp+0x14]
    9b6e:	mov    rax,QWORD PTR [rax+r12*8]
    9b72:	cmp    rax,rsi
    9b75:	cmovbe eax,esi
    9b78:	add    r14d,0x1
    9b7c:	mov    DWORD PTR [rsp+0x14],eax
    9b80:	mov    rax,QWORD PTR [r15+0x28]
    9b84:	mov    rax,QWORD PTR [rax+r12*8]
    9b88:	cmp    rax,rdx
    9b8b:	cmovbe eax,edx
    9b8e:	mov    DWORD PTR [rsp+0x10],eax
    9b92:	jmp    9aef <dmg_open+0x2df>
    9b97:	mov    eax,DWORD PTR [rsp+0x14]
    9b9b:	lea    edi,[rax+0x1]
    9b9e:	call   4cb0 <qemu_malloc>
    9ba3:	mov    edi,DWORD PTR [rsp+0x10]
    9ba7:	mov    QWORD PTR [r15+0x38],rax
    9bab:	shl    edi,0x9
    9bae:	call   4cb0 <qemu_malloc>
    9bb3:	lea    rdi,[r15+0x48]
    9bb7:	mov    edx,0x70
    9bbc:	lea    rsi,[rip+0x12d64]        # 1c927 <__PRETTY_FUNCTION__.13430+0x8f>
    9bc3:	mov    QWORD PTR [r15+0x40],rax
    9bc7:	call   34e0 <inflateInit_@plt>
    9bcc:	test   eax,eax
    9bce:	jne    98bc <dmg_open+0xac>
    9bd4:	mov    edx,DWORD PTR [r15+0x4]
    9bd8:	mov    DWORD PTR [r15+0x30],edx
    9bdc:	jmp    98f9 <dmg_open+0xe9>
    9be1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    9bec:	nop    DWORD PTR [rax+0x0]

0000000000009bf0 <dmg_probe>:
    9bf0:	push   rbx
    9bf1:	mov    rdi,rdx
    9bf4:	mov    rbx,rdx
    9bf7:	call   3180 <strlen@plt>
    9bfc:	xor    ecx,ecx
    9bfe:	cmp    eax,0x4
    9c01:	jle    9c26 <dmg_probe+0x36>
    9c03:	cdqe   
    9c05:	mov    ecx,0x5
    9c0a:	lea    rdi,[rip+0x15831]        # 1f442 <desc_template.13939+0x182>
    9c11:	lea    rsi,[rbx+rax*1-0x4]
    9c16:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9c18:	seta   al
    9c1b:	sbb    al,0x0
    9c1d:	xor    ecx,ecx
    9c1f:	test   al,al
    9c21:	sete   cl
    9c24:	add    ecx,ecx
    9c26:	mov    eax,ecx
    9c28:	pop    rbx
    9c29:	ret    
    9c2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000009c30 <bochs_close>:
    9c30:	push   rbx
    9c31:	mov    rbx,QWORD PTR [rdi+0x40]
    9c35:	mov    rdi,QWORD PTR [rbx+0x8]
    9c39:	call   4ca0 <qemu_free>
    9c3e:	mov    edi,DWORD PTR [rbx]
    9c40:	pop    rbx
    9c41:	jmp    3260 <close@plt>
    9c46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000009c50 <bochs_read>:
    9c50:	push   r15
    9c52:	mov    rax,rdi
    9c55:	push   r14
    9c57:	push   r13
    9c59:	push   r12
    9c5b:	push   rbp
    9c5c:	push   rbx
    9c5d:	sub    rsp,0x38
    9c61:	mov    r13,QWORD PTR [rax+0x40]
    9c65:	mov    QWORD PTR [rsp+0x18],rdi
    9c6a:	mov    rdi,QWORD PTR fs:0x28
    9c73:	mov    QWORD PTR [rsp+0x28],rdi
    9c78:	xor    edi,edi
    9c7a:	test   ecx,ecx
    9c7c:	jle    9db0 <bochs_read+0x160>
    9c82:	lea    eax,[rcx-0x1]
    9c85:	shl    rsi,0x9
    9c89:	mov    rbp,rdx
    9c8c:	mov    r15,r13
    9c8f:	add    rax,0x1
    9c93:	sub    rsi,rdx
    9c96:	shl    rax,0x9
    9c9a:	mov    QWORD PTR [rsp],rsi
    9c9e:	add    rax,rdx
    9ca1:	mov    QWORD PTR [rsp+0x10],rax
    9ca6:	lea    rax,[rsp+0x27]
    9cab:	mov    QWORD PTR [rsp+0x8],rax
    9cb0:	jmp    9cd3 <bochs_read+0x83>
    9cb2:	nop    WORD PTR [rax+rax*1+0x0]
    9cb8:	add    rbp,0x200
    9cbf:	cmp    rbp,QWORD PTR [rsp+0x10]
    9cc4:	je     9db0 <bochs_read+0x160>
    9cca:	mov    rax,QWORD PTR [rsp+0x18]
    9ccf:	mov    r15,QWORD PTR [rax+0x40]
    9cd3:	mov    rax,QWORD PTR [rsp]
    9cd7:	movsxd rcx,DWORD PTR [r15+0x20]
    9cdb:	mov    rsi,QWORD PTR [r15+0x8]
    9cdf:	add    rax,rbp
    9ce2:	cqo    
    9ce4:	idiv   rcx
    9ce7:	test   rdx,rdx
    9cea:	lea    rcx,[rdx+0x1ff]
    9cf1:	mov    eax,DWORD PTR [rsi+rax*4]
    9cf4:	cmovns rcx,rdx
    9cf8:	mov    r12,rcx
    9cfb:	mov    r14,rcx
    9cfe:	sar    r12,0x9
    9d02:	cmp    eax,0xffffffff
    9d05:	je     9ddc <bochs_read+0x18c>
    9d0b:	movsxd rbx,DWORD PTR [r15+0x18]
    9d0f:	mov    esi,DWORD PTR [r15+0x1c]
    9d13:	mov    edi,DWORD PTR [r15]
    9d16:	add    esi,ebx
    9d18:	add    rbx,r12
    9d1b:	imul   esi,eax
    9d1e:	shl    rbx,0x9
    9d22:	lea    rax,[rdx+0xfff]
    9d29:	shl    esi,0x9
    9d2c:	add    esi,DWORD PTR [r15+0x14]
    9d30:	add    rbx,rsi
    9d33:	test   rdx,rdx
    9d36:	cmovs  rdx,rax
    9d3a:	sar    rdx,0xc
    9d3e:	add    rsi,rdx
    9d41:	xor    edx,edx
    9d43:	call   3620 <lseek64@plt>
    9d48:	mov    rsi,QWORD PTR [rsp+0x8]
    9d4d:	mov    edi,DWORD PTR [r15]
    9d50:	mov    edx,0x1
    9d55:	call   32c0 <read@plt>
    9d5a:	test   eax,eax
    9d5c:	js     9ddc <bochs_read+0x18c>
    9d5e:	je     9dd1 <bochs_read+0x181>
    9d60:	mov    rcx,r14
    9d63:	movsx  eax,BYTE PTR [rsp+0x27]
    9d68:	sar    rcx,0x3f
    9d6c:	shr    rcx,0x3d
    9d70:	lea    r9,[r12+rcx*1]
    9d74:	and    r9d,0x7
    9d78:	sub    r9,rcx
    9d7b:	bt     eax,r9d
    9d7f:	jae    9ddc <bochs_read+0x18c>
    9d81:	mov    edi,DWORD PTR [r15]
    9d84:	xor    edx,edx
    9d86:	mov    rsi,rbx
    9d89:	call   3620 <lseek64@plt>
    9d8e:	mov    edi,DWORD PTR [r13+0x0]
    9d92:	mov    edx,0x200
    9d97:	mov    rsi,rbp
    9d9a:	call   4600 <qemu_read_ok>
    9d9f:	test   eax,eax
    9da1:	jns    9cb8 <bochs_read+0x68>
    9da7:	mov    eax,0xffffffff
    9dac:	jmp    9db2 <bochs_read+0x162>
    9dae:	xchg   ax,ax
    9db0:	xor    eax,eax
    9db2:	mov    rdi,QWORD PTR [rsp+0x28]
    9db7:	xor    rdi,QWORD PTR fs:0x28
    9dc0:	jne    9e10 <bochs_read+0x1c0>
    9dc2:	add    rsp,0x38
    9dc6:	pop    rbx
    9dc7:	pop    rbp
    9dc8:	pop    r12
    9dca:	pop    r13
    9dcc:	pop    r14
    9dce:	pop    r15
    9dd0:	ret    
    9dd1:	call   30b0 <__errno_location@plt>
    9dd6:	mov    DWORD PTR [rax],0x5
    9ddc:	lea    rdi,[rbp+0x8]
    9de0:	mov    rcx,rbp
    9de3:	xor    eax,eax
    9de5:	mov    QWORD PTR [rbp+0x0],0x0
    9ded:	mov    QWORD PTR [rbp+0x1f8],0x0
    9df8:	and    rdi,0xfffffffffffffff8
    9dfc:	sub    rcx,rdi
    9dff:	add    ecx,0x200
    9e05:	shr    ecx,0x3
    9e08:	rep stos QWORD PTR es:[rdi],rax
    9e0b:	jmp    9cb8 <bochs_read+0x68>
    9e10:	call   3190 <__stack_chk_fail@plt>
    9e15:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000009e20 <bochs_open>:
    9e20:	push   r14
    9e22:	mov    r14,rdi
    9e25:	push   r13
    9e27:	push   r12
    9e29:	push   rbp
    9e2a:	mov    rbp,rsi
    9e2d:	mov    esi,0x2
    9e32:	push   rbx
    9e33:	sub    rsp,0x410
    9e3a:	mov    rbx,QWORD PTR [rdi+0x40]
    9e3e:	mov    rdi,rbp
    9e41:	mov    rax,QWORD PTR fs:0x28
    9e4a:	mov    QWORD PTR [rsp+0x408],rax
    9e52:	xor    eax,eax
    9e54:	call   3500 <open64@plt>
    9e59:	mov    r12d,eax
    9e5c:	test   eax,eax
    9e5e:	js     9ff8 <bochs_open+0x1d8>
    9e64:	mov    DWORD PTR [r14+0x8],0x1
    9e6c:	mov    r13,rsp
    9e6f:	mov    edx,0x200
    9e74:	mov    edi,r12d
    9e77:	mov    DWORD PTR [rbx],r12d
    9e7a:	mov    rsi,r13
    9e7d:	call   4550 <qemu_read>
    9e82:	cmp    rax,0x200
    9e88:	jne    a020 <bochs_open+0x200>
    9e8e:	mov    ecx,0x17
    9e93:	lea    rdi,[rip+0x155ad]        # 1f447 <desc_template.13939+0x187>
    9e9a:	mov    rsi,r13
    9e9d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9e9f:	seta   al
    9ea2:	sbb    al,0x0
    9ea4:	test   al,al
    9ea6:	jne    a020 <bochs_open+0x200>
    9eac:	lea    rsi,[r13+0x20]
    9eb0:	mov    ecx,0x8
    9eb5:	lea    rdi,[rip+0x155a2]        # 1f45e <desc_template.13939+0x19e>
    9ebc:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9ebe:	seta   al
    9ec1:	sbb    al,0x0
    9ec3:	test   al,al
    9ec5:	jne    a020 <bochs_open+0x200>
    9ecb:	lea    rsi,[r13+0x30]
    9ecf:	mov    ecx,0x8
    9ed4:	lea    rdi,[rip+0x1558b]        # 1f466 <desc_template.13939+0x1a6>
    9edb:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9edd:	seta   bpl
    9ee1:	sbb    bpl,0x0
    9ee5:	movsx  ebp,bpl
    9ee9:	test   ebp,ebp
    9eeb:	jne    a020 <bochs_open+0x200>
    9ef1:	mov    eax,DWORD PTR [rsp+0x40]
    9ef5:	cmp    eax,0x20000
    9efa:	je     9fe0 <bochs_open+0x1c0>
    9f00:	cmp    eax,0x10000
    9f05:	jne    a020 <bochs_open+0x200>
    9f0b:	lea    rdi,[rsp+0x200]
    9f13:	mov    ecx,0x40
    9f18:	mov    rsi,r13
    9f1b:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    9f1e:	mov    rax,QWORD PTR [rsp+0x258]
    9f26:	shr    rax,0x9
    9f2a:	mov    QWORD PTR [r14],rax
    9f2d:	mov    esi,DWORD PTR [rsp+0x44]
    9f31:	mov    edi,DWORD PTR [rbx]
    9f33:	xor    edx,edx
    9f35:	call   3620 <lseek64@plt>
    9f3a:	mov    edi,DWORD PTR [rsp+0x48]
    9f3e:	mov    DWORD PTR [rbx+0x10],edi
    9f41:	shl    edi,0x2
    9f44:	movsxd rdi,edi
    9f47:	call   4cb0 <qemu_malloc>
    9f4c:	mov    QWORD PTR [rbx+0x8],rax
    9f50:	test   rax,rax
    9f53:	je     a020 <bochs_open+0x200>
    9f59:	mov    ecx,DWORD PTR [rbx+0x10]
    9f5c:	mov    edi,DWORD PTR [rbx]
    9f5e:	mov    rsi,rax
    9f61:	lea    edx,[rcx*4+0x0]
    9f68:	movsxd rdx,edx
    9f6b:	call   32c0 <read@plt>
    9f70:	mov    ecx,DWORD PTR [rbx+0x10]
    9f73:	lea    edx,[rcx*4+0x0]
    9f7a:	movsxd rcx,edx
    9f7d:	cmp    rcx,rax
    9f80:	jne    a020 <bochs_open+0x200>
    9f86:	add    edx,DWORD PTR [rsp+0x44]
    9f8a:	mov    DWORD PTR [rbx+0x14],edx
    9f8d:	mov    eax,DWORD PTR [rsp+0x4c]
    9f91:	sub    eax,0x1
    9f94:	shr    eax,0x9
    9f97:	add    eax,0x1
    9f9a:	mov    DWORD PTR [rbx+0x18],eax
    9f9d:	mov    eax,DWORD PTR [rsp+0x50]
    9fa1:	sub    eax,0x1
    9fa4:	shr    eax,0x9
    9fa7:	add    eax,0x1
    9faa:	mov    DWORD PTR [rbx+0x1c],eax
    9fad:	mov    eax,DWORD PTR [rsp+0x50]
    9fb1:	mov    DWORD PTR [rbx+0x20],eax
    9fb4:	mov    rdx,QWORD PTR [rsp+0x408]
    9fbc:	xor    rdx,QWORD PTR fs:0x28
    9fc5:	mov    eax,ebp
    9fc7:	jne    a02f <bochs_open+0x20f>
    9fc9:	add    rsp,0x410
    9fd0:	pop    rbx
    9fd1:	pop    rbp
    9fd2:	pop    r12
    9fd4:	pop    r13
    9fd6:	pop    r14
    9fd8:	ret    
    9fd9:	nop    DWORD PTR [rax+0x0]
    9fe0:	mov    rax,QWORD PTR [rsp+0x58]
    9fe5:	shr    rax,0x9
    9fe9:	mov    QWORD PTR [r14],rax
    9fec:	jmp    9f2d <bochs_open+0x10d>
    9ff1:	nop    DWORD PTR [rax+0x0]
    9ff8:	xor    esi,esi
    9ffa:	mov    rdi,rbp
    9ffd:	xor    eax,eax
    9fff:	call   3500 <open64@plt>
    a004:	mov    r12d,eax
    a007:	test   eax,eax
    a009:	jns    9e64 <bochs_open+0x44>
    a00f:	mov    ebp,0xffffffff
    a014:	jmp    9fb4 <bochs_open+0x194>
    a016:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a020:	mov    edi,r12d
    a023:	mov    ebp,0xffffffff
    a028:	call   3260 <close@plt>
    a02d:	jmp    9fb4 <bochs_open+0x194>
    a02f:	call   3190 <__stack_chk_fail@plt>
    a034:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    a03f:	nop

000000000000a040 <bochs_probe>:
    a040:	mov    r8,rdi
    a043:	xor    eax,eax
    a045:	cmp    esi,0x1ff
    a04b:	jle    a0c2 <bochs_probe+0x82>
    a04d:	mov    ecx,0x17
    a052:	lea    rdi,[rip+0x153ee]        # 1f447 <desc_template.13939+0x187>
    a059:	mov    rsi,r8
    a05c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a05e:	seta   al
    a061:	sbb    al,0x0
    a063:	movsx  eax,al
    a066:	test   eax,eax
    a068:	jne    a0c0 <bochs_probe+0x80>
    a06a:	lea    rsi,[r8+0x20]
    a06e:	mov    ecx,0x8
    a073:	lea    rdi,[rip+0x153e4]        # 1f45e <desc_template.13939+0x19e>
    a07a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a07c:	seta   dl
    a07f:	sbb    dl,0x0
    a082:	test   dl,dl
    a084:	jne    a0c2 <bochs_probe+0x82>
    a086:	lea    rsi,[r8+0x30]
    a08a:	mov    ecx,0x8
    a08f:	lea    rdi,[rip+0x153d0]        # 1f466 <desc_template.13939+0x1a6>
    a096:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a098:	seta   al
    a09b:	sbb    al,0x0
    a09d:	movsx  eax,al
    a0a0:	test   eax,eax
    a0a2:	jne    a0c0 <bochs_probe+0x80>
    a0a4:	mov    edx,DWORD PTR [r8+0x40]
    a0a8:	sub    edx,0x10000
    a0ae:	and    edx,0xfffeffff
    a0b4:	mov    edx,0x64
    a0b9:	cmove  eax,edx
    a0bc:	ret    
    a0bd:	nop    DWORD PTR [rax]
    a0c0:	xor    eax,eax
    a0c2:	ret    
    a0c3:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a0cd:	nop    DWORD PTR [rax]

000000000000a0d0 <vpc_close>:
    a0d0:	push   rbx
    a0d1:	mov    rbx,QWORD PTR [rdi+0x40]
    a0d5:	mov    rdi,QWORD PTR [rbx+0x218]
    a0dc:	call   4ca0 <qemu_free>
    a0e1:	mov    rdi,QWORD PTR [rbx]
    a0e4:	pop    rbx
    a0e5:	jmp    17470 <bdrv_delete>
    a0ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000000a0f0 <vpc_write>:
    a0f0:	push   rbp
    a0f1:	mov    rbp,rsp
    a0f4:	push   r15
    a0f6:	push   r14
    a0f8:	push   r13
    a0fa:	push   r12
    a0fc:	push   rbx
    a0fd:	sub    rsp,0x48
    a101:	mov    r12,QWORD PTR [rdi+0x40]
    a105:	mov    rax,QWORD PTR fs:0x28
    a10e:	mov    QWORD PTR [rbp-0x38],rax
    a112:	xor    eax,eax
    a114:	test   ecx,ecx
    a116:	jle    a230 <vpc_write+0x140>
    a11c:	lea    eax,[rcx-0x1]
    a11f:	mov    r13,rdi
    a122:	mov    r15,rsi
    a125:	mov    rbx,rdx
    a128:	lea    rax,[rsi+rax*1+0x1]
    a12d:	mov    r14,r12
    a130:	mov    QWORD PTR [rbp-0x48],rax
    a134:	lea    rax,[rbp-0x3c]
    a138:	mov    QWORD PTR [rbp-0x68],rax
    a13c:	jmp    a159 <vpc_write+0x69>
    a13e:	xchg   ax,ax
    a140:	add    r15,0x1
    a144:	add    rbx,0x200
    a14b:	cmp    r15,QWORD PTR [rbp-0x48]
    a14f:	je     a230 <vpc_write+0x140>
    a155:	mov    r14,QWORD PTR [r13+0x40]
    a159:	mov    r10,r15
    a15c:	mov    edi,DWORD PTR [r14+0x230]
    a163:	xor    edx,edx
    a165:	shl    r10,0x9
    a169:	mov    rax,r10
    a16c:	div    rdi
    a16f:	mov    rcx,rdx
    a172:	mov    edx,DWORD PTR [r14+0x234]
    a179:	shr    rcx,0x9
    a17d:	cmp    DWORD PTR [r14+0x210],eax
    a184:	jbe    a258 <vpc_write+0x168>
    a18a:	mov    rsi,QWORD PTR [r14+0x218]
    a191:	mov    eax,eax
    a193:	mov    eax,DWORD PTR [rsi+rax*4]
    a196:	cmp    eax,0xffffffff
    a199:	je     a258 <vpc_write+0x168>
    a19f:	mov    r10d,eax
    a1a2:	shl    rcx,0x9
    a1a6:	shl    r10,0x9
    a1aa:	lea    r11,[rcx+rdx*1]
    a1ae:	add    r11,r10
    a1b1:	cmp    r10,QWORD PTR [r14+0x228]
    a1b8:	je     a20a <vpc_write+0x11a>
    a1ba:	lea    rax,[rdx+0xf]
    a1be:	mov    QWORD PTR [rbp-0x50],rsp
    a1c2:	mov    esi,0xff
    a1c7:	shr    rax,0x4
    a1cb:	mov    QWORD PTR [r14+0x228],r10
    a1d2:	shl    rax,0x4
    a1d6:	mov    QWORD PTR [rbp-0x60],r11
    a1da:	sub    rsp,rax
    a1dd:	mov    QWORD PTR [rbp-0x58],r10
    a1e1:	mov    rdi,rsp
    a1e4:	call   3240 <memset@plt>
    a1e9:	mov    r10,QWORD PTR [rbp-0x58]
    a1ed:	mov    rdi,QWORD PTR [r14]
    a1f0:	mov    rdx,rsp
    a1f3:	mov    ecx,DWORD PTR [r14+0x234]
    a1fa:	mov    rsi,r10
    a1fd:	call   18450 <bdrv_pwrite>
    a202:	mov    rsp,QWORD PTR [rbp-0x50]
    a206:	mov    r11,QWORD PTR [rbp-0x60]
    a20a:	mov    rsi,r11
    a20d:	mov    rdi,QWORD PTR [r12]
    a211:	mov    ecx,0x200
    a216:	mov    rdx,rbx
    a219:	call   18450 <bdrv_pwrite>
    a21e:	cmp    eax,0x200
    a223:	je     a140 <vpc_write+0x50>
    a229:	mov    eax,0xffffffff
    a22e:	jmp    a232 <vpc_write+0x142>
    a230:	xor    eax,eax
    a232:	mov    rbx,QWORD PTR [rbp-0x38]
    a236:	xor    rbx,QWORD PTR fs:0x28
    a23f:	jne    a3d0 <vpc_write+0x2e0>
    a245:	lea    rsp,[rbp-0x28]
    a249:	pop    rbx
    a24a:	pop    r12
    a24c:	pop    r13
    a24e:	pop    r14
    a250:	pop    r15
    a252:	pop    rbp
    a253:	ret    
    a254:	nop    DWORD PTR [rax+0x0]
    a258:	add    rdx,0xf
    a25c:	mov    QWORD PTR [rbp-0x50],rsp
    a260:	shr    rdx,0x4
    a264:	shl    rdx,0x4
    a268:	sub    rsp,rdx
    a26b:	test   r15,r15
    a26e:	js     a3c2 <vpc_write+0x2d2>
    a274:	cmp    QWORD PTR [r13+0x0],r15
    a278:	jl     a3c2 <vpc_write+0x2d2>
    a27e:	mov    rax,r10
    a281:	mov    QWORD PTR [rbp-0x70],r10
    a285:	cqo    
    a287:	idiv   rdi
    a28a:	mov    r11d,eax
    a28d:	mov    QWORD PTR [rbp-0x60],rax
    a291:	mov    rax,QWORD PTR [r14+0x218]
    a298:	mov    QWORD PTR [rbp-0x58],r11
    a29c:	lea    rdx,[rax+r11*4]
    a2a0:	cmp    DWORD PTR [rdx],0xffffffff
    a2a3:	jne    a3c2 <vpc_write+0x2d2>
    a2a9:	mov    rax,QWORD PTR [r14+0x208]
    a2b0:	mov    esi,0xff
    a2b5:	mov    rdi,rsp
    a2b8:	shr    rax,0x9
    a2bc:	mov    DWORD PTR [rdx],eax
    a2be:	mov    edx,DWORD PTR [r14+0x234]
    a2c5:	call   3240 <memset@plt>
    a2ca:	mov    ecx,DWORD PTR [r14+0x234]
    a2d1:	mov    rdi,QWORD PTR [r14]
    a2d4:	mov    rdx,rsp
    a2d7:	mov    rsi,QWORD PTR [r14+0x208]
    a2de:	call   18450 <bdrv_pwrite>
    a2e3:	mov    eax,DWORD PTR [r14+0x234]
    a2ea:	mov    ecx,0x200
    a2ef:	add    eax,DWORD PTR [r14+0x230]
    a2f6:	add    QWORD PTR [r14+0x208],rax
    a2fd:	mov    rax,QWORD PTR [r13+0x40]
    a301:	mov    rsi,QWORD PTR [rax+0x208]
    a308:	mov    rdi,QWORD PTR [rax]
    a30b:	lea    rdx,[rax+0x8]
    a30f:	call   18450 <bdrv_pwrite>
    a314:	test   eax,eax
    a316:	js     a3ad <vpc_write+0x2bd>
    a31c:	mov    rax,QWORD PTR [r14+0x218]
    a323:	mov    r11,QWORD PTR [rbp-0x58]
    a327:	mov    ecx,0x4
    a32c:	mov    r8,QWORD PTR [rbp-0x60]
    a330:	mov    rdx,QWORD PTR [rbp-0x68]
    a334:	mov    eax,DWORD PTR [rax+r11*4]
    a338:	lea    esi,[r8*4+0x0]
    a340:	add    rsi,QWORD PTR [r14+0x220]
    a347:	bswap  eax
    a349:	mov    DWORD PTR [rbp-0x3c],eax
    a34c:	mov    rdi,QWORD PTR [r14]
    a34f:	call   18450 <bdrv_pwrite>
    a354:	test   eax,eax
    a356:	js     a3ad <vpc_write+0x2bd>
    a358:	mov    r8,QWORD PTR [r13+0x40]
    a35c:	mov    r10,QWORD PTR [rbp-0x70]
    a360:	xor    edx,edx
    a362:	mov    ecx,DWORD PTR [r8+0x230]
    a369:	mov    rax,r10
    a36c:	div    rcx
    a36f:	shr    rdx,0x9
    a373:	cmp    DWORD PTR [r8+0x210],eax
    a37a:	jbe    a3c2 <vpc_write+0x2d2>
    a37c:	mov    ecx,eax
    a37e:	mov    rax,QWORD PTR [r8+0x218]
    a385:	mov    edi,DWORD PTR [rax+rcx*4]
    a388:	cmp    edi,0xffffffff
    a38b:	je     a3c2 <vpc_write+0x2d2>
    a38d:	mov    ecx,DWORD PTR [r8+0x234]
    a394:	shl    rdx,0x9
    a398:	shl    rdi,0x9
    a39c:	mov    rsp,QWORD PTR [rbp-0x50]
    a3a0:	lea    rax,[rcx+rdx*1]
    a3a4:	lea    rsi,[rax+rdi*1]
    a3a8:	jmp    a20d <vpc_write+0x11d>
    a3ad:	mov    eax,DWORD PTR [r14+0x234]
    a3b4:	add    eax,DWORD PTR [r14+0x230]
    a3bb:	sub    QWORD PTR [r14+0x208],rax
    a3c2:	mov    eax,0xffffffff
    a3c7:	mov    rsp,QWORD PTR [rbp-0x50]
    a3cb:	jmp    a232 <vpc_write+0x142>
    a3d0:	call   3190 <__stack_chk_fail@plt>
    a3d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000a3e0 <vpc_read>:
    a3e0:	push   r15
    a3e2:	push   r14
    a3e4:	push   r13
    a3e6:	push   r12
    a3e8:	push   rbp
    a3e9:	push   rbx
    a3ea:	sub    rsp,0x8
    a3ee:	mov    r12,QWORD PTR [rdi+0x40]
    a3f2:	test   ecx,ecx
    a3f4:	jle    a4a0 <vpc_read+0xc0>
    a3fa:	lea    ebx,[rcx-0x1]
    a3fd:	shl    rsi,0x9
    a401:	mov    r13,rdi
    a404:	mov    r15,rdx
    a407:	add    rbx,0x1
    a40b:	sub    rsi,rdx
    a40e:	xor    r14d,r14d
    a411:	shl    rbx,0x9
    a415:	mov    rbp,rsi
    a418:	mov    rsi,r12
    a41b:	add    rbx,rdx
    a41e:	jmp    a430 <vpc_read+0x50>
    a420:	add    r15,0x200
    a427:	cmp    r15,rbx
    a42a:	je     a4a0 <vpc_read+0xc0>
    a42c:	mov    rsi,QWORD PTR [r13+0x40]
    a430:	mov    ecx,DWORD PTR [rsi+0x230]
    a436:	lea    rax,[r15+rbp*1]
    a43a:	xor    edx,edx
    a43c:	div    rcx
    a43f:	shr    rdx,0x9
    a443:	cmp    DWORD PTR [rsi+0x210],eax
    a449:	jbe    a4b8 <vpc_read+0xd8>
    a44b:	mov    rcx,QWORD PTR [rsi+0x218]
    a452:	mov    eax,eax
    a454:	mov    ecx,DWORD PTR [rcx+rax*4]
    a457:	cmp    ecx,0xffffffff
    a45a:	je     a4b8 <vpc_read+0xd8>
    a45c:	mov    esi,DWORD PTR [rsi+0x234]
    a462:	shl    rdx,0x9
    a466:	shl    rcx,0x9
    a46a:	mov    rdi,QWORD PTR [r12]
    a46e:	add    rdx,rsi
    a471:	lea    rsi,[rdx+rcx*1]
    a475:	mov    ecx,0x200
    a47a:	mov    rdx,r15
    a47d:	call   17e40 <bdrv_pread>
    a482:	cmp    eax,0x200
    a487:	je     a420 <vpc_read+0x40>
    a489:	add    rsp,0x8
    a48d:	mov    eax,0xffffffff
    a492:	pop    rbx
    a493:	pop    rbp
    a494:	pop    r12
    a496:	pop    r13
    a498:	pop    r14
    a49a:	pop    r15
    a49c:	ret    
    a49d:	nop    DWORD PTR [rax]
    a4a0:	add    rsp,0x8
    a4a4:	xor    eax,eax
    a4a6:	pop    rbx
    a4a7:	pop    rbp
    a4a8:	pop    r12
    a4aa:	pop    r13
    a4ac:	pop    r14
    a4ae:	pop    r15
    a4b0:	ret    
    a4b1:	nop    DWORD PTR [rax+0x0]
    a4b8:	lea    rdi,[r15+0x8]
    a4bc:	mov    rcx,r15
    a4bf:	mov    rax,r14
    a4c2:	mov    QWORD PTR [r15],0x0
    a4c9:	mov    QWORD PTR [r15+0x1f8],0x0
    a4d4:	and    rdi,0xfffffffffffffff8
    a4d8:	sub    rcx,rdi
    a4db:	add    ecx,0x200
    a4e1:	shr    ecx,0x3
    a4e4:	rep stos QWORD PTR es:[rdi],rax
    a4e7:	jmp    a420 <vpc_read+0x40>
    a4ec:	nop    DWORD PTR [rax+0x0]

000000000000a4f0 <vpc_open>:
    a4f0:	push   r13
    a4f2:	mov    r13,rsi
    a4f5:	push   r12
    a4f7:	mov    r12,rdi
    a4fa:	push   rbp
    a4fb:	push   rbx
    a4fc:	sub    rsp,0x218
    a503:	mov    rbx,QWORD PTR [rdi+0x40]
    a507:	mov    rax,QWORD PTR fs:0x28
    a510:	mov    QWORD PTR [rsp+0x208],rax
    a518:	xor    eax,eax
    a51a:	mov    rdi,rbx
    a51d:	call   183c0 <bdrv_file_open>
    a522:	mov    ebp,eax
    a524:	test   eax,eax
    a526:	js     a706 <vpc_open+0x216>
    a52c:	lea    rbp,[rbx+0x8]
    a530:	mov    rdi,QWORD PTR [rbx]
    a533:	xor    esi,esi
    a535:	mov    ecx,0x200
    a53a:	mov    rdx,rbp
    a53d:	call   17e40 <bdrv_pread>
    a542:	cmp    eax,0x200
    a547:	jne    a752 <vpc_open+0x262>
    a54d:	mov    ecx,0x8
    a552:	lea    rdi,[rip+0x14f1b]        # 1f474 <desc_template.13939+0x1b4>
    a559:	mov    rsi,rbp
    a55c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a55e:	seta   al
    a561:	sbb    al,0x0
    a563:	test   al,al
    a565:	jne    a752 <vpc_open+0x262>
    a56b:	mov    edi,DWORD PTR [rbx+0x48]
    a56e:	mov    DWORD PTR [rbx+0x48],0x0
    a575:	mov    rsi,rbp
    a578:	xor    eax,eax
    a57a:	lea    rcx,[rbx+0x208]
    a581:	bswap  edi
    a583:	nop    DWORD PTR [rax+rax*1+0x0]
    a588:	movzx  edx,BYTE PTR [rsi]
    a58b:	add    rsi,0x1
    a58f:	add    eax,edx
    a591:	cmp    rcx,rsi
    a594:	jne    a588 <vpc_open+0x98>
    a596:	not    eax
    a598:	cmp    edi,eax
    a59a:	jne    a730 <vpc_open+0x240>
    a5a0:	movzx  edx,WORD PTR [rbx+0x40]
    a5a4:	movzx  eax,BYTE PTR [rbx+0x42]
    a5a8:	mov    rbp,rsp
    a5ab:	mov    ecx,0x200
    a5b0:	rol    dx,0x8
    a5b4:	movzx  edx,dx
    a5b7:	imul   rax,rdx
    a5bb:	movzx  edx,BYTE PTR [rbx+0x43]
    a5bf:	imul   rax,rdx
    a5c3:	mov    rdx,rbp
    a5c6:	mov    QWORD PTR [r12],rax
    a5ca:	mov    rsi,QWORD PTR [rbx+0x18]
    a5ce:	mov    rdi,QWORD PTR [rbx]
    a5d1:	bswap  rsi
    a5d4:	call   17e40 <bdrv_pread>
    a5d9:	cmp    eax,0x200
    a5de:	jne    a752 <vpc_open+0x262>
    a5e4:	mov    rsi,rbp
    a5e7:	mov    ecx,0x8
    a5ec:	lea    rdi,[rip+0x14e8a]        # 1f47d <desc_template.13939+0x1bd>
    a5f3:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a5f5:	seta   bpl
    a5f9:	sbb    bpl,0x0
    a5fd:	movsx  ebp,bpl
    a601:	test   ebp,ebp
    a603:	jne    a752 <vpc_open+0x262>
    a609:	mov    eax,DWORD PTR [rsp+0x20]
    a60d:	mov    edi,DWORD PTR [rsp+0x1c]
    a611:	bswap  eax
    a613:	mov    DWORD PTR [rbx+0x230],eax
    a619:	shr    eax,0xc
    a61c:	bswap  edi
    a61e:	add    eax,0x1ff
    a623:	mov    DWORD PTR [rbx+0x210],edi
    a629:	shl    edi,0x2
    a62c:	and    eax,0xfffffe00
    a631:	movsxd rdi,edi
    a634:	mov    DWORD PTR [rbx+0x234],eax
    a63a:	call   4cb0 <qemu_malloc>
    a63f:	mov    rsi,QWORD PTR [rsp+0x10]
    a644:	mov    edi,DWORD PTR [rbx+0x210]
    a64a:	mov    QWORD PTR [rbx+0x218],rax
    a651:	mov    rdx,rax
    a654:	bswap  rsi
    a657:	mov    QWORD PTR [rbx+0x220],rsi
    a65e:	lea    ecx,[rdi*4+0x0]
    a665:	mov    rdi,QWORD PTR [rbx]
    a668:	call   17e40 <bdrv_pread>
    a66d:	mov    edx,DWORD PTR [rbx+0x210]
    a673:	lea    ecx,[rdx*4+0x0]
    a67a:	cmp    eax,ecx
    a67c:	jne    a752 <vpc_open+0x262>
    a682:	mov    rcx,QWORD PTR [rbx+0x220]
    a689:	cdqe   
    a68b:	lea    rax,[rcx+rax*1+0x1ff]
    a693:	and    rax,0xfffffffffffffe00
    a699:	mov    QWORD PTR [rbx+0x208],rax
    a6a0:	test   edx,edx
    a6a2:	jle    a6fb <vpc_open+0x20b>
    a6a4:	mov    rcx,QWORD PTR [rbx+0x218]
    a6ab:	xor    edx,edx
    a6ad:	nop    DWORD PTR [rax]
    a6b0:	lea    rcx,[rcx+rdx*4]
    a6b4:	mov    eax,DWORD PTR [rcx]
    a6b6:	bswap  eax
    a6b8:	mov    DWORD PTR [rcx],eax
    a6ba:	mov    rcx,QWORD PTR [rbx+0x218]
    a6c1:	mov    eax,DWORD PTR [rcx+rdx*4]
    a6c4:	cmp    eax,0xffffffff
    a6c7:	je     a6ef <vpc_open+0x1ff>
    a6c9:	mov    esi,DWORD PTR [rbx+0x234]
    a6cf:	shl    rax,0x9
    a6d3:	add    rax,rsi
    a6d6:	mov    esi,DWORD PTR [rbx+0x230]
    a6dc:	add    rax,rsi
    a6df:	cmp    QWORD PTR [rbx+0x208],rax
    a6e6:	jae    a6ef <vpc_open+0x1ff>
    a6e8:	mov    QWORD PTR [rbx+0x208],rax
    a6ef:	add    rdx,0x1
    a6f3:	cmp    DWORD PTR [rbx+0x210],edx
    a6f9:	jg     a6b0 <vpc_open+0x1c0>
    a6fb:	mov    QWORD PTR [rbx+0x228],0xffffffffffffffff
    a706:	mov    rdi,QWORD PTR [rsp+0x208]
    a70e:	xor    rdi,QWORD PTR fs:0x28
    a717:	mov    eax,ebp
    a719:	jne    a761 <vpc_open+0x271>
    a71b:	add    rsp,0x218
    a722:	pop    rbx
    a723:	pop    rbp
    a724:	pop    r12
    a726:	pop    r13
    a728:	ret    
    a729:	nop    DWORD PTR [rax+0x0]
    a730:	mov    rdi,QWORD PTR [rip+0x1ddc9]        # 28500 <stderr@@GLIBC_2.2.5>
    a737:	mov    rcx,r13
    a73a:	mov    esi,0x1
    a73f:	xor    eax,eax
    a741:	lea    rdx,[rip+0x14d48]        # 1f490 <desc_template.13939+0x1d0>
    a748:	call   3630 <__fprintf_chk@plt>
    a74d:	jmp    a5a0 <vpc_open+0xb0>
    a752:	mov    rdi,QWORD PTR [rbx]
    a755:	mov    ebp,0xffffffff
    a75a:	call   17470 <bdrv_delete>
    a75f:	jmp    a706 <vpc_open+0x216>
    a761:	call   3190 <__stack_chk_fail@plt>
    a766:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000a770 <vpc_probe>:
    a770:	mov    rdx,rdi
    a773:	xor    eax,eax
    a775:	cmp    esi,0x7
    a778:	jle    a79b <vpc_probe+0x2b>
    a77a:	mov    ecx,0x8
    a77f:	lea    rdi,[rip+0x14cee]        # 1f474 <desc_template.13939+0x1b4>
    a786:	mov    rsi,rdx
    a789:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a78b:	seta   al
    a78e:	sbb    al,0x0
    a790:	movsx  eax,al
    a793:	cmp    eax,0x1
    a796:	sbb    eax,eax
    a798:	and    eax,0x64
    a79b:	ret    
    a79c:	nop    DWORD PTR [rax+0x0]

000000000000a7a0 <vpc_create>:
    a7a0:	push   r15
    a7a2:	push   r14
    a7a4:	push   r13
    a7a6:	push   r12
    a7a8:	push   rbp
    a7a9:	push   rbx
    a7aa:	sub    rsp,0x428
    a7b1:	mov    rax,QWORD PTR fs:0x28
    a7ba:	mov    QWORD PTR [rsp+0x418],rax
    a7c2:	xor    eax,eax
    a7c4:	mov    eax,0xffffffa1
    a7c9:	test   rdx,rdx
    a7cc:	jne    a9d5 <vpc_create+0x235>
    a7d2:	mov    rbx,rsi
    a7d5:	mov    edx,0x1a4
    a7da:	mov    esi,0x241
    a7df:	xor    eax,eax
    a7e1:	call   3500 <open64@plt>
    a7e6:	mov    r13d,eax
    a7e9:	test   eax,eax
    a7eb:	js     a9d0 <vpc_create+0x230>
    a7f1:	cmp    rbx,0xfeff010
    a7f8:	jg     aa00 <vpc_create+0x260>
    a7fe:	cmp    rbx,0x3effc10
    a805:	jle    aae0 <vpc_create+0x340>
    a80b:	movabs rdx,0x8080808080808081
    a815:	mov    rax,rbx
    a818:	imul   rdx
    a81b:	add    rdx,rbx
    a81e:	sar    rbx,0x3f
    a822:	sar    rdx,0x7
    a826:	sub    rdx,rbx
    a829:	mov    rbx,rdx
    a82c:	add    ebx,0xf
    a82f:	shr    ebx,0x4
    a832:	mov    eax,ebx
    a834:	rol    bx,0x8
    a838:	mov    r12,rax
    a83b:	shl    r12,0x8
    a83f:	sub    r12,rax
    a842:	mov    r14,r12
    a845:	shl    r12,0xd
    a849:	shl    r14,0x4
    a84d:	bswap  r12
    a850:	add    r14,0x1000
    a857:	shr    r14,0xc
    a85b:	mov    BYTE PTR [rsp+0xf],0xff
    a860:	mov    r15d,0x10
    a866:	lea    rbp,[rsp+0x10]
    a86b:	xor    eax,eax
    a86d:	mov    ecx,0x80
    a872:	mov    rdi,rbp
    a875:	rep stos QWORD PTR es:[rdi],rax
    a878:	xor    edi,edi
    a87a:	movabs rax,0x78697463656e6f63
    a884:	mov    DWORD PTR [rsp+0x2c],0x756d6571
    a88c:	mov    QWORD PTR [rsp+0x10],rax
    a891:	movabs rax,0x10002000000
    a89b:	mov    QWORD PTR [rsp+0x18],rax
    a8a0:	movabs rax,0x2000000000000
    a8aa:	mov    DWORD PTR [rsp+0x34],0x6b326957
    a8b2:	mov    QWORD PTR [rsp+0x20],rax
    a8b7:	call   33e0 <time@plt>
    a8bc:	mov    DWORD PTR [rsp+0x30],0x3000500
    a8c4:	xor    edx,edx
    a8c6:	lea    rsi,[rbp+0x200]
    a8cd:	sub    eax,0x386d4380
    a8d2:	mov    WORD PTR [rsp+0x48],bx
    a8d7:	bswap  eax
    a8d9:	mov    BYTE PTR [rsp+0x4a],r15b
    a8de:	mov    DWORD PTR [rsp+0x28],eax
    a8e2:	movzx  eax,BYTE PTR [rsp+0xf]
    a8e7:	mov    DWORD PTR [rsp+0x4c],0x3000000
    a8ef:	mov    QWORD PTR [rsp+0x38],r12
    a8f4:	mov    QWORD PTR [rsp+0x40],r12
    a8f9:	mov    r12,rbp
    a8fc:	mov    BYTE PTR [rsp+0x4b],al
    a900:	mov    rax,rbp
    a903:	nop    DWORD PTR [rax+rax*1+0x0]
    a908:	movzx  ecx,BYTE PTR [rax]
    a90b:	add    rax,0x1
    a90f:	add    edx,ecx
    a911:	cmp    rsi,rax
    a914:	jne    a908 <vpc_create+0x168>
    a916:	not    edx
    a918:	mov    rsi,rbp
    a91b:	mov    edi,r13d
    a91e:	bswap  edx
    a920:	mov    DWORD PTR [rsp+0x50],edx
    a924:	mov    edx,0x200
    a929:	call   3130 <write@plt>
    a92e:	cmp    rax,0x200
    a934:	jne    a9d0 <vpc_create+0x230>
    a93a:	lea    r15,[r14*4+0x1ff]
    a942:	xor    edx,edx
    a944:	mov    edi,r13d
    a947:	mov    rsi,r15
    a94a:	and    rsi,0xfffffffffffffe00
    a951:	add    rsi,0x600
    a958:	call   3620 <lseek64@plt>
    a95d:	test   rax,rax
    a960:	js     a9d0 <vpc_create+0x230>
    a962:	mov    edx,0x200
    a967:	mov    rsi,rbp
    a96a:	mov    edi,r13d
    a96d:	call   3130 <write@plt>
    a972:	cmp    rax,0x200
    a978:	jne    a9d0 <vpc_create+0x230>
    a97a:	xor    edx,edx
    a97c:	mov    esi,0x600
    a981:	mov    edi,r13d
    a984:	call   3620 <lseek64@plt>
    a989:	test   rax,rax
    a98c:	js     a9d0 <vpc_create+0x230>
    a98e:	mov    ecx,0x40
    a993:	mov    rdi,rbp
    a996:	shr    r15,0x9
    a99a:	xor    ebx,ebx
    a99c:	mov    rax,0xffffffffffffffff
    a9a3:	rep stos QWORD PTR es:[rdi],rax
    a9a6:	jmp    a9b8 <vpc_create+0x218>
    a9a8:	nop    DWORD PTR [rax+rax*1+0x0]
    a9b0:	add    ebx,0x1
    a9b3:	cmp    ebx,r15d
    a9b6:	je     aa20 <vpc_create+0x280>
    a9b8:	mov    edx,0x200
    a9bd:	mov    rsi,rbp
    a9c0:	mov    edi,r13d
    a9c3:	call   3130 <write@plt>
    a9c8:	cmp    rax,0x200
    a9ce:	je     a9b0 <vpc_create+0x210>
    a9d0:	mov    eax,0xfffffffb
    a9d5:	mov    rdi,QWORD PTR [rsp+0x418]
    a9dd:	xor    rdi,QWORD PTR fs:0x28
    a9e6:	jne    ac76 <vpc_create+0x4d6>
    a9ec:	add    rsp,0x428
    a9f3:	pop    rbx
    a9f4:	pop    rbp
    a9f5:	pop    r12
    a9f7:	pop    r13
    a9f9:	pop    r14
    a9fb:	pop    r15
    a9fd:	ret    
    a9fe:	xchg   ax,ax
    aa00:	movabs r12,0x20e0df1f000000
    aa0a:	mov    ebx,0xffffffff
    aa0f:	mov    r14d,0xff00
    aa15:	jmp    a85b <vpc_create+0xbb>
    aa1a:	nop    WORD PTR [rax+rax*1+0x0]
    aa20:	xor    eax,eax
    aa22:	mov    ecx,0x80
    aa27:	mov    rdi,rbp
    aa2a:	bswap  r14d
    aa2d:	rep stos QWORD PTR es:[rdi],rax
    aa30:	mov    DWORD PTR [rsp+0x2c],r14d
    aa35:	movabs rax,0x6573726170737863
    aa3f:	lea    rcx,[rbp+0x400]
    aa46:	mov    QWORD PTR [rbp+0x0],rax
    aa4a:	movabs rax,0xffffffff00000000
    aa54:	mov    DWORD PTR [rsp+0x28],0x100
    aa5c:	mov    DWORD PTR [rsp+0x30],0x2000
    aa64:	mov    QWORD PTR [rsp+0x18],rax
    aa69:	movabs rax,0x6000000000000
    aa73:	mov    QWORD PTR [rsp+0x20],rax
    aa78:	xor    eax,eax
    aa7a:	nop    WORD PTR [rax+rax*1+0x0]
    aa80:	movzx  edx,BYTE PTR [r12]
    aa85:	add    r12,0x1
    aa89:	add    eax,edx
    aa8b:	cmp    rcx,r12
    aa8e:	jne    aa80 <vpc_create+0x2e0>
    aa90:	not    eax
    aa92:	xor    edx,edx
    aa94:	mov    esi,0x200
    aa99:	mov    edi,r13d
    aa9c:	bswap  eax
    aa9e:	mov    DWORD PTR [rsp+0x34],eax
    aaa2:	call   3620 <lseek64@plt>
    aaa7:	test   rax,rax
    aaaa:	js     a9d0 <vpc_create+0x230>
    aab0:	mov    edx,0x400
    aab5:	mov    rsi,rbp
    aab8:	mov    edi,r13d
    aabb:	call   3130 <write@plt>
    aac0:	cmp    rax,0x400
    aac6:	jne    a9d0 <vpc_create+0x230>
    aacc:	mov    edi,r13d
    aacf:	call   3260 <close@plt>
    aad4:	xor    eax,eax
    aad6:	jmp    a9d5 <vpc_create+0x235>
    aadb:	nop    DWORD PTR [rax+rax*1+0x0]
    aae0:	movabs rdx,0x7878787878787879
    aaea:	mov    rax,rbx
    aaed:	imul   rdx
    aaf0:	mov    rax,rbx
    aaf3:	sar    rax,0x3f
    aaf7:	sar    rdx,0x3
    aafb:	sub    rdx,rax
    aafe:	lea    eax,[rdx+0x3ff]
    ab04:	shr    eax,0xa
    ab07:	mov    r15d,eax
    ab0a:	cmp    al,0x3
    ab0c:	jbe    abb0 <vpc_create+0x410>
    ab12:	movzx  ecx,al
    ab15:	mov    edi,ecx
    ab17:	shl    edi,0xa
    ab1a:	cmp    edi,edx
    ab1c:	jbe    ab26 <vpc_create+0x386>
    ab1e:	cmp    al,0x10
    ab20:	jbe    ac34 <vpc_create+0x494>
    ab26:	movabs rdx,0x8421084210842109
    ab30:	mov    rax,rbx
    ab33:	mov    rcx,rbx
    ab36:	imul   rdx
    ab39:	sar    rcx,0x3f
    ab3d:	lea    rax,[rdx+rbx*1]
    ab41:	sar    rax,0x4
    ab45:	sub    rax,rcx
    ab48:	cmp    eax,0x3fff
    ab4d:	jbe    abf5 <vpc_create+0x455>
    ab53:	mov    rax,rbx
    ab56:	mov    BYTE PTR [rsp+0xf],0x3f
    ab5b:	movabs rdx,0x8208208208208209
    ab65:	mov    r15d,0x10
    ab6b:	imul   rdx
    ab6e:	add    rbx,rdx
    ab71:	sar    rbx,0x5
    ab75:	sub    rbx,rcx
    ab78:	add    ebx,0xf
    ab7b:	shr    ebx,0x4
    ab7e:	movzx  eax,bx
    ab81:	rol    bx,0x8
    ab85:	mov    r12,rax
    ab88:	shl    r12,0x6
    ab8c:	sub    r12,rax
    ab8f:	mov    r14,r12
    ab92:	shl    r12,0xd
    ab96:	shl    r14,0x4
    ab9a:	bswap  r12
    ab9d:	add    r14,0x1000
    aba4:	shr    r14,0xc
    aba8:	jmp    a866 <vpc_create+0xc6>
    abad:	nop    DWORD PTR [rax]
    abb0:	cmp    edx,0xfff
    abb6:	ja     ab26 <vpc_create+0x386>
    abbc:	lea    ebx,[rdx+0x3]
    abbf:	mov    BYTE PTR [rsp+0xf],0x11
    abc4:	mov    r15d,0x4
    abca:	shr    ebx,0x2
    abcd:	mov    eax,ebx
    abcf:	rol    bx,0x8
    abd3:	mov    r12,rax
    abd6:	shl    r12,0x4
    abda:	add    r12,rax
    abdd:	lea    r14,[r12*4+0x1000]
    abe5:	shl    r12,0xb
    abe9:	shr    r14,0xc
    abed:	bswap  r12
    abf0:	jmp    a866 <vpc_create+0xc6>
    abf5:	lea    ebx,[rax+0xf]
    abf8:	mov    BYTE PTR [rsp+0xf],0x1f
    abfd:	mov    r15d,0x10
    ac03:	shr    ebx,0x4
    ac06:	mov    eax,ebx
    ac08:	rol    bx,0x8
    ac0c:	mov    r12,rax
    ac0f:	shl    r12,0x5
    ac13:	sub    r12,rax
    ac16:	mov    r14,r12
    ac19:	shl    r12,0xd
    ac1d:	shl    r14,0x4
    ac21:	bswap  r12
    ac24:	add    r14,0x1000
    ac2b:	shr    r14,0xc
    ac2f:	jmp    a866 <vpc_create+0xc6>
    ac34:	lea    eax,[rcx+rdx*1-0x1]
    ac38:	xor    edx,edx
    ac3a:	mov    BYTE PTR [rsp+0xf],0x11
    ac3f:	div    ecx
    ac41:	movzx  edx,r15b
    ac45:	movzx  ecx,ax
    ac48:	mov    ebx,eax
    ac4a:	imul   rcx,rdx
    ac4e:	rol    bx,0x8
    ac52:	mov    rdx,rcx
    ac55:	shl    rdx,0x4
    ac59:	add    rdx,rcx
    ac5c:	lea    r14,[rdx+0x1000]
    ac63:	shl    rdx,0x9
    ac67:	bswap  rdx
    ac6a:	shr    r14,0xc
    ac6e:	mov    r12,rdx
    ac71:	jmp    a866 <vpc_create+0xc6>
    ac76:	call   3190 <__stack_chk_fail@plt>
    ac7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ac80 <is_file>:
    ac80:	movzx  eax,BYTE PTR [rdi+0xb]
    ac84:	cmp    al,0x28
    ac86:	je     aca8 <is_file+0x28>
    ac88:	cmp    al,0xf
    ac8a:	je     aca8 <is_file+0x28>
    ac8c:	movzx  edx,BYTE PTR [rdi]
    ac8f:	cmp    dl,0xe5
    ac92:	je     aca8 <is_file+0x28>
    ac94:	test   dl,dl
    ac96:	je     aca8 <is_file+0x28>
    ac98:	shr    al,0x4
    ac9b:	xor    eax,0x1
    ac9e:	and    eax,0x1
    aca1:	ret    
    aca2:	nop    WORD PTR [rax+rax*1+0x0]
    aca8:	xor    eax,eax
    acaa:	ret    
    acab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000acb0 <adjust_dirindices>:
    acb0:	mov    eax,DWORD PTR [rdi+0x804c]
    acb6:	xor    ecx,ecx
    acb8:	test   eax,eax
    acba:	je     ad01 <adjust_dirindices+0x51>
    acbc:	nop    DWORD PTR [rax+0x0]
    acc0:	mov    eax,ecx
    acc2:	imul   eax,DWORD PTR [rdi+0x8050]
    acc9:	add    rax,QWORD PTR [rdi+0x8040]
    acd0:	mov    r8d,DWORD PTR [rax+0x8]
    acd4:	cmp    r8d,esi
    acd7:	jb     ace0 <adjust_dirindices+0x30>
    acd9:	add    r8d,edx
    acdc:	mov    DWORD PTR [rax+0x8],r8d
    ace0:	test   BYTE PTR [rax+0x20],0x4
    ace4:	je     acf6 <adjust_dirindices+0x46>
    ace6:	mov    r8d,DWORD PTR [rax+0x14]
    acea:	cmp    r8d,esi
    aced:	jl     acf6 <adjust_dirindices+0x46>
    acef:	add    r8d,edx
    acf2:	mov    DWORD PTR [rax+0x14],r8d
    acf6:	add    ecx,0x1
    acf9:	cmp    DWORD PTR [rdi+0x804c],ecx
    acff:	ja     acc0 <adjust_dirindices+0x10>
    ad01:	ret    
    ad02:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    ad0d:	nop    DWORD PTR [rax]

000000000000ad10 <vvfat_is_allocated>:
    ad10:	mov    rax,QWORD PTR [rdi+0x40]
    ad14:	mov    eax,DWORD PTR [rax+0x8070]
    ad1a:	sub    eax,esi
    ad1c:	cmp    eax,edx
    ad1e:	jle    ad30 <vvfat_is_allocated+0x20>
    ad20:	mov    DWORD PTR [rcx],edx
    ad22:	mov    eax,0x1
    ad27:	ret    
    ad28:	nop    DWORD PTR [rax+rax*1+0x0]
    ad30:	mov    DWORD PTR [rcx],eax
    ad32:	not    eax
    ad34:	shr    eax,0x1f
    ad37:	ret    
    ad38:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ad40 <vvfat_close>:
    ad40:	push   rbx
    ad41:	mov    rbx,QWORD PTR [rdi+0x40]
    ad45:	cmp    QWORD PTR [rbx+0x8080],0x0
    ad4d:	je     ad64 <vvfat_close+0x24>
    ad4f:	mov    edi,DWORD PTR [rbx+0x807c]
    ad55:	mov    QWORD PTR [rbx+0x8080],0x0
    ad60:	test   edi,edi
    ad62:	jne    add8 <vvfat_close+0x98>
    ad64:	mov    rdi,QWORD PTR [rbx+0x8010]
    ad6b:	mov    DWORD PTR [rbx+0x8098],0xffffffff
    ad75:	test   rdi,rdi
    ad78:	je     ad7f <vvfat_close+0x3f>
    ad7a:	call   3070 <free@plt>
    ad7f:	mov    rdi,QWORD PTR [rbx+0x8028]
    ad86:	mov    QWORD PTR [rbx+0x8018],0x0
    ad91:	test   rdi,rdi
    ad94:	je     ad9b <vvfat_close+0x5b>
    ad96:	call   3070 <free@plt>
    ad9b:	mov    rdi,QWORD PTR [rbx+0x8040]
    ada2:	mov    QWORD PTR [rbx+0x8030],0x0
    adad:	test   rdi,rdi
    adb0:	je     adb7 <vvfat_close+0x77>
    adb2:	call   3070 <free@plt>
    adb7:	mov    rdi,QWORD PTR [rbx+0x8090]
    adbe:	mov    QWORD PTR [rbx+0x8048],0x0
    adc9:	test   rdi,rdi
    adcc:	je     adf0 <vvfat_close+0xb0>
    adce:	pop    rbx
    adcf:	jmp    3070 <free@plt>
    add4:	nop    DWORD PTR [rax+0x0]
    add8:	call   3260 <close@plt>
    addd:	mov    DWORD PTR [rbx+0x807c],0x0
    ade7:	jmp    ad64 <vvfat_close+0x24>
    adec:	nop    DWORD PTR [rax+0x0]
    adf0:	pop    rbx
    adf1:	ret    
    adf2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    adfd:	nop    DWORD PTR [rax]

000000000000ae00 <array_remove>:
    ae00:	push   r15
    ae02:	push   r14
    ae04:	push   r13
    ae06:	push   r12
    ae08:	push   rbp
    ae09:	push   rbx
    ae0a:	sub    rsp,0x28
    ae0e:	test   esi,esi
    ae10:	js     af26 <array_remove+0x126>
    ae16:	mov    eax,DWORD PTR [rdi+0xc]
    ae19:	lea    edx,[rsi+0x1]
    ae1c:	mov    r15,rdi
    ae1f:	mov    ebx,esi
    ae21:	cmp    edx,eax
    ae23:	ja     af07 <array_remove+0x107>
    ae29:	mov    ebp,eax
    ae2b:	sub    ebp,0x1
    ae2e:	js     af00 <array_remove+0x100>
    ae34:	cmp    eax,esi
    ae36:	jbe    af00 <array_remove+0x100>
    ae3c:	cmp    esi,ebp
    ae3e:	je     aed0 <array_remove+0xd0>
    ae44:	movsxd r12,DWORD PTR [rdi+0x10]
    ae48:	mov    r9d,esi
    ae4b:	mov    r8d,ebp
    ae4e:	mov    r13,QWORD PTR [rdi]
    ae51:	imul   r9d,r12d
    ae55:	mov    rdi,r12
    ae58:	imul   r8d,r12d
    ae5c:	movsxd r9,r9d
    ae5f:	lea    rax,[r13+r9*1+0x0]
    ae64:	movsxd r8,r8d
    ae67:	mov    QWORD PTR [rsp+0x18],r9
    ae6c:	add    r13,r8
    ae6f:	mov    QWORD PTR [rsp+0x10],r8
    ae74:	mov    QWORD PTR [rsp+0x8],rax
    ae79:	call   4cb0 <qemu_malloc>
    ae7e:	mov    rsi,QWORD PTR [rsp+0x8]
    ae83:	mov    rdx,r12
    ae86:	mov    rdi,rax
    ae89:	mov    r14,rax
    ae8c:	call   33b0 <memcpy@plt>
    ae91:	cmp    ebx,ebp
    ae93:	mov    r8,QWORD PTR [rsp+0x10]
    ae98:	mov    r9,QWORD PTR [rsp+0x18]
    ae9d:	jg     aee8 <array_remove+0xe8>
    ae9f:	mov    rdi,QWORD PTR [rsp+0x8]
    aea4:	mov    rdx,r8
    aea7:	sub    rdx,r9
    aeaa:	lea    rsi,[rdi+r12*1]
    aeae:	call   3530 <memmove@plt>
    aeb3:	mov    rdx,r12
    aeb6:	mov    rsi,r14
    aeb9:	mov    rdi,r13
    aebc:	call   33b0 <memcpy@plt>
    aec1:	mov    rdi,r14
    aec4:	call   3070 <free@plt>
    aec9:	mov    eax,DWORD PTR [r15+0xc]
    aecd:	lea    ebp,[rax-0x1]
    aed0:	mov    DWORD PTR [r15+0xc],ebp
    aed4:	xor    eax,eax
    aed6:	add    rsp,0x28
    aeda:	pop    rbx
    aedb:	pop    rbp
    aedc:	pop    r12
    aede:	pop    r13
    aee0:	pop    r14
    aee2:	pop    r15
    aee4:	ret    
    aee5:	nop    DWORD PTR [rax]
    aee8:	mov    rdx,r9
    aeeb:	lea    rdi,[r13+r12*1+0x0]
    aef0:	mov    rsi,r13
    aef3:	sub    rdx,r8
    aef6:	call   3530 <memmove@plt>
    aefb:	jmp    aeb3 <array_remove+0xb3>
    aefd:	nop    DWORD PTR [rax]
    af00:	mov    eax,0xffffffff
    af05:	jmp    aed6 <array_remove+0xd6>
    af07:	lea    rcx,[rip+0x14e82]        # 1fd90 <__PRETTY_FUNCTION__.13862>
    af0e:	mov    edx,0xb5
    af13:	lea    rsi,[rip+0x145ac]        # 1f4c6 <desc_template.13939+0x206>
    af1a:	lea    rdi,[rip+0x145bd]        # 1f4de <desc_template.13939+0x21e>
    af21:	call   3220 <__assert_fail@plt>
    af26:	lea    rcx,[rip+0x14e63]        # 1fd90 <__PRETTY_FUNCTION__.13862>
    af2d:	mov    edx,0xb3
    af32:	lea    rsi,[rip+0x1458d]        # 1f4c6 <desc_template.13939+0x206>
    af39:	lea    rdi,[rip+0x14594]        # 1f4d4 <desc_template.13939+0x214>
    af40:	call   3220 <__assert_fail@plt>
    af45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000af50 <remove_mapping>:
    af50:	push   r12
    af52:	push   rbp
    af53:	push   rbx
    af54:	cmp    esi,DWORD PTR [rdi+0x804c]
    af5a:	jae    b03e <remove_mapping+0xee>
    af60:	mov    eax,esi
    af62:	imul   eax,DWORD PTR [rdi+0x8050]
    af69:	mov    rbx,rdi
    af6c:	mov    ebp,esi
    af6e:	mov    r12,QWORD PTR [rdi+0x8040]
    af75:	add    rax,r12
    af78:	mov    edx,DWORD PTR [rax+0xc]
    af7b:	test   edx,edx
    af7d:	js     b030 <remove_mapping+0xe0>
    af83:	lea    rdi,[rbx+0x8040]
    af8a:	mov    esi,ebp
    af8c:	call   ae00 <array_remove>
    af91:	mov    eax,DWORD PTR [rbx+0x804c]
    af97:	test   eax,eax
    af99:	je     afdd <remove_mapping+0x8d>
    af9b:	xor    edx,edx
    af9d:	nop    DWORD PTR [rax]
    afa0:	mov    eax,edx
    afa2:	imul   eax,DWORD PTR [rbx+0x8050]
    afa9:	add    rax,QWORD PTR [rbx+0x8040]
    afb0:	mov    ecx,DWORD PTR [rax+0xc]
    afb3:	cmp    ebp,ecx
    afb5:	jg     afbd <remove_mapping+0x6d>
    afb7:	sub    ecx,0x1
    afba:	mov    DWORD PTR [rax+0xc],ecx
    afbd:	test   BYTE PTR [rax+0x20],0x4
    afc1:	je     afd0 <remove_mapping+0x80>
    afc3:	mov    ecx,DWORD PTR [rax+0x10]
    afc6:	cmp    ebp,ecx
    afc8:	jg     afd0 <remove_mapping+0x80>
    afca:	sub    ecx,0x1
    afcd:	mov    DWORD PTR [rax+0x10],ecx
    afd0:	mov    eax,DWORD PTR [rbx+0x804c]
    afd6:	add    edx,0x1
    afd9:	cmp    eax,edx
    afdb:	ja     afa0 <remove_mapping+0x50>
    afdd:	mov    rdx,QWORD PTR [rbx+0x8080]
    afe4:	test   rdx,rdx
    afe7:	je     b01f <remove_mapping+0xcf>
    afe9:	mov    rcx,QWORD PTR [rbx+0x8040]
    aff0:	cmp    rcx,r12
    aff3:	je     b01f <remove_mapping+0xcf>
    aff5:	movabs rsi,0xcccccccccccccccd
    afff:	sub    rdx,r12
    b002:	sar    rdx,0x3
    b006:	imul   rdx,rsi
    b00a:	cmp    edx,eax
    b00c:	jae    b03e <remove_mapping+0xee>
    b00e:	imul   edx,DWORD PTR [rbx+0x8050]
    b015:	add    rdx,rcx
    b018:	mov    QWORD PTR [rbx+0x8080],rdx
    b01f:	pop    rbx
    b020:	xor    eax,eax
    b022:	pop    rbp
    b023:	pop    r12
    b025:	ret    
    b026:	nop    WORD PTR cs:[rax+rax*1+0x0]
    b030:	mov    rdi,QWORD PTR [rax+0x18]
    b034:	call   3070 <free@plt>
    b039:	jmp    af83 <remove_mapping+0x33>
    b03e:	lea    rcx,[rip+0x14e0b]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    b045:	mov    edx,0x60
    b04a:	lea    rsi,[rip+0x14475]        # 1f4c6 <desc_template.13939+0x206>
    b051:	lea    rdi,[rip+0x144a3]        # 1f4fb <desc_template.13939+0x23b>
    b058:	call   3220 <__assert_fail@plt>
    b05d:	nop    DWORD PTR [rax]

000000000000b060 <insert_mapping>:
    b060:	push   r15
    b062:	push   r14
    b064:	push   r13
    b066:	mov    r13d,esi
    b069:	push   r12
    b06b:	mov    r12,rdi
    b06e:	push   rbp
    b06f:	xor    ebp,ebp
    b071:	push   rbx
    b072:	mov    ebx,edx
    b074:	sub    rsp,0x18
    b078:	mov    r9d,DWORD PTR [rdi+0x804c]
    b07f:	mov    ecx,r9d
    b082:	jmp    b0a2 <insert_mapping+0x42>
    b084:	nop    DWORD PTR [rax+0x0]
    b088:	cmp    ecx,edx
    b08a:	jne    b094 <insert_mapping+0x34>
    b08c:	test   ecx,ecx
    b08e:	jne    b343 <insert_mapping+0x2e3>
    b094:	cmp    ecx,edx
    b096:	je     b0fe <insert_mapping+0x9e>
    b098:	mov    ecx,edx
    b09a:	cmp    ebp,ecx
    b09c:	jg     b305 <insert_mapping+0x2a5>
    b0a2:	lea    eax,[rbp+rcx*1+0x0]
    b0a6:	mov    edx,eax
    b0a8:	shr    edx,0x1f
    b0ab:	add    edx,eax
    b0ad:	sar    edx,1
    b0af:	mov    r10d,edx
    b0b2:	cmp    r9d,edx
    b0b5:	jbe    b2e6 <insert_mapping+0x286>
    b0bb:	mov    r14d,DWORD PTR [r12+0x8050]
    b0c3:	mov    eax,edx
    b0c5:	mov    rdi,QWORD PTR [r12+0x8040]
    b0cd:	imul   eax,r14d
    b0d1:	mov    r15,rdi
    b0d4:	add    rax,rdi
    b0d7:	mov    esi,DWORD PTR [rax]
    b0d9:	mov    r8d,DWORD PTR [rax+0x4]
    b0dd:	cmp    esi,r8d
    b0e0:	jae    b324 <insert_mapping+0x2c4>
    b0e6:	cmp    r13d,esi
    b0e9:	jbe    b088 <insert_mapping+0x28>
    b0eb:	cmp    ebp,edx
    b0ed:	je     b0f3 <insert_mapping+0x93>
    b0ef:	mov    ebp,edx
    b0f1:	jmp    b09a <insert_mapping+0x3a>
    b0f3:	cmp    r13d,r8d
    b0f6:	jb     b2a2 <insert_mapping+0x242>
    b0fc:	mov    ebp,ecx
    b0fe:	test   r9d,r9d
    b101:	je     b2e6 <insert_mapping+0x286>
    b107:	mov    ecx,ebp
    b109:	mov    rax,rdi
    b10c:	cmp    r9d,ebp
    b10f:	ja     b26d <insert_mapping+0x20d>
    b115:	add    r9d,0x1
    b119:	mov    edx,DWORD PTR [r12+0x8048]
    b121:	imul   r9d,r14d
    b125:	cmp    r9d,edx
    b128:	ja     b236 <insert_mapping+0x1d6>
    b12e:	mov    edi,ecx
    b130:	mov    edx,DWORD PTR [r12+0x804c]
    b138:	mov    DWORD PTR [rsp+0xc],ecx
    b13c:	imul   edi,r14d
    b140:	sub    edx,ecx
    b142:	imul   edx,r14d
    b146:	mov    esi,edi
    b148:	add    edi,r14d
    b14b:	add    rsi,rax
    b14e:	add    rdi,rax
    b151:	call   3530 <memmove@plt>
    b156:	mov    ecx,DWORD PTR [rsp+0xc]
    b15a:	imul   ecx,DWORD PTR [r12+0x8050]
    b163:	mov    rax,QWORD PTR [r12+0x8040]
    b16b:	add    DWORD PTR [r12+0x804c],0x1
    b174:	add    rax,rcx
    b177:	mov    QWORD PTR [rax+0x18],0x0
    b17f:	mov    edx,DWORD PTR [r12+0x804c]
    b187:	test   edx,edx
    b189:	je     b1d0 <insert_mapping+0x170>
    b18b:	xor    ecx,ecx
    b18d:	nop    DWORD PTR [rax]
    b190:	mov    edx,ecx
    b192:	imul   edx,DWORD PTR [r12+0x8050]
    b19b:	add    rdx,QWORD PTR [r12+0x8040]
    b1a3:	mov    esi,DWORD PTR [rdx+0xc]
    b1a6:	cmp    esi,ebp
    b1a8:	jl     b1b0 <insert_mapping+0x150>
    b1aa:	add    esi,0x1
    b1ad:	mov    DWORD PTR [rdx+0xc],esi
    b1b0:	test   BYTE PTR [rdx+0x20],0x4
    b1b4:	je     b1c3 <insert_mapping+0x163>
    b1b6:	mov    esi,DWORD PTR [rdx+0x10]
    b1b9:	cmp    esi,ebp
    b1bb:	jl     b1c3 <insert_mapping+0x163>
    b1bd:	add    esi,0x1
    b1c0:	mov    DWORD PTR [rdx+0x10],esi
    b1c3:	add    ecx,0x1
    b1c6:	cmp    DWORD PTR [r12+0x804c],ecx
    b1ce:	ja     b190 <insert_mapping+0x130>
    b1d0:	mov    DWORD PTR [rax],r13d
    b1d3:	mov    DWORD PTR [rax+0x4],ebx
    b1d6:	mov    rdx,QWORD PTR [r12+0x8080]
    b1de:	test   rdx,rdx
    b1e1:	je     b227 <insert_mapping+0x1c7>
    b1e3:	mov    rcx,QWORD PTR [r12+0x8040]
    b1eb:	cmp    rcx,r15
    b1ee:	je     b227 <insert_mapping+0x1c7>
    b1f0:	movabs rsi,0xcccccccccccccccd
    b1fa:	sub    rdx,r15
    b1fd:	sar    rdx,0x3
    b201:	imul   rdx,rsi
    b205:	cmp    edx,DWORD PTR [r12+0x804c]
    b20d:	jae    b2e6 <insert_mapping+0x286>
    b213:	imul   edx,DWORD PTR [r12+0x8050]
    b21c:	add    rdx,rcx
    b21f:	mov    QWORD PTR [r12+0x8080],rdx
    b227:	add    rsp,0x18
    b22b:	pop    rbx
    b22c:	pop    rbp
    b22d:	pop    r12
    b22f:	pop    r13
    b231:	pop    r14
    b233:	pop    r15
    b235:	ret    
    b236:	lea    esi,[rdx+r14*1]
    b23a:	mov    DWORD PTR [rsp+0xc],ecx
    b23e:	call   4cd0 <qemu_realloc>
    b243:	mov    QWORD PTR [r12+0x8040],rax
    b24b:	test   rax,rax
    b24e:	je     3729 <insert_mapping.cold.9>
    b254:	add    DWORD PTR [r12+0x8048],r14d
    b25c:	mov    ecx,DWORD PTR [rsp+0xc]
    b260:	mov    r14d,DWORD PTR [r12+0x8050]
    b268:	jmp    b12e <insert_mapping+0xce>
    b26d:	imul   r14d,ebp
    b271:	mov    rax,r14
    b274:	add    rax,rdi
    b277:	jne    b2e1 <insert_mapping+0x281>
    b279:	mov    edx,DWORD PTR ds:0x0
    b280:	mov    r10d,ebp
    b283:	mov    ecx,r10d
    b286:	cmp    r13d,edx
    b289:	jae    b1d0 <insert_mapping+0x170>
    b28f:	mov    r14d,DWORD PTR [r12+0x8050]
    b297:	mov    rax,rdi
    b29a:	mov    ebp,r10d
    b29d:	jmp    b115 <insert_mapping+0xb5>
    b2a2:	test   r9d,r9d
    b2a5:	je     b2e6 <insert_mapping+0x286>
    b2a7:	mov    edx,DWORD PTR [rax]
    b2a9:	cmp    edx,r13d
    b2ac:	jae    b283 <insert_mapping+0x223>
    b2ae:	mov    DWORD PTR [rax+0x4],r13d
    b2b2:	mov    r9d,DWORD PTR [r12+0x804c]
    b2ba:	add    r10d,0x1
    b2be:	mov    ecx,r10d
    b2c1:	cmp    r10d,r9d
    b2c4:	jae    b2e6 <insert_mapping+0x286>
    b2c6:	mov    eax,r10d
    b2c9:	mov    rdi,QWORD PTR [r12+0x8040]
    b2d1:	imul   eax,DWORD PTR [r12+0x8050]
    b2da:	add    rax,rdi
    b2dd:	mov    edx,DWORD PTR [rax]
    b2df:	jmp    b286 <insert_mapping+0x226>
    b2e1:	mov    r10d,ebp
    b2e4:	jmp    b2a7 <insert_mapping+0x247>
    b2e6:	lea    rcx,[rip+0x14b63]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    b2ed:	mov    edx,0x60
    b2f2:	lea    rsi,[rip+0x141cd]        # 1f4c6 <desc_template.13939+0x206>
    b2f9:	lea    rdi,[rip+0x141fb]        # 1f4fb <desc_template.13939+0x23b>
    b300:	call   3220 <__assert_fail@plt>
    b305:	lea    rcx,[rip+0x14b54]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    b30c:	mov    edx,0x465
    b311:	lea    rsi,[rip+0x141ae]        # 1f4c6 <desc_template.13939+0x206>
    b318:	lea    rdi,[rip+0x1422a]        # 1f549 <desc_template.13939+0x289>
    b31f:	call   3220 <__assert_fail@plt>
    b324:	lea    rcx,[rip+0x14b35]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    b32b:	mov    edx,0x45a
    b330:	lea    rsi,[rip+0x1418f]        # 1f4c6 <desc_template.13939+0x206>
    b337:	lea    rdi,[rip+0x141d1]        # 1f50f <desc_template.13939+0x24f>
    b33e:	call   3220 <__assert_fail@plt>
    b343:	lea    rcx,[rip+0x14b16]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    b34a:	mov    edx,0x45c
    b34f:	lea    rsi,[rip+0x14170]        # 1f4c6 <desc_template.13939+0x206>
    b356:	lea    rdi,[rip+0x141d0]        # 1f52d <desc_template.13939+0x26d>
    b35d:	call   3220 <__assert_fail@plt>
    b362:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    b36d:	nop    DWORD PTR [rax]

000000000000b370 <insert_direntries>:
    b370:	push   r13
    b372:	mov    r13d,edx
    b375:	push   r12
    b377:	mov    r12d,esi
    b37a:	push   rbp
    b37b:	push   rbx
    b37c:	mov    rbx,rdi
    b37f:	sub    rsp,0x8
    b383:	mov    edx,DWORD PTR [rdi+0x8034]
    b389:	mov    ecx,DWORD PTR [rdi+0x8038]
    b38f:	mov    edi,DWORD PTR [rdi+0x8030]
    b395:	mov    rax,QWORD PTR [rbx+0x8028]
    b39c:	lea    esi,[r13+rdx*1+0x0]
    b3a1:	imul   esi,ecx
    b3a4:	cmp    esi,edi
    b3a6:	jbe    b3d7 <insert_direntries+0x67>
    b3a8:	imul   ecx,r13d
    b3ac:	lea    esi,[rdi+rcx*1]
    b3af:	mov    rdi,rax
    b3b2:	mov    ebp,ecx
    b3b4:	call   4cd0 <qemu_realloc>
    b3b9:	mov    QWORD PTR [rbx+0x8028],rax
    b3c0:	test   rax,rax
    b3c3:	je     b430 <insert_direntries+0xc0>
    b3c5:	add    DWORD PTR [rbx+0x8030],ebp
    b3cb:	mov    edx,DWORD PTR [rbx+0x8034]
    b3d1:	mov    ecx,DWORD PTR [rbx+0x8038]
    b3d7:	sub    edx,r12d
    b3da:	lea    edi,[r13+r12*1+0x0]
    b3df:	mov    esi,r12d
    b3e2:	imul   edx,ecx
    b3e5:	imul   esi,ecx
    b3e8:	imul   ecx,edi
    b3eb:	add    rsi,rax
    b3ee:	lea    rdi,[rax+rcx*1]
    b3f2:	call   3530 <memmove@plt>
    b3f7:	add    DWORD PTR [rbx+0x8034],r13d
    b3fe:	mov    eax,r12d
    b401:	imul   eax,DWORD PTR [rbx+0x8038]
    b408:	add    rax,QWORD PTR [rbx+0x8028]
    b40f:	mov    r9,rax
    b412:	je     b422 <insert_direntries+0xb2>
    b414:	mov    edx,r13d
    b417:	mov    esi,r12d
    b41a:	mov    rdi,rbx
    b41d:	call   acb0 <adjust_dirindices>
    b422:	add    rsp,0x8
    b426:	mov    rax,r9
    b429:	pop    rbx
    b42a:	pop    rbp
    b42b:	pop    r12
    b42d:	pop    r13
    b42f:	ret    
    b430:	xor    r9d,r9d
    b433:	jmp    b422 <insert_direntries+0xb2>
    b435:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000b440 <remove_direntries>:
    b440:	push   r15
    b442:	push   r14
    b444:	push   r13
    b446:	push   r12
    b448:	push   rbp
    b449:	push   rbx
    b44a:	sub    rsp,0x28
    b44e:	test   esi,esi
    b450:	js     b5bd <remove_direntries+0x17d>
    b456:	mov    ebx,edx
    b458:	test   edx,edx
    b45a:	jle    b59e <remove_direntries+0x15e>
    b460:	mov    eax,DWORD PTR [rdi+0x8034]
    b466:	lea    edx,[rsi+rdx*1]
    b469:	mov    r15,rdi
    b46c:	mov    ebp,esi
    b46e:	cmp    edx,eax
    b470:	ja     b57f <remove_direntries+0x13f>
    b476:	mov    r9d,eax
    b479:	sub    r9d,0x1
    b47d:	js     b578 <remove_direntries+0x138>
    b483:	cmp    eax,esi
    b485:	jbe    b578 <remove_direntries+0x138>
    b48b:	cmp    esi,r9d
    b48e:	je     b536 <remove_direntries+0xf6>
    b494:	mov    r12d,DWORD PTR [rdi+0x8038]
    b49b:	mov    r8d,r9d
    b49e:	mov    r10d,esi
    b4a1:	mov    r13,QWORD PTR [rdi+0x8028]
    b4a8:	mov    DWORD PTR [rsp+0x14],r9d
    b4ad:	imul   r10d,r12d
    b4b1:	imul   r8d,r12d
    b4b5:	imul   r12d,ebx
    b4b9:	movsxd r10,r10d
    b4bc:	lea    rax,[r13+r10*1+0x0]
    b4c1:	movsxd r8,r8d
    b4c4:	mov    QWORD PTR [rsp+0x18],r10
    b4c9:	movsxd r12,r12d
    b4cc:	add    r13,r8
    b4cf:	mov    QWORD PTR [rsp+0x8],r8
    b4d4:	mov    rdi,r12
    b4d7:	mov    QWORD PTR [rsp],rax
    b4db:	call   4cb0 <qemu_malloc>
    b4e0:	mov    rsi,QWORD PTR [rsp]
    b4e4:	mov    rdx,r12
    b4e7:	mov    rdi,rax
    b4ea:	mov    r14,rax
    b4ed:	call   33b0 <memcpy@plt>
    b4f2:	mov    r9d,DWORD PTR [rsp+0x14]
    b4f7:	mov    r8,QWORD PTR [rsp+0x8]
    b4fc:	mov    r10,QWORD PTR [rsp+0x18]
    b501:	cmp    ebp,r9d
    b504:	jg     b560 <remove_direntries+0x120>
    b506:	mov    rdi,QWORD PTR [rsp]
    b50a:	mov    rdx,r8
    b50d:	sub    rdx,r10
    b510:	lea    rsi,[rdi+r12*1]
    b514:	call   3530 <memmove@plt>
    b519:	mov    rdx,r12
    b51c:	mov    rsi,r14
    b51f:	mov    rdi,r13
    b522:	call   33b0 <memcpy@plt>
    b527:	mov    rdi,r14
    b52a:	call   3070 <free@plt>
    b52f:	mov    eax,DWORD PTR [r15+0x8034]
    b536:	sub    eax,ebx
    b538:	neg    ebx
    b53a:	mov    esi,ebp
    b53c:	mov    rdi,r15
    b53f:	mov    DWORD PTR [r15+0x8034],eax
    b546:	mov    edx,ebx
    b548:	call   acb0 <adjust_dirindices>
    b54d:	xor    eax,eax
    b54f:	add    rsp,0x28
    b553:	pop    rbx
    b554:	pop    rbp
    b555:	pop    r12
    b557:	pop    r13
    b559:	pop    r14
    b55b:	pop    r15
    b55d:	ret    
    b55e:	xchg   ax,ax
    b560:	mov    rdx,r10
    b563:	lea    rdi,[r13+r12*1+0x0]
    b568:	mov    rsi,r13
    b56b:	sub    rdx,r8
    b56e:	call   3530 <memmove@plt>
    b573:	jmp    b519 <remove_direntries+0xd9>
    b575:	nop    DWORD PTR [rax]
    b578:	mov    eax,0xffffffff
    b57d:	jmp    b54f <remove_direntries+0x10f>
    b57f:	lea    rcx,[rip+0x1480a]        # 1fd90 <__PRETTY_FUNCTION__.13862>
    b586:	mov    edx,0xb5
    b58b:	lea    rsi,[rip+0x13f34]        # 1f4c6 <desc_template.13939+0x206>
    b592:	lea    rdi,[rip+0x13f45]        # 1f4de <desc_template.13939+0x21e>
    b599:	call   3220 <__assert_fail@plt>
    b59e:	lea    rcx,[rip+0x147eb]        # 1fd90 <__PRETTY_FUNCTION__.13862>
    b5a5:	mov    edx,0xb4
    b5aa:	lea    rsi,[rip+0x13f15]        # 1f4c6 <desc_template.13939+0x206>
    b5b1:	lea    rdi,[rip+0x13fa0]        # 1f558 <desc_template.13939+0x298>
    b5b8:	call   3220 <__assert_fail@plt>
    b5bd:	lea    rcx,[rip+0x147cc]        # 1fd90 <__PRETTY_FUNCTION__.13862>
    b5c4:	mov    edx,0xb3
    b5c9:	lea    rsi,[rip+0x13ef6]        # 1f4c6 <desc_template.13939+0x206>
    b5d0:	lea    rdi,[rip+0x13efd]        # 1f4d4 <desc_template.13939+0x214>
    b5d7:	call   3220 <__assert_fail@plt>
    b5dc:	nop    DWORD PTR [rax+0x0]

000000000000b5e0 <vvfat_read>:
    b5e0:	push   r15
    b5e2:	push   r14
    b5e4:	push   r13
    b5e6:	push   r12
    b5e8:	push   rbp
    b5e9:	push   rbx
    b5ea:	sub    rsp,0x38
    b5ee:	mov    r12,QWORD PTR [rdi+0x40]
    b5f2:	mov    QWORD PTR [rsp],rdx
    b5f6:	mov    rax,QWORD PTR fs:0x28
    b5ff:	mov    QWORD PTR [rsp+0x28],rax
    b604:	xor    eax,eax
    b606:	test   ecx,ecx
    b608:	jle    b75b <vvfat_read+0x17b>
    b60e:	mov    eax,DWORD PTR [r12+0x8070]
    b616:	mov    r13,rsi
    b619:	cmp    rsi,rax
    b61c:	jge    bb17 <vvfat_read+0x537>
    b622:	lea    rax,[rsp+0x24]
    b627:	xor    r14d,r14d
    b62a:	mov    ebp,ecx
    b62c:	mov    QWORD PTR [rsp+0x8],rax
    b631:	jmp    b694 <vvfat_read+0xb4>
    b633:	nop    DWORD PTR [rax+rax*1+0x0]
    b638:	mov    rdi,QWORD PTR [r12+0x80b0]
    b640:	mov    edx,r14d
    b643:	mov    ecx,DWORD PTR [rsp+0x24]
    b647:	mov    rsi,r13
    b64a:	shl    edx,0x9
    b64d:	mov    rax,QWORD PTR [rdi+0x38]
    b651:	movsxd rdx,edx
    b654:	add    rdx,QWORD PTR [rsp]
    b658:	call   QWORD PTR [rax+0x20]
    b65b:	test   eax,eax
    b65d:	jne    bb17 <vvfat_read+0x537>
    b663:	mov    eax,DWORD PTR [rsp+0x24]
    b667:	sub    eax,0x1
    b66a:	add    r14d,eax
    b66d:	cdqe   
    b66f:	add    r13,rax
    b672:	add    r14d,0x1
    b676:	add    r13,0x1
    b67a:	cmp    ebp,r14d
    b67d:	jle    b75b <vvfat_read+0x17b>
    b683:	mov    eax,DWORD PTR [r12+0x8070]
    b68b:	cmp    rax,r13
    b68e:	jle    bb17 <vvfat_read+0x537>
    b694:	mov    rdi,QWORD PTR [r12+0x80b0]
    b69c:	test   rdi,rdi
    b69f:	je     b6bd <vvfat_read+0xdd>
    b6a1:	mov    rax,QWORD PTR [rdi+0x38]
    b6a5:	mov    edx,ebp
    b6a7:	mov    rcx,QWORD PTR [rsp+0x8]
    b6ac:	mov    rsi,r13
    b6af:	sub    edx,r14d
    b6b2:	call   QWORD PTR [rax+0x48]
    b6b5:	test   eax,eax
    b6b7:	jne    b638 <vvfat_read+0x58>
    b6bd:	mov    edx,DWORD PTR [r12+0x806c]
    b6c5:	cmp    rdx,r13
    b6c8:	jle    b768 <vvfat_read+0x188>
    b6ce:	mov    eax,DWORD PTR [r12+0x8]
    b6d3:	cmp    rax,r13
    b6d6:	jg     ba00 <vvfat_read+0x420>
    b6dc:	mov    rsi,r13
    b6df:	mov    edx,DWORD PTR [r12+0x8060]
    b6e7:	sub    rsi,rax
    b6ea:	mov    rax,rsi
    b6ed:	cmp    rsi,rdx
    b6f0:	jl     b6fe <vvfat_read+0x11e>
    b6f2:	sub    rax,rdx
    b6f5:	cmp    rdx,rax
    b6f8:	jle    b672 <vvfat_read+0x92>
    b6fe:	mov    edx,r14d
    b701:	shl    rax,0x9
    b705:	add    rax,QWORD PTR [r12+0x8010]
    b70d:	shl    edx,0x9
    b710:	mov    rsi,rax
    b713:	movsxd rdx,edx
    b716:	add    rdx,QWORD PTR [rsp]
    b71a:	mov    rax,QWORD PTR [rsi]
    b71d:	lea    rdi,[rdx+0x8]
    b721:	add    r14d,0x1
    b725:	add    r13,0x1
    b729:	and    rdi,0xfffffffffffffff8
    b72d:	mov    QWORD PTR [rdx],rax
    b730:	mov    rax,QWORD PTR [rsi+0x1f8]
    b737:	mov    QWORD PTR [rdx+0x1f8],rax
    b73e:	sub    rdx,rdi
    b741:	sub    rsi,rdx
    b744:	add    edx,0x200
    b74a:	shr    edx,0x3
    b74d:	mov    ecx,edx
    b74f:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    b752:	cmp    ebp,r14d
    b755:	jg     b683 <vvfat_read+0xa3>
    b75b:	xor    eax,eax
    b75d:	jmp    bb1c <vvfat_read+0x53c>
    b762:	nop    WORD PTR [rax+rax*1+0x0]
    b768:	mov    esi,r13d
    b76b:	sub    esi,edx
    b76d:	xor    edx,edx
    b76f:	mov    eax,esi
    b771:	div    DWORD PTR [r12+0x805c]
    b779:	mov    DWORD PTR [rsp+0x14],edx
    b77d:	mov    r15d,eax
    b780:	cmp    eax,DWORD PTR [r12+0x8098]
    b788:	je     b9c0 <vvfat_read+0x3e0>
    b78e:	mov    r11,QWORD PTR [r12+0x8080]
    b796:	test   r11,r11
    b799:	je     b870 <vvfat_read+0x290>
    b79f:	mov    ecx,DWORD PTR [r12+0x807c]
    b7a7:	test   ecx,ecx
    b7a9:	jne    b7b6 <vvfat_read+0x1d6>
    b7ab:	test   BYTE PTR [r11+0x20],0x4
    b7b0:	je     bc0f <vvfat_read+0x62f>
    b7b6:	mov    esi,DWORD PTR [r11]
    b7b9:	cmp    r15d,esi
    b7bc:	jb     b870 <vvfat_read+0x290>
    b7c2:	cmp    r15d,DWORD PTR [r11+0x4]
    b7c6:	jae    b870 <vvfat_read+0x290>
    b7cc:	test   BYTE PTR [r11+0x20],0x4
    b7d1:	jne    bb0f <vvfat_read+0x52f>
    b7d7:	nop    WORD PTR [rax+rax*1+0x0]
    b7e0:	test   ecx,ecx
    b7e2:	je     bbf0 <vvfat_read+0x610>
    b7e8:	mov    rax,QWORD PTR [r12+0x8080]
    b7f0:	mov    ebx,r15d
    b7f3:	xor    edx,edx
    b7f5:	mov    edi,ecx
    b7f7:	sub    ebx,DWORD PTR [rax]
    b7f9:	imul   ebx,DWORD PTR [r12+0x8058]
    b802:	add    ebx,DWORD PTR [rax+0x10]
    b805:	mov    rsi,rbx
    b808:	call   3620 <lseek64@plt>
    b80d:	cmp    rbx,rax
    b810:	jne    baab <vvfat_read+0x4cb>
    b816:	mov    rsi,QWORD PTR [r12+0x8090]
    b81e:	mov    edx,DWORD PTR [r12+0x8058]
    b826:	mov    edi,DWORD PTR [r12+0x807c]
    b82e:	mov    QWORD PTR [r12+0x8088],rsi
    b836:	call   4600 <qemu_read_ok>
    b83b:	test   eax,eax
    b83d:	js     bbbb <vvfat_read+0x5db>
    b843:	mov    DWORD PTR [r12+0x8098],r15d
    b84b:	mov    rsi,QWORD PTR [r12+0x8088]
    b853:	mov    eax,DWORD PTR [rsp+0x14]
    b857:	mov    edx,r14d
    b85a:	shl    edx,0x9
    b85d:	shl    eax,0x9
    b860:	movsxd rdx,edx
    b863:	add    rdx,QWORD PTR [rsp]
    b867:	add    rsi,rax
    b86a:	jmp    b71a <vvfat_read+0x13a>
    b86f:	nop
    b870:	mov    r10d,DWORD PTR [r12+0x804c]
    b878:	xor    esi,esi
    b87a:	mov    ecx,r10d
    b87d:	jmp    b89a <vvfat_read+0x2ba>
    b87f:	nop
    b880:	cmp    ecx,edx
    b882:	jne    b88c <vvfat_read+0x2ac>
    b884:	test   ecx,ecx
    b886:	jne    bb9c <vvfat_read+0x5bc>
    b88c:	cmp    ecx,edx
    b88e:	je     b8ef <vvfat_read+0x30f>
    b890:	mov    ecx,edx
    b892:	cmp    esi,ecx
    b894:	jg     bb7d <vvfat_read+0x59d>
    b89a:	lea    eax,[rcx+rsi*1]
    b89d:	mov    edx,eax
    b89f:	shr    edx,0x1f
    b8a2:	add    edx,eax
    b8a4:	sar    edx,1
    b8a6:	cmp    r10d,edx
    b8a9:	jbe    bb3f <vvfat_read+0x55f>
    b8af:	mov    r8d,DWORD PTR [r12+0x8050]
    b8b7:	mov    ebx,edx
    b8b9:	mov    rax,QWORD PTR [r12+0x8040]
    b8c1:	imul   ebx,r8d
    b8c5:	add    rbx,rax
    b8c8:	mov    edi,DWORD PTR [rbx]
    b8ca:	mov    r9d,DWORD PTR [rbx+0x4]
    b8ce:	cmp    edi,r9d
    b8d1:	jae    bb5e <vvfat_read+0x57e>
    b8d7:	cmp    r15d,edi
    b8da:	jbe    b880 <vvfat_read+0x2a0>
    b8dc:	cmp    esi,edx
    b8de:	je     b8e4 <vvfat_read+0x304>
    b8e0:	mov    esi,edx
    b8e2:	jmp    b892 <vvfat_read+0x2b2>
    b8e4:	cmp    r15d,r9d
    b8e7:	jb     baa2 <vvfat_read+0x4c2>
    b8ed:	mov    esi,ecx
    b8ef:	cmp    r10d,esi
    b8f2:	jbe    baab <vvfat_read+0x4cb>
    b8f8:	imul   esi,r8d
    b8fc:	lea    rbx,[rax+rsi*1]
    b900:	cmp    r15d,DWORD PTR [rbx]
    b903:	jb     baab <vvfat_read+0x4cb>
    b909:	cmp    r15d,DWORD PTR [rbx+0x4]
    b90d:	jae    bc4d <vvfat_read+0x66d>
    b913:	test   BYTE PTR [rbx+0x20],0x4
    b917:	je     b9cd <vvfat_read+0x3ed>
    b91d:	test   r11,r11
    b920:	je     b93e <vvfat_read+0x35e>
    b922:	mov    edi,DWORD PTR [r12+0x807c]
    b92a:	mov    QWORD PTR [r12+0x8080],0x0
    b936:	test   edi,edi
    b938:	jne    baf9 <vvfat_read+0x519>
    b93e:	mov    DWORD PTR [r12+0x8098],0xffffffff
    b94a:	mov    QWORD PTR [r12+0x8080],rbx
    b952:	mov    esi,DWORD PTR [rbx]
    b954:	mov    eax,DWORD PTR [rbx+0x14]
    b957:	mov    edi,DWORD PTR [r12+0x8058]
    b95f:	mov    rcx,QWORD PTR [r12+0x8028]
    b967:	shl    eax,0x5
    b96a:	movsxd rdx,eax
    b96d:	mov    eax,r15d
    b970:	sub    eax,esi
    b972:	imul   eax,edi
    b975:	add    rax,rdx
    b978:	cqo    
    b97a:	lea    rsi,[rcx+rax*1]
    b97e:	idiv   rdi
    b981:	mov    QWORD PTR [r12+0x8088],rsi
    b989:	test   rdx,rdx
    b98c:	jne    bc2e <vvfat_read+0x64e>
    b992:	mov    eax,DWORD PTR [r12+0x8034]
    b99a:	add    rdi,rsi
    b99d:	imul   eax,DWORD PTR [r12+0x8038]
    b9a6:	add    rcx,rax
    b9a9:	cmp    rdi,rcx
    b9ac:	ja     bbcc <vvfat_read+0x5ec>
    b9b2:	mov    DWORD PTR [r12+0x8098],r15d
    b9ba:	jmp    b853 <vvfat_read+0x273>
    b9bf:	nop
    b9c0:	mov    rsi,QWORD PTR [r12+0x8088]
    b9c8:	jmp    b853 <vvfat_read+0x273>
    b9cd:	mov    rdx,QWORD PTR [rbx+0x18]
    b9d1:	test   r11,r11
    b9d4:	je     ba4c <vvfat_read+0x46c>
    b9d6:	mov    rdi,QWORD PTR [r11+0x18]
    b9da:	mov    rsi,rdx
    b9dd:	mov    QWORD PTR [rsp+0x18],rdx
    b9e2:	call   3330 <strcmp@plt>
    b9e7:	mov    rdx,QWORD PTR [rsp+0x18]
    b9ec:	test   eax,eax
    b9ee:	jne    ba4c <vvfat_read+0x46c>
    b9f0:	mov    ecx,DWORD PTR [r12+0x807c]
    b9f8:	jmp    b7e0 <vvfat_read+0x200>
    b9fd:	nop    DWORD PTR [rax]
    ba00:	mov    rdx,r13
    ba03:	mov    eax,r14d
    ba06:	shl    rdx,0x9
    ba0a:	shl    eax,0x9
    ba0d:	lea    rsi,[r12+rdx*1+0xc]
    ba12:	cdqe   
    ba14:	add    rax,QWORD PTR [rsp]
    ba18:	mov    rdx,QWORD PTR [rsi]
    ba1b:	lea    rdi,[rax+0x8]
    ba1f:	and    rdi,0xfffffffffffffff8
    ba23:	mov    QWORD PTR [rax],rdx
    ba26:	mov    rdx,QWORD PTR [rsi+0x1f8]
    ba2d:	mov    QWORD PTR [rax+0x1f8],rdx
    ba34:	sub    rax,rdi
    ba37:	sub    rsi,rax
    ba3a:	add    eax,0x200
    ba3f:	shr    eax,0x3
    ba42:	mov    ecx,eax
    ba44:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    ba47:	jmp    b672 <vvfat_read+0x92>
    ba4c:	xor    esi,esi
    ba4e:	mov    rdi,rdx
    ba51:	xor    eax,eax
    ba53:	call   3500 <open64@plt>
    ba58:	mov    ecx,eax
    ba5a:	test   eax,eax
    ba5c:	js     baab <vvfat_read+0x4cb>
    ba5e:	cmp    QWORD PTR [r12+0x8080],0x0
    ba67:	je     ba81 <vvfat_read+0x4a1>
    ba69:	mov    edi,DWORD PTR [r12+0x807c]
    ba71:	mov    QWORD PTR [r12+0x8080],0x0
    ba7d:	test   edi,edi
    ba7f:	jne    baea <vvfat_read+0x50a>
    ba81:	mov    DWORD PTR [r12+0x8098],0xffffffff
    ba8d:	mov    DWORD PTR [r12+0x807c],ecx
    ba95:	mov    QWORD PTR [r12+0x8080],rbx
    ba9d:	jmp    b7e0 <vvfat_read+0x200>
    baa2:	cmp    r15d,edi
    baa5:	jae    b913 <vvfat_read+0x333>
    baab:	mov    eax,r14d
    baae:	shl    eax,0x9
    bab1:	cdqe   
    bab3:	add    rax,QWORD PTR [rsp]
    bab7:	lea    rdi,[rax+0x8]
    babb:	mov    QWORD PTR [rax],0x0
    bac2:	mov    QWORD PTR [rax+0x1f8],0x0
    bacd:	and    rdi,0xfffffffffffffff8
    bad1:	sub    rax,rdi
    bad4:	mov    rcx,rax
    bad7:	xor    eax,eax
    bad9:	add    ecx,0x200
    badf:	shr    ecx,0x3
    bae2:	rep stos QWORD PTR es:[rdi],rax
    bae5:	jmp    b672 <vvfat_read+0x92>
    baea:	mov    DWORD PTR [rsp+0x18],eax
    baee:	call   3260 <close@plt>
    baf3:	mov    ecx,DWORD PTR [rsp+0x18]
    baf7:	jmp    ba81 <vvfat_read+0x4a1>
    baf9:	call   3260 <close@plt>
    bafe:	mov    DWORD PTR [r12+0x807c],0x0
    bb0a:	jmp    b93e <vvfat_read+0x35e>
    bb0f:	mov    rbx,r11
    bb12:	jmp    b954 <vvfat_read+0x374>
    bb17:	mov    eax,0xffffffff
    bb1c:	mov    rsi,QWORD PTR [rsp+0x28]
    bb21:	xor    rsi,QWORD PTR fs:0x28
    bb2a:	jne    bbeb <vvfat_read+0x60b>
    bb30:	add    rsp,0x38
    bb34:	pop    rbx
    bb35:	pop    rbp
    bb36:	pop    r12
    bb38:	pop    r13
    bb3a:	pop    r14
    bb3c:	pop    r15
    bb3e:	ret    
    bb3f:	lea    rcx,[rip+0x1430a]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    bb46:	mov    edx,0x60
    bb4b:	lea    rsi,[rip+0x13974]        # 1f4c6 <desc_template.13939+0x206>
    bb52:	lea    rdi,[rip+0x139a2]        # 1f4fb <desc_template.13939+0x23b>
    bb59:	call   3220 <__assert_fail@plt>
    bb5e:	lea    rcx,[rip+0x142fb]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    bb65:	mov    edx,0x45a
    bb6a:	lea    rsi,[rip+0x13955]        # 1f4c6 <desc_template.13939+0x206>
    bb71:	lea    rdi,[rip+0x13997]        # 1f50f <desc_template.13939+0x24f>
    bb78:	call   3220 <__assert_fail@plt>
    bb7d:	lea    rcx,[rip+0x142dc]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    bb84:	mov    edx,0x465
    bb89:	lea    rsi,[rip+0x13936]        # 1f4c6 <desc_template.13939+0x206>
    bb90:	lea    rdi,[rip+0x139b2]        # 1f549 <desc_template.13939+0x289>
    bb97:	call   3220 <__assert_fail@plt>
    bb9c:	lea    rcx,[rip+0x142bd]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    bba3:	mov    edx,0x45c
    bba8:	lea    rsi,[rip+0x13917]        # 1f4c6 <desc_template.13939+0x206>
    bbaf:	lea    rdi,[rip+0x13977]        # 1f52d <desc_template.13939+0x26d>
    bbb6:	call   3220 <__assert_fail@plt>
    bbbb:	mov    DWORD PTR [r12+0x8098],0xffffffff
    bbc7:	jmp    baab <vvfat_read+0x4cb>
    bbcc:	lea    rcx,[rip+0x14155]        # 1fd28 <__PRETTY_FUNCTION__.14277>
    bbd3:	mov    edx,0x4b4
    bbd8:	lea    rsi,[rip+0x138e7]        # 1f4c6 <desc_template.13939+0x206>
    bbdf:	lea    rdi,[rip+0x13cba]        # 1f8a0 <desc_template.13939+0x5e0>
    bbe6:	call   3220 <__assert_fail@plt>
    bbeb:	call   3190 <__stack_chk_fail@plt>
    bbf0:	lea    rcx,[rip+0x14131]        # 1fd28 <__PRETTY_FUNCTION__.14277>
    bbf7:	mov    edx,0x4be
    bbfc:	lea    rsi,[rip+0x138c3]        # 1f4c6 <desc_template.13939+0x206>
    bc03:	lea    rdi,[rip+0x13958]        # 1f562 <desc_template.13939+0x2a2>
    bc0a:	call   3220 <__assert_fail@plt>
    bc0f:	lea    rcx,[rip+0x14112]        # 1fd28 <__PRETTY_FUNCTION__.14277>
    bc16:	mov    edx,0x4a3
    bc1b:	lea    rsi,[rip+0x138a4]        # 1f4c6 <desc_template.13939+0x206>
    bc22:	lea    rdi,[rip+0x13b9f]        # 1f7c8 <desc_template.13939+0x508>
    bc29:	call   3220 <__assert_fail@plt>
    bc2e:	lea    rcx,[rip+0x140f3]        # 1fd28 <__PRETTY_FUNCTION__.14277>
    bc35:	mov    edx,0x4b3
    bc3a:	lea    rsi,[rip+0x13885]        # 1f4c6 <desc_template.13939+0x206>
    bc41:	lea    rdi,[rip+0x13c10]        # 1f858 <desc_template.13939+0x598>
    bc48:	call   3220 <__assert_fail@plt>
    bc4d:	lea    rcx,[rip+0x1422c]        # 1fe80 <__PRETTY_FUNCTION__.14257>
    bc54:	mov    edx,0x477
    bc59:	lea    rsi,[rip+0x13866]        # 1f4c6 <desc_template.13939+0x206>
    bc60:	lea    rdi,[rip+0x13bb9]        # 1f820 <desc_template.13939+0x560>
    bc67:	call   3220 <__assert_fail@plt>
    bc6c:	nop    DWORD PTR [rax+0x0]

000000000000bc70 <write_target_close>:
    bc70:	push   rbx
    bc71:	mov    rbx,QWORD PTR [rdi+0x40]
    bc75:	mov    rdi,QWORD PTR [rbx+0x80b0]
    bc7c:	call   17470 <bdrv_delete>
    bc81:	mov    rdi,QWORD PTR [rbx+0x80a8]
    bc88:	pop    rbx
    bc89:	jmp    3070 <free@plt>
    bc8e:	xchg   ax,ax

000000000000bc90 <schedule_rename>:
    bc90:	push   r15
    bc92:	mov    r15,rdx
    bc95:	push   r14
    bc97:	mov    r14d,esi
    bc9a:	push   r13
    bc9c:	push   r12
    bc9e:	push   rbp
    bc9f:	mov    rbp,rdi
    bca2:	push   rbx
    bca3:	sub    rsp,0x8
    bca7:	mov    ebx,DWORD PTR [rdi+0x80d4]
    bcad:	mov    eax,DWORD PTR [rdi+0x80d8]
    bcb3:	lea    r12d,[rbx+0x1]
    bcb7:	mov    ecx,r12d
    bcba:	imul   ecx,eax
    bcbd:	cmp    ecx,DWORD PTR [rdi+0x80d0]
    bcc3:	ja     bd00 <schedule_rename+0x70>
    bcc5:	mov    DWORD PTR [rbp+0x80d4],r12d
    bccc:	cmp    ebx,r12d
    bccf:	jae    bd35 <schedule_rename+0xa5>
    bcd1:	imul   ebx,DWORD PTR [rbp+0x80d8]
    bcd8:	add    rbx,QWORD PTR [rbp+0x80c8]
    bcdf:	mov    QWORD PTR [rbx],r15
    bce2:	mov    DWORD PTR [rbx+0x8],r14d
    bce6:	mov    DWORD PTR [rbx+0x10],0x0
    bced:	add    rsp,0x8
    bcf1:	pop    rbx
    bcf2:	pop    rbp
    bcf3:	pop    r12
    bcf5:	pop    r13
    bcf7:	pop    r14
    bcf9:	pop    r15
    bcfb:	ret    
    bcfc:	nop    DWORD PTR [rax+0x0]
    bd00:	mov    r13d,eax
    bd03:	mov    rdi,QWORD PTR [rdi+0x80c8]
    bd0a:	shl    r13d,0x5
    bd0e:	sub    r13d,eax
    bd11:	add    r13d,ecx
    bd14:	movsxd rsi,r13d
    bd17:	call   4cd0 <qemu_realloc>
    bd1c:	mov    QWORD PTR [rbp+0x80c8],rax
    bd23:	test   rax,rax
    bd26:	je     3737 <schedule_rename.cold.10>
    bd2c:	mov    DWORD PTR [rbp+0x80d0],r13d
    bd33:	jmp    bcc5 <schedule_rename+0x35>
    bd35:	lea    rcx,[rip+0x14114]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    bd3c:	mov    edx,0x60
    bd41:	lea    rsi,[rip+0x1377e]        # 1f4c6 <desc_template.13939+0x206>
    bd48:	lea    rdi,[rip+0x137ac]        # 1f4fb <desc_template.13939+0x23b>
    bd4f:	call   3220 <__assert_fail@plt>
    bd54:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    bd5f:	nop

000000000000bd60 <array_index>:
    bd60:	sub    rsp,0x8
    bd64:	mov    ecx,DWORD PTR [rdi+0x10]
    bd67:	mov    rax,rsi
    bd6a:	xor    edx,edx
    bd6c:	sub    rax,QWORD PTR [rdi]
    bd6f:	div    rcx
    bd72:	test   rdx,rdx
    bd75:	jne    bd84 <array_index+0x24>
    bd77:	mov    edx,DWORD PTR [rdi+0xc]
    bd7a:	cmp    rax,rdx
    bd7d:	jae    bda3 <array_index+0x43>
    bd7f:	add    rsp,0x8
    bd83:	ret    
    bd84:	lea    rcx,[rip+0x14055]        # 1fde0 <__PRETTY_FUNCTION__.13872>
    bd8b:	mov    edx,0xc5
    bd90:	lea    rsi,[rip+0x1372f]        # 1f4c6 <desc_template.13939+0x206>
    bd97:	lea    rdi,[rip+0x13b6a]        # 1f908 <desc_template.13939+0x648>
    bd9e:	call   3220 <__assert_fail@plt>
    bda3:	lea    rcx,[rip+0x14036]        # 1fde0 <__PRETTY_FUNCTION__.13872>
    bdaa:	mov    edx,0xc6
    bdaf:	lea    rsi,[rip+0x13710]        # 1f4c6 <desc_template.13939+0x206>
    bdb6:	lea    rdi,[rip+0x13b73]        # 1f930 <desc_template.13939+0x670>
    bdbd:	call   3220 <__assert_fail@plt>
    bdc2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    bdcd:	nop    DWORD PTR [rax]

000000000000bdd0 <commit_mappings>:
    bdd0:	push   r15
    bdd2:	xor    r8d,r8d
    bdd5:	mov    r15d,esi
    bdd8:	push   r14
    bdda:	push   r13
    bddc:	push   r12
    bdde:	push   rbp
    bddf:	mov    rbp,rdi
    bde2:	push   rbx
    bde3:	mov    ebx,edx
    bde5:	sub    rsp,0x18
    bde9:	mov    r10d,DWORD PTR [rdi+0x804c]
    bdf0:	mov    edi,r10d
    bdf3:	jmp    be13 <commit_mappings+0x43>
    bdf5:	nop    DWORD PTR [rax]
    bdf8:	cmp    eax,edi
    bdfa:	jne    be04 <commit_mappings+0x34>
    bdfc:	test   edi,edi
    bdfe:	jne    c137 <commit_mappings+0x367>
    be04:	cmp    eax,edi
    be06:	je     be63 <commit_mappings+0x93>
    be08:	mov    edi,eax
    be0a:	cmp    r8d,edi
    be0d:	jg     c0f9 <commit_mappings+0x329>
    be13:	lea    ecx,[r8+rdi*1]
    be17:	mov    eax,ecx
    be19:	shr    eax,0x1f
    be1c:	add    eax,ecx
    be1e:	sar    eax,1
    be20:	cmp    r10d,eax
    be23:	jbe    bfd3 <commit_mappings+0x203>
    be29:	mov    edx,DWORD PTR [rbp+0x8050]
    be2f:	mov    ecx,eax
    be31:	mov    r14,QWORD PTR [rbp+0x8040]
    be38:	imul   ecx,edx
    be3b:	add    rcx,r14
    be3e:	mov    r9d,DWORD PTR [rcx]
    be41:	mov    ecx,DWORD PTR [rcx+0x4]
    be44:	cmp    r9d,ecx
    be47:	jae    c118 <commit_mappings+0x348>
    be4d:	cmp    r15d,r9d
    be50:	jbe    bdf8 <commit_mappings+0x28>
    be52:	cmp    eax,r8d
    be55:	je     be5c <commit_mappings+0x8c>
    be57:	mov    r8d,eax
    be5a:	jmp    be0a <commit_mappings+0x3a>
    be5c:	cmp    r15d,ecx
    be5f:	cmovae r8d,edi
    be63:	cmp    r10d,r8d
    be66:	jbe    c0f1 <commit_mappings+0x321>
    be6c:	imul   edx,r8d
    be70:	add    r14,rdx
    be73:	cmp    r15d,DWORD PTR [r14]
    be76:	jb     c0f1 <commit_mappings+0x321>
    be7c:	cmp    r15d,DWORD PTR [r14+0x4]
    be80:	jae    c3aa <commit_mappings+0x5da>
    be86:	cmp    ebx,DWORD PTR [rbp+0x8034]
    be8c:	jae    bfd3 <commit_mappings+0x203>
    be92:	cmp    QWORD PTR [rbp+0x8080],0x0
    be9a:	mov    r12,QWORD PTR [rbp+0x8028]
    bea1:	mov    r13d,DWORD PTR [rbp+0x8038]
    bea8:	je     bec3 <commit_mappings+0xf3>
    beaa:	mov    edi,DWORD PTR [rbp+0x807c]
    beb0:	mov    QWORD PTR [rbp+0x8080],0x0
    bebb:	test   edi,edi
    bebd:	jne    c0dd <commit_mappings+0x30d>
    bec3:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    becd:	test   r14,r14
    bed0:	je     c38b <commit_mappings+0x5bb>
    bed6:	cmp    DWORD PTR [r14],r15d
    bed9:	jne    c167 <commit_mappings+0x397>
    bedf:	mov    DWORD PTR [r14+0xc],0xffffffff
    bee7:	mov    eax,0x4
    beec:	mov    DWORD PTR [r14+0x8],ebx
    bef0:	test   ebx,ebx
    bef2:	jle    bf0b <commit_mappings+0x13b>
    bef4:	imul   ebx,r13d
    bef8:	add    rbx,r12
    befb:	test   BYTE PTR [rbx+0xb],0x10
    beff:	je     bf06 <commit_mappings+0x136>
    bf01:	cmp    BYTE PTR [rbx],0xe5
    bf04:	jne    bf0b <commit_mappings+0x13b>
    bf06:	mov    eax,0x1
    bf0b:	lea    rbx,[rbp+0x8040]
    bf12:	mov    DWORD PTR [r14+0x20],eax
    bf16:	mov    edi,DWORD PTR [rbp+0x8078]
    bf1c:	mov    QWORD PTR [rsp+0x8],rbx
    bf21:	lea    eax,[rdi-0x8]
    bf24:	nop    DWORD PTR [rax+0x0]
    bf28:	cmp    r15d,eax
    bf2b:	ja     c156 <commit_mappings+0x386>
    bf31:	mov    edx,DWORD PTR [rbp+0x8068]
    bf37:	cmp    r15d,edx
    bf3a:	jae    c008 <commit_mappings+0x238>
    bf40:	lea    r13d,[r15+0x1]
    bf44:	mov    r12d,edi
    bf47:	cmp    edx,r13d
    bf4a:	cmovne r12d,r13d
    bf4e:	jmp    bf63 <commit_mappings+0x193>
    bf50:	lea    eax,[r15+0x2]
    bf54:	cmp    edx,eax
    bf56:	cmove  eax,edi
    bf59:	mov    r15d,r12d
    bf5c:	mov    r12d,eax
    bf5f:	lea    r13d,[r15+0x1]
    bf63:	cmp    r13d,r12d
    bf66:	jne    bfb8 <commit_mappings+0x1e8>
    bf68:	cmp    r12d,edx
    bf6b:	jb     bf50 <commit_mappings+0x180>
    bf6d:	mov    eax,DWORD PTR [rbp+0x800c]
    bf73:	mov    rcx,QWORD PTR [rbp+0x80b8]
    bf7a:	cmp    eax,0x20
    bf7d:	je     bff8 <commit_mappings+0x228>
    bf7f:	cmp    eax,0x10
    bf82:	je     bfa8 <commit_mappings+0x1d8>
    bf84:	lea    eax,[r12+r12*2]
    bf88:	shr    eax,1
    bf8a:	movzx  eax,WORD PTR [rcx+rax*1]
    bf8e:	lea    ecx,[r12*4+0x0]
    bf96:	and    ecx,0x4
    bf99:	sar    eax,cl
    bf9b:	and    eax,0xfff
    bfa0:	jmp    bf59 <commit_mappings+0x189>
    bfa2:	nop    WORD PTR [rax+rax*1+0x0]
    bfa8:	mov    eax,r12d
    bfab:	movzx  eax,WORD PTR [rcx+rax*2]
    bfaf:	jmp    bf59 <commit_mappings+0x189>
    bfb1:	nop    DWORD PTR [rax+0x0]
    bfb8:	mov    r15d,DWORD PTR [rbp+0x804c]
    bfbf:	cmp    r13d,DWORD PTR [r14+0x4]
    bfc3:	ja     c050 <commit_mappings+0x280>
    bfc9:	add    r15d,0xffffffff
    bfcd:	jb     c190 <commit_mappings+0x3c0>
    bfd3:	lea    rcx,[rip+0x13e76]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    bfda:	mov    edx,0x60
    bfdf:	lea    rsi,[rip+0x134e0]        # 1f4c6 <desc_template.13939+0x206>
    bfe6:	lea    rdi,[rip+0x1350e]        # 1f4fb <desc_template.13939+0x23b>
    bfed:	call   3220 <__assert_fail@plt>
    bff2:	nop    WORD PTR [rax+rax*1+0x0]
    bff8:	mov    eax,r12d
    bffb:	mov    eax,DWORD PTR [rcx+rax*4]
    bffe:	jmp    bf59 <commit_mappings+0x189>
    c003:	nop    DWORD PTR [rax+rax*1+0x0]
    c008:	mov    eax,DWORD PTR [rbp+0x800c]
    c00e:	mov    rcx,QWORD PTR [rbp+0x80b8]
    c015:	cmp    eax,0x20
    c018:	je     c0cd <commit_mappings+0x2fd>
    c01e:	cmp    eax,0x10
    c021:	je     c0bc <commit_mappings+0x2ec>
    c027:	lea    eax,[r15+r15*2]
    c02b:	lea    r13d,[r15+0x1]
    c02f:	shr    eax,1
    c031:	movzx  r12d,WORD PTR [rcx+rax*1]
    c036:	lea    ecx,[r15*4+0x0]
    c03e:	and    ecx,0x4
    c041:	sar    r12d,cl
    c044:	and    r12d,0xfff
    c04b:	jmp    bf63 <commit_mappings+0x193>
    c050:	mov    rdi,QWORD PTR [rsp+0x8]
    c055:	mov    rsi,r14
    c058:	call   bd60 <array_index>
    c05d:	mov    edi,r15d
    c060:	sub    edi,eax
    c062:	cmp    edi,0x1
    c065:	jle    bfc9 <commit_mappings+0x1f9>
    c06b:	cmp    r13d,DWORD PTR [r14+0x28]
    c06f:	jbe    bfc9 <commit_mappings+0x1f9>
    c075:	lea    rcx,[r14+0x50]
    c079:	mov    ebx,0x1
    c07e:	jmp    c08c <commit_mappings+0x2bc>
    c080:	add    rcx,0x28
    c084:	cmp    r13d,DWORD PTR [rcx-0x28]
    c088:	jbe    c093 <commit_mappings+0x2c3>
    c08a:	mov    ebx,esi
    c08c:	lea    esi,[rbx+0x1]
    c08f:	cmp    edi,esi
    c091:	jne    c080 <commit_mappings+0x2b0>
    c093:	lea    r15d,[rax+0x1]
    c097:	nop    WORD PTR [rax+rax*1+0x0]
    c0a0:	mov    esi,r15d
    c0a3:	mov    rdi,rbp
    c0a6:	call   af50 <remove_mapping>
    c0ab:	sub    ebx,0x1
    c0ae:	jne    c0a0 <commit_mappings+0x2d0>
    c0b0:	mov    r15d,DWORD PTR [rbp+0x804c]
    c0b7:	jmp    bfc9 <commit_mappings+0x1f9>
    c0bc:	mov    eax,r15d
    c0bf:	lea    r13d,[r15+0x1]
    c0c3:	movzx  r12d,WORD PTR [rcx+rax*2]
    c0c8:	jmp    bf63 <commit_mappings+0x193>
    c0cd:	mov    eax,r15d
    c0d0:	lea    r13d,[r15+0x1]
    c0d4:	mov    r12d,DWORD PTR [rcx+rax*4]
    c0d8:	jmp    bf63 <commit_mappings+0x193>
    c0dd:	call   3260 <close@plt>
    c0e2:	mov    DWORD PTR [rbp+0x807c],0x0
    c0ec:	jmp    bec3 <commit_mappings+0xf3>
    c0f1:	xor    r14d,r14d
    c0f4:	jmp    be86 <commit_mappings+0xb6>
    c0f9:	lea    rcx,[rip+0x13d60]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    c100:	mov    edx,0x465
    c105:	lea    rsi,[rip+0x133ba]        # 1f4c6 <desc_template.13939+0x206>
    c10c:	lea    rdi,[rip+0x13436]        # 1f549 <desc_template.13939+0x289>
    c113:	call   3220 <__assert_fail@plt>
    c118:	lea    rcx,[rip+0x13d41]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    c11f:	mov    edx,0x45a
    c124:	lea    rsi,[rip+0x1339b]        # 1f4c6 <desc_template.13939+0x206>
    c12b:	lea    rdi,[rip+0x133dd]        # 1f50f <desc_template.13939+0x24f>
    c132:	call   3220 <__assert_fail@plt>
    c137:	lea    rcx,[rip+0x13d22]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    c13e:	mov    edx,0x45c
    c143:	lea    rsi,[rip+0x1337c]        # 1f4c6 <desc_template.13939+0x206>
    c14a:	lea    rdi,[rip+0x133dc]        # 1f52d <desc_template.13939+0x26d>
    c151:	call   3220 <__assert_fail@plt>
    c156:	add    rsp,0x18
    c15a:	xor    eax,eax
    c15c:	pop    rbx
    c15d:	pop    rbp
    c15e:	pop    r12
    c160:	pop    r13
    c162:	pop    r14
    c164:	pop    r15
    c166:	ret    
    c167:	lea    rcx,[rip+0x13bf2]        # 1fd60 <__PRETTY_FUNCTION__.14545>
    c16e:	mov    edx,0x812
    c173:	lea    rsi,[rip+0x1334c]        # 1f4c6 <desc_template.13939+0x206>
    c17a:	lea    rdi,[rip+0x137d7]        # 1f958 <desc_template.13939+0x698>
    c181:	call   3220 <__assert_fail@plt>
    c186:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c190:	imul   r15d,DWORD PTR [rbp+0x8050]
    c198:	mov    rax,QWORD PTR [rbp+0x8040]
    c19f:	add    rax,r15
    c1a2:	cmp    r14,rax
    c1a5:	je     c1b1 <commit_mappings+0x3e1>
    c1a7:	cmp    r13d,DWORD PTR [r14+0x28]
    c1ab:	ja     c36c <commit_mappings+0x59c>
    c1b1:	mov    DWORD PTR [r14+0x4],r13d
    c1b5:	mov    edi,DWORD PTR [rbp+0x8078]
    c1bb:	lea    eax,[rdi-0x8]
    c1be:	cmp    r12d,eax
    c1c1:	ja     c2d1 <commit_mappings+0x501>
    c1c7:	mov    r8d,DWORD PTR [rbp+0x804c]
    c1ce:	xor    esi,esi
    c1d0:	mov    ecx,r8d
    c1d3:	jmp    c1f2 <commit_mappings+0x422>
    c1d5:	nop    DWORD PTR [rax]
    c1d8:	cmp    ecx,eax
    c1da:	jne    c1e4 <commit_mappings+0x414>
    c1dc:	test   ecx,ecx
    c1de:	jne    c137 <commit_mappings+0x367>
    c1e4:	cmp    ecx,eax
    c1e6:	je     c241 <commit_mappings+0x471>
    c1e8:	mov    ecx,eax
    c1ea:	cmp    esi,ecx
    c1ec:	jg     c0f9 <commit_mappings+0x329>
    c1f2:	lea    edx,[rsi+rcx*1]
    c1f5:	mov    eax,edx
    c1f7:	shr    eax,0x1f
    c1fa:	add    eax,edx
    c1fc:	sar    eax,1
    c1fe:	cmp    r8d,eax
    c201:	jbe    bfd3 <commit_mappings+0x203>
    c207:	mov    r11d,DWORD PTR [rbp+0x8050]
    c20e:	mov    edx,eax
    c210:	mov    r9,QWORD PTR [rbp+0x8040]
    c217:	imul   edx,r11d
    c21b:	add    rdx,r9
    c21e:	mov    edi,DWORD PTR [rdx]
    c220:	mov    r10d,DWORD PTR [rdx+0x4]
    c224:	cmp    edi,r10d
    c227:	jae    c118 <commit_mappings+0x348>
    c22d:	cmp    r12d,edi
    c230:	jbe    c1d8 <commit_mappings+0x408>
    c232:	cmp    esi,eax
    c234:	je     c23a <commit_mappings+0x46a>
    c236:	mov    esi,eax
    c238:	jmp    c1ea <commit_mappings+0x41a>
    c23a:	cmp    r12d,r10d
    c23d:	jb     c25a <commit_mappings+0x48a>
    c23f:	mov    esi,ecx
    c241:	cmp    r8d,esi
    c244:	jbe    c2e0 <commit_mappings+0x510>
    c24a:	imul   esi,r11d
    c24e:	mov    rdx,r9
    c251:	add    rdx,rsi
    c254:	je     c2e0 <commit_mappings+0x510>
    c25a:	cmp    DWORD PTR [rdx],r12d
    c25d:	ja     c2e0 <commit_mappings+0x510>
    c263:	mov    r15,r14
    c266:	mov    r14,rdx
    c269:	mov    eax,DWORD PTR [r15+0x8]
    c26d:	mov    DWORD PTR [r14+0x8],eax
    c271:	mov    eax,DWORD PTR [r15+0xc]
    c275:	test   eax,eax
    c277:	js     c33a <commit_mappings+0x56a>
    c27d:	nop    DWORD PTR [rax]
    c280:	mov    DWORD PTR [r14+0xc],eax
    c284:	mov    rax,QWORD PTR [r15+0x18]
    c288:	mov    QWORD PTR [r14+0x18],rax
    c28c:	mov    eax,DWORD PTR [r15+0x20]
    c290:	mov    DWORD PTR [r14+0x20],eax
    c294:	mov    eax,DWORD PTR [r15+0x24]
    c298:	mov    DWORD PTR [r14+0x24],eax
    c29c:	test   BYTE PTR [r15+0x20],0x4
    c2a1:	je     c34c <commit_mappings+0x57c>
    c2a7:	mov    eax,DWORD PTR [r15+0x10]
    c2ab:	mov    DWORD PTR [r14+0x10],eax
    c2af:	mov    eax,DWORD PTR [r15+0x4]
    c2b3:	sub    eax,DWORD PTR [r15]
    c2b6:	imul   eax,DWORD PTR [rbp+0x805c]
    c2bd:	shl    eax,0x4
    c2c0:	add    eax,DWORD PTR [r15+0x14]
    c2c4:	mov    DWORD PTR [r14+0x14],eax
    c2c8:	mov    edi,DWORD PTR [rbp+0x8078]
    c2ce:	lea    eax,[rdi-0x8]
    c2d1:	mov    r15d,r12d
    c2d4:	jmp    bf28 <commit_mappings+0x158>
    c2d9:	nop    DWORD PTR [rax+0x0]
    c2e0:	mov    rdi,QWORD PTR [rsp+0x8]
    c2e5:	mov    rsi,r14
    c2e8:	call   bd60 <array_index>
    c2ed:	lea    edx,[r12+0x1]
    c2f2:	mov    esi,r12d
    c2f5:	mov    rdi,rbp
    c2f8:	mov    r15d,eax
    c2fb:	call   b060 <insert_mapping>
    c300:	cmp    r12d,r13d
    c303:	mov    r14,rax
    c306:	adc    r15d,0x0
    c30a:	cmp    r15d,DWORD PTR [rbp+0x804c]
    c311:	jae    bfd3 <commit_mappings+0x203>
    c317:	imul   r15d,DWORD PTR [rbp+0x8050]
    c31f:	add    r15,QWORD PTR [rbp+0x8040]
    c326:	mov    eax,DWORD PTR [r15+0x8]
    c32a:	mov    DWORD PTR [r14+0x8],eax
    c32e:	mov    eax,DWORD PTR [r15+0xc]
    c332:	test   eax,eax
    c334:	jns    c280 <commit_mappings+0x4b0>
    c33a:	mov    rdi,QWORD PTR [rsp+0x8]
    c33f:	mov    rsi,r15
    c342:	call   bd60 <array_index>
    c347:	jmp    c280 <commit_mappings+0x4b0>
    c34c:	mov    eax,DWORD PTR [r15+0x4]
    c350:	add    eax,DWORD PTR [r15+0x10]
    c354:	sub    eax,DWORD PTR [r15]
    c357:	mov    r15d,r12d
    c35a:	mov    DWORD PTR [r14+0x10],eax
    c35e:	mov    edi,DWORD PTR [rbp+0x8078]
    c364:	lea    eax,[rdi-0x8]
    c367:	jmp    bf28 <commit_mappings+0x158>
    c36c:	lea    rcx,[rip+0x139ed]        # 1fd60 <__PRETTY_FUNCTION__.14545>
    c373:	mov    edx,0x827
    c378:	lea    rsi,[rip+0x13147]        # 1f4c6 <desc_template.13939+0x206>
    c37f:	lea    rdi,[rip+0x135f2]        # 1f978 <desc_template.13939+0x6b8>
    c386:	call   3220 <__assert_fail@plt>
    c38b:	lea    rcx,[rip+0x139ce]        # 1fd60 <__PRETTY_FUNCTION__.14545>
    c392:	mov    edx,0x811
    c397:	lea    rsi,[rip+0x13128]        # 1f4c6 <desc_template.13939+0x206>
    c39e:	lea    rdi,[rip+0x131cb]        # 1f570 <desc_template.13939+0x2b0>
    c3a5:	call   3220 <__assert_fail@plt>
    c3aa:	lea    rcx,[rip+0x13acf]        # 1fe80 <__PRETTY_FUNCTION__.14257>
    c3b1:	mov    edx,0x477
    c3b6:	lea    rsi,[rip+0x13109]        # 1f4c6 <desc_template.13939+0x206>
    c3bd:	lea    rdi,[rip+0x1345c]        # 1f820 <desc_template.13939+0x560>
    c3c4:	call   3220 <__assert_fail@plt>
    c3c9:	nop    DWORD PTR [rax+0x0]

000000000000c3d0 <commit_one_file>:
    c3d0:	push   r15
    c3d2:	push   r14
    c3d4:	push   r13
    c3d6:	push   r12
    c3d8:	push   rbp
    c3d9:	push   rbx
    c3da:	sub    rsp,0x28
    c3de:	mov    DWORD PTR [rsp+0x18],esi
    c3e2:	cmp    esi,DWORD PTR [rdi+0x8034]
    c3e8:	jae    c853 <commit_one_file+0x483>
    c3ee:	mov    r11d,DWORD PTR [rsp+0x18]
    c3f3:	mov    r13,rdi
    c3f6:	mov    r15d,edx
    c3f9:	xor    esi,esi
    c3fb:	imul   r11d,DWORD PTR [rdi+0x8038]
    c403:	add    r11,QWORD PTR [rdi+0x8028]
    c40a:	movzx  ebx,WORD PTR [r11+0x14]
    c40f:	movzx  eax,WORD PTR [r11+0x1a]
    c414:	mov    r10d,DWORD PTR [rdi+0x804c]
    c41b:	shl    ebx,0x10
    c41e:	or     ebx,eax
    c420:	mov    ecx,r10d
    c423:	jmp    c442 <commit_one_file+0x72>
    c425:	nop    DWORD PTR [rax]
    c428:	cmp    eax,ecx
    c42a:	jne    c434 <commit_one_file+0x64>
    c42c:	test   ecx,ecx
    c42e:	jne    c872 <commit_one_file+0x4a2>
    c434:	cmp    eax,ecx
    c436:	je     c48b <commit_one_file+0xbb>
    c438:	mov    ecx,eax
    c43a:	cmp    esi,ecx
    c43c:	jg     c815 <commit_one_file+0x445>
    c442:	lea    edx,[rsi+rcx*1]
    c445:	mov    eax,edx
    c447:	shr    eax,0x1f
    c44a:	add    eax,edx
    c44c:	sar    eax,1
    c44e:	cmp    eax,r10d
    c451:	jae    c853 <commit_one_file+0x483>
    c457:	mov    ebp,DWORD PTR [r13+0x8050]
    c45e:	mov    edx,eax
    c460:	mov    r12,QWORD PTR [r13+0x8040]
    c467:	imul   edx,ebp
    c46a:	add    rdx,r12
    c46d:	mov    edi,DWORD PTR [rdx]
    c46f:	mov    edx,DWORD PTR [rdx+0x4]
    c472:	cmp    edi,edx
    c474:	jae    c834 <commit_one_file+0x464>
    c47a:	cmp    edi,ebx
    c47c:	jae    c428 <commit_one_file+0x58>
    c47e:	cmp    eax,esi
    c480:	je     c486 <commit_one_file+0xb6>
    c482:	mov    esi,eax
    c484:	jmp    c43a <commit_one_file+0x6a>
    c486:	cmp    edx,ebx
    c488:	cmovbe esi,ecx
    c48b:	cmp    r10d,esi
    c48e:	jbe    c6e1 <commit_one_file+0x311>
    c494:	imul   esi,ebp
    c497:	lea    rbp,[r12+rsi*1]
    c49b:	cmp    DWORD PTR [rbp+0x0],ebx
    c49e:	ja     c6e1 <commit_one_file+0x311>
    c4a4:	cmp    DWORD PTR [rbp+0x4],ebx
    c4a7:	jbe    c891 <commit_one_file+0x4c1>
    c4ad:	mov    edi,DWORD PTR [r13+0x8058]
    c4b4:	mov    r12d,DWORD PTR [r11+0x1c]
    c4b8:	call   4cb0 <qemu_malloc>
    c4bd:	mov    QWORD PTR [rsp+0x8],rax
    c4c2:	cmp    r15d,r12d
    c4c5:	jae    c8cf <commit_one_file+0x4ff>
    c4cb:	mov    edi,DWORD PTR [r13+0x8058]
    c4d2:	mov    eax,r15d
    c4d5:	xor    edx,edx
    c4d7:	div    edi
    c4d9:	test   edx,edx
    c4db:	jne    c8b0 <commit_one_file+0x4e0>
    c4e1:	mov    r10d,ebx
    c4e4:	cmp    edi,r15d
    c4e7:	jae    c564 <commit_one_file+0x194>
    c4e9:	mov    edx,DWORD PTR [r13+0x8068]
    c4f0:	mov    eax,edi
    c4f2:	mov    r10d,ebx
    c4f5:	jmp    c517 <commit_one_file+0x147>
    c4f7:	nop    WORD PTR [rax+rax*1+0x0]
    c500:	add    r10d,0x1
    c504:	cmp    edx,r10d
    c507:	jne    c510 <commit_one_file+0x140>
    c509:	mov    r10d,DWORD PTR [r13+0x8078]
    c510:	add    eax,edi
    c512:	cmp    r15d,eax
    c515:	jbe    c564 <commit_one_file+0x194>
    c517:	cmp    edx,r10d
    c51a:	ja     c500 <commit_one_file+0x130>
    c51c:	mov    ecx,DWORD PTR [r13+0x800c]
    c523:	mov    rsi,QWORD PTR [r13+0x80b8]
    c52a:	cmp    ecx,0x20
    c52d:	je     c6d8 <commit_one_file+0x308>
    c533:	cmp    ecx,0x10
    c536:	je     c6a8 <commit_one_file+0x2d8>
    c53c:	lea    ecx,[r10+r10*2]
    c540:	add    eax,edi
    c542:	shr    ecx,1
    c544:	movzx  esi,WORD PTR [rsi+rcx*1]
    c548:	lea    ecx,[r10*4+0x0]
    c550:	and    ecx,0x4
    c553:	sar    esi,cl
    c555:	mov    r10d,esi
    c558:	and    r10d,0xfff
    c55f:	cmp    r15d,eax
    c562:	ja     c517 <commit_one_file+0x147>
    c564:	mov    rdi,QWORD PTR [rbp+0x18]
    c568:	xor    eax,eax
    c56a:	mov    edx,0x1b6
    c56f:	mov    esi,0x42
    c574:	mov    DWORD PTR [rsp+0x1c],r10d
    c579:	call   3500 <open64@plt>
    c57e:	mov    r10d,DWORD PTR [rsp+0x1c]
    c583:	test   eax,eax
    c585:	mov    DWORD PTR [rsp+0x14],eax
    c589:	js     c7b4 <commit_one_file+0x3e4>
    c58f:	test   r15d,r15d
    c592:	jne    c6e8 <commit_one_file+0x318>
    c598:	test   r12d,r12d
    c59b:	jne    c642 <commit_one_file+0x272>
    c5a1:	jmp    c730 <commit_one_file+0x360>
    c5a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c5b0:	lea    ebp,[r10+0x1]
    c5b4:	cmp    eax,ebp
    c5b6:	jne    c5c0 <commit_one_file+0x1f0>
    c5b8:	mov    ebp,DWORD PTR [r13+0x8078]
    c5bf:	nop
    c5c0:	cmp    r10d,0x1
    c5c4:	jbe    c7f6 <commit_one_file+0x426>
    c5ca:	mov    eax,DWORD PTR [r13+0x8078]
    c5d1:	sub    eax,0x8
    c5d4:	cmp    eax,r10d
    c5d7:	jb     c7f6 <commit_one_file+0x426>
    c5dd:	mov    eax,r14d
    c5e0:	lea    ecx,[r14+0x3fe]
    c5e7:	mov    rdx,QWORD PTR [rsp+0x8]
    c5ec:	mov    rdi,QWORD PTR [r13+0x0]
    c5f0:	add    eax,0x1ff
    c5f5:	cmovns ecx,eax
    c5f8:	imul   r10d,DWORD PTR [r13+0x805c]
    c600:	sar    ecx,0x9
    c603:	mov    esi,r10d
    c606:	add    esi,DWORD PTR [r13+0x806c]
    c60d:	call   b5e0 <vvfat_read>
    c612:	test   eax,eax
    c614:	js     c76e <commit_one_file+0x39e>
    c61a:	mov    rsi,QWORD PTR [rsp+0x8]
    c61f:	mov    edi,DWORD PTR [rsp+0x14]
    c623:	movsxd rdx,r14d
    c626:	call   46d0 <qemu_write_ok>
    c62b:	test   eax,eax
    c62d:	js     c79a <commit_one_file+0x3ca>
    c633:	add    r15d,r14d
    c636:	mov    r10d,ebp
    c639:	cmp    r12d,r15d
    c63c:	jbe    c730 <commit_one_file+0x360>
    c642:	mov    eax,DWORD PTR [r13+0x8058]
    c649:	mov    r11d,r12d
    c64c:	sub    r11d,r15d
    c64f:	cmp    r11d,eax
    c652:	cmovbe eax,r11d
    c656:	mov    r14d,eax
    c659:	mov    eax,DWORD PTR [r13+0x8068]
    c660:	cmp    eax,r10d
    c663:	ja     c5b0 <commit_one_file+0x1e0>
    c669:	mov    eax,DWORD PTR [r13+0x800c]
    c670:	mov    rdx,QWORD PTR [r13+0x80b8]
    c677:	cmp    eax,0x20
    c67a:	je     c6c8 <commit_one_file+0x2f8>
    c67c:	cmp    eax,0x10
    c67f:	je     c6b8 <commit_one_file+0x2e8>
    c681:	lea    eax,[r10+r10*2]
    c685:	lea    ecx,[r10*4+0x0]
    c68d:	shr    eax,1
    c68f:	and    ecx,0x4
    c692:	movzx  ebp,WORD PTR [rdx+rax*1]
    c696:	sar    ebp,cl
    c698:	and    ebp,0xfff
    c69e:	jmp    c5c0 <commit_one_file+0x1f0>
    c6a3:	nop    DWORD PTR [rax+rax*1+0x0]
    c6a8:	movzx  r10d,WORD PTR [rsi+r10*2]
    c6ad:	jmp    c510 <commit_one_file+0x140>
    c6b2:	nop    WORD PTR [rax+rax*1+0x0]
    c6b8:	mov    eax,r10d
    c6bb:	movzx  ebp,WORD PTR [rdx+rax*2]
    c6bf:	jmp    c5c0 <commit_one_file+0x1f0>
    c6c4:	nop    DWORD PTR [rax+0x0]
    c6c8:	mov    eax,r10d
    c6cb:	mov    ebp,DWORD PTR [rdx+rax*4]
    c6ce:	jmp    c5c0 <commit_one_file+0x1f0>
    c6d3:	nop    DWORD PTR [rax+rax*1+0x0]
    c6d8:	mov    r10d,DWORD PTR [rsi+r10*4]
    c6dc:	jmp    c510 <commit_one_file+0x140>
    c6e1:	xor    ebp,ebp
    c6e3:	jmp    c4ad <commit_one_file+0xdd>
    c6e8:	mov    ebp,r15d
    c6eb:	mov    edi,DWORD PTR [rsp+0x14]
    c6ef:	xor    edx,edx
    c6f1:	mov    DWORD PTR [rsp+0x1c],r10d
    c6f6:	mov    rsi,rbp
    c6f9:	call   3620 <lseek64@plt>
    c6fe:	mov    r10d,DWORD PTR [rsp+0x1c]
    c703:	cmp    rbp,rax
    c706:	je     c642 <commit_one_file+0x272>
    c70c:	mov    edi,DWORD PTR [rsp+0x14]
    c710:	call   3260 <close@plt>
    c715:	mov    rdi,QWORD PTR [rsp+0x8]
    c71a:	call   4ca0 <qemu_free>
    c71f:	mov    edx,0xfffffffd
    c724:	jmp    c789 <commit_one_file+0x3b9>
    c726:	nop    WORD PTR cs:[rax+rax*1+0x0]
    c730:	mov    r15d,DWORD PTR [rsp+0x14]
    c735:	mov    esi,r12d
    c738:	mov    edi,r15d
    c73b:	call   34c0 <ftruncate64@plt>
    c740:	mov    edi,r15d
    c743:	call   3260 <close@plt>
    c748:	mov    rdi,QWORD PTR [rsp+0x8]
    c74d:	call   4ca0 <qemu_free>
    c752:	mov    edx,DWORD PTR [rsp+0x18]
    c756:	add    rsp,0x28
    c75a:	mov    esi,ebx
    c75c:	mov    rdi,r13
    c75f:	pop    rbx
    c760:	pop    rbp
    c761:	pop    r12
    c763:	pop    r13
    c765:	pop    r14
    c767:	pop    r15
    c769:	jmp    bdd0 <commit_mappings>
    c76e:	mov    edi,DWORD PTR [rsp+0x14]
    c772:	mov    DWORD PTR [rsp+0x18],eax
    c776:	call   3260 <close@plt>
    c77b:	mov    rdi,QWORD PTR [rsp+0x8]
    c780:	call   4ca0 <qemu_free>
    c785:	mov    edx,DWORD PTR [rsp+0x18]
    c789:	add    rsp,0x28
    c78d:	mov    eax,edx
    c78f:	pop    rbx
    c790:	pop    rbp
    c791:	pop    r12
    c793:	pop    r13
    c795:	pop    r14
    c797:	pop    r15
    c799:	ret    
    c79a:	mov    edi,DWORD PTR [rsp+0x14]
    c79e:	call   3260 <close@plt>
    c7a3:	mov    rdi,QWORD PTR [rsp+0x8]
    c7a8:	call   4ca0 <qemu_free>
    c7ad:	mov    edx,0xfffffffe
    c7b2:	jmp    c789 <commit_one_file+0x3b9>
    c7b4:	call   30b0 <__errno_location@plt>
    c7b9:	mov    ebx,DWORD PTR [rax]
    c7bb:	mov    edi,ebx
    c7bd:	call   3660 <strerror@plt>
    c7c2:	mov    rcx,QWORD PTR [rbp+0x18]
    c7c6:	mov    r9d,ebx
    c7c9:	mov    esi,0x1
    c7ce:	mov    rdi,QWORD PTR [rip+0x1bd2b]        # 28500 <stderr@@GLIBC_2.2.5>
    c7d5:	mov    r8,rax
    c7d8:	xor    eax,eax
    c7da:	lea    rdx,[rip+0x1320f]        # 1f9f0 <desc_template.13939+0x730>
    c7e1:	call   3630 <__fprintf_chk@plt>
    c7e6:	mov    rdi,QWORD PTR [rsp+0x8]
    c7eb:	call   4ca0 <qemu_free>
    c7f0:	mov    edx,DWORD PTR [rsp+0x14]
    c7f4:	jmp    c789 <commit_one_file+0x3b9>
    c7f6:	lea    rcx,[rip+0x13543]        # 1fd40 <__PRETTY_FUNCTION__.14610>
    c7fd:	mov    edx,0x8ce
    c802:	lea    rsi,[rip+0x12cbd]        # 1f4c6 <desc_template.13939+0x206>
    c809:	lea    rdi,[rip+0x13200]        # 1fa10 <desc_template.13939+0x750>
    c810:	call   3220 <__assert_fail@plt>
    c815:	lea    rcx,[rip+0x13644]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    c81c:	mov    edx,0x465
    c821:	lea    rsi,[rip+0x12c9e]        # 1f4c6 <desc_template.13939+0x206>
    c828:	lea    rdi,[rip+0x12d1a]        # 1f549 <desc_template.13939+0x289>
    c82f:	call   3220 <__assert_fail@plt>
    c834:	lea    rcx,[rip+0x13625]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    c83b:	mov    edx,0x45a
    c840:	lea    rsi,[rip+0x12c7f]        # 1f4c6 <desc_template.13939+0x206>
    c847:	lea    rdi,[rip+0x12cc1]        # 1f50f <desc_template.13939+0x24f>
    c84e:	call   3220 <__assert_fail@plt>
    c853:	lea    rcx,[rip+0x135f6]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    c85a:	mov    edx,0x60
    c85f:	lea    rsi,[rip+0x12c60]        # 1f4c6 <desc_template.13939+0x206>
    c866:	lea    rdi,[rip+0x12c8e]        # 1f4fb <desc_template.13939+0x23b>
    c86d:	call   3220 <__assert_fail@plt>
    c872:	lea    rcx,[rip+0x135e7]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    c879:	mov    edx,0x45c
    c87e:	lea    rsi,[rip+0x12c41]        # 1f4c6 <desc_template.13939+0x206>
    c885:	lea    rdi,[rip+0x12ca1]        # 1f52d <desc_template.13939+0x26d>
    c88c:	call   3220 <__assert_fail@plt>
    c891:	lea    rcx,[rip+0x135e8]        # 1fe80 <__PRETTY_FUNCTION__.14257>
    c898:	mov    edx,0x477
    c89d:	lea    rsi,[rip+0x12c22]        # 1f4c6 <desc_template.13939+0x206>
    c8a4:	lea    rdi,[rip+0x12f75]        # 1f820 <desc_template.13939+0x560>
    c8ab:	call   3220 <__assert_fail@plt>
    c8b0:	lea    rcx,[rip+0x13489]        # 1fd40 <__PRETTY_FUNCTION__.14610>
    c8b7:	mov    edx,0x8b2
    c8bc:	lea    rsi,[rip+0x12c03]        # 1f4c6 <desc_template.13939+0x206>
    c8c3:	lea    rdi,[rip+0x13106]        # 1f9d0 <desc_template.13939+0x710>
    c8ca:	call   3220 <__assert_fail@plt>
    c8cf:	lea    rcx,[rip+0x1346a]        # 1fd40 <__PRETTY_FUNCTION__.14610>
    c8d6:	mov    edx,0x8b1
    c8db:	lea    rsi,[rip+0x12be4]        # 1f4c6 <desc_template.13939+0x206>
    c8e2:	lea    rdi,[rip+0x12c8f]        # 1f578 <desc_template.13939+0x2b8>
    c8e9:	call   3220 <__assert_fail@plt>
    c8ee:	xchg   ax,ax

000000000000c8f0 <commit_direntries>:
    c8f0:	push   r15
    c8f2:	push   r14
    c8f4:	push   r13
    c8f6:	push   r12
    c8f8:	push   rbp
    c8f9:	push   rbx
    c8fa:	sub    rsp,0x18
    c8fe:	mov    r10d,DWORD PTR [rdi+0x8034]
    c905:	mov    DWORD PTR [rsp+0xc],esi
    c909:	cmp    esi,r10d
    c90c:	jae    cec8 <commit_direntries+0x5d8>
    c912:	mov    eax,DWORD PTR [rsp+0xc]
    c916:	mov    rbx,rdi
    c919:	xor    r14d,r14d
    c91c:	mov    r9d,eax
    c91f:	imul   r9d,DWORD PTR [rdi+0x8038]
    c927:	add    r9,QWORD PTR [rdi+0x8028]
    c92e:	test   eax,eax
    c930:	jne    cc00 <commit_direntries+0x310>
    c936:	mov    r11d,DWORD PTR [rbx+0x804c]
    c93d:	xor    r8d,r8d
    c940:	mov    esi,r11d
    c943:	jmp    c963 <commit_direntries+0x73>
    c945:	nop    DWORD PTR [rax]
    c948:	cmp    esi,eax
    c94a:	jne    c954 <commit_direntries+0x64>
    c94c:	test   esi,esi
    c94e:	jne    cf36 <commit_direntries+0x646>
    c954:	cmp    esi,eax
    c956:	je     c9b8 <commit_direntries+0xc8>
    c958:	mov    esi,eax
    c95a:	cmp    r8d,esi
    c95d:	jg     cf17 <commit_direntries+0x627>
    c963:	lea    ecx,[r8+rsi*1]
    c967:	mov    eax,ecx
    c969:	shr    eax,0x1f
    c96c:	add    eax,ecx
    c96e:	sar    eax,1
    c970:	cmp    r11d,eax
    c973:	jbe    cec8 <commit_direntries+0x5d8>
    c979:	mov    ebp,DWORD PTR [rbx+0x8050]
    c97f:	mov    ecx,eax
    c981:	mov    r13,QWORD PTR [rbx+0x8040]
    c988:	imul   ecx,ebp
    c98b:	add    rcx,r13
    c98e:	mov    edi,DWORD PTR [rcx]
    c990:	mov    r15d,DWORD PTR [rcx+0x4]
    c994:	cmp    edi,r15d
    c997:	jae    cef8 <commit_direntries+0x608>
    c99d:	cmp    r14d,edi
    c9a0:	jbe    c948 <commit_direntries+0x58>
    c9a2:	cmp    r8d,eax
    c9a5:	je     c9ac <commit_direntries+0xbc>
    c9a7:	mov    r8d,eax
    c9aa:	jmp    c95a <commit_direntries+0x6a>
    c9ac:	cmp    r14d,r15d
    c9af:	jb     ce5c <commit_direntries+0x56c>
    c9b5:	mov    r8d,esi
    c9b8:	cmp    r11d,r8d
    c9bb:	jbe    3741 <commit_direntries.cold.11>
    c9c1:	imul   r8d,ebp
    c9c5:	lea    rcx,[r13+r8*1+0x0]
    c9ca:	mov    edi,DWORD PTR [rcx]
    c9cc:	cmp    r14d,edi
    c9cf:	jb     3741 <commit_direntries.cold.11>
    c9d5:	cmp    r14d,DWORD PTR [rcx+0x4]
    c9d9:	jae    d019 <commit_direntries+0x729>
    c9df:	mov    eax,DWORD PTR [rbx+0x805c]
    c9e5:	mov    r13d,DWORD PTR [rcx+0x14]
    c9e9:	shl    eax,0x4
    c9ec:	mov    DWORD PTR [rsp+0x8],eax
    c9f0:	test   r9,r9
    c9f3:	je     cffa <commit_direntries+0x70a>
    c9f9:	cmp    r14d,edi
    c9fc:	jne    cfdb <commit_direntries+0x6eb>
    ca02:	mov    ebp,r13d
    ca05:	cmp    r13d,r10d
    ca08:	jae    cf74 <commit_direntries+0x684>
    ca0e:	test   BYTE PTR [rcx+0x20],0x4
    ca12:	je     cf9d <commit_direntries+0x6ad>
    ca18:	mov    eax,DWORD PTR [rsp+0xc]
    ca1c:	test   eax,eax
    ca1e:	je     ca50 <commit_direntries+0x160>
    ca20:	test   BYTE PTR [r9+0xb],0x10
    ca25:	je     ca2d <commit_direntries+0x13d>
    ca27:	cmp    BYTE PTR [r9],0xe5
    ca2b:	jne    ca50 <commit_direntries+0x160>
    ca2d:	lea    rcx,[rip+0x1333c]        # 1fd70 <__PRETTY_FUNCTION__.14582>
    ca34:	mov    edx,0x86a
    ca39:	lea    rsi,[rip+0x12a86]        # 1f4c6 <desc_template.13939+0x206>
    ca40:	lea    rdi,[rip+0x130a9]        # 1faf0 <desc_template.13939+0x830>
    ca47:	call   3220 <__assert_fail@plt>
    ca4c:	nop    DWORD PTR [rax+0x0]
    ca50:	mov    DWORD PTR [rcx+0x10],edx
    ca53:	test   r14d,r14d
    ca56:	jne    cc16 <commit_direntries+0x326>
    ca5c:	mov    r12d,DWORD PTR [rbx+0x8068]
    ca63:	mov    eax,DWORD PTR [rbx+0x8078]
    ca69:	mov    r15d,r14d
    ca6c:	nop    DWORD PTR [rax+0x0]
    ca70:	sub    eax,0x8
    ca73:	cmp    r15d,eax
    ca76:	ja     cb11 <commit_direntries+0x221>
    ca7c:	cmp    DWORD PTR [rbx+0x8034],r13d
    ca83:	jbe    cec8 <commit_direntries+0x5d8>
    ca89:	mov    ecx,DWORD PTR [rbx+0x805c]
    ca8f:	mov    rdi,QWORD PTR [rbx]
    ca92:	mov    edx,r13d
    ca95:	imul   edx,DWORD PTR [rbx+0x8038]
    ca9c:	add    rdx,QWORD PTR [rbx+0x8028]
    caa3:	mov    esi,ecx
    caa5:	imul   esi,r15d
    caa9:	add    esi,DWORD PTR [rbx+0x806c]
    caaf:	call   b5e0 <vvfat_read>
    cab4:	mov    ecx,eax
    cab6:	test   eax,eax
    cab8:	jne    cd77 <commit_direntries+0x487>
    cabe:	mov    rsi,QWORD PTR [rbx+0x8028]
    cac5:	mov    ecx,0x4
    caca:	lea    rdi,[rip+0x12abe]        # 1f58f <desc_template.13939+0x2cf>
    cad1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    cad3:	seta   al
    cad6:	sbb    al,0x0
    cad8:	test   al,al
    cada:	jne    cf55 <commit_direntries+0x665>
    cae0:	mov    edx,DWORD PTR [rbx+0x8068]
    cae6:	add    r13d,DWORD PTR [rsp+0x8]
    caeb:	mov    eax,DWORD PTR [rbx+0x8078]
    caf1:	cmp    r15d,edx
    caf4:	jae    cde0 <commit_direntries+0x4f0>
    cafa:	add    r15d,0x1
    cafe:	cmp    edx,r15d
    cb01:	cmove  r15d,eax
    cb05:	sub    eax,0x8
    cb08:	cmp    r15d,eax
    cb0b:	jbe    ca7c <commit_direntries+0x18c>
    cb11:	mov    edx,DWORD PTR [rsp+0xc]
    cb15:	mov    esi,r14d
    cb18:	mov    rdi,rbx
    cb1b:	call   bdd0 <commit_mappings>
    cb20:	mov    ecx,eax
    cb22:	test   eax,eax
    cb24:	jne    cd77 <commit_direntries+0x487>
    cb2a:	mov    r13d,DWORD PTR [rsp+0x8]
    cb2f:	imul   r13d,r12d
    cb33:	test   r13d,r13d
    cb36:	jle    cd77 <commit_direntries+0x487>
    cb3c:	cmp    ebp,DWORD PTR [rbx+0x8034]
    cb42:	jae    cec8 <commit_direntries+0x5d8>
    cb48:	lea    r12d,[r13+rbp*1-0x1]
    cb4d:	nop    DWORD PTR [rax]
    cb50:	mov    eax,ebp
    cb52:	imul   eax,DWORD PTR [rbx+0x8038]
    cb59:	add    rax,QWORD PTR [rbx+0x8028]
    cb60:	movzx  edx,BYTE PTR [rax]
    cb63:	movzx  eax,BYTE PTR [rax+0xb]
    cb67:	test   al,0x10
    cb69:	je     ceb0 <commit_direntries+0x5c0>
    cb6f:	cmp    dl,0xe5
    cb72:	je     ceb0 <commit_direntries+0x5c0>
    cb78:	cmp    al,0x28
    cb7a:	jne    cea0 <commit_direntries+0x5b0>
    cb80:	mov    r9d,DWORD PTR [rbx+0x804c]
    cb87:	xor    r8d,r8d
    cb8a:	mov    edi,r9d
    cb8d:	jmp    cbaf <commit_direntries+0x2bf>
    cb8f:	nop
    cb90:	cmp    edi,eax
    cb92:	jne    cb9c <commit_direntries+0x2ac>
    cb94:	test   edi,edi
    cb96:	jne    cf36 <commit_direntries+0x646>
    cb9c:	cmp    edi,eax
    cb9e:	je     cd1f <commit_direntries+0x42f>
    cba4:	mov    edi,eax
    cba6:	cmp    r8d,edi
    cba9:	jg     cf17 <commit_direntries+0x627>
    cbaf:	lea    edx,[rdi+r8*1]
    cbb3:	mov    eax,edx
    cbb5:	shr    eax,0x1f
    cbb8:	add    eax,edx
    cbba:	sar    eax,1
    cbbc:	cmp    r9d,eax
    cbbf:	jbe    cec8 <commit_direntries+0x5d8>
    cbc5:	mov    r10d,DWORD PTR [rbx+0x8050]
    cbcc:	mov    esi,eax
    cbce:	mov    r11,QWORD PTR [rbx+0x8040]
    cbd5:	imul   esi,r10d
    cbd9:	add    rsi,r11
    cbdc:	mov    edx,DWORD PTR [rsi]
    cbde:	mov    r13d,DWORD PTR [rsi+0x4]
    cbe2:	cmp    edx,r13d
    cbe5:	jae    cef8 <commit_direntries+0x608>
    cbeb:	cmp    r14d,edx
    cbee:	jbe    cb90 <commit_direntries+0x2a0>
    cbf0:	cmp    r8d,eax
    cbf3:	je     cd13 <commit_direntries+0x423>
    cbf9:	mov    r8d,eax
    cbfc:	jmp    cba6 <commit_direntries+0x2b6>
    cbfe:	xchg   ax,ax
    cc00:	movzx  r14d,WORD PTR [r9+0x14]
    cc05:	movzx  eax,WORD PTR [r9+0x1a]
    cc0a:	shl    r14d,0x10
    cc0e:	or     r14d,eax
    cc11:	jmp    c936 <commit_direntries+0x46>
    cc16:	mov    eax,DWORD PTR [rbx+0x8078]
    cc1c:	mov    ecx,r14d
    cc1f:	xor    esi,esi
    cc21:	lea    edi,[rax-0x8]
    cc24:	nop    DWORD PTR [rax+0x0]
    cc28:	cmp    ecx,edi
    cc2a:	ja     cc69 <commit_direntries+0x379>
    cc2c:	mov    edx,DWORD PTR [rbx+0x800c]
    cc32:	add    esi,0x1
    cc35:	cmp    edx,0x20
    cc38:	je     cd90 <commit_direntries+0x4a0>
    cc3e:	cmp    edx,0x10
    cc41:	jne    cdb8 <commit_direntries+0x4c8>
    cc47:	cmp    ecx,DWORD PTR [rbx+0x801c]
    cc4d:	jae    cec8 <commit_direntries+0x5d8>
    cc53:	imul   ecx,DWORD PTR [rbx+0x8020]
    cc5a:	mov    rdx,QWORD PTR [rbx+0x8010]
    cc61:	movzx  ecx,WORD PTR [rdx+rcx*1]
    cc65:	cmp    ecx,edi
    cc67:	jbe    cc2c <commit_direntries+0x33c>
    cc69:	cmp    r14d,edi
    cc6c:	ja     ce70 <commit_direntries+0x580>
    cc72:	mov    r10d,DWORD PTR [rbx+0x8068]
    cc79:	mov    ecx,r14d
    cc7c:	xor    r12d,r12d
    cc7f:	jmp    cc96 <commit_direntries+0x3a6>
    cc81:	nop    DWORD PTR [rax+0x0]
    cc88:	add    ecx,0x1
    cc8b:	cmp    r10d,ecx
    cc8e:	cmove  rcx,rax
    cc92:	cmp    ecx,edi
    cc94:	ja     ccdc <commit_direntries+0x3ec>
    cc96:	add    r12d,0x1
    cc9a:	cmp    r10d,ecx
    cc9d:	ja     cc88 <commit_direntries+0x398>
    cc9f:	mov    edx,DWORD PTR [rbx+0x800c]
    cca5:	mov    r11,QWORD PTR [rbx+0x80b8]
    ccac:	cmp    edx,0x20
    ccaf:	je     ce30 <commit_direntries+0x540>
    ccb5:	cmp    edx,0x10
    ccb8:	je     ce20 <commit_direntries+0x530>
    ccbe:	lea    edx,[rcx+rcx*2]
    ccc1:	shl    ecx,0x2
    ccc4:	shr    edx,1
    ccc6:	and    ecx,0x4
    ccc9:	movzx  edx,WORD PTR [r11+rdx*1]
    ccce:	sar    edx,cl
    ccd0:	mov    ecx,edx
    ccd2:	and    ecx,0xfff
    ccd8:	cmp    ecx,edi
    ccda:	jbe    cc96 <commit_direntries+0x3a6>
    ccdc:	cmp    esi,r12d
    ccdf:	jge    ce73 <commit_direntries+0x583>
    cce5:	mov    eax,DWORD PTR [rsp+0x8]
    cce9:	mov    edx,r12d
    ccec:	mov    rdi,rbx
    ccef:	sub    edx,esi
    ccf1:	imul   esi,eax
    ccf4:	imul   edx,eax
    ccf7:	add    esi,r13d
    ccfa:	call   b370 <insert_direntries>
    ccff:	test   rax,rax
    cd02:	je     cf93 <commit_direntries+0x6a3>
    cd08:	mov    eax,DWORD PTR [rbx+0x8078]
    cd0e:	jmp    ca69 <commit_direntries+0x179>
    cd13:	cmp    r14d,r13d
    cd16:	jb     cee7 <commit_direntries+0x5f7>
    cd1c:	mov    r8d,edi
    cd1f:	cmp    r9d,r8d
    cd22:	jbe    374a <commit_direntries.cold.11+0x9>
    cd28:	imul   r8d,r10d
    cd2c:	lea    rsi,[r11+r8*1]
    cd30:	cmp    r14d,DWORD PTR [rsi]
    cd33:	jb     374a <commit_direntries.cold.11+0x9>
    cd39:	cmp    r14d,DWORD PTR [rsi+0x4]
    cd3d:	jae    d019 <commit_direntries+0x729>
    cd43:	test   BYTE PTR [rsi+0x20],0x4
    cd47:	je     cfbc <commit_direntries+0x6cc>
    cd4d:	lea    rdi,[rbx+0x8040]
    cd54:	mov    DWORD PTR [rsp+0x8],ecx
    cd58:	call   bd60 <array_index>
    cd5d:	mov    esi,ebp
    cd5f:	mov    rdi,rbx
    cd62:	mov    edx,eax
    cd64:	call   c8f0 <commit_direntries>
    cd69:	mov    ecx,DWORD PTR [rsp+0x8]
    cd6d:	test   eax,eax
    cd6f:	je     ceb0 <commit_direntries+0x5c0>
    cd75:	mov    ecx,eax
    cd77:	add    rsp,0x18
    cd7b:	mov    eax,ecx
    cd7d:	pop    rbx
    cd7e:	pop    rbp
    cd7f:	pop    r12
    cd81:	pop    r13
    cd83:	pop    r14
    cd85:	pop    r15
    cd87:	ret    
    cd88:	nop    DWORD PTR [rax+rax*1+0x0]
    cd90:	cmp    ecx,DWORD PTR [rbx+0x801c]
    cd96:	jae    cec8 <commit_direntries+0x5d8>
    cd9c:	imul   ecx,DWORD PTR [rbx+0x8020]
    cda3:	mov    rdx,QWORD PTR [rbx+0x8010]
    cdaa:	mov    ecx,DWORD PTR [rdx+rcx*1]
    cdad:	jmp    cc28 <commit_direntries+0x338>
    cdb2:	nop    WORD PTR [rax+rax*1+0x0]
    cdb8:	lea    edx,[rcx+rcx*2]
    cdbb:	mov    r9,QWORD PTR [rbx+0x8010]
    cdc2:	shl    ecx,0x2
    cdc5:	shr    edx,1
    cdc7:	and    ecx,0x4
    cdca:	movzx  edx,WORD PTR [r9+rdx*1]
    cdcf:	sar    edx,cl
    cdd1:	mov    ecx,edx
    cdd3:	and    ecx,0xfff
    cdd9:	jmp    cc28 <commit_direntries+0x338>
    cdde:	xchg   ax,ax
    cde0:	mov    edx,DWORD PTR [rbx+0x800c]
    cde6:	mov    rsi,QWORD PTR [rbx+0x80b8]
    cded:	cmp    edx,0x20
    cdf0:	je     ce50 <commit_direntries+0x560>
    cdf2:	cmp    edx,0x10
    cdf5:	je     ce40 <commit_direntries+0x550>
    cdf7:	lea    edx,[r15+r15*2]
    cdfb:	lea    ecx,[r15*4+0x0]
    ce03:	shr    edx,1
    ce05:	and    ecx,0x4
    ce08:	movzx  edx,WORD PTR [rsi+rdx*1]
    ce0c:	sar    edx,cl
    ce0e:	mov    r10d,edx
    ce11:	and    r10d,0xfff
    ce18:	mov    r15d,r10d
    ce1b:	jmp    ca70 <commit_direntries+0x180>
    ce20:	movzx  ecx,WORD PTR [r11+rcx*2]
    ce25:	jmp    cc92 <commit_direntries+0x3a2>
    ce2a:	nop    WORD PTR [rax+rax*1+0x0]
    ce30:	mov    ecx,DWORD PTR [r11+rcx*4]
    ce34:	jmp    cc92 <commit_direntries+0x3a2>
    ce39:	nop    DWORD PTR [rax+0x0]
    ce40:	mov    r10d,r15d
    ce43:	movzx  r15d,WORD PTR [rsi+r10*2]
    ce48:	jmp    ca70 <commit_direntries+0x180>
    ce4d:	nop    DWORD PTR [rax]
    ce50:	mov    r10d,r15d
    ce53:	mov    r15d,DWORD PTR [rsi+r10*4]
    ce57:	jmp    ca70 <commit_direntries+0x180>
    ce5c:	cmp    r14d,edi
    ce5f:	jae    c9df <commit_direntries+0xef>
    ce65:	jmp    3741 <commit_direntries.cold.11>
    ce6a:	nop    WORD PTR [rax+rax*1+0x0]
    ce70:	xor    r12d,r12d
    ce73:	cmp    esi,r12d
    ce76:	jle    ca69 <commit_direntries+0x179>
    ce7c:	sub    esi,r12d
    ce7f:	mov    eax,DWORD PTR [rsp+0x8]
    ce83:	mov    rdi,rbx
    ce86:	mov    edx,esi
    ce88:	imul   edx,eax
    ce8b:	imul   eax,r12d
    ce8f:	mov    esi,eax
    ce91:	add    esi,r13d
    ce94:	call   b440 <remove_direntries>
    ce99:	jmp    cd08 <commit_direntries+0x418>
    ce9e:	xchg   ax,ax
    cea0:	cmp    dl,0x2e
    cea3:	jne    cb80 <commit_direntries+0x290>
    cea9:	nop    DWORD PTR [rax+0x0]
    ceb0:	cmp    r12d,ebp
    ceb3:	je     cd77 <commit_direntries+0x487>
    ceb9:	add    ebp,0x1
    cebc:	cmp    DWORD PTR [rbx+0x8034],ebp
    cec2:	ja     cb50 <commit_direntries+0x260>
    cec8:	lea    rcx,[rip+0x12f81]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    cecf:	mov    edx,0x60
    ced4:	lea    rsi,[rip+0x125eb]        # 1f4c6 <desc_template.13939+0x206>
    cedb:	lea    rdi,[rip+0x12619]        # 1f4fb <desc_template.13939+0x23b>
    cee2:	call   3220 <__assert_fail@plt>
    cee7:	cmp    r14d,edx
    ceea:	jae    cd43 <commit_direntries+0x453>
    cef0:	jmp    374a <commit_direntries.cold.11+0x9>
    cef5:	nop    DWORD PTR [rax]
    cef8:	lea    rcx,[rip+0x12f61]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    ceff:	mov    edx,0x45a
    cf04:	lea    rsi,[rip+0x125bb]        # 1f4c6 <desc_template.13939+0x206>
    cf0b:	lea    rdi,[rip+0x125fd]        # 1f50f <desc_template.13939+0x24f>
    cf12:	call   3220 <__assert_fail@plt>
    cf17:	lea    rcx,[rip+0x12f42]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    cf1e:	mov    edx,0x465
    cf23:	lea    rsi,[rip+0x1259c]        # 1f4c6 <desc_template.13939+0x206>
    cf2a:	lea    rdi,[rip+0x12618]        # 1f549 <desc_template.13939+0x289>
    cf31:	call   3220 <__assert_fail@plt>
    cf36:	lea    rcx,[rip+0x12f23]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    cf3d:	mov    edx,0x45c
    cf42:	lea    rsi,[rip+0x1257d]        # 1f4c6 <desc_template.13939+0x206>
    cf49:	lea    rdi,[rip+0x125dd]        # 1f52d <desc_template.13939+0x26d>
    cf50:	call   3220 <__assert_fail@plt>
    cf55:	lea    rcx,[rip+0x12e14]        # 1fd70 <__PRETTY_FUNCTION__.14582>
    cf5c:	mov    edx,0x88b
    cf61:	lea    rsi,[rip+0x1255e]        # 1f4c6 <desc_template.13939+0x206>
    cf68:	lea    rdi,[rip+0x12b51]        # 1fac0 <desc_template.13939+0x800>
    cf6f:	call   3220 <__assert_fail@plt>
    cf74:	lea    rcx,[rip+0x12df5]        # 1fd70 <__PRETTY_FUNCTION__.14582>
    cf7b:	mov    edx,0x868
    cf80:	lea    rsi,[rip+0x1253f]        # 1f4c6 <desc_template.13939+0x206>
    cf87:	lea    rdi,[rip+0x12ada]        # 1fa68 <desc_template.13939+0x7a8>
    cf8e:	call   3220 <__assert_fail@plt>
    cf93:	mov    ecx,0xffffffff
    cf98:	jmp    cd77 <commit_direntries+0x487>
    cf9d:	lea    rcx,[rip+0x12dcc]        # 1fd70 <__PRETTY_FUNCTION__.14582>
    cfa4:	mov    edx,0x869
    cfa9:	lea    rsi,[rip+0x12516]        # 1f4c6 <desc_template.13939+0x206>
    cfb0:	lea    rdi,[rip+0x12ae9]        # 1faa0 <desc_template.13939+0x7e0>
    cfb7:	call   3220 <__assert_fail@plt>
    cfbc:	lea    rcx,[rip+0x12dad]        # 1fd70 <__PRETTY_FUNCTION__.14582>
    cfc3:	mov    edx,0x898
    cfc8:	lea    rsi,[rip+0x124f7]        # 1f4c6 <desc_template.13939+0x206>
    cfcf:	lea    rdi,[rip+0x12aca]        # 1faa0 <desc_template.13939+0x7e0>
    cfd6:	call   3220 <__assert_fail@plt>
    cfdb:	lea    rcx,[rip+0x12d8e]        # 1fd70 <__PRETTY_FUNCTION__.14582>
    cfe2:	mov    edx,0x867
    cfe7:	lea    rsi,[rip+0x124d8]        # 1f4c6 <desc_template.13939+0x206>
    cfee:	lea    rdi,[rip+0x12963]        # 1f958 <desc_template.13939+0x698>
    cff5:	call   3220 <__assert_fail@plt>
    cffa:	lea    rcx,[rip+0x12d6f]        # 1fd70 <__PRETTY_FUNCTION__.14582>
    d001:	mov    edx,0x865
    d006:	lea    rsi,[rip+0x124b9]        # 1f4c6 <desc_template.13939+0x206>
    d00d:	lea    rdi,[rip+0x12572]        # 1f586 <desc_template.13939+0x2c6>
    d014:	call   3220 <__assert_fail@plt>
    d019:	lea    rcx,[rip+0x12e60]        # 1fe80 <__PRETTY_FUNCTION__.14257>
    d020:	mov    edx,0x477
    d025:	lea    rsi,[rip+0x1249a]        # 1f4c6 <desc_template.13939+0x206>
    d02c:	lea    rdi,[rip+0x127ed]        # 1f820 <desc_template.13939+0x560>
    d033:	call   3220 <__assert_fail@plt>
    d038:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000d040 <parse_long_name>:
    d040:	cmp    BYTE PTR [rsi+0xb],0xf
    d044:	push   r12
    d046:	mov    r12d,0x1
    d04c:	push   rbp
    d04d:	push   rbx
    d04e:	jne    d13a <parse_long_name+0xfa>
    d054:	movzx  edx,BYTE PTR [rsi]
    d057:	mov    eax,edx
    d059:	and    eax,0x3f
    d05c:	and    edx,0x40
    d05f:	jne    d148 <parse_long_name+0x108>
    d065:	mov    ebx,DWORD PTR [rdi+0x33c]
    d06b:	lea    edx,[rbx-0x1]
    d06e:	mov    DWORD PTR [rdi+0x33c],edx
    d074:	cmp    edx,eax
    d076:	jne    d1b6 <parse_long_name+0x176>
    d07c:	movzx  edx,BYTE PTR [rsi+0xd]
    d080:	cmp    edx,DWORD PTR [rdi+0x334]
    d086:	jne    d1c1 <parse_long_name+0x181>
    d08c:	cmp    BYTE PTR [rsi+0xc],0x0
    d090:	jne    d1ae <parse_long_name+0x16e>
    d096:	cmp    BYTE PTR [rsi+0x1a],0x0
    d09a:	jne    d1ae <parse_long_name+0x16e>
    d0a0:	cmp    BYTE PTR [rsi+0x1b],0x0
    d0a4:	jne    d1ae <parse_long_name+0x16e>
    d0aa:	sub    eax,0x1
    d0ad:	lea    edx,[rax+rax*2]
    d0b0:	lea    ebp,[rax+rdx*4]
    d0b3:	mov    eax,0x1
    d0b8:	lea    r9d,[rbp+0xd]
    d0bc:	mov    edx,ebp
    d0be:	jmp    d0d7 <parse_long_name+0x97>
    d0c0:	movzx  r8d,BYTE PTR [rsi+r8*1]
    d0c5:	movsxd rcx,edx
    d0c8:	add    edx,0x1
    d0cb:	add    eax,0x2
    d0ce:	mov    BYTE PTR [rdi+rcx*1],r8b
    d0d2:	cmp    r9d,edx
    d0d5:	je     d11c <parse_long_name+0xdc>
    d0d7:	cmp    eax,0xb
    d0da:	je     d170 <parse_long_name+0x130>
    d0e0:	cmp    eax,0x1a
    d0e3:	je     d188 <parse_long_name+0x148>
    d0e9:	movsxd r8,eax
    d0ec:	lea    rcx,[r8+0x1]
    d0f0:	movzx  ecx,BYTE PTR [rsi+rcx*1]
    d0f4:	test   cl,cl
    d0f6:	je     d0c0 <parse_long_name+0x80>
    d0f8:	cmp    cl,0xff
    d0fb:	jne    d1a0 <parse_long_name+0x160>
    d101:	test   BYTE PTR [rsi],0x40
    d104:	je     d1a0 <parse_long_name+0x160>
    d10a:	movsxd rcx,edx
    d10d:	add    edx,0x1
    d110:	add    eax,0x2
    d113:	mov    BYTE PTR [rdi+rcx*1],0x0
    d117:	cmp    r9d,edx
    d11a:	jne    d0d7 <parse_long_name+0x97>
    d11c:	xor    r12d,r12d
    d11f:	test   BYTE PTR [rsi],0x40
    d122:	je     d13a <parse_long_name+0xfa>
    d124:	mov    rbx,rdi
    d127:	movsxd rdi,ebp
    d12a:	add    rdi,rbx
    d12d:	call   3180 <strlen@plt>
    d132:	add    ebp,eax
    d134:	mov    DWORD PTR [rbx+0x338],ebp
    d13a:	mov    eax,r12d
    d13d:	pop    rbx
    d13e:	pop    rbp
    d13f:	pop    r12
    d141:	ret    
    d142:	nop    WORD PTR [rax+rax*1+0x0]
    d148:	mov    DWORD PTR [rdi+0x33c],eax
    d14e:	movzx  edx,BYTE PTR [rsi+0xd]
    d152:	mov    BYTE PTR [rdi],0x0
    d155:	mov    DWORD PTR [rdi+0x334],edx
    d15b:	lea    edx,[rax+rax*2]
    d15e:	lea    edx,[rax+rdx*4]
    d161:	movsxd rdx,edx
    d164:	mov    BYTE PTR [rdi+rdx*1],0x0
    d168:	jmp    d0aa <parse_long_name+0x6a>
    d16d:	nop    DWORD PTR [rax]
    d170:	mov    ecx,0xf
    d175:	mov    r8d,0xe
    d17b:	mov    eax,0xe
    d180:	jmp    d0f0 <parse_long_name+0xb0>
    d185:	nop    DWORD PTR [rax]
    d188:	mov    ecx,0x1d
    d18d:	mov    r8d,0x1c
    d193:	mov    eax,0x1c
    d198:	jmp    d0f0 <parse_long_name+0xb0>
    d19d:	nop    DWORD PTR [rax]
    d1a0:	mov    r12d,0xfffffffc
    d1a6:	pop    rbx
    d1a7:	pop    rbp
    d1a8:	mov    eax,r12d
    d1ab:	pop    r12
    d1ad:	ret    
    d1ae:	mov    r12d,0xfffffffd
    d1b4:	jmp    d13a <parse_long_name+0xfa>
    d1b6:	mov    r12d,0xffffffff
    d1bc:	jmp    d13a <parse_long_name+0xfa>
    d1c1:	mov    r12d,0xfffffffe
    d1c7:	jmp    d13a <parse_long_name+0xfa>
    d1cc:	nop    DWORD PTR [rax+0x0]

000000000000d1d0 <check_directory_consistency>:
    d1d0:	push   r15
    d1d2:	mov    r15,rdi
    d1d5:	push   r14
    d1d7:	push   r13
    d1d9:	push   r12
    d1db:	push   rbp
    d1dc:	push   rbx
    d1dd:	mov    ebx,esi
    d1df:	sub    rsp,0x13d8
    d1e6:	mov    edi,DWORD PTR [rdi+0x8058]
    d1ec:	mov    DWORD PTR [rsp+0x10],esi
    d1f0:	mov    QWORD PTR [rsp+0x40],rdx
    d1f5:	mov    rax,QWORD PTR fs:0x28
    d1fe:	mov    QWORD PTR [rsp+0x13c8],rax
    d206:	xor    eax,eax
    d208:	call   4cb0 <qemu_malloc>
    d20d:	mov    r9d,DWORD PTR [r15+0x804c]
    d214:	xor    esi,esi
    d216:	mov    r11d,ebx
    d219:	mov    QWORD PTR [rsp+0x28],rax
    d21e:	mov    ecx,r9d
    d221:	jmp    d242 <check_directory_consistency+0x72>
    d223:	nop    DWORD PTR [rax+rax*1+0x0]
    d228:	cmp    eax,ecx
    d22a:	jne    d234 <check_directory_consistency+0x64>
    d22c:	test   ecx,ecx
    d22e:	jne    e25e <check_directory_consistency+0x108e>
    d234:	cmp    eax,ecx
    d236:	je     d28f <check_directory_consistency+0xbf>
    d238:	mov    ecx,eax
    d23a:	cmp    esi,ecx
    d23c:	jg     e1b4 <check_directory_consistency+0xfe4>
    d242:	lea    edx,[rsi+rcx*1]
    d245:	mov    eax,edx
    d247:	shr    eax,0x1f
    d24a:	add    eax,edx
    d24c:	sar    eax,1
    d24e:	cmp    eax,r9d
    d251:	jae    e195 <check_directory_consistency+0xfc5>
    d257:	mov    r8d,DWORD PTR [r15+0x8050]
    d25e:	mov    r10,QWORD PTR [r15+0x8040]
    d265:	mov    edx,r8d
    d268:	imul   edx,eax
    d26b:	add    rdx,r10
    d26e:	mov    edi,DWORD PTR [rdx]
    d270:	mov    edx,DWORD PTR [rdx+0x4]
    d273:	cmp    edx,edi
    d275:	jbe    e1d3 <check_directory_consistency+0x1003>
    d27b:	cmp    r11d,edi
    d27e:	jbe    d228 <check_directory_consistency+0x58>
    d280:	cmp    eax,esi
    d282:	je     d288 <check_directory_consistency+0xb8>
    d284:	mov    esi,eax
    d286:	jmp    d23a <check_directory_consistency+0x6a>
    d288:	cmp    DWORD PTR [rsp+0x10],edx
    d28c:	cmovae esi,ecx
    d28f:	cmp    r9d,esi
    d292:	jbe    dd59 <check_directory_consistency+0xb89>
    d298:	imul   esi,r8d
    d29c:	mov    eax,DWORD PTR [rsp+0x10]
    d2a0:	lea    rbp,[r10+rsi*1]
    d2a4:	cmp    eax,DWORD PTR [rbp+0x0]
    d2a7:	jb     dd59 <check_directory_consistency+0xb89>
    d2ad:	cmp    eax,DWORD PTR [rbp+0x4]
    d2b0:	jae    deab <check_directory_consistency+0xcdb>
    d2b6:	mov    rdi,QWORD PTR [rsp+0x40]
    d2bb:	call   3180 <strlen@plt>
    d2c0:	mov    r12,rax
    d2c3:	mov    ebx,eax
    d2c5:	cmp    eax,0xfff
    d2ca:	jg     e0c1 <check_directory_consistency+0xef1>
    d2d0:	mov    r14,QWORD PTR [rsp+0x40]
    d2d5:	lea    rax,[rsp+0x3c0]
    d2dd:	mov    esi,0x1000
    d2e2:	mov    rdi,rax
    d2e5:	mov    QWORD PTR [rsp+0x20],rax
    d2ea:	mov    rdx,r14
    d2ed:	call   48a0 <pstrcpy>
    d2f2:	movsxd rax,r12d
    d2f5:	mov    esi,0x2f
    d2fa:	mov    BYTE PTR [rsp+rax*1+0x3c0],0x2f
    d302:	lea    eax,[r12+0x1]
    d307:	mov    DWORD PTR [rsp+0x50],eax
    d30b:	cdqe   
    d30d:	mov    BYTE PTR [rsp+rax*1+0x3c0],0x0
    d315:	mov    r12,QWORD PTR [rbp+0x18]
    d319:	mov    rdi,r12
    d31c:	call   3200 <strrchr@plt>
    d321:	mov    esi,0x2f
    d326:	mov    rdi,r14
    d329:	lea    rdx,[rax+0x1]
    d32d:	test   rax,rax
    d330:	cmovne r12,rdx
    d334:	call   3200 <strrchr@plt>
    d339:	lea    rdx,[rax+0x1]
    d33d:	test   rax,rax
    d340:	mov    eax,DWORD PTR [rbp+0x20]
    d343:	mov    rsi,rdx
    d346:	cmove  rsi,r14
    d34a:	test   al,0x4
    d34c:	je     e38a <check_directory_consistency+0x11ba>
    d352:	test   al,0x10
    d354:	je     e3a9 <check_directory_consistency+0x11d9>
    d35a:	and    eax,0xffffffef
    d35d:	mov    rdi,r12
    d360:	mov    DWORD PTR [rbp+0x20],eax
    d363:	call   3330 <strcmp@plt>
    d368:	test   eax,eax
    d36a:	jne    de45 <check_directory_consistency+0xc75>
    d370:	movsxd rdi,ebx
    d373:	mov    eax,0xfff
    d378:	mov    DWORD PTR [rsp+0x3b4],0x100
    d383:	sub    rax,rdi
    d386:	mov    DWORD PTR [rsp+0x14],0x0
    d38e:	mov    QWORD PTR [rsp+0x3b8],0x0
    d39a:	mov    QWORD PTR [rsp+0x30],rdi
    d39f:	mov    QWORD PTR [rsp+0x38],rax
    d3a4:	movsxd rax,DWORD PTR [rsp+0x10]
    d3a9:	add    rax,QWORD PTR [r15+0x80c0]
    d3b0:	add    DWORD PTR [rsp+0x14],0x1
    d3b5:	test   BYTE PTR [rax],0x3
    d3b8:	jne    e07c <check_directory_consistency+0xeac>
    d3be:	mov    esi,DWORD PTR [rsp+0x10]
    d3c2:	mov    r14,QWORD PTR [rsp+0x28]
    d3c7:	mov    BYTE PTR [rax],0x1
    d3ca:	mov    ecx,DWORD PTR [r15+0x805c]
    d3d1:	mov    rdi,QWORD PTR [r15]
    d3d4:	mov    rdx,r14
    d3d7:	imul   esi,ecx
    d3da:	add    esi,DWORD PTR [r15+0x806c]
    d3e1:	call   b5e0 <vvfat_read>
    d3e6:	test   eax,eax
    d3e8:	jne    e09f <check_directory_consistency+0xecf>
    d3ee:	mov    esi,DWORD PTR [r15+0x805c]
    d3f5:	xor    r13d,r13d
    d3f8:	mov    eax,esi
    d3fa:	shl    eax,0x4
    d3fd:	je     d56d <check_directory_consistency+0x39d>
    d403:	nop    DWORD PTR [rax+rax*1+0x0]
    d408:	movzx  edx,BYTE PTR [r14+0xb]
    d40d:	cmp    dl,0x28
    d410:	je     d557 <check_directory_consistency+0x387>
    d416:	movzx  ecx,BYTE PTR [r14]
    d41a:	test   cl,cl
    d41c:	sete   al
    d41f:	cmp    cl,0xe5
    d422:	sete   dil
    d426:	or     eax,edi
    d428:	cmp    dl,0xf
    d42b:	je     d8c0 <check_directory_consistency+0x6f0>
    d431:	test   al,al
    d433:	jne    d557 <check_directory_consistency+0x387>
    d439:	cmp    cl,0x2e
    d43c:	je     d557 <check_directory_consistency+0x387>
    d442:	lea    rbp,[rsp+0x80]
    d44a:	mov    rsi,r14
    d44d:	mov    rdi,rbp
    d450:	call   d040 <parse_long_name>
    d455:	test   eax,eax
    d457:	js     dca3 <check_directory_consistency+0xad3>
    d45d:	je     d550 <check_directory_consistency+0x380>
    d463:	movzx  ebx,BYTE PTR [r14]
    d467:	cmp    bl,0xe5
    d46a:	je     d550 <check_directory_consistency+0x380>
    d470:	test   bl,bl
    d472:	je     d550 <check_directory_consistency+0x380>
    d478:	mov    rdx,r14
    d47b:	xor    eax,eax
    d47d:	lea    rcx,[r14+0x8]
    d481:	nop    DWORD PTR [rax+0x0]
    d488:	ror    al,1
    d48a:	add    rdx,0x1
    d48e:	add    al,BYTE PTR [rdx-0x1]
    d491:	cmp    rcx,rdx
    d494:	jne    d488 <check_directory_consistency+0x2b8>
    d496:	xor    edx,edx
    d498:	nop    DWORD PTR [rax+rax*1+0x0]
    d4a0:	ror    al,1
    d4a2:	add    rdx,0x1
    d4a6:	add    al,BYTE PTR [rdx+r14*1+0x7]
    d4ab:	cmp    rdx,0x3
    d4af:	jne    d4a0 <check_directory_consistency+0x2d0>
    d4b1:	movzx  eax,al
    d4b4:	cmp    DWORD PTR [rsp+0x3b4],eax
    d4bb:	jne    d5b0 <check_directory_consistency+0x3e0>
    d4c1:	mov    eax,DWORD PTR [rsp+0x3b8]
    d4c8:	mov    DWORD PTR [rsp+0x3b4],0x100
    d4d3:	add    eax,DWORD PTR [rsp+0x50]
    d4d7:	cmp    eax,0xfff
    d4dc:	jg     e009 <check_directory_consistency+0xe39>
    d4e2:	mov    rax,QWORD PTR [rsp+0x20]
    d4e7:	mov    rdi,QWORD PTR [rsp+0x30]
    d4ec:	mov    rdx,rbp
    d4ef:	mov    rsi,QWORD PTR [rsp+0x38]
    d4f4:	lea    rdi,[rax+rdi*1+0x1]
    d4f9:	call   48a0 <pstrcpy>
    d4fe:	test   BYTE PTR [r14+0xb],0x10
    d503:	je     d6a8 <check_directory_consistency+0x4d8>
    d509:	cmp    BYTE PTR [r14],0xe5
    d50d:	je     d6a8 <check_directory_consistency+0x4d8>
    d513:	movzx  esi,WORD PTR [r14+0x14]
    d518:	movzx  eax,WORD PTR [r14+0x1a]
    d51d:	shl    esi,0x10
    d520:	or     esi,eax
    d522:	je     d880 <check_directory_consistency+0x6b0>
    d528:	mov    rdx,QWORD PTR [rsp+0x20]
    d52d:	mov    rdi,r15
    d530:	call   d1d0 <check_directory_consistency>
    d535:	mov    DWORD PTR [rsp+0xc],eax
    d539:	test   eax,eax
    d53b:	je     d880 <check_directory_consistency+0x6b0>
    d541:	mov    edi,DWORD PTR [rsp+0xc]
    d545:	add    DWORD PTR [rsp+0x14],edi
    d549:	nop    DWORD PTR [rax+0x0]
    d550:	mov    esi,DWORD PTR [r15+0x805c]
    d557:	mov    eax,esi
    d559:	add    r13d,0x1
    d55d:	add    r14,0x20
    d561:	shl    eax,0x4
    d564:	cmp    eax,r13d
    d567:	ja     d408 <check_directory_consistency+0x238>
    d56d:	mov    ecx,DWORD PTR [r15+0x8068]
    d574:	mov    edi,DWORD PTR [rsp+0x10]
    d578:	mov    eax,DWORD PTR [r15+0x8078]
    d57f:	cmp    edi,ecx
    d581:	jae    d7b0 <check_directory_consistency+0x5e0>
    d587:	add    edi,0x1
    d58a:	mov    edx,edi
    d58c:	cmp    ecx,edi
    d58e:	cmove  edx,eax
    d591:	sub    eax,0x8
    d594:	mov    DWORD PTR [rsp+0x10],edx
    d598:	cmp    eax,edx
    d59a:	jae    d3a4 <check_directory_consistency+0x1d4>
    d5a0:	mov    rdi,QWORD PTR [rsp+0x28]
    d5a5:	call   3070 <free@plt>
    d5aa:	jmp    d892 <check_directory_consistency+0x6c2>
    d5af:	nop
    d5b0:	movzx  eax,BYTE PTR [r14+0xb]
    d5b5:	cmp    al,0x28
    d5b7:	je     d550 <check_directory_consistency+0x380>
    d5b9:	cmp    al,0xf
    d5bb:	je     d550 <check_directory_consistency+0x380>
    d5bd:	cmp    BYTE PTR [r14+0x7],0x20
    d5c2:	mov    eax,0x6
    d5c7:	mov    esi,0x7
    d5cc:	jne    d7f4 <check_directory_consistency+0x624>
    d5d2:	nop    WORD PTR [rax+rax*1+0x0]
    d5d8:	cmp    BYTE PTR [r14+rax*1],0x20
    d5dd:	mov    esi,eax
    d5df:	jne    d7f4 <check_directory_consistency+0x624>
    d5e5:	sub    rax,0x1
    d5e9:	cmp    rax,0xffffffffffffffff
    d5ed:	jne    d5d8 <check_directory_consistency+0x408>
    d5ef:	xor    eax,eax
    d5f1:	cmp    BYTE PTR [r14+0xa],0x20
    d5f6:	jne    e184 <check_directory_consistency+0xfb4>
    d5fc:	cmp    BYTE PTR [r14+0x9],0x20
    d601:	jne    e0e0 <check_directory_consistency+0xf10>
    d607:	cmp    BYTE PTR [r14+0x8],0x20
    d60c:	jne    e18e <check_directory_consistency+0xfbe>
    d612:	mov    BYTE PTR [rsp+rax*1+0x80],0x0
    d61a:	mov    rdx,rbp
    d61d:	mov    ecx,DWORD PTR [rdx]
    d61f:	add    rdx,0x4
    d623:	lea    eax,[rcx-0x1010101]
    d629:	not    ecx
    d62b:	and    eax,ecx
    d62d:	and    eax,0x80808080
    d632:	je     d61d <check_directory_consistency+0x44d>
    d634:	mov    ecx,eax
    d636:	mov    rsi,rbp
    d639:	shr    ecx,0x10
    d63c:	test   eax,0x8080
    d641:	cmove  eax,ecx
    d644:	lea    rcx,[rdx+0x2]
    d648:	cmove  rdx,rcx
    d64c:	mov    ecx,0x2
    d651:	mov    edi,eax
    d653:	add    dil,al
    d656:	lea    rdi,[rip+0x11f98]        # 1f5f5 <desc_template.13939+0x335>
    d65d:	sbb    rdx,0x3
    d661:	sub    rdx,rbp
    d664:	mov    DWORD PTR [rsp+0x3b8],edx
    d66b:	mov    eax,edx
    d66d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    d66f:	seta   dl
    d672:	sbb    dl,0x0
    d675:	test   dl,dl
    d677:	je     d550 <check_directory_consistency+0x380>
    d67d:	mov    ecx,0x3
    d682:	lea    rdi,[rip+0x11f6b]        # 1f5f4 <desc_template.13939+0x334>
    d689:	mov    rsi,rbp
    d68c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    d68e:	seta   dl
    d691:	sbb    dl,0x0
    d694:	test   dl,dl
    d696:	jne    d4c8 <check_directory_consistency+0x2f8>
    d69c:	jmp    d550 <check_directory_consistency+0x380>
    d6a1:	nop    DWORD PTR [rax+0x0]
    d6a8:	mov    rdi,r14
    d6ab:	call   ac80 <is_file>
    d6b0:	test   al,al
    d6b2:	je     e309 <check_directory_consistency+0x1139>
    d6b8:	movzx  r10d,WORD PTR [r14+0x14]
    d6bd:	movzx  eax,WORD PTR [r14+0x1a]
    d6c2:	shl    r10d,0x10
    d6c6:	or     r10d,eax
    d6c9:	cmp    QWORD PTR [r15+0x8080],0x0
    d6d1:	mov    r12d,r10d
    d6d4:	je     d6f0 <check_directory_consistency+0x520>
    d6d6:	mov    edi,DWORD PTR [r15+0x807c]
    d6dd:	mov    QWORD PTR [r15+0x8080],0x0
    d6e8:	test   edi,edi
    d6ea:	jne    dcc5 <check_directory_consistency+0xaf5>
    d6f0:	mov    DWORD PTR [r15+0x8098],0xffffffff
    d6fb:	test   r12d,r12d
    d6fe:	je     d8da <check_directory_consistency+0x70a>
    d704:	mov    rax,QWORD PTR [r15+0x80b0]
    d70b:	test   rax,rax
    d70e:	je     de19 <check_directory_consistency+0xc49>
    d714:	mov    rbx,QWORD PTR [rsp+0x20]
    d719:	mov    esi,0x2f
    d71e:	mov    rdi,rbx
    d721:	call   3200 <strrchr@plt>
    d726:	mov    ebp,DWORD PTR [r15+0x804c]
    d72d:	test   rax,rax
    d730:	lea    rdx,[rax+0x1]
    d734:	cmove  rdx,rbx
    d738:	xor    ecx,ecx
    d73a:	mov    QWORD PTR [rsp+0x58],rdx
    d73f:	mov    edx,ebp
    d741:	jmp    d766 <check_directory_consistency+0x596>
    d743:	nop    DWORD PTR [rax+rax*1+0x0]
    d748:	cmp    edx,eax
    d74a:	jne    d754 <check_directory_consistency+0x584>
    d74c:	test   edx,edx
    d74e:	jne    e25e <check_directory_consistency+0x108e>
    d754:	cmp    edx,eax
    d756:	je     d90b <check_directory_consistency+0x73b>
    d75c:	mov    edx,eax
    d75e:	cmp    ecx,edx
    d760:	jg     e1b4 <check_directory_consistency+0xfe4>
    d766:	lea    esi,[rdx+rcx*1]
    d769:	mov    eax,esi
    d76b:	shr    eax,0x1f
    d76e:	add    eax,esi
    d770:	sar    eax,1
    d772:	cmp    ebp,eax
    d774:	jbe    e195 <check_directory_consistency+0xfc5>
    d77a:	mov    edi,DWORD PTR [r15+0x8050]
    d781:	mov    ebx,eax
    d783:	mov    r8,QWORD PTR [r15+0x8040]
    d78a:	imul   ebx,edi
    d78d:	add    rbx,r8
    d790:	mov    esi,DWORD PTR [rbx]
    d792:	mov    r11d,DWORD PTR [rbx+0x4]
    d796:	cmp    esi,r11d
    d799:	jae    e1d3 <check_directory_consistency+0x1003>
    d79f:	cmp    r12d,esi
    d7a2:	jbe    d748 <check_directory_consistency+0x578>
    d7a4:	cmp    ecx,eax
    d7a6:	je     d900 <check_directory_consistency+0x730>
    d7ac:	mov    ecx,eax
    d7ae:	jmp    d75e <check_directory_consistency+0x58e>
    d7b0:	mov    edx,DWORD PTR [r15+0x800c]
    d7b7:	mov    rcx,QWORD PTR [r15+0x80b8]
    d7be:	cmp    edx,0x20
    d7c1:	je     dfbf <check_directory_consistency+0xdef>
    d7c7:	cmp    edx,0x10
    d7ca:	je     d8cd <check_directory_consistency+0x6fd>
    d7d0:	mov    edi,DWORD PTR [rsp+0x10]
    d7d4:	lea    edx,[rdi+rdi*2]
    d7d7:	shr    edx,1
    d7d9:	movzx  edx,WORD PTR [rcx+rdx*1]
    d7dd:	lea    ecx,[rdi*4+0x0]
    d7e4:	and    ecx,0x4
    d7e7:	sar    edx,cl
    d7e9:	and    edx,0xfff
    d7ef:	jmp    d591 <check_directory_consistency+0x3c1>
    d7f4:	lea    eax,[rbx-0x21]
    d7f7:	cmp    al,0x5e
    d7f9:	ja     d859 <check_directory_consistency+0x689>
    d7fb:	lea    rdx,[rsp+0x7f]
    d800:	mov    DWORD PTR [rsp+0xc],r13d
    d805:	mov    r12d,0x1
    d80b:	mov    ecx,DWORD PTR [r15+0x80e8]
    d812:	mov    QWORD PTR [rsp+0x18],r15
    d817:	mov    r15,rdx
    d81a:	mov    QWORD PTR [rsp+0x48],rbp
    d81f:	mov    r13d,ecx
    d822:	mov    ebp,esi
    d824:	nop    DWORD PTR [rax+0x0]
    d828:	test   r13d,r13d
    d82b:	je     d839 <check_directory_consistency+0x669>
    d82d:	call   36c0 <__ctype_tolower_loc@plt>
    d832:	mov    rax,QWORD PTR [rax]
    d835:	movzx  ebx,BYTE PTR [rax+rbx*4]
    d839:	mov    BYTE PTR [r15+r12*1],bl
    d83d:	movsxd rax,r12d
    d840:	cmp    ebp,r12d
    d843:	jl     e3c8 <check_directory_consistency+0x11f8>
    d849:	movzx  ebx,BYTE PTR [r14+r12*1]
    d84e:	add    r12,0x1
    d852:	lea    eax,[rbx-0x21]
    d855:	cmp    al,0x5e
    d857:	jbe    d828 <check_directory_consistency+0x658>
    d859:	mov    ecx,0xffffffff
    d85e:	mov    rdi,QWORD PTR [rip+0x1ac9b]        # 28500 <stderr@@GLIBC_2.2.5>
    d865:	lea    rdx,[rip+0x11dbd]        # 1f629 <desc_template.13939+0x369>
    d86c:	mov    esi,0x1
    d871:	xor    eax,eax
    d873:	call   3630 <__fprintf_chk@plt>
    d878:	nop    DWORD PTR [rax+rax*1+0x0]
    d880:	mov    rdi,QWORD PTR [rsp+0x28]
    d885:	call   3070 <free@plt>
    d88a:	mov    DWORD PTR [rsp+0x14],0x0
    d892:	mov    rdi,QWORD PTR [rsp+0x13c8]
    d89a:	xor    rdi,QWORD PTR fs:0x28
    d8a3:	mov    eax,DWORD PTR [rsp+0x14]
    d8a7:	jne    e366 <check_directory_consistency+0x1196>
    d8ad:	add    rsp,0x13d8
    d8b4:	pop    rbx
    d8b5:	pop    rbp
    d8b6:	pop    r12
    d8b8:	pop    r13
    d8ba:	pop    r14
    d8bc:	pop    r15
    d8be:	ret    
    d8bf:	nop
    d8c0:	test   al,al
    d8c2:	je     d442 <check_directory_consistency+0x272>
    d8c8:	jmp    d557 <check_directory_consistency+0x387>
    d8cd:	mov    edx,DWORD PTR [rsp+0x10]
    d8d1:	movzx  edx,WORD PTR [rcx+rdx*2]
    d8d5:	jmp    d591 <check_directory_consistency+0x3c1>
    d8da:	mov    DWORD PTR [rsp+0xc],0x0
    d8e2:	mov    ecx,DWORD PTR [r15+0x8058]
    d8e9:	mov    eax,DWORD PTR [r14+0x1c]
    d8ed:	xor    edx,edx
    d8ef:	lea    eax,[rcx+rax*1-0x1]
    d8f3:	div    ecx
    d8f5:	cmp    eax,r12d
    d8f8:	je     d541 <check_directory_consistency+0x371>
    d8fe:	jmp    d880 <check_directory_consistency+0x6b0>
    d900:	cmp    r12d,r11d
    d903:	jb     deea <check_directory_consistency+0xd1a>
    d909:	mov    ecx,edx
    d90b:	cmp    ebp,ecx
    d90d:	jbe    def3 <check_directory_consistency+0xd23>
    d913:	imul   ecx,edi
    d916:	lea    rbx,[r8+rcx*1]
    d91a:	cmp    r12d,DWORD PTR [rbx]
    d91d:	jb     def3 <check_directory_consistency+0xd23>
    d923:	cmp    r12d,DWORD PTR [rbx+0x4]
    d927:	jae    deab <check_directory_consistency+0xcdb>
    d92d:	mov    ecx,DWORD PTR [rbx+0x20]
    d930:	test   cl,0x10
    d933:	je     e347 <check_directory_consistency+0x1177>
    d939:	mov    eax,ecx
    d93b:	mov    rbp,QWORD PTR [rbx+0x18]
    d93f:	mov    esi,0x2f
    d944:	mov    DWORD PTR [rsp+0xc],ecx
    d948:	and    eax,0xffffffef
    d94b:	mov    DWORD PTR [rbx+0x20],eax
    d94e:	mov    rdi,rbp
    d951:	call   3200 <strrchr@plt>
    d956:	mov    ecx,DWORD PTR [rsp+0xc]
    d95a:	test   rax,rax
    d95d:	lea    rdx,[rax+0x1]
    d961:	cmovne rbp,rdx
    d965:	and    ecx,0x1
    d968:	je     e328 <check_directory_consistency+0x1158>
    d96e:	mov    rsi,QWORD PTR [rsp+0x58]
    d973:	mov    rdi,rbp
    d976:	call   3330 <strcmp@plt>
    d97b:	test   eax,eax
    d97d:	jne    dfcb <check_directory_consistency+0xdfb>
    d983:	mov    rax,QWORD PTR [r15+0x80b0]
    d98a:	mov    DWORD PTR [rsp+0xc],0x0
    d992:	lea    rdi,[rsp+0x7c]
    d997:	xor    ebp,ebp
    d999:	mov    DWORD PTR [rsp+0x60],0x0
    d9a1:	mov    DWORD PTR [rsp+0x64],0xffffffff
    d9a9:	mov    DWORD PTR [rsp+0x18],0x0
    d9b1:	mov    QWORD PTR [rsp+0x48],r14
    d9b6:	mov    DWORD PTR [rsp+0x54],r13d
    d9bb:	mov    r13,rdi
    d9be:	xchg   ax,ax
    d9c0:	test   rax,rax
    d9c3:	je     dbc0 <check_directory_consistency+0x9f0>
    d9c9:	test   ebp,ebp
    d9cb:	je     dab8 <check_directory_consistency+0x8e8>
    d9d1:	mov    eax,DWORD PTR [r15+0x805c]
    d9d8:	mov    ebp,r12d
    d9db:	imul   ebp,eax
    d9de:	add    ebp,DWORD PTR [r15+0x806c]
    d9e5:	cmp    QWORD PTR [r15+0x8080],0x0
    d9ed:	je     da09 <check_directory_consistency+0x839>
    d9ef:	mov    edi,DWORD PTR [r15+0x807c]
    d9f6:	mov    QWORD PTR [r15+0x8080],0x0
    da01:	test   edi,edi
    da03:	jne    de29 <check_directory_consistency+0xc59>
    da09:	mov    DWORD PTR [r15+0x8098],0xffffffff
    da14:	xor    r14d,r14d
    da17:	test   eax,eax
    da19:	jne    da31 <check_directory_consistency+0x861>
    da1b:	jmp    dc90 <check_directory_consistency+0xac0>
    da20:	add    r14,0x1
    da24:	cmp    DWORD PTR [r15+0x805c],r14d
    da2b:	jbe    dc90 <check_directory_consistency+0xac0>
    da31:	mov    rdi,QWORD PTR [r15+0x80b0]
    da38:	lea    rsi,[rbp+r14*1+0x0]
    da3d:	mov    rcx,r13
    da40:	mov    edx,0x1
    da45:	mov    rax,QWORD PTR [rdi+0x38]
    da49:	call   QWORD PTR [rax+0x48]
    da4c:	test   eax,eax
    da4e:	jne    da20 <check_directory_consistency+0x850>
    da50:	mov    rdx,QWORD PTR [r15+0x8090]
    da57:	mov    rdi,QWORD PTR [r15]
    da5a:	mov    ecx,0x1
    da5f:	mov    rsi,rbp
    da62:	call   b5e0 <vvfat_read>
    da67:	test   eax,eax
    da69:	jne    de63 <check_directory_consistency+0xc93>
    da6f:	mov    rdi,QWORD PTR [r15+0x80b0]
    da76:	mov    rdx,QWORD PTR [r15+0x8090]
    da7d:	mov    ecx,0x1
    da82:	mov    rsi,rbp
    da85:	mov    rax,QWORD PTR [rdi+0x38]
    da89:	call   QWORD PTR [rax+0x28]
    da8c:	test   eax,eax
    da8e:	je     da20 <check_directory_consistency+0x850>
    da90:	mov    r12d,0xfffffffe
    da96:	mov    r13d,DWORD PTR [rsp+0x54]
    da9b:	mov    r14,QWORD PTR [rsp+0x48]
    daa0:	mov    DWORD PTR [rsp+0xc],r12d
    daa5:	mov    ecx,DWORD PTR [r15+0x8058]
    daac:	jmp    d8e9 <check_directory_consistency+0x719>
    dab1:	nop    DWORD PTR [rax+0x0]
    dab8:	xor    r14d,r14d
    dabb:	nop    DWORD PTR [rax+rax*1+0x0]
    dac0:	mov    esi,DWORD PTR [r15+0x805c]
    dac7:	cmp    esi,r14d
    daca:	jbe    dbc0 <check_directory_consistency+0x9f0>
    dad0:	mov    rdi,QWORD PTR [r15+0x80b0]
    dad7:	imul   esi,r12d
    dadb:	mov    rcx,r13
    dade:	add    esi,DWORD PTR [r15+0x806c]
    dae5:	add    rsi,r14
    dae8:	mov    edx,0x1
    daed:	add    r14,0x1
    daf1:	mov    rax,QWORD PTR [rdi+0x38]
    daf5:	call   QWORD PTR [rax+0x48]
    daf8:	test   eax,eax
    dafa:	je     dac0 <check_directory_consistency+0x8f0>
    dafc:	test   rbx,rbx
    daff:	je     dcda <check_directory_consistency+0xb0a>
    db05:	cmp    r12d,DWORD PTR [rbx]
    db08:	jb     dcda <check_directory_consistency+0xb0a>
    db0e:	cmp    r12d,DWORD PTR [rbx+0x4]
    db12:	jae    dcda <check_directory_consistency+0xb0a>
    db18:	test   BYTE PTR [rbx+0x20],0x4
    db1c:	jne    dbc0 <check_directory_consistency+0x9f0>
    db22:	mov    eax,r12d
    db25:	sub    eax,DWORD PTR [rbx]
    db27:	mov    r14d,DWORD PTR [rbx+0x10]
    db2b:	imul   eax,DWORD PTR [r15+0x8058]
    db33:	add    eax,r14d
    db36:	cmp    eax,DWORD PTR [rsp+0x18]
    db3a:	jne    e36b <check_directory_consistency+0x119b>
    db40:	mov    edx,DWORD PTR [rsp+0x18]
    db44:	test   edx,edx
    db46:	jne    db8c <check_directory_consistency+0x9bc>
    db48:	mov    rbp,QWORD PTR [rbx+0x18]
    db4c:	mov    esi,0x2f
    db51:	mov    rdi,rbp
    db54:	call   3200 <strrchr@plt>
    db59:	mov    rsi,QWORD PTR [rsp+0x58]
    db5e:	test   rax,rax
    db61:	lea    rcx,[rax+0x1]
    db65:	cmovne rbp,rcx
    db69:	mov    rdi,rbp
    db6c:	xor    ebp,ebp
    db6e:	call   3330 <strcmp@plt>
    db73:	lea    rdi,[r15+0x8040]
    db7a:	mov    rsi,rbx
    db7d:	test   eax,eax
    db7f:	setne  bpl
    db83:	call   bd60 <array_index>
    db88:	mov    DWORD PTR [rsp+0x64],eax
    db8c:	mov    eax,DWORD PTR [rsp+0x64]
    db90:	cmp    DWORD PTR [rbx+0xc],eax
    db93:	je     db9e <check_directory_consistency+0x9ce>
    db95:	test   r14d,r14d
    db98:	jne    e2cb <check_directory_consistency+0x10fb>
    db9e:	mov    eax,DWORD PTR [rsp+0x60]
    dba2:	test   eax,eax
    dba4:	jne    dbb8 <check_directory_consistency+0x9e8>
    dba6:	mov    rdi,QWORD PTR [rsp+0x48]
    dbab:	call   ac80 <is_file>
    dbb0:	test   al,al
    dbb2:	jne    e1f2 <check_directory_consistency+0x1022>
    dbb8:	test   ebp,ebp
    dbba:	jne    d9d1 <check_directory_consistency+0x801>
    dbc0:	mov    rax,QWORD PTR [r15+0x80c0]
    dbc7:	mov    ecx,r12d
    dbca:	add    DWORD PTR [rsp+0xc],0x1
    dbcf:	add    rax,rcx
    dbd2:	test   BYTE PTR [rax],0x3
    dbd5:	jne    dfe8 <check_directory_consistency+0xe18>
    dbdb:	mov    BYTE PTR [rax],0x2
    dbde:	mov    edx,DWORD PTR [r15+0x8068]
    dbe5:	cmp    r12d,edx
    dbe8:	jae    dc38 <check_directory_consistency+0xa68>
    dbea:	add    r12d,0x1
    dbee:	mov    eax,DWORD PTR [r15+0x8078]
    dbf5:	cmp    edx,r12d
    dbf8:	cmove  r12d,eax
    dbfc:	lea    edx,[rax-0x8]
    dbff:	mov    ecx,DWORD PTR [r15+0x8058]
    dc06:	cmp    edx,r12d
    dc09:	jb     e030 <check_directory_consistency+0xe60>
    dc0f:	cmp    r12d,0x1
    dc13:	jbe    ded0 <check_directory_consistency+0xd00>
    dc19:	sub    eax,0x10
    dc1c:	cmp    r12d,eax
    dc1f:	ja     ded0 <check_directory_consistency+0xd00>
    dc25:	add    DWORD PTR [rsp+0x18],ecx
    dc29:	mov    rax,QWORD PTR [r15+0x80b0]
    dc30:	jmp    d9c0 <check_directory_consistency+0x7f0>
    dc35:	nop    DWORD PTR [rax]
    dc38:	mov    edx,DWORD PTR [r15+0x800c]
    dc3f:	mov    eax,DWORD PTR [r15+0x8078]
    dc46:	mov    rsi,QWORD PTR [r15+0x80b8]
    dc4d:	cmp    edx,0x20
    dc50:	je     dc9a <check_directory_consistency+0xaca>
    dc52:	cmp    edx,0x10
    dc55:	je     dc80 <check_directory_consistency+0xab0>
    dc57:	lea    edx,[r12+r12*2]
    dc5b:	lea    ecx,[r12*4+0x0]
    dc63:	shr    edx,1
    dc65:	and    ecx,0x4
    dc68:	movzx  edx,WORD PTR [rsi+rdx*1]
    dc6c:	sar    edx,cl
    dc6e:	mov    r12d,edx
    dc71:	and    r12d,0xfff
    dc78:	jmp    dbfc <check_directory_consistency+0xa2c>
    dc7a:	nop    WORD PTR [rax+rax*1+0x0]
    dc80:	movzx  r12d,WORD PTR [rsi+rcx*2]
    dc85:	jmp    dbfc <check_directory_consistency+0xa2c>
    dc8a:	nop    WORD PTR [rax+rax*1+0x0]
    dc90:	mov    ebp,0x1
    dc95:	jmp    dbc0 <check_directory_consistency+0x9f0>
    dc9a:	mov    r12d,DWORD PTR [rsi+rcx*4]
    dc9e:	jmp    dbfc <check_directory_consistency+0xa2c>
    dca3:	mov    rcx,QWORD PTR [rip+0x1a856]        # 28500 <stderr@@GLIBC_2.2.5>
    dcaa:	mov    edx,0x13
    dcaf:	mov    esi,0x1
    dcb4:	lea    rdi,[rip+0x11925]        # 1f5e0 <desc_template.13939+0x320>
    dcbb:	call   3610 <fwrite@plt>
    dcc0:	jmp    d880 <check_directory_consistency+0x6b0>
    dcc5:	call   3260 <close@plt>
    dcca:	mov    DWORD PTR [r15+0x807c],0x0
    dcd5:	jmp    d6f0 <check_directory_consistency+0x520>
    dcda:	mov    edi,DWORD PTR [r15+0x804c]
    dce1:	xor    ecx,ecx
    dce3:	mov    edx,edi
    dce5:	jmp    dd0e <check_directory_consistency+0xb3e>
    dce7:	nop    WORD PTR [rax+rax*1+0x0]
    dcf0:	cmp    edx,eax
    dcf2:	jne    dcfc <check_directory_consistency+0xb2c>
    dcf4:	test   edx,edx
    dcf6:	jne    e25e <check_directory_consistency+0x108e>
    dcfc:	cmp    edx,eax
    dcfe:	je     de88 <check_directory_consistency+0xcb8>
    dd04:	mov    edx,eax
    dd06:	cmp    ecx,edx
    dd08:	jg     e1b4 <check_directory_consistency+0xfe4>
    dd0e:	lea    esi,[rdx+rcx*1]
    dd11:	mov    eax,esi
    dd13:	shr    eax,0x1f
    dd16:	add    eax,esi
    dd18:	sar    eax,1
    dd1a:	cmp    edi,eax
    dd1c:	jbe    e195 <check_directory_consistency+0xfc5>
    dd22:	mov    r9d,DWORD PTR [r15+0x8050]
    dd29:	mov    ebx,eax
    dd2b:	mov    r10,QWORD PTR [r15+0x8040]
    dd32:	imul   ebx,r9d
    dd36:	add    rbx,r10
    dd39:	mov    esi,DWORD PTR [rbx]
    dd3b:	mov    r11d,DWORD PTR [rbx+0x4]
    dd3f:	cmp    esi,r11d
    dd42:	jae    e1d3 <check_directory_consistency+0x1003>
    dd48:	cmp    r12d,esi
    dd4b:	jbe    dcf0 <check_directory_consistency+0xb20>
    dd4d:	cmp    ecx,eax
    dd4f:	je     de7d <check_directory_consistency+0xcad>
    dd55:	mov    ecx,eax
    dd57:	jmp    dd06 <check_directory_consistency+0xb36>
    dd59:	mov    rdi,QWORD PTR [rsp+0x40]
    dd5e:	call   3180 <strlen@plt>
    dd63:	mov    rbp,rax
    dd66:	mov    ebx,eax
    dd68:	cmp    eax,0xfff
    dd6d:	jg     e0c1 <check_directory_consistency+0xef1>
    dd73:	mov    r14,QWORD PTR [rsp+0x40]
    dd78:	lea    rax,[rsp+0x3c0]
    dd80:	mov    esi,0x1000
    dd85:	mov    rdi,rax
    dd88:	mov    QWORD PTR [rsp+0x20],rax
    dd8d:	mov    rdx,r14
    dd90:	call   48a0 <pstrcpy>
    dd95:	movsxd rax,ebp
    dd98:	mov    rdi,r14
    dd9b:	mov    BYTE PTR [rsp+rax*1+0x3c0],0x2f
    dda3:	lea    eax,[rbp+0x1]
    dda6:	mov    DWORD PTR [rsp+0x50],eax
    ddaa:	cdqe   
    ddac:	mov    BYTE PTR [rsp+rax*1+0x3c0],0x0
    ddb4:	call   3650 <strdup@plt>
    ddb9:	mov    ebp,DWORD PTR [r15+0x80d4]
    ddc0:	mov    edx,DWORD PTR [r15+0x80d8]
    ddc7:	mov    r12,rax
    ddca:	lea    r14d,[rbp+0x1]
    ddce:	mov    eax,r14d
    ddd1:	imul   eax,edx
    ddd4:	cmp    eax,DWORD PTR [r15+0x80d0]
    dddb:	ja     e044 <check_directory_consistency+0xe74>
    dde1:	mov    DWORD PTR [r15+0x80d4],r14d
    dde8:	cmp    ebp,r14d
    ddeb:	jae    e195 <check_directory_consistency+0xfc5>
    ddf1:	imul   ebp,DWORD PTR [r15+0x80d8]
    ddf9:	mov    rax,QWORD PTR [r15+0x80c8]
    de00:	mov    edi,DWORD PTR [rsp+0x10]
    de04:	add    rax,rbp
    de07:	mov    QWORD PTR [rax],r12
    de0a:	mov    DWORD PTR [rax+0x8],edi
    de0d:	mov    DWORD PTR [rax+0x10],0x3
    de14:	jmp    d370 <check_directory_consistency+0x1a0>
    de19:	mov    QWORD PTR [rsp+0x58],0x0
    de22:	xor    ebx,ebx
    de24:	jmp    d98a <check_directory_consistency+0x7ba>
    de29:	call   3260 <close@plt>
    de2e:	mov    eax,DWORD PTR [r15+0x805c]
    de35:	mov    DWORD PTR [r15+0x807c],0x0
    de40:	jmp    da09 <check_directory_consistency+0x839>
    de45:	mov    rdi,QWORD PTR [rsp+0x40]
    de4a:	call   3650 <strdup@plt>
    de4f:	mov    esi,DWORD PTR [rsp+0x10]
    de53:	mov    rdi,r15
    de56:	mov    rdx,rax
    de59:	call   bc90 <schedule_rename>
    de5e:	jmp    d370 <check_directory_consistency+0x1a0>
    de63:	mov    r12d,0xffffffff
    de69:	mov    r13d,DWORD PTR [rsp+0x54]
    de6e:	mov    r14,QWORD PTR [rsp+0x48]
    de73:	mov    DWORD PTR [rsp+0xc],r12d
    de78:	jmp    daa5 <check_directory_consistency+0x8d5>
    de7d:	cmp    r12d,r11d
    de80:	jb     dfaf <check_directory_consistency+0xddf>
    de86:	mov    ecx,edx
    de88:	cmp    edi,ecx
    de8a:	jbe    dfb8 <check_directory_consistency+0xde8>
    de90:	imul   ecx,r9d
    de94:	lea    rbx,[r10+rcx*1]
    de98:	cmp    r12d,DWORD PTR [rbx]
    de9b:	jb     dfb8 <check_directory_consistency+0xde8>
    dea1:	cmp    r12d,DWORD PTR [rbx+0x4]
    dea5:	jb     db18 <check_directory_consistency+0x948>
    deab:	lea    rcx,[rip+0x11fce]        # 1fe80 <__PRETTY_FUNCTION__.14257>
    deb2:	mov    edx,0x477
    deb7:	lea    rsi,[rip+0x11608]        # 1f4c6 <desc_template.13939+0x206>
    debe:	lea    rdi,[rip+0x1195b]        # 1f820 <desc_template.13939+0x560>
    dec5:	call   3220 <__assert_fail@plt>
    deca:	nop    WORD PTR [rax+rax*1+0x0]
    ded0:	mov    r12d,0xffffffff
    ded6:	mov    r13d,DWORD PTR [rsp+0x54]
    dedb:	mov    r14,QWORD PTR [rsp+0x48]
    dee0:	mov    DWORD PTR [rsp+0xc],r12d
    dee5:	jmp    d8e9 <check_directory_consistency+0x719>
    deea:	cmp    r12d,esi
    deed:	jae    d92d <check_directory_consistency+0x75d>
    def3:	mov    rdi,r14
    def6:	call   ac80 <is_file>
    defb:	test   al,al
    defd:	je     e2ea <check_directory_consistency+0x111a>
    df03:	mov    rdi,QWORD PTR [rsp+0x20]
    df08:	call   3650 <strdup@plt>
    df0d:	mov    ebx,DWORD PTR [r15+0x80d4]
    df14:	mov    r8,rax
    df17:	mov    eax,DWORD PTR [r15+0x80d8]
    df1e:	lea    ebp,[rbx+0x1]
    df21:	mov    edx,ebp
    df23:	imul   edx,eax
    df26:	cmp    edx,DWORD PTR [r15+0x80d0]
    df2d:	ja     df6c <check_directory_consistency+0xd9c>
    df2f:	mov    DWORD PTR [r15+0x80d4],ebp
    df36:	cmp    ebx,ebp
    df38:	jae    e195 <check_directory_consistency+0xfc5>
    df3e:	imul   ebx,DWORD PTR [r15+0x80d8]
    df46:	mov    rax,QWORD PTR [r15+0x80c8]
    df4d:	add    rax,rbx
    df50:	xor    ebx,ebx
    df52:	mov    QWORD PTR [rax],r8
    df55:	mov    DWORD PTR [rax+0x8],r12d
    df59:	mov    DWORD PTR [rax+0x10],0x2
    df60:	mov    rax,QWORD PTR [r15+0x80b0]
    df67:	jmp    d98a <check_directory_consistency+0x7ba>
    df6c:	mov    ecx,eax
    df6e:	mov    rdi,QWORD PTR [r15+0x80c8]
    df75:	mov    QWORD PTR [rsp+0x18],r8
    df7a:	shl    ecx,0x5
    df7d:	sub    ecx,eax
    df7f:	add    edx,ecx
    df81:	movsxd rsi,edx
    df84:	mov    DWORD PTR [rsp+0xc],edx
    df88:	call   4cd0 <qemu_realloc>
    df8d:	mov    r8,QWORD PTR [rsp+0x18]
    df92:	test   rax,rax
    df95:	mov    QWORD PTR [r15+0x80c8],rax
    df9c:	je     3761 <check_directory_consistency.cold.12+0xe>
    dfa2:	mov    edx,DWORD PTR [rsp+0xc]
    dfa6:	mov    DWORD PTR [r15+0x80d0],edx
    dfad:	jmp    df2f <check_directory_consistency+0xd5f>
    dfaf:	cmp    r12d,esi
    dfb2:	jae    db18 <check_directory_consistency+0x948>
    dfb8:	xor    ebx,ebx
    dfba:	jmp    dbc0 <check_directory_consistency+0x9f0>
    dfbf:	mov    edx,DWORD PTR [rsp+0x10]
    dfc3:	mov    edx,DWORD PTR [rcx+rdx*4]
    dfc6:	jmp    d591 <check_directory_consistency+0x3c1>
    dfcb:	mov    rdi,QWORD PTR [rsp+0x20]
    dfd0:	call   3650 <strdup@plt>
    dfd5:	mov    esi,r12d
    dfd8:	mov    rdi,r15
    dfdb:	mov    rdx,rax
    dfde:	call   bc90 <schedule_rename>
    dfe3:	jmp    d983 <check_directory_consistency+0x7b3>
    dfe8:	mov    r13d,DWORD PTR [rsp+0x54]
    dfed:	mov    r14,QWORD PTR [rsp+0x48]
    dff2:	xor    r12d,r12d
    dff5:	mov    DWORD PTR [rsp+0xc],0x0
    dffd:	mov    ecx,DWORD PTR [r15+0x8058]
    e004:	jmp    d8e9 <check_directory_consistency+0x719>
    e009:	mov    rcx,QWORD PTR [rsp+0x40]
    e00e:	mov    r8,rbp
    e011:	mov    esi,0x1
    e016:	xor    eax,eax
    e018:	mov    rdi,QWORD PTR [rip+0x1a4e1]        # 28500 <stderr@@GLIBC_2.2.5>
    e01f:	lea    rdx,[rip+0x115d1]        # 1f5f7 <desc_template.13939+0x337>
    e026:	call   3630 <__fprintf_chk@plt>
    e02b:	jmp    d880 <check_directory_consistency+0x6b0>
    e030:	mov    r13d,DWORD PTR [rsp+0x54]
    e035:	mov    r14,QWORD PTR [rsp+0x48]
    e03a:	mov    r12d,DWORD PTR [rsp+0xc]
    e03f:	jmp    d8e9 <check_directory_consistency+0x719>
    e044:	mov    r13d,edx
    e047:	mov    rdi,QWORD PTR [r15+0x80c8]
    e04e:	shl    r13d,0x5
    e052:	sub    r13d,edx
    e055:	add    r13d,eax
    e058:	movsxd rsi,r13d
    e05b:	call   4cd0 <qemu_realloc>
    e060:	mov    QWORD PTR [r15+0x80c8],rax
    e067:	test   rax,rax
    e06a:	je     376b <check_directory_consistency.cold.12+0x18>
    e070:	mov    DWORD PTR [r15+0x80d0],r13d
    e077:	jmp    dde1 <check_directory_consistency+0xc11>
    e07c:	mov    ecx,DWORD PTR [rsp+0x10]
    e080:	mov    rdi,QWORD PTR [rip+0x1a479]        # 28500 <stderr@@GLIBC_2.2.5>
    e087:	lea    rdx,[rip+0x11a92]        # 1fb20 <desc_template.13939+0x860>
    e08e:	xor    eax,eax
    e090:	mov    esi,0x1
    e095:	call   3630 <__fprintf_chk@plt>
    e09a:	jmp    d880 <check_directory_consistency+0x6b0>
    e09f:	mov    rcx,QWORD PTR [rip+0x1a45a]        # 28500 <stderr@@GLIBC_2.2.5>
    e0a6:	mov    edx,0x1a
    e0ab:	mov    esi,0x1
    e0b0:	lea    rdi,[rip+0x1150e]        # 1f5c5 <desc_template.13939+0x305>
    e0b7:	call   3610 <fwrite@plt>
    e0bc:	jmp    d880 <check_directory_consistency+0x6b0>
    e0c1:	lea    rcx,[rip+0x11d48]        # 1fe10 <__PRETTY_FUNCTION__.14460>
    e0c8:	mov    edx,0x6d2
    e0cd:	lea    rsi,[rip+0x113f2]        # 1f4c6 <desc_template.13939+0x206>
    e0d4:	lea    rdi,[rip+0x114b9]        # 1f594 <desc_template.13939+0x2d4>
    e0db:	call   3220 <__assert_fail@plt>
    e0e0:	mov    ebx,0x1
    e0e5:	movsxd rdx,eax
    e0e8:	lea    eax,[rax+rbx*1+0x1]
    e0ec:	mov    DWORD PTR [rsp+0xc],r13d
    e0f1:	mov    r13,r15
    e0f4:	mov    BYTE PTR [rsp+rdx*1+0x80],0x2e
    e0fc:	lea    edx,[rax+0x1]
    e0ff:	cdqe   
    e101:	mov    r15,r14
    e104:	movsxd rdx,edx
    e107:	mov    r14,rbp
    e10a:	mov    BYTE PTR [rsp+rdx*1+0x80],0x0
    e112:	lea    rdx,[rbp+rax*1+0x0]
    e117:	mov    rbp,rdx
    e11a:	jmp    e13c <check_directory_consistency+0xf6c>
    e11c:	nop    DWORD PTR [rax+0x0]
    e120:	call   36c0 <__ctype_tolower_loc@plt>
    e125:	sub    rbx,0x1
    e129:	sub    rbp,0x1
    e12d:	mov    rax,QWORD PTR [rax]
    e130:	mov    eax,DWORD PTR [rax+r12*4]
    e134:	mov    BYTE PTR [rbp+0x1],al
    e137:	cmp    ebx,0xffffffff
    e13a:	je     e167 <check_directory_consistency+0xf97>
    e13c:	movzx  r12d,BYTE PTR [r15+rbx*1+0x8]
    e142:	lea    eax,[r12-0x21]
    e147:	cmp    al,0x5e
    e149:	ja     e17a <check_directory_consistency+0xfaa>
    e14b:	mov    ecx,DWORD PTR [r13+0x80e8]
    e152:	test   ecx,ecx
    e154:	jne    e120 <check_directory_consistency+0xf50>
    e156:	sub    rbx,0x1
    e15a:	mov    BYTE PTR [rbp+0x0],r12b
    e15e:	sub    rbp,0x1
    e162:	cmp    ebx,0xffffffff
    e165:	jne    e13c <check_directory_consistency+0xf6c>
    e167:	mov    rbp,r14
    e16a:	mov    r14,r15
    e16d:	mov    r15,r13
    e170:	mov    r13d,DWORD PTR [rsp+0xc]
    e175:	jmp    d61a <check_directory_consistency+0x44a>
    e17a:	mov    ecx,0xfffffffe
    e17f:	jmp    d85e <check_directory_consistency+0x68e>
    e184:	mov    ebx,0x2
    e189:	jmp    e0e5 <check_directory_consistency+0xf15>
    e18e:	xor    ebx,ebx
    e190:	jmp    e0e5 <check_directory_consistency+0xf15>
    e195:	lea    rcx,[rip+0x11cb4]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    e19c:	mov    edx,0x60
    e1a1:	lea    rsi,[rip+0x1131e]        # 1f4c6 <desc_template.13939+0x206>
    e1a8:	lea    rdi,[rip+0x1134c]        # 1f4fb <desc_template.13939+0x23b>
    e1af:	call   3220 <__assert_fail@plt>
    e1b4:	lea    rcx,[rip+0x11ca5]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    e1bb:	mov    edx,0x465
    e1c0:	lea    rsi,[rip+0x112ff]        # 1f4c6 <desc_template.13939+0x206>
    e1c7:	lea    rdi,[rip+0x1137b]        # 1f549 <desc_template.13939+0x289>
    e1ce:	call   3220 <__assert_fail@plt>
    e1d3:	lea    rcx,[rip+0x11c86]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    e1da:	mov    edx,0x45a
    e1df:	lea    rsi,[rip+0x112e0]        # 1f4c6 <desc_template.13939+0x206>
    e1e6:	lea    rdi,[rip+0x11322]        # 1f50f <desc_template.13939+0x24f>
    e1ed:	call   3220 <__assert_fail@plt>
    e1f2:	mov    edx,DWORD PTR [r15+0x80d4]
    e1f9:	mov    eax,DWORD PTR [r15+0x80d8]
    e200:	mov    r14d,DWORD PTR [rbx+0x8]
    e204:	lea    r10d,[rdx+0x1]
    e208:	mov    esi,r10d
    e20b:	imul   esi,eax
    e20e:	cmp    esi,DWORD PTR [r15+0x80d0]
    e215:	ja     e27d <check_directory_consistency+0x10ad>
    e217:	mov    DWORD PTR [r15+0x80d4],r10d
    e21e:	cmp    edx,r10d
    e221:	jae    e195 <check_directory_consistency+0xfc5>
    e227:	mov    edi,DWORD PTR [rsp+0x18]
    e22b:	mov    eax,edx
    e22d:	imul   eax,DWORD PTR [r15+0x80d8]
    e235:	mov    DWORD PTR [rsp+0x60],0x1
    e23d:	add    rax,QWORD PTR [r15+0x80c8]
    e244:	mov    QWORD PTR [rax],0x0
    e24b:	mov    DWORD PTR [rax+0x8],r14d
    e24f:	mov    DWORD PTR [rax+0xc],edi
    e252:	mov    DWORD PTR [rax+0x10],0x1
    e259:	jmp    dbb8 <check_directory_consistency+0x9e8>
    e25e:	lea    rcx,[rip+0x11bfb]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    e265:	mov    edx,0x45c
    e26a:	lea    rsi,[rip+0x11255]        # 1f4c6 <desc_template.13939+0x206>
    e271:	lea    rdi,[rip+0x112b5]        # 1f52d <desc_template.13939+0x26d>
    e278:	call   3220 <__assert_fail@plt>
    e27d:	mov    ecx,eax
    e27f:	mov    rdi,QWORD PTR [r15+0x80c8]
    e286:	mov    DWORD PTR [rsp+0x6c],r10d
    e28b:	shl    ecx,0x5
    e28e:	mov    DWORD PTR [rsp+0x68],edx
    e292:	sub    ecx,eax
    e294:	add    ecx,esi
    e296:	movsxd rsi,ecx
    e299:	mov    DWORD PTR [rsp+0x60],ecx
    e29d:	call   4cd0 <qemu_realloc>
    e2a2:	mov    QWORD PTR [r15+0x80c8],rax
    e2a9:	test   rax,rax
    e2ac:	je     3753 <check_directory_consistency.cold.12>
    e2b2:	mov    ecx,DWORD PTR [rsp+0x60]
    e2b6:	mov    r10d,DWORD PTR [rsp+0x6c]
    e2bb:	mov    edx,DWORD PTR [rsp+0x68]
    e2bf:	mov    DWORD PTR [r15+0x80d0],ecx
    e2c6:	jmp    e217 <check_directory_consistency+0x1047>
    e2cb:	lea    rcx,[rip+0x11b1e]        # 1fdf0 <__PRETTY_FUNCTION__.14439>
    e2d2:	mov    edx,0x68f
    e2d7:	lea    rsi,[rip+0x111e8]        # 1f4c6 <desc_template.13939+0x206>
    e2de:	lea    rdi,[rip+0x1127b]        # 1f560 <desc_template.13939+0x2a0>
    e2e5:	call   3220 <__assert_fail@plt>
    e2ea:	lea    rcx,[rip+0x11aff]        # 1fdf0 <__PRETTY_FUNCTION__.14439>
    e2f1:	mov    edx,0x66e
    e2f6:	lea    rsi,[rip+0x111c9]        # 1f4c6 <desc_template.13939+0x206>
    e2fd:	lea    rdi,[rip+0x1125c]        # 1f560 <desc_template.13939+0x2a0>
    e304:	call   3220 <__assert_fail@plt>
    e309:	lea    rcx,[rip+0x11b00]        # 1fe10 <__PRETTY_FUNCTION__.14460>
    e310:	mov    edx,0x735
    e315:	lea    rsi,[rip+0x111aa]        # 1f4c6 <desc_template.13939+0x206>
    e31c:	lea    rdi,[rip+0x1123d]        # 1f560 <desc_template.13939+0x2a0>
    e323:	call   3220 <__assert_fail@plt>
    e328:	lea    rcx,[rip+0x11ac1]        # 1fdf0 <__PRETTY_FUNCTION__.14439>
    e32f:	mov    edx,0x665
    e334:	lea    rsi,[rip+0x1118b]        # 1f4c6 <desc_template.13939+0x206>
    e33b:	lea    rdi,[rip+0x112cb]        # 1f60d <desc_template.13939+0x34d>
    e342:	call   3220 <__assert_fail@plt>
    e347:	lea    rcx,[rip+0x11aa2]        # 1fdf0 <__PRETTY_FUNCTION__.14439>
    e34e:	mov    edx,0x660
    e353:	lea    rsi,[rip+0x1116c]        # 1f4c6 <desc_template.13939+0x206>
    e35a:	lea    rdi,[rip+0x11247]        # 1f5a8 <desc_template.13939+0x2e8>
    e361:	call   3220 <__assert_fail@plt>
    e366:	call   3190 <__stack_chk_fail@plt>
    e36b:	lea    rcx,[rip+0x11a7e]        # 1fdf0 <__PRETTY_FUNCTION__.14439>
    e372:	mov    edx,0x683
    e377:	lea    rsi,[rip+0x11148]        # 1f4c6 <desc_template.13939+0x206>
    e37e:	lea    rdi,[rip+0x111db]        # 1f560 <desc_template.13939+0x2a0>
    e385:	call   3220 <__assert_fail@plt>
    e38a:	lea    rcx,[rip+0x11a7f]        # 1fe10 <__PRETTY_FUNCTION__.14460>
    e391:	mov    edx,0x6db
    e396:	lea    rsi,[rip+0x11129]        # 1f4c6 <desc_template.13939+0x206>
    e39d:	lea    rdi,[rip+0x116fc]        # 1faa0 <desc_template.13939+0x7e0>
    e3a4:	call   3220 <__assert_fail@plt>
    e3a9:	lea    rcx,[rip+0x11a60]        # 1fe10 <__PRETTY_FUNCTION__.14460>
    e3b0:	mov    edx,0x6dd
    e3b5:	lea    rsi,[rip+0x1110a]        # 1f4c6 <desc_template.13939+0x206>
    e3bc:	lea    rdi,[rip+0x111e5]        # 1f5a8 <desc_template.13939+0x2e8>
    e3c3:	call   3220 <__assert_fail@plt>
    e3c8:	mov    r13d,DWORD PTR [rsp+0xc]
    e3cd:	mov    r15,QWORD PTR [rsp+0x18]
    e3d2:	mov    rbp,QWORD PTR [rsp+0x48]
    e3d7:	jmp    d5f1 <check_directory_consistency+0x421>
    e3dc:	nop    DWORD PTR [rax+0x0]

000000000000e3e0 <try_commit>:
    e3e0:	push   r15
    e3e2:	push   r14
    e3e4:	push   r13
    e3e6:	push   r12
    e3e8:	mov    r12,rdi
    e3eb:	push   rbp
    e3ec:	push   rbx
    e3ed:	sub    rsp,0x68
    e3f1:	cmp    QWORD PTR [rdi+0x8080],0x0
    e3f9:	je     e414 <try_commit+0x34>
    e3fb:	mov    QWORD PTR [rdi+0x8080],0x0
    e406:	mov    edi,DWORD PTR [rdi+0x807c]
    e40c:	test   edi,edi
    e40e:	jne    e6b0 <try_commit+0x2d0>
    e414:	mov    rdx,QWORD PTR [r12+0x80b8]
    e41c:	mov    ecx,DWORD PTR [r12+0x8060]
    e424:	mov    DWORD PTR [r12+0x8098],0xffffffff
    e430:	test   rdx,rdx
    e433:	je     ef18 <try_commit+0xb38>
    e439:	mov    esi,DWORD PTR [r12+0x8]
    e43e:	mov    rdi,QWORD PTR [r12]
    e442:	call   b5e0 <vvfat_read>
    e447:	mov    ebx,eax
    e449:	test   eax,eax
    e44b:	jne    edf0 <try_commit+0xa10>
    e451:	mov    rsi,QWORD PTR [r12+0x80c0]
    e459:	test   rsi,rsi
    e45c:	je     f566 <try_commit+0x1186>
    e462:	mov    edx,DWORD PTR [r12+0x806c]
    e46a:	mov    eax,DWORD PTR [r12+0x8070]
    e472:	mov    ecx,DWORD PTR [r12+0x805c]
    e47a:	sub    rax,rdx
    e47d:	cqo    
    e47f:	idiv   rcx
    e482:	xor    ecx,ecx
    e484:	test   eax,eax
    e486:	jne    e498 <try_commit+0xb8>
    e488:	jmp    e4c4 <try_commit+0xe4>
    e48a:	nop    WORD PTR [rax+rax*1+0x0]
    e490:	mov    rsi,QWORD PTR [r12+0x80c0]
    e498:	and    BYTE PTR [rsi+rcx*1],0xfc
    e49c:	mov    edx,DWORD PTR [r12+0x806c]
    e4a4:	add    rcx,0x1
    e4a8:	mov    eax,DWORD PTR [r12+0x8070]
    e4b0:	mov    esi,DWORD PTR [r12+0x805c]
    e4b8:	sub    rax,rdx
    e4bb:	cqo    
    e4bd:	idiv   rsi
    e4c0:	cmp    eax,ecx
    e4c2:	ja     e490 <try_commit+0xb0>
    e4c4:	mov    edi,DWORD PTR [r12+0x80d4]
    e4cc:	xor    ebp,ebp
    e4ce:	test   edi,edi
    e4d0:	jne    e4f3 <try_commit+0x113>
    e4d2:	jmp    e538 <try_commit+0x158>
    e4d4:	nop    DWORD PTR [rax+0x0]
    e4d8:	cmp    eax,0x1
    e4db:	je     f4ea <try_commit+0x110a>
    e4e1:	call   3070 <free@plt>
    e4e6:	add    ebp,0x1
    e4e9:	cmp    DWORD PTR [r12+0x80d4],ebp
    e4f1:	jbe    e538 <try_commit+0x158>
    e4f3:	mov    eax,ebp
    e4f5:	imul   eax,DWORD PTR [r12+0x80d8]
    e4fe:	add    rax,QWORD PTR [r12+0x80c8]
    e506:	mov    rdi,QWORD PTR [rax]
    e509:	mov    eax,DWORD PTR [rax+0x10]
    e50c:	test   rdi,rdi
    e50f:	jne    e4d8 <try_commit+0xf8>
    e511:	cmp    eax,0x1
    e514:	je     e4e6 <try_commit+0x106>
    e516:	lea    rcx,[rip+0x11913]        # 1fe30 <__PRETTY_FUNCTION__.14325>
    e51d:	mov    edx,0x55f
    e522:	lea    rsi,[rip+0x10f9d]        # 1f4c6 <desc_template.13939+0x206>
    e529:	lea    rdi,[rip+0x11610]        # 1fb40 <desc_template.13939+0x880>
    e530:	call   3220 <__assert_fail@plt>
    e535:	nop    DWORD PTR [rax]
    e538:	cmp    QWORD PTR [r12+0x80b0],0x0
    e541:	mov    DWORD PTR [r12+0x80d4],0x0
    e54d:	je     e58b <try_commit+0x1ab>
    e54f:	mov    esi,DWORD PTR [r12+0x804c]
    e557:	test   esi,esi
    e559:	je     e58b <try_commit+0x1ab>
    e55b:	xor    edx,edx
    e55d:	nop    DWORD PTR [rax]
    e560:	mov    eax,edx
    e562:	imul   eax,DWORD PTR [r12+0x8050]
    e56b:	add    rax,QWORD PTR [r12+0x8040]
    e573:	mov    ecx,DWORD PTR [rax+0xc]
    e576:	test   ecx,ecx
    e578:	jns    e57e <try_commit+0x19e>
    e57a:	or     DWORD PTR [rax+0x20],0x10
    e57e:	add    edx,0x1
    e581:	cmp    DWORD PTR [r12+0x804c],edx
    e589:	ja     e560 <try_commit+0x180>
    e58b:	mov    rdx,QWORD PTR [r12+0x80e0]
    e593:	xor    esi,esi
    e595:	mov    rdi,r12
    e598:	call   d1d0 <check_directory_consistency>
    e59d:	mov    r9d,eax
    e5a0:	test   eax,eax
    e5a2:	jle    e660 <try_commit+0x280>
    e5a8:	mov    edx,DWORD PTR [r12+0x806c]
    e5b0:	mov    eax,DWORD PTR [r12+0x8070]
    e5b8:	mov    ecx,DWORD PTR [r12+0x805c]
    e5c0:	mov    esi,DWORD PTR [r12+0x8068]
    e5c8:	sub    rax,rdx
    e5cb:	cqo    
    e5cd:	mov    r8d,esi
    e5d0:	idiv   rcx
    e5d3:	mov    r10d,eax
    e5d6:	cmp    esi,eax
    e5d8:	jae    e6d0 <try_commit+0x2f0>
    e5de:	mov    r11,QWORD PTR [r12+0x80c0]
    e5e6:	movsxd rax,esi
    e5e9:	jmp    e617 <try_commit+0x237>
    e5eb:	nop    DWORD PTR [rax+rax*1+0x0]
    e5f0:	lea    edx,[rax+0x1]
    e5f3:	cmp    esi,edx
    e5f5:	je     e680 <try_commit+0x2a0>
    e5fb:	test   dil,dil
    e5fe:	je     e660 <try_commit+0x280>
    e600:	add    r8d,0x1
    e604:	cmp    dil,0x4
    e608:	je     e660 <try_commit+0x280>
    e60a:	add    rax,0x1
    e60e:	cmp    r10d,eax
    e611:	jbe    e6d0 <try_commit+0x2f0>
    e617:	mov    ecx,eax
    e619:	movzx  edi,BYTE PTR [r11+rax*1]
    e61e:	cmp    esi,eax
    e620:	ja     e5f0 <try_commit+0x210>
    e622:	mov    edx,DWORD PTR [r12+0x800c]
    e62a:	mov    rbp,QWORD PTR [r12+0x80b8]
    e632:	cmp    edx,0x20
    e635:	je     e6a0 <try_commit+0x2c0>
    e637:	cmp    edx,0x10
    e63a:	je     e690 <try_commit+0x2b0>
    e63c:	lea    edx,[rax+rax*2]
    e63f:	shl    ecx,0x2
    e642:	shr    edx,1
    e644:	and    ecx,0x4
    e647:	movzx  edx,WORD PTR [rbp+rdx*1+0x0]
    e64c:	sar    edx,cl
    e64e:	and    edx,0xfff
    e654:	test   edx,edx
    e656:	jne    e5fb <try_commit+0x21b>
    e658:	cmp    dil,0x4
    e65c:	jne    e60a <try_commit+0x22a>
    e65e:	xchg   ax,ax
    e660:	mov    ebx,0xffffffff
    e665:	add    rsp,0x68
    e669:	mov    eax,ebx
    e66b:	pop    rbx
    e66c:	pop    rbp
    e66d:	pop    r12
    e66f:	pop    r13
    e671:	pop    r14
    e673:	pop    r15
    e675:	ret    
    e676:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e680:	mov    edx,DWORD PTR [r12+0x8078]
    e688:	jmp    e654 <try_commit+0x274>
    e68a:	nop    WORD PTR [rax+rax*1+0x0]
    e690:	mov    edx,eax
    e692:	movzx  edx,WORD PTR [rbp+rdx*2+0x0]
    e697:	jmp    e654 <try_commit+0x274>
    e699:	nop    DWORD PTR [rax+0x0]
    e6a0:	mov    edx,eax
    e6a2:	mov    edx,DWORD PTR [rbp+rdx*4+0x0]
    e6a6:	jmp    e654 <try_commit+0x274>
    e6a8:	nop    DWORD PTR [rax+rax*1+0x0]
    e6b0:	call   3260 <close@plt>
    e6b5:	mov    DWORD PTR [r12+0x807c],0x0
    e6c1:	jmp    e414 <try_commit+0x34>
    e6c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    e6d0:	cmp    r9d,r8d
    e6d3:	jne    e660 <try_commit+0x280>
    e6d5:	mov    eax,DWORD PTR [r12+0x80d4]
    e6dd:	test   eax,eax
    e6df:	je     e665 <try_commit+0x285>
    e6e1:	cmp    QWORD PTR [r12+0x8080],0x0
    e6ea:	je     e708 <try_commit+0x328>
    e6ec:	mov    edi,DWORD PTR [r12+0x807c]
    e6f4:	mov    QWORD PTR [r12+0x8080],0x0
    e700:	test   edi,edi
    e702:	jne    efa0 <try_commit+0xbc0>
    e708:	lea    rbx,[r12+0x80c8]
    e710:	mov    DWORD PTR [rsp+0x8],0x0
    e718:	mov    r13,r12
    e71b:	mov    DWORD PTR [r12+0x8098],0xffffffff
    e727:	mov    QWORD PTR [rsp+0x58],rbx
    e72c:	cmp    DWORD PTR [rsp+0x8],eax
    e730:	jae    e764 <try_commit+0x384>
    e732:	mov    ebp,DWORD PTR [rsp+0x8]
    e736:	imul   ebp,DWORD PTR [r13+0x80d8]
    e73e:	add    rbp,QWORD PTR [r13+0x80c8]
    e745:	mov    edx,DWORD PTR [rbp+0x10]
    e748:	test   edx,edx
    e74a:	je     e8c0 <try_commit+0x4e0>
    e750:	cmp    edx,0x3
    e753:	je     ec90 <try_commit+0x8b0>
    e759:	add    DWORD PTR [rsp+0x8],0x1
    e75e:	cmp    DWORD PTR [rsp+0x8],eax
    e762:	jb     e732 <try_commit+0x352>
    e764:	mov    edx,DWORD PTR [r13+0x8060]
    e76b:	mov    rdi,QWORD PTR [r13+0x8010]
    e772:	mov    r12,r13
    e775:	mov    rsi,QWORD PTR [r13+0x80b8]
    e77c:	shl    edx,0x9
    e77f:	call   33b0 <memcpy@plt>
    e784:	mov    edx,0xffffffff
    e789:	xor    esi,esi
    e78b:	mov    rdi,r13
    e78e:	call   c8f0 <commit_direntries>
    e793:	mov    ebx,eax
    e795:	test   eax,eax
    e797:	jne    f67f <try_commit+0x129f>
    e79d:	cmp    QWORD PTR [r12+0x8080],0x0
    e7a6:	je     e7c4 <try_commit+0x3e4>
    e7a8:	mov    edi,DWORD PTR [r12+0x807c]
    e7b0:	mov    QWORD PTR [r12+0x8080],0x0
    e7bc:	test   edi,edi
    e7be:	jne    f368 <try_commit+0xf88>
    e7c4:	mov    DWORD PTR [r12+0x8098],0xffffffff
    e7d0:	xor    r13d,r13d
    e7d3:	mov    DWORD PTR [rsp],ebx
    e7d6:	mov    r11d,DWORD PTR [r12+0x80d4]
    e7de:	mov    ebp,r13d
    e7e1:	cmp    r11d,r13d
    e7e4:	jbe    f4cc <try_commit+0x10ec>
    e7ea:	mov    ebp,r13d
    e7ed:	imul   ebp,DWORD PTR [r12+0x80d8]
    e7f6:	add    rbp,QWORD PTR [r12+0x80c8]
    e7fe:	mov    eax,DWORD PTR [rbp+0x10]
    e801:	cmp    eax,0x1
    e804:	jne    ee58 <try_commit+0xa78>
    e80a:	mov    esi,DWORD PTR [rbp+0x8]
    e80d:	cmp    esi,DWORD PTR [r12+0x8034]
    e815:	jae    ef60 <try_commit+0xb80>
    e81b:	mov    eax,esi
    e81d:	mov    r10d,DWORD PTR [r12+0x804c]
    e825:	xor    edi,edi
    e827:	imul   eax,DWORD PTR [r12+0x8038]
    e830:	add    rax,QWORD PTR [r12+0x8028]
    e838:	movzx  r9d,WORD PTR [rax+0x14]
    e83d:	movzx  eax,WORD PTR [rax+0x1a]
    e841:	mov    ecx,r10d
    e844:	shl    r9d,0x10
    e848:	or     r9d,eax
    e84b:	jmp    e86e <try_commit+0x48e>
    e84d:	nop    DWORD PTR [rax]
    e850:	cmp    ecx,edx
    e852:	jne    e85c <try_commit+0x47c>
    e854:	test   ecx,ecx
    e856:	jne    f2e8 <try_commit+0xf08>
    e85c:	cmp    ecx,edx
    e85e:	je     effb <try_commit+0xc1b>
    e864:	mov    ecx,edx
    e866:	cmp    edi,ecx
    e868:	jg     eae6 <try_commit+0x706>
    e86e:	lea    eax,[rcx+rdi*1]
    e871:	mov    edx,eax
    e873:	shr    edx,0x1f
    e876:	add    edx,eax
    e878:	sar    edx,1
    e87a:	cmp    r10d,edx
    e87d:	jbe    ef60 <try_commit+0xb80>
    e883:	mov    r14d,DWORD PTR [r12+0x8050]
    e88b:	mov    eax,edx
    e88d:	mov    r11,QWORD PTR [r12+0x8040]
    e895:	imul   eax,r14d
    e899:	add    rax,r11
    e89c:	mov    r8d,DWORD PTR [rax]
    e89f:	mov    eax,DWORD PTR [rax+0x4]
    e8a2:	cmp    r8d,eax
    e8a5:	jae    ef80 <try_commit+0xba0>
    e8ab:	cmp    r9d,r8d
    e8ae:	jbe    e850 <try_commit+0x470>
    e8b0:	cmp    edi,edx
    e8b2:	je     eff0 <try_commit+0xc10>
    e8b8:	mov    edi,edx
    e8ba:	jmp    e866 <try_commit+0x486>
    e8bc:	nop    DWORD PTR [rax+0x0]
    e8c0:	mov    r9d,DWORD PTR [r13+0x804c]
    e8c7:	mov    edi,DWORD PTR [rbp+0x8]
    e8ca:	xor    ecx,ecx
    e8cc:	mov    edx,r9d
    e8cf:	jmp    e8f2 <try_commit+0x512>
    e8d1:	nop    DWORD PTR [rax+0x0]
    e8d8:	cmp    edx,eax
    e8da:	jne    e8e4 <try_commit+0x504>
    e8dc:	test   edx,edx
    e8de:	jne    f2e8 <try_commit+0xf08>
    e8e4:	cmp    edx,eax
    e8e6:	je     e94b <try_commit+0x56b>
    e8e8:	mov    edx,eax
    e8ea:	cmp    ecx,edx
    e8ec:	jg     eae6 <try_commit+0x706>
    e8f2:	lea    esi,[rcx+rdx*1]
    e8f5:	mov    eax,esi
    e8f7:	shr    eax,0x1f
    e8fa:	add    eax,esi
    e8fc:	sar    eax,1
    e8fe:	cmp    r9d,eax
    e901:	jbe    ef60 <try_commit+0xb80>
    e907:	mov    esi,DWORD PTR [r13+0x8050]
    e90e:	mov    ebx,eax
    e910:	mov    r11,QWORD PTR [r13+0x8040]
    e917:	imul   ebx,esi
    e91a:	add    rbx,r11
    e91d:	mov    r10d,DWORD PTR [rbx]
    e920:	mov    r12d,DWORD PTR [rbx+0x4]
    e924:	cmp    r10d,r12d
    e927:	jae    ef80 <try_commit+0xba0>
    e92d:	cmp    edi,r10d
    e930:	jbe    e8d8 <try_commit+0x4f8>
    e932:	cmp    ecx,eax
    e934:	je     e940 <try_commit+0x560>
    e936:	mov    ecx,eax
    e938:	jmp    e8ea <try_commit+0x50a>
    e93a:	nop    WORD PTR [rax+rax*1+0x0]
    e940:	cmp    edi,r12d
    e943:	jb     ec78 <try_commit+0x898>
    e949:	mov    ecx,edx
    e94b:	cmp    r9d,ecx
    e94e:	jbe    3775 <try_commit.cold.13>
    e954:	imul   ecx,esi
    e957:	lea    rbx,[r11+rcx*1]
    e95b:	cmp    edi,DWORD PTR [rbx]
    e95d:	jb     3775 <try_commit.cold.13>
    e963:	cmp    edi,DWORD PTR [rbx+0x4]
    e966:	jae    f528 <try_commit+0x1148>
    e96c:	mov    rax,QWORD PTR [rbx+0x18]
    e970:	mov    rsi,QWORD PTR [rbp+0x0]
    e974:	mov    QWORD PTR [rsp+0x10],rax
    e979:	test   rsi,rsi
    e97c:	je     f547 <try_commit+0x1167>
    e982:	mov    QWORD PTR [rbx+0x18],rsi
    e986:	mov    rdi,QWORD PTR [rsp+0x10]
    e98b:	call   35a0 <rename@plt>
    e990:	test   eax,eax
    e992:	jne    f480 <try_commit+0x10a0>
    e998:	test   BYTE PTR [rbx+0x20],0x4
    e99c:	je     ec50 <try_commit+0x870>
    e9a2:	mov    rdi,QWORD PTR [rbx+0x18]
    e9a6:	call   3180 <strlen@plt>
    e9ab:	mov    rdi,QWORD PTR [rsp+0x10]
    e9b0:	mov    rbp,rax
    e9b3:	mov    DWORD PTR [rsp+0x34],eax
    e9b7:	call   3180 <strlen@plt>
    e9bc:	mov    esi,ebp
    e9be:	sub    esi,eax
    e9c0:	mov    DWORD PTR [rsp+0x38],eax
    e9c4:	mov    eax,DWORD PTR [rbx+0x14]
    e9c7:	mov    DWORD PTR [rsp+0x3c],esi
    e9cb:	cmp    eax,DWORD PTR [r13+0x8034]
    e9d2:	jae    ef60 <try_commit+0xb80>
    e9d8:	mov    rsi,QWORD PTR [r13+0x8028]
    e9df:	mov    DWORD PTR [rsp],0x0
    e9e6:	mov    QWORD PTR [rsp+0x40],rbx
    e9eb:	mov    QWORD PTR [rsp+0x48],rsi
    e9f0:	mov    esi,eax
    e9f2:	imul   esi,DWORD PTR [r13+0x8038]
    e9fa:	mov    eax,DWORD PTR [rbx]
    e9fc:	mov    QWORD PTR [rsp+0x50],rsi
    ea01:	mov    DWORD PTR [rsp+0x18],eax
    ea05:	mov    eax,DWORD PTR [r13+0x8078]
    ea0c:	sub    eax,0x8
    ea0f:	cmp    DWORD PTR [rsp+0x18],eax
    ea13:	ja     ec50 <try_commit+0x870>
    ea19:	movsxd rcx,DWORD PTR [rsp]
    ea1d:	mov    rax,QWORD PTR [rsp+0x48]
    ea22:	shl    rcx,0x5
    ea26:	add    rcx,QWORD PTR [rsp+0x50]
    ea2b:	lea    rbx,[rax+rcx*1]
    ea2f:	nop
    ea30:	mov    rdi,rbx
    ea33:	call   ac80 <is_file>
    ea38:	test   al,al
    ea3a:	jne    ea5d <try_commit+0x67d>
    ea3c:	movzx  edx,BYTE PTR [rbx+0xb]
    ea40:	movzx  eax,BYTE PTR [rbx]
    ea43:	test   dl,0x10
    ea46:	je     ebc5 <try_commit+0x7e5>
    ea4c:	cmp    al,0xe5
    ea4e:	je     ebc5 <try_commit+0x7e5>
    ea54:	cmp    dl,0x28
    ea57:	jne    ec30 <try_commit+0x850>
    ea5d:	movzx  edx,WORD PTR [rbx+0x14]
    ea61:	movzx  eax,WORD PTR [rbx+0x1a]
    ea65:	xor    esi,esi
    ea67:	mov    r11d,DWORD PTR [r13+0x804c]
    ea6e:	shl    edx,0x10
    ea71:	or     edx,eax
    ea73:	mov    edi,r11d
    ea76:	jmp    ea9a <try_commit+0x6ba>
    ea78:	nop    DWORD PTR [rax+rax*1+0x0]
    ea80:	cmp    edi,eax
    ea82:	jne    ea8c <try_commit+0x6ac>
    ea84:	test   edi,edi
    ea86:	jne    f2e8 <try_commit+0xf08>
    ea8c:	cmp    edi,eax
    ea8e:	je     eb13 <try_commit+0x733>
    ea94:	mov    edi,eax
    ea96:	cmp    esi,edi
    ea98:	jg     eae6 <try_commit+0x706>
    ea9a:	lea    ecx,[rdi+rsi*1]
    ea9d:	mov    eax,ecx
    ea9f:	shr    eax,0x1f
    eaa2:	add    eax,ecx
    eaa4:	sar    eax,1
    eaa6:	cmp    r11d,eax
    eaa9:	jbe    ef60 <try_commit+0xb80>
    eaaf:	mov    r9d,DWORD PTR [r13+0x8050]
    eab6:	mov    r14d,eax
    eab9:	mov    rbp,QWORD PTR [r13+0x8040]
    eac0:	imul   r14d,r9d
    eac4:	add    r14,rbp
    eac7:	mov    r10d,DWORD PTR [r14]
    eaca:	mov    r12d,DWORD PTR [r14+0x4]
    eace:	cmp    r10d,r12d
    ead1:	jae    ef80 <try_commit+0xba0>
    ead7:	cmp    edx,r10d
    eada:	jbe    ea80 <try_commit+0x6a0>
    eadc:	cmp    esi,eax
    eade:	je     eb08 <try_commit+0x728>
    eae0:	mov    esi,eax
    eae2:	cmp    esi,edi
    eae4:	jle    ea9a <try_commit+0x6ba>
    eae6:	lea    rcx,[rip+0x11373]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    eaed:	mov    edx,0x465
    eaf2:	lea    rsi,[rip+0x109cd]        # 1f4c6 <desc_template.13939+0x206>
    eaf9:	lea    rdi,[rip+0x10a49]        # 1f549 <desc_template.13939+0x289>
    eb00:	call   3220 <__assert_fail@plt>
    eb05:	nop    DWORD PTR [rax]
    eb08:	cmp    edx,r12d
    eb0b:	jb     ec40 <try_commit+0x860>
    eb11:	mov    esi,edi
    eb13:	cmp    r11d,esi
    eb16:	jbe    3775 <try_commit.cold.13>
    eb1c:	imul   esi,r9d
    eb20:	lea    r14,[rbp+rsi*1+0x0]
    eb25:	cmp    edx,DWORD PTR [r14]
    eb28:	jb     3775 <try_commit.cold.13>
    eb2e:	cmp    edx,DWORD PTR [r14+0x4]
    eb32:	jae    f528 <try_commit+0x1148>
    eb38:	mov    rdi,QWORD PTR [r14+0x18]
    eb3c:	call   3180 <strlen@plt>
    eb41:	mov    esi,DWORD PTR [rsp+0x3c]
    eb45:	lea    ebp,[rsi+rax*1+0x1]
    eb49:	movsxd r9,ebp
    eb4c:	mov    rdi,r9
    eb4f:	mov    QWORD PTR [rsp+0x28],r9
    eb54:	call   4cb0 <qemu_malloc>
    eb59:	movsxd r12,DWORD PTR [rsp+0x38]
    eb5e:	mov    rdi,QWORD PTR [r14+0x18]
    eb62:	mov    r15,rax
    eb65:	mov    rax,QWORD PTR [rsp+0x40]
    eb6a:	mov    rdx,r12
    eb6d:	mov    r10,QWORD PTR [rax+0x18]
    eb71:	mov    rsi,r10
    eb74:	mov    QWORD PTR [rsp+0x20],r10
    eb79:	call   30d0 <strncmp@plt>
    eb7e:	mov    r10,QWORD PTR [rsp+0x20]
    eb83:	mov    r9,QWORD PTR [rsp+0x28]
    eb88:	test   eax,eax
    eb8a:	jne    f509 <try_commit+0x1129>
    eb90:	mov    rdx,r10
    eb93:	mov    rsi,r9
    eb96:	mov    rdi,r15
    eb99:	call   48a0 <pstrcpy>
    eb9e:	movsxd rdi,DWORD PTR [rsp+0x34]
    eba3:	mov    rdx,QWORD PTR [r14+0x18]
    eba7:	sub    ebp,edi
    eba9:	add    rdx,r12
    ebac:	add    rdi,r15
    ebaf:	movsxd rsi,ebp
    ebb2:	call   48a0 <pstrcpy>
    ebb7:	mov    esi,DWORD PTR [r14]
    ebba:	mov    rdx,r15
    ebbd:	mov    rdi,r13
    ebc0:	call   bc90 <schedule_rename>
    ebc5:	mov    ecx,DWORD PTR [r13+0x805c]
    ebcc:	add    DWORD PTR [rsp],0x1
    ebd0:	xor    edx,edx
    ebd2:	add    rbx,0x20
    ebd6:	mov    eax,DWORD PTR [rsp]
    ebd9:	shl    ecx,0x4
    ebdc:	div    ecx
    ebde:	test   edx,edx
    ebe0:	jne    ea30 <try_commit+0x650>
    ebe6:	mov    eax,DWORD PTR [r13+0x800c]
    ebed:	cmp    eax,0x20
    ebf0:	je     efc0 <try_commit+0xbe0>
    ebf6:	cmp    eax,0x10
    ebf9:	jne    ee20 <try_commit+0xa40>
    ebff:	mov    eax,DWORD PTR [rsp+0x18]
    ec03:	cmp    eax,DWORD PTR [r13+0x801c]
    ec0a:	jae    ef60 <try_commit+0xb80>
    ec10:	mov    ebx,eax
    ec12:	imul   ebx,DWORD PTR [r13+0x8020]
    ec1a:	mov    rax,QWORD PTR [r13+0x8010]
    ec21:	movzx  eax,WORD PTR [rax+rbx*1]
    ec25:	mov    DWORD PTR [rsp+0x18],eax
    ec29:	jmp    ea05 <try_commit+0x625>
    ec2e:	xchg   ax,ax
    ec30:	cmp    al,0x2e
    ec32:	jne    ea5d <try_commit+0x67d>
    ec38:	jmp    ebc5 <try_commit+0x7e5>
    ec3a:	nop    WORD PTR [rax+rax*1+0x0]
    ec40:	cmp    edx,r10d
    ec43:	jae    eb38 <try_commit+0x758>
    ec49:	jmp    3775 <try_commit.cold.13>
    ec4e:	xchg   ax,ax
    ec50:	mov    rdi,QWORD PTR [rsp+0x10]
    ec55:	call   3070 <free@plt>
    ec5a:	mov    esi,DWORD PTR [rsp+0x8]
    ec5e:	mov    rdi,QWORD PTR [rsp+0x58]
    ec63:	call   ae00 <array_remove>
    ec68:	mov    eax,DWORD PTR [r13+0x80d4]
    ec6f:	jmp    e72c <try_commit+0x34c>
    ec74:	nop    DWORD PTR [rax+0x0]
    ec78:	cmp    edi,r10d
    ec7b:	jae    e96c <try_commit+0x58c>
    ec81:	jmp    3775 <try_commit.cold.13>
    ec86:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ec90:	mov    rdi,QWORD PTR [rbp+0x0]
    ec94:	mov    esi,0x1ed
    ec99:	call   3100 <mkdir@plt>
    ec9e:	mov    ebx,eax
    eca0:	test   eax,eax
    eca2:	jne    f4e0 <try_commit+0x1100>
    eca8:	mov    esi,DWORD PTR [rbp+0x8]
    ecab:	mov    rdi,r13
    ecae:	lea    edx,[rsi+0x1]
    ecb1:	call   b060 <insert_mapping>
    ecb6:	mov    r15,rax
    ecb9:	test   rax,rax
    ecbc:	je     f37e <try_commit+0xf9e>
    ecc2:	mov    QWORD PTR [rax+0x20],0x4
    ecca:	mov    rax,QWORD PTR [rbp+0x0]
    ecce:	mov    QWORD PTR [r15+0x18],rax
    ecd2:	mov    r12d,DWORD PTR [r13+0x8034]
    ecd9:	test   r12d,r12d
    ecdc:	je     f5c3 <try_commit+0x11e3>
    ece2:	mov    edx,DWORD PTR [r13+0x805c]
    ece9:	mov    esi,r12d
    ecec:	mov    rdi,r13
    ecef:	shl    edx,0x4
    ecf2:	call   b370 <insert_direntries>
    ecf7:	mov    DWORD PTR [r15+0x14],r12d
    ecfb:	mov    r14,QWORD PTR [rbp+0x0]
    ecff:	mov    esi,0x2f
    ed04:	mov    ebp,0xffffffff
    ed09:	mov    rdi,r14
    ed0c:	call   3200 <strrchr@plt>
    ed11:	mov    r12,rax
    ed14:	test   rax,rax
    ed17:	je     ed33 <try_commit+0x953>
    ed19:	mov    rdi,r14
    ed1c:	call   3180 <strlen@plt>
    ed21:	lea    rdi,[r12+0x1]
    ed26:	mov    rbp,rax
    ed29:	call   3180 <strlen@plt>
    ed2e:	sub    ebp,0x1
    ed31:	sub    ebp,eax
    ed33:	mov    eax,DWORD PTR [r13+0x804c]
    ed3a:	mov    DWORD PTR [rsp],eax
    ed3d:	test   eax,eax
    ed3f:	je     f5a4 <try_commit+0x11c4>
    ed45:	mov    rax,QWORD PTR [r13+0x8040]
    ed4c:	xor    r14d,r14d
    ed4f:	mov    QWORD PTR [rsp+0x18],r13
    ed54:	movsxd rbp,ebp
    ed57:	mov    QWORD PTR [rsp+0x10],rax
    ed5c:	mov    eax,DWORD PTR [r13+0x8050]
    ed63:	mov    r13,r15
    ed66:	mov    r15d,ebx
    ed69:	mov    ebx,r14d
    ed6c:	mov    r14d,eax
    ed6f:	jmp    ed89 <try_commit+0x9a9>
    ed71:	nop    DWORD PTR [rax+0x0]
    ed78:	add    r15d,0x1
    ed7c:	add    ebx,r14d
    ed7f:	cmp    r15d,DWORD PTR [rsp]
    ed83:	je     f5a4 <try_commit+0x11c4>
    ed89:	mov    eax,ebx
    ed8b:	add    rax,QWORD PTR [rsp+0x10]
    ed90:	mov    edx,DWORD PTR [rax+0xc]
    ed93:	test   edx,edx
    ed95:	jns    ed78 <try_commit+0x998>
    ed97:	cmp    r13,rax
    ed9a:	je     ed78 <try_commit+0x998>
    ed9c:	mov    r12,QWORD PTR [rax+0x18]
    eda0:	mov    rsi,QWORD PTR [r13+0x18]
    eda4:	mov    rdx,rbp
    eda7:	mov    rdi,r12
    edaa:	call   30d0 <strncmp@plt>
    edaf:	test   eax,eax
    edb1:	jne    ed78 <try_commit+0x998>
    edb3:	mov    rdi,r12
    edb6:	call   3180 <strlen@plt>
    edbb:	cmp    rbp,rax
    edbe:	jne    ed78 <try_commit+0x998>
    edc0:	mov    ebx,r15d
    edc3:	mov    r15,r13
    edc6:	mov    esi,DWORD PTR [rsp+0x8]
    edca:	mov    r13,QWORD PTR [rsp+0x18]
    edcf:	mov    DWORD PTR [r15+0x10],ebx
    edd3:	mov    rdi,QWORD PTR [rsp+0x58]
    edd8:	call   ae00 <array_remove>
    eddd:	mov    eax,DWORD PTR [r13+0x80d4]
    ede4:	jmp    e72c <try_commit+0x34c>
    ede9:	nop    DWORD PTR [rax+0x0]
    edf0:	mov    edx,0x13
    edf5:	mov    rcx,QWORD PTR [rip+0x19704]        # 28500 <stderr@@GLIBC_2.2.5>
    edfc:	mov    esi,0x1
    ee01:	lea    rdi,[rip+0x1083b]        # 1f643 <desc_template.13939+0x383>
    ee08:	mov    ebx,0xffffffff
    ee0d:	call   3610 <fwrite@plt>
    ee12:	jmp    e665 <try_commit+0x285>
    ee17:	nop    WORD PTR [rax+rax*1+0x0]
    ee20:	mov    ebx,DWORD PTR [rsp+0x18]
    ee24:	mov    rdx,QWORD PTR [r13+0x8010]
    ee2b:	lea    eax,[rbx+rbx*2]
    ee2e:	lea    ecx,[rbx*4+0x0]
    ee35:	shr    eax,1
    ee37:	and    ecx,0x4
    ee3a:	movzx  eax,WORD PTR [rdx+rax*1]
    ee3e:	sar    eax,cl
    ee40:	mov    ebx,eax
    ee42:	and    ebx,0xfff
    ee48:	mov    DWORD PTR [rsp+0x18],ebx
    ee4c:	jmp    ea05 <try_commit+0x625>
    ee51:	nop    DWORD PTR [rax+0x0]
    ee58:	test   eax,eax
    ee5a:	je     f585 <try_commit+0x11a5>
    ee60:	cmp    eax,0x2
    ee63:	jne    eeed <try_commit+0xb0d>
    ee69:	mov    r9d,DWORD PTR [r12+0x804c]
    ee71:	mov    esi,DWORD PTR [rbp+0x8]
    ee74:	xor    edi,edi
    ee76:	mov    eax,r9d
    ee79:	jmp    ee9e <try_commit+0xabe>
    ee7b:	nop    DWORD PTR [rax+rax*1+0x0]
    ee80:	cmp    eax,edx
    ee82:	jne    ee8c <try_commit+0xaac>
    ee84:	test   eax,eax
    ee86:	jne    f2e8 <try_commit+0xf08>
    ee8c:	cmp    eax,edx
    ee8e:	je     f1e7 <try_commit+0xe07>
    ee94:	mov    eax,edx
    ee96:	cmp    edi,eax
    ee98:	jg     eae6 <try_commit+0x706>
    ee9e:	lea    ecx,[rax+rdi*1]
    eea1:	mov    edx,ecx
    eea3:	shr    edx,0x1f
    eea6:	add    edx,ecx
    eea8:	sar    edx,1
    eeaa:	cmp    r9d,edx
    eead:	jbe    ef60 <try_commit+0xb80>
    eeb3:	mov    r10d,DWORD PTR [r12+0x8050]
    eebb:	mov    ecx,edx
    eebd:	mov    r14,QWORD PTR [r12+0x8040]
    eec5:	imul   ecx,r10d
    eec9:	add    rcx,r14
    eecc:	mov    r8d,DWORD PTR [rcx]
    eecf:	mov    r15d,DWORD PTR [rcx+0x4]
    eed3:	cmp    r8d,r15d
    eed6:	jae    ef80 <try_commit+0xba0>
    eedc:	cmp    esi,r8d
    eedf:	jbe    ee80 <try_commit+0xaa0>
    eee1:	cmp    edi,edx
    eee3:	je     f1e0 <try_commit+0xe00>
    eee9:	mov    edi,edx
    eeeb:	jmp    ee96 <try_commit+0xab6>
    eeed:	cmp    eax,0x3
    eef0:	je     f585 <try_commit+0x11a5>
    eef6:	lea    rcx,[rip+0x10e53]        # 1fd50 <__PRETTY_FUNCTION__.14661>
    eefd:	mov    edx,0x9e3
    ef02:	lea    rsi,[rip+0x105bd]        # 1f4c6 <desc_template.13939+0x206>
    ef09:	lea    rdi,[rip+0x10650]        # 1f560 <desc_template.13939+0x2a0>
    ef10:	call   3220 <__assert_fail@plt>
    ef15:	nop    DWORD PTR [rax]
    ef18:	shl    ecx,0x9
    ef1b:	movsxd rbx,ecx
    ef1e:	mov    rdi,rbx
    ef21:	call   4cb0 <qemu_malloc>
    ef26:	mov    rsi,QWORD PTR [r12+0x8010]
    ef2e:	mov    rdx,rbx
    ef31:	mov    QWORD PTR [r12+0x80b8],rax
    ef39:	mov    rdi,rax
    ef3c:	call   33b0 <memcpy@plt>
    ef41:	mov    ecx,DWORD PTR [r12+0x8060]
    ef49:	mov    rdx,QWORD PTR [r12+0x80b8]
    ef51:	jmp    e439 <try_commit+0x59>
    ef56:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ef60:	lea    rcx,[rip+0x10ee9]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    ef67:	mov    edx,0x60
    ef6c:	lea    rsi,[rip+0x10553]        # 1f4c6 <desc_template.13939+0x206>
    ef73:	lea    rdi,[rip+0x10581]        # 1f4fb <desc_template.13939+0x23b>
    ef7a:	call   3220 <__assert_fail@plt>
    ef7f:	nop
    ef80:	lea    rcx,[rip+0x10ed9]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    ef87:	mov    edx,0x45a
    ef8c:	lea    rsi,[rip+0x10533]        # 1f4c6 <desc_template.13939+0x206>
    ef93:	lea    rdi,[rip+0x10575]        # 1f50f <desc_template.13939+0x24f>
    ef9a:	call   3220 <__assert_fail@plt>
    ef9f:	nop
    efa0:	call   3260 <close@plt>
    efa5:	mov    eax,DWORD PTR [r12+0x80d4]
    efad:	mov    DWORD PTR [r12+0x807c],0x0
    efb9:	jmp    e708 <try_commit+0x328>
    efbe:	xchg   ax,ax
    efc0:	mov    eax,DWORD PTR [rsp+0x18]
    efc4:	cmp    DWORD PTR [r13+0x801c],eax
    efcb:	jbe    ef60 <try_commit+0xb80>
    efcd:	mov    ebx,eax
    efcf:	imul   ebx,DWORD PTR [r13+0x8020]
    efd7:	mov    rax,QWORD PTR [r13+0x8010]
    efde:	mov    eax,DWORD PTR [rax+rbx*1]
    efe1:	mov    DWORD PTR [rsp+0x18],eax
    efe5:	jmp    ea05 <try_commit+0x625>
    efea:	nop    WORD PTR [rax+rax*1+0x0]
    eff0:	cmp    r9d,eax
    eff3:	jb     f340 <try_commit+0xf60>
    eff9:	mov    edi,ecx
    effb:	cmp    r10d,edi
    effe:	jbe    f320 <try_commit+0xf40>
    f004:	imul   edi,r14d
    f008:	add    r11,rdi
    f00b:	mov    eax,DWORD PTR [r11]
    f00e:	cmp    r9d,eax
    f011:	jb     f320 <try_commit+0xf40>
    f017:	cmp    r9d,DWORD PTR [r11+0x4]
    f01b:	jae    f528 <try_commit+0x1148>
    f021:	cmp    r9d,eax
    f024:	jne    f345 <try_commit+0xf65>
    f02a:	cmp    QWORD PTR [rbp+0x0],0x0
    f02f:	jne    f622 <try_commit+0x1242>
    f035:	mov    edx,DWORD PTR [rbp+0xc]
    f038:	mov    rdi,r12
    f03b:	add    r13d,0x1
    f03f:	mov    ebp,r13d
    f042:	call   c3d0 <commit_one_file>
    f047:	test   eax,eax
    f049:	je     e7d6 <try_commit+0x3f6>
    f04f:	mov    ebx,DWORD PTR [rsp]
    f052:	mov    r11d,DWORD PTR [r12+0x80d4]
    f05a:	mov    r15d,0xfffffffd
    f060:	cmp    ebp,r11d
    f063:	ja     f641 <try_commit+0x1261>
    f069:	mov    ecx,r11d
    f06c:	sub    ecx,0x1
    f06f:	js     f5e2 <try_commit+0x1202>
    f075:	mov    eax,0x1
    f07a:	je     f0fa <try_commit+0xd1a>
    f07c:	mov    eax,DWORD PTR [r12+0x80d8]
    f084:	mov    r13,QWORD PTR [r12+0x80c8]
    f08c:	imul   ecx,eax
    f08f:	imul   eax,ebp
    f092:	movsxd rcx,ecx
    f095:	movsxd r14,eax
    f098:	lea    rsi,[r13+rcx*1+0x0]
    f09d:	mov    QWORD PTR [rsp+0x10],rcx
    f0a2:	mov    rdi,r14
    f0a5:	mov    QWORD PTR [rsp],rsi
    f0a9:	call   4cb0 <qemu_malloc>
    f0ae:	mov    rdx,r14
    f0b1:	mov    rsi,r13
    f0b4:	mov    rdi,rax
    f0b7:	mov    QWORD PTR [rsp+0x8],rax
    f0bc:	call   33b0 <memcpy@plt>
    f0c1:	mov    rcx,QWORD PTR [rsp+0x10]
    f0c6:	lea    rsi,[r13+r14*1+0x0]
    f0cb:	mov    rdi,r13
    f0ce:	mov    rdx,rcx
    f0d1:	call   3530 <memmove@plt>
    f0d6:	mov    rdx,r14
    f0d9:	mov    r14,QWORD PTR [rsp+0x8]
    f0de:	mov    rdi,QWORD PTR [rsp]
    f0e2:	mov    rsi,r14
    f0e5:	call   33b0 <memcpy@plt>
    f0ea:	mov    rdi,r14
    f0ed:	call   3070 <free@plt>
    f0f2:	mov    eax,DWORD PTR [r12+0x80d4]
    f0fa:	sub    eax,ebp
    f0fc:	mov    DWORD PTR [r12+0x80d4],eax
    f104:	test   r15d,r15d
    f107:	jne    f5e6 <try_commit+0x1206>
    f10d:	mov    DWORD PTR [rsp],ebx
    f110:	cmp    DWORD PTR [r12+0x804c],0x1
    f119:	jbe    f435 <try_commit+0x1055>
    f11f:	xor    ebp,ebp
    f121:	xor    r13d,r13d
    f124:	mov    r14d,0x1
    f12a:	jmp    f165 <try_commit+0xd85>
    f12c:	nop    DWORD PTR [rax+0x0]
    f130:	test   cl,cl
    f132:	je     f1af <try_commit+0xdcf>
    f134:	mov    rdi,QWORD PTR [rax+0x18]
    f138:	call   30c0 <unlink@plt>
    f13d:	test   eax,eax
    f13f:	jne    f490 <try_commit+0x10b0>
    f145:	add    ebp,0x1
    f148:	mov    esi,r14d
    f14b:	mov    rdi,r12
    f14e:	call   af50 <remove_mapping>
    f153:	add    r14d,0x1
    f157:	cmp    DWORD PTR [r12+0x804c],r14d
    f15f:	jbe    f428 <try_commit+0x1048>
    f165:	mov    eax,r14d
    f168:	imul   eax,DWORD PTR [r12+0x8050]
    f171:	add    rax,QWORD PTR [r12+0x8040]
    f179:	mov    edx,DWORD PTR [rax+0x20]
    f17c:	test   dl,0x10
    f17f:	je     f153 <try_commit+0xd73>
    f181:	mov    ecx,DWORD PTR [rax+0x8]
    f184:	mov    r15d,DWORD PTR [r12+0x8034]
    f18c:	cmp    ecx,r15d
    f18f:	jae    ef60 <try_commit+0xb80>
    f195:	imul   ecx,DWORD PTR [r12+0x8038]
    f19e:	mov    rsi,QWORD PTR [r12+0x8028]
    f1a6:	movzx  ecx,BYTE PTR [rsi+rcx*1]
    f1aa:	cmp    cl,0xe5
    f1ad:	jne    f130 <try_commit+0xd50>
    f1af:	and    edx,0x4
    f1b2:	je     f148 <try_commit+0xd68>
    f1b4:	mov    rdi,QWORD PTR [rax+0x18]
    f1b8:	mov    ebx,DWORD PTR [rax+0x14]
    f1bb:	call   3170 <rmdir@plt>
    f1c0:	test   eax,eax
    f1c2:	jns    f3c0 <try_commit+0xfe0>
    f1c8:	call   30b0 <__errno_location@plt>
    f1cd:	cmp    DWORD PTR [rax],0x27
    f1d0:	jne    f490 <try_commit+0x10b0>
    f1d6:	add    r13d,0x1
    f1da:	jmp    f153 <try_commit+0xd73>
    f1df:	nop
    f1e0:	cmp    esi,r15d
    f1e3:	jb     f1fb <try_commit+0xe1b>
    f1e5:	mov    edi,eax
    f1e7:	cmp    r9d,edi
    f1ea:	jbe    f310 <try_commit+0xf30>
    f1f0:	imul   edi,r10d
    f1f4:	lea    rcx,[r14+rdi*1]
    f1f8:	mov    r8d,DWORD PTR [rcx]
    f1fb:	cmp    esi,r8d
    f1fe:	jb     f310 <try_commit+0xf30>
    f204:	cmp    esi,DWORD PTR [rcx+0x4]
    f207:	jae    f528 <try_commit+0x1148>
    f20d:	mov    r9d,DWORD PTR [r12+0x8034]
    f215:	test   r9d,r9d
    f218:	je     f261 <try_commit+0xe81>
    f21a:	mov    r15,QWORD PTR [r12+0x8028]
    f222:	mov    r10d,DWORD PTR [r12+0x8038]
    f22a:	xor    r14d,r14d
    f22d:	xor    ebx,ebx
    f22f:	nop
    f230:	mov    r8d,ebx
    f233:	add    r8,r15
    f236:	mov    rdi,r8
    f239:	call   ac80 <is_file>
    f23e:	test   al,al
    f240:	je     f255 <try_commit+0xe75>
    f242:	movzx  eax,WORD PTR [r8+0x14]
    f247:	movzx  edi,WORD PTR [r8+0x1a]
    f24c:	shl    eax,0x10
    f24f:	or     eax,edi
    f251:	cmp    esi,eax
    f253:	je     f278 <try_commit+0xe98>
    f255:	add    r14d,0x1
    f259:	add    ebx,r10d
    f25c:	cmp    r14d,r9d
    f25f:	jne    f230 <try_commit+0xe50>
    f261:	mov    ebp,r13d
    f264:	mov    ebx,DWORD PTR [rsp]
    f267:	mov    r15d,0xfffffffa
    f26d:	add    ebp,0x1
    f270:	jmp    f060 <try_commit+0xc80>
    f275:	nop    DWORD PTR [rax]
    f278:	test   rcx,rcx
    f27b:	je     f284 <try_commit+0xea4>
    f27d:	cmp    esi,DWORD PTR [rcx]
    f27f:	je     f292 <try_commit+0xeb2>
    f281:	mov    DWORD PTR [rcx+0x4],esi
    f284:	lea    edx,[rsi+0x1]
    f287:	mov    rdi,r12
    f28a:	call   b060 <insert_mapping>
    f28f:	mov    rcx,rax
    f292:	mov    rax,QWORD PTR [rbp+0x0]
    f296:	test   rax,rax
    f299:	je     f660 <try_commit+0x1280>
    f29f:	mov    QWORD PTR [rcx+0x18],rax
    f2a3:	xor    edx,edx
    f2a5:	mov    esi,r14d
    f2a8:	mov    rdi,r12
    f2ab:	mov    QWORD PTR [rcx+0x20],0x1
    f2b3:	add    r13d,0x1
    f2b7:	mov    DWORD PTR [rcx+0x10],0x0
    f2be:	mov    ebp,r13d
    f2c1:	call   c3d0 <commit_one_file>
    f2c6:	test   eax,eax
    f2c8:	je     e7d6 <try_commit+0x3f6>
    f2ce:	mov    ebx,DWORD PTR [rsp]
    f2d1:	mov    r11d,DWORD PTR [r12+0x80d4]
    f2d9:	mov    r15d,0xfffffff9
    f2df:	jmp    f060 <try_commit+0xc80>
    f2e4:	nop    DWORD PTR [rax+0x0]
    f2e8:	lea    rcx,[rip+0x10b71]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    f2ef:	mov    edx,0x45c
    f2f4:	lea    rsi,[rip+0x101cb]        # 1f4c6 <desc_template.13939+0x206>
    f2fb:	lea    rdi,[rip+0x1022b]        # 1f52d <desc_template.13939+0x26d>
    f302:	call   3220 <__assert_fail@plt>
    f307:	nop    WORD PTR [rax+rax*1+0x0]
    f310:	xor    ecx,ecx
    f312:	jmp    f20d <try_commit+0xe2d>
    f317:	nop    WORD PTR [rax+rax*1+0x0]
    f320:	lea    rcx,[rip+0x10a29]        # 1fd50 <__PRETTY_FUNCTION__.14661>
    f327:	mov    edx,0x9b2
    f32c:	lea    rsi,[rip+0x10193]        # 1f4c6 <desc_template.13939+0x206>
    f333:	lea    rdi,[rip+0x10236]        # 1f570 <desc_template.13939+0x2b0>
    f33a:	call   3220 <__assert_fail@plt>
    f33f:	nop
    f340:	cmp    r9d,r8d
    f343:	jb     f320 <try_commit+0xf40>
    f345:	lea    rcx,[rip+0x10a04]        # 1fd50 <__PRETTY_FUNCTION__.14661>
    f34c:	mov    edx,0x9b3
    f351:	lea    rsi,[rip+0x1016e]        # 1f4c6 <desc_template.13939+0x206>
    f358:	lea    rdi,[rip+0x1032d]        # 1f68c <desc_template.13939+0x3cc>
    f35f:	call   3220 <__assert_fail@plt>
    f364:	nop    DWORD PTR [rax+0x0]
    f368:	call   3260 <close@plt>
    f36d:	mov    DWORD PTR [r12+0x807c],0x0
    f379:	jmp    e7c4 <try_commit+0x3e4>
    f37e:	mov    ecx,0xfffffffa
    f383:	mov    rdi,QWORD PTR [rip+0x19176]        # 28500 <stderr@@GLIBC_2.2.5>
    f38a:	lea    rdx,[rip+0x10340]        # 1f6d1 <desc_template.13939+0x411>
    f391:	mov    esi,0x1
    f396:	xor    eax,eax
    f398:	call   3630 <__fprintf_chk@plt>
    f39d:	lea    rcx,[rip+0x10a2c]        # 1fdd0 <__PRETTY_FUNCTION__.14706>
    f3a4:	mov    edx,0xa3b
    f3a9:	lea    rsi,[rip+0x10116]        # 1f4c6 <desc_template.13939+0x206>
    f3b0:	lea    rdi,[rip+0x101a9]        # 1f560 <desc_template.13939+0x2a0>
    f3b7:	call   3220 <__assert_fail@plt>
    f3bc:	nop    DWORD PTR [rax+0x0]
    f3c0:	mov    edi,DWORD PTR [r12+0x804c]
    f3c8:	cmp    edi,0x1
    f3cb:	jbe    f40b <try_commit+0x102b>
    f3cd:	mov    r8d,DWORD PTR [r12+0x8050]
    f3d5:	mov    r9,QWORD PTR [r12+0x8040]
    f3dd:	mov    edx,0x1
    f3e2:	mov    ecx,r8d
    f3e5:	nop    DWORD PTR [rax]
    f3e8:	mov    eax,ecx
    f3ea:	add    rax,r9
    f3ed:	test   BYTE PTR [rax+0x20],0x4
    f3f1:	je     f401 <try_commit+0x1021>
    f3f3:	mov    eax,DWORD PTR [rax+0x14]
    f3f6:	cmp    r15d,eax
    f3f9:	jle    f401 <try_commit+0x1021>
    f3fb:	cmp    ebx,eax
    f3fd:	cmovl  r15d,eax
    f401:	add    edx,0x1
    f404:	add    ecx,r8d
    f407:	cmp    edx,edi
    f409:	jne    f3e8 <try_commit+0x1008>
    f40b:	mov    edx,r15d
    f40e:	mov    esi,ebx
    f410:	mov    rdi,r12
    f413:	add    ebp,0x1
    f416:	sub    edx,ebx
    f418:	call   b440 <remove_direntries>
    f41d:	jmp    f148 <try_commit+0xd68>
    f422:	nop    WORD PTR [rax+rax*1+0x0]
    f428:	test   ebp,ebp
    f42a:	je     f435 <try_commit+0x1055>
    f42c:	test   r13d,r13d
    f42f:	jne    f110 <try_commit+0xd30>
    f435:	mov    rdi,QWORD PTR [r12+0x80b0]
    f43d:	mov    ebx,DWORD PTR [rsp]
    f440:	mov    rax,QWORD PTR [rdi+0x38]
    f444:	call   QWORD PTR [rax+0x58]
    f447:	mov    edx,DWORD PTR [r12+0x806c]
    f44f:	xor    esi,esi
    f451:	mov    eax,DWORD PTR [r12+0x8070]
    f459:	mov    ecx,DWORD PTR [r12+0x805c]
    f461:	mov    rdi,QWORD PTR [r12+0x80c0]
    f469:	sub    rax,rdx
    f46c:	cqo    
    f46e:	idiv   rcx
    f471:	mov    edx,eax
    f473:	call   3240 <memset@plt>
    f478:	jmp    e665 <try_commit+0x285>
    f47d:	nop    DWORD PTR [rax]
    f480:	mov    ecx,0xfffffffe
    f485:	jmp    f383 <try_commit+0xfa3>
    f48a:	nop    WORD PTR [rax+rax*1+0x0]
    f490:	mov    rcx,QWORD PTR [rip+0x19069]        # 28500 <stderr@@GLIBC_2.2.5>
    f497:	mov    edx,0xf
    f49c:	mov    esi,0x1
    f4a1:	lea    rdi,[rip+0x10219]        # 1f6c1 <desc_template.13939+0x401>
    f4a8:	call   3610 <fwrite@plt>
    f4ad:	lea    rcx,[rip+0x1091c]        # 1fdd0 <__PRETTY_FUNCTION__.14706>
    f4b4:	mov    edx,0xa54
    f4b9:	lea    rsi,[rip+0x10006]        # 1f4c6 <desc_template.13939+0x206>
    f4c0:	lea    rdi,[rip+0x10099]        # 1f560 <desc_template.13939+0x2a0>
    f4c7:	call   3220 <__assert_fail@plt>
    f4cc:	mov    ebx,DWORD PTR [rsp]
    f4cf:	test   r13d,r13d
    f4d2:	je     f10d <try_commit+0xd2d>
    f4d8:	xor    r15d,r15d
    f4db:	jmp    f060 <try_commit+0xc80>
    f4e0:	mov    ecx,0xfffffffb
    f4e5:	jmp    f383 <try_commit+0xfa3>
    f4ea:	lea    rcx,[rip+0x1093f]        # 1fe30 <__PRETTY_FUNCTION__.14325>
    f4f1:	mov    edx,0x564
    f4f6:	lea    rsi,[rip+0xffc9]        # 1f4c6 <desc_template.13939+0x206>
    f4fd:	lea    rdi,[rip+0x10164]        # 1f668 <desc_template.13939+0x3a8>
    f504:	call   3220 <__assert_fail@plt>
    f509:	lea    rcx,[rip+0x108a0]        # 1fdb0 <__PRETTY_FUNCTION__.14627>
    f510:	mov    edx,0x95c
    f515:	lea    rsi,[rip+0xffaa]        # 1f4c6 <desc_template.13939+0x206>
    f51c:	lea    rdi,[rip+0x10655]        # 1fb78 <desc_template.13939+0x8b8>
    f523:	call   3220 <__assert_fail@plt>
    f528:	lea    rcx,[rip+0x10951]        # 1fe80 <__PRETTY_FUNCTION__.14257>
    f52f:	mov    edx,0x477
    f534:	lea    rsi,[rip+0xff8b]        # 1f4c6 <desc_template.13939+0x206>
    f53b:	lea    rdi,[rip+0x102de]        # 1f820 <desc_template.13939+0x560>
    f542:	call   3220 <__assert_fail@plt>
    f547:	lea    rcx,[rip+0x10862]        # 1fdb0 <__PRETTY_FUNCTION__.14627>
    f54e:	mov    edx,0x943
    f553:	lea    rsi,[rip+0xff6c]        # 1f4c6 <desc_template.13939+0x206>
    f55a:	lea    rdi,[rip+0x1011c]        # 1f67d <desc_template.13939+0x3bd>
    f561:	call   3220 <__assert_fail@plt>
    f566:	lea    rcx,[rip+0x108d3]        # 1fe40 <__PRETTY_FUNCTION__.14480>
    f56d:	mov    edx,0x760
    f572:	lea    rsi,[rip+0xff4d]        # 1f4c6 <desc_template.13939+0x206>
    f579:	lea    rdi,[rip+0x100d7]        # 1f657 <desc_template.13939+0x397>
    f580:	call   3220 <__assert_fail@plt>
    f585:	lea    rcx,[rip+0x107c4]        # 1fd50 <__PRETTY_FUNCTION__.14661>
    f58c:	mov    edx,0x9a9
    f591:	lea    rsi,[rip+0xff2e]        # 1f4c6 <desc_template.13939+0x206>
    f598:	lea    rdi,[rip+0xffc1]        # 1f560 <desc_template.13939+0x2a0>
    f59f:	call   3220 <__assert_fail@plt>
    f5a4:	lea    rcx,[rip+0x10805]        # 1fdb0 <__PRETTY_FUNCTION__.14627>
    f5ab:	mov    edx,0x990
    f5b0:	lea    rsi,[rip+0xff0f]        # 1f4c6 <desc_template.13939+0x206>
    f5b7:	lea    rdi,[rip+0x10130]        # 1f6ee <desc_template.13939+0x42e>
    f5be:	call   3220 <__assert_fail@plt>
    f5c3:	lea    rcx,[rip+0x107e6]        # 1fdb0 <__PRETTY_FUNCTION__.14627>
    f5ca:	mov    edx,0x982
    f5cf:	lea    rsi,[rip+0xfef0]        # 1f4c6 <desc_template.13939+0x206>
    f5d6:	lea    rdi,[rip+0x100ad]        # 1f68a <desc_template.13939+0x3ca>
    f5dd:	call   3220 <__assert_fail@plt>
    f5e2:	or     r15d,0xffffffff
    f5e6:	mov    rdi,QWORD PTR [rip+0x18f13]        # 28500 <stderr@@GLIBC_2.2.5>
    f5ed:	mov    ecx,r15d
    f5f0:	mov    esi,0x1
    f5f5:	xor    eax,eax
    f5f7:	lea    rdx,[rip+0x100a6]        # 1f6a4 <desc_template.13939+0x3e4>
    f5fe:	call   3630 <__fprintf_chk@plt>
    f603:	lea    rcx,[rip+0x107c6]        # 1fdd0 <__PRETTY_FUNCTION__.14706>
    f60a:	mov    edx,0xa4d
    f60f:	lea    rsi,[rip+0xfeb0]        # 1f4c6 <desc_template.13939+0x206>
    f616:	lea    rdi,[rip+0xff43]        # 1f560 <desc_template.13939+0x2a0>
    f61d:	call   3220 <__assert_fail@plt>
    f622:	lea    rcx,[rip+0x10727]        # 1fd50 <__PRETTY_FUNCTION__.14661>
    f629:	mov    edx,0x9b4
    f62e:	lea    rsi,[rip+0xfe91]        # 1f4c6 <desc_template.13939+0x206>
    f635:	lea    rdi,[rip+0x1002c]        # 1f668 <desc_template.13939+0x3a8>
    f63c:	call   3220 <__assert_fail@plt>
    f641:	lea    rcx,[rip+0x10748]        # 1fd90 <__PRETTY_FUNCTION__.13862>
    f648:	mov    edx,0xb5
    f64d:	lea    rsi,[rip+0xfe72]        # 1f4c6 <desc_template.13939+0x206>
    f654:	lea    rdi,[rip+0xfe83]        # 1f4de <desc_template.13939+0x21e>
    f65b:	call   3220 <__assert_fail@plt>
    f660:	lea    rcx,[rip+0x106e9]        # 1fd50 <__PRETTY_FUNCTION__.14661>
    f667:	mov    edx,0x9d7
    f66c:	lea    rsi,[rip+0xfe53]        # 1f4c6 <desc_template.13939+0x206>
    f673:	lea    rdi,[rip+0x10003]        # 1f67d <desc_template.13939+0x3bd>
    f67a:	call   3220 <__assert_fail@plt>
    f67f:	mov    rdi,QWORD PTR [rip+0x18e7a]        # 28500 <stderr@@GLIBC_2.2.5>
    f686:	mov    ecx,ebx
    f688:	mov    esi,0x1
    f68d:	xor    eax,eax
    f68f:	lea    rdx,[rip+0x1050a]        # 1fba0 <desc_template.13939+0x8e0>
    f696:	call   3630 <__fprintf_chk@plt>
    f69b:	lea    rcx,[rip+0x1072e]        # 1fdd0 <__PRETTY_FUNCTION__.14706>
    f6a2:	mov    edx,0xa46
    f6a7:	lea    rsi,[rip+0xfe18]        # 1f4c6 <desc_template.13939+0x206>
    f6ae:	lea    rdi,[rip+0xfeab]        # 1f560 <desc_template.13939+0x2a0>
    f6b5:	call   3220 <__assert_fail@plt>
    f6ba:	nop    WORD PTR [rax+rax*1+0x0]

000000000000f6c0 <vvfat_write>:
    f6c0:	push   r15
    f6c2:	push   r14
    f6c4:	push   r13
    f6c6:	push   r12
    f6c8:	push   rbp
    f6c9:	push   rbx
    f6ca:	sub    rsp,0x388
    f6d1:	mov    r13,QWORD PTR [rdi+0x40]
    f6d5:	mov    QWORD PTR [rsp+0x8],rsi
    f6da:	mov    QWORD PTR [rsp+0x20],rdx
    f6df:	mov    DWORD PTR [rsp+0x14],ecx
    f6e3:	mov    rax,QWORD PTR fs:0x28
    f6ec:	mov    QWORD PTR [rsp+0x378],rax
    f6f4:	xor    eax,eax
    f6f6:	cmp    QWORD PTR [r13+0x8080],0x0
    f6fe:	je     f71a <vvfat_write+0x5a>
    f700:	mov    edi,DWORD PTR [r13+0x807c]
    f707:	mov    QWORD PTR [r13+0x8080],0x0
    f712:	test   edi,edi
    f714:	jne    f9fd <vvfat_write+0x33d>
    f71a:	mov    eax,DWORD PTR [r13+0x8]
    f71e:	mov    rdi,QWORD PTR [rsp+0x8]
    f723:	mov    DWORD PTR [r13+0x8098],0xffffffff
    f72e:	cmp    rax,rdi
    f731:	jg     f98f <vvfat_write+0x2cf>
    f737:	mov    r14d,DWORD PTR [r13+0x806c]
    f73e:	mov    rax,rdi
    f741:	lea    rbp,[rsp+0x30]
    f746:	mov    r11d,DWORD PTR [r13+0x805c]
    f74d:	sub    rax,r14
    f750:	mov    DWORD PTR [rsp+0x1c],r14d
    f755:	cqo    
    f757:	mov    DWORD PTR [rsp+0x18],r11d
    f75c:	idiv   r11
    f75f:	mov    r10,rax
    f762:	movsxd rax,DWORD PTR [rsp+0x14]
    f767:	add    rax,rdi
    f76a:	mov    QWORD PTR [rsp+0x28],rax
    f76f:	sub    rax,0x1
    f773:	mov    QWORD PTR [rsp],rax
    f777:	nop    WORD PTR [rax+rax*1+0x0]
    f780:	mov    rax,QWORD PTR [rsp]
    f784:	sub    rax,r14
    f787:	cqo    
    f789:	idiv   r11
    f78c:	cmp    r10d,eax
    f78f:	ja     fa53 <vvfat_write+0x393>
    f795:	mov    r8d,DWORD PTR [r13+0x804c]
    f79c:	xor    ecx,ecx
    f79e:	mov    edx,r8d
    f7a1:	jmp    f7c2 <vvfat_write+0x102>
    f7a3:	nop    DWORD PTR [rax+rax*1+0x0]
    f7a8:	cmp    edx,eax
    f7aa:	jne    f7b4 <vvfat_write+0xf4>
    f7ac:	test   edx,edx
    f7ae:	jne    fb5a <vvfat_write+0x49a>
    f7b4:	cmp    edx,eax
    f7b6:	je     f80f <vvfat_write+0x14f>
    f7b8:	mov    edx,eax
    f7ba:	cmp    ecx,edx
    f7bc:	jg     fa34 <vvfat_write+0x374>
    f7c2:	lea    esi,[rdx+rcx*1]
    f7c5:	mov    eax,esi
    f7c7:	shr    eax,0x1f
    f7ca:	add    eax,esi
    f7cc:	sar    eax,1
    f7ce:	cmp    r8d,eax
    f7d1:	jbe    faf4 <vvfat_write+0x434>
    f7d7:	mov    r9d,DWORD PTR [r13+0x8050]
    f7de:	mov    ebx,eax
    f7e0:	mov    r12,QWORD PTR [r13+0x8040]
    f7e7:	imul   ebx,r9d
    f7eb:	add    rbx,r12
    f7ee:	mov    esi,DWORD PTR [rbx]
    f7f0:	mov    edi,DWORD PTR [rbx+0x4]
    f7f3:	cmp    esi,edi
    f7f5:	jae    fb13 <vvfat_write+0x453>
    f7fb:	cmp    r10d,esi
    f7fe:	jbe    f7a8 <vvfat_write+0xe8>
    f800:	cmp    ecx,eax
    f802:	je     f808 <vvfat_write+0x148>
    f804:	mov    ecx,eax
    f806:	jmp    f7ba <vvfat_write+0xfa>
    f808:	cmp    r10d,edi
    f80b:	jb     f846 <vvfat_write+0x186>
    f80d:	mov    ecx,edx
    f80f:	cmp    r8d,ecx
    f812:	jbe    f84b <vvfat_write+0x18b>
    f814:	imul   ecx,r9d
    f818:	lea    rbx,[r12+rcx*1]
    f81c:	cmp    r10d,DWORD PTR [rbx]
    f81f:	jb     f84b <vvfat_write+0x18b>
    f821:	mov    edi,DWORD PTR [rbx+0x4]
    f824:	cmp    r10d,edi
    f827:	jae    fba0 <vvfat_write+0x4e0>
    f82d:	mov    eax,DWORD PTR [rbx+0x24]
    f830:	test   eax,eax
    f832:	jne    fb32 <vvfat_write+0x472>
    f838:	test   BYTE PTR [rbx+0x20],0x4
    f83c:	jne    f854 <vvfat_write+0x194>
    f83e:	mov    r10d,edi
    f841:	jmp    f780 <vvfat_write+0xc0>
    f846:	cmp    r10d,esi
    f849:	jae    f82d <vvfat_write+0x16d>
    f84b:	add    r10d,0x1
    f84f:	jmp    f780 <vvfat_write+0xc0>
    f854:	mov    edi,DWORD PTR [rsp+0x18]
    f858:	mov    eax,DWORD PTR [rsp+0x1c]
    f85c:	mov    DWORD PTR [rsp+0x364],0x100
    f867:	mov    QWORD PTR [rsp+0x368],0x0
    f873:	imul   r10d,edi
    f877:	add    eax,r10d
    f87a:	lea    edx,[rax+rdi*1]
    f87d:	mov    rdi,QWORD PTR [rsp+0x8]
    f882:	movsxd rcx,eax
    f885:	mov    esi,eax
    f887:	cmp    rcx,rdi
    f88a:	jl     f9f1 <vvfat_write+0x331>
    f890:	mov    r10,QWORD PTR [rsp+0x8]
    f895:	mov    edi,DWORD PTR [rsp+0x14]
    f899:	movsxd r8,edx
    f89c:	add    edi,r10d
    f89f:	cmp    r8,QWORD PTR [rsp+0x28]
    f8a4:	cmovg  edx,edi
    f8a7:	mov    edi,DWORD PTR [rsp+0x18]
    f8ab:	imul   edi,DWORD PTR [rbx]
    f8ae:	sub    rcx,r10
    f8b1:	mov    r12,rcx
    f8b4:	sub    edx,esi
    f8b6:	shl    r12,0x9
    f8ba:	sub    eax,edi
    f8bc:	shl    edx,0x4
    f8bf:	mov    r15d,eax
    f8c2:	shl    r15d,0x4
    f8c6:	add    r15d,DWORD PTR [rbx+0x8]
    f8ca:	test   edx,edx
    f8cc:	jle    f9e9 <vvfat_write+0x329>
    f8d2:	add    r12,QWORD PTR [rsp+0x20]
    f8d7:	lea    r14d,[rdx+r15*1]
    f8db:	nop    DWORD PTR [rax+rax*1+0x0]
    f8e0:	mov    rsi,r12
    f8e3:	mov    rdi,rbp
    f8e6:	call   d040 <parse_long_name>
    f8eb:	test   eax,eax
    f8ed:	js     fa12 <vvfat_write+0x352>
    f8f3:	movzx  eax,BYTE PTR [r12+0xb]
    f8f9:	cmp    al,0x28
    f8fb:	je     f9c0 <vvfat_write+0x300>
    f901:	cmp    al,0xf
    f903:	je     f9c0 <vvfat_write+0x300>
    f909:	movzx  edx,BYTE PTR [r12]
    f90e:	cmp    dl,0xe5
    f911:	je     f9c0 <vvfat_write+0x300>
    f917:	test   dl,dl
    f919:	je     f9c0 <vvfat_write+0x300>
    f91f:	test   al,0x1
    f921:	je     f9c0 <vvfat_write+0x300>
    f927:	cmp    DWORD PTR [r13+0x8034],r15d
    f92e:	jbe    faf4 <vvfat_write+0x434>
    f934:	mov    eax,r15d
    f937:	imul   eax,DWORD PTR [r13+0x8038]
    f93f:	add    rax,QWORD PTR [r13+0x8028]
    f946:	mov    rdx,QWORD PTR [r12]
    f94a:	mov    rcx,QWORD PTR [r12+0x8]
    f94f:	xor    rdx,QWORD PTR [rax]
    f952:	xor    rcx,QWORD PTR [rax+0x8]
    f956:	or     rcx,rdx
    f959:	jne    f972 <vvfat_write+0x2b2>
    f95b:	mov    rdx,QWORD PTR [r12+0x10]
    f960:	mov    rcx,QWORD PTR [r12+0x18]
    f965:	xor    rdx,QWORD PTR [rax+0x10]
    f969:	xor    rcx,QWORD PTR [rax+0x18]
    f96d:	or     rcx,rdx
    f970:	je     f9c0 <vvfat_write+0x300>
    f972:	mov    rcx,QWORD PTR [rip+0x18b87]        # 28500 <stderr@@GLIBC_2.2.5>
    f979:	mov    edx,0x30
    f97e:	mov    esi,0x1
    f983:	lea    rdi,[rip+0x1026e]        # 1fbf8 <desc_template.13939+0x938>
    f98a:	call   3610 <fwrite@plt>
    f98f:	mov    ebx,0xffffffff
    f994:	mov    rdi,QWORD PTR [rsp+0x378]
    f99c:	xor    rdi,QWORD PTR fs:0x28
    f9a5:	mov    eax,ebx
    f9a7:	jne    fb9b <vvfat_write+0x4db>
    f9ad:	add    rsp,0x388
    f9b4:	pop    rbx
    f9b5:	pop    rbp
    f9b6:	pop    r12
    f9b8:	pop    r13
    f9ba:	pop    r14
    f9bc:	pop    r15
    f9be:	ret    
    f9bf:	nop
    f9c0:	add    r15d,0x1
    f9c4:	add    r12,0x20
    f9c8:	cmp    r14d,r15d
    f9cb:	jne    f8e0 <vvfat_write+0x220>
    f9d1:	mov    r14d,DWORD PTR [r13+0x806c]
    f9d8:	mov    r11d,DWORD PTR [r13+0x805c]
    f9df:	mov    DWORD PTR [rsp+0x1c],r14d
    f9e4:	mov    DWORD PTR [rsp+0x18],r11d
    f9e9:	mov    edi,DWORD PTR [rbx+0x4]
    f9ec:	jmp    f83e <vvfat_write+0x17e>
    f9f1:	mov    esi,edi
    f9f3:	mov    eax,edi
    f9f5:	movsxd rcx,edi
    f9f8:	jmp    f890 <vvfat_write+0x1d0>
    f9fd:	call   3260 <close@plt>
    fa02:	mov    DWORD PTR [r13+0x807c],0x0
    fa0d:	jmp    f71a <vvfat_write+0x5a>
    fa12:	mov    rcx,QWORD PTR [rip+0x18ae7]        # 28500 <stderr@@GLIBC_2.2.5>
    fa19:	mov    edx,0x1c
    fa1e:	mov    esi,0x1
    fa23:	lea    rdi,[rip+0xfcd8]        # 1f702 <desc_template.13939+0x442>
    fa2a:	call   3610 <fwrite@plt>
    fa2f:	jmp    f98f <vvfat_write+0x2cf>
    fa34:	lea    rcx,[rip+0x10425]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    fa3b:	mov    edx,0x465
    fa40:	lea    rsi,[rip+0xfa7f]        # 1f4c6 <desc_template.13939+0x206>
    fa47:	lea    rdi,[rip+0xfafb]        # 1f549 <desc_template.13939+0x289>
    fa4e:	call   3220 <__assert_fail@plt>
    fa53:	mov    rdi,QWORD PTR [r13+0x80b0]
    fa5a:	mov    ecx,DWORD PTR [rsp+0x14]
    fa5e:	mov    rdx,QWORD PTR [rsp+0x20]
    fa63:	mov    rsi,QWORD PTR [rsp+0x8]
    fa68:	mov    rax,QWORD PTR [rdi+0x38]
    fa6c:	call   QWORD PTR [rax+0x28]
    fa6f:	mov    ebx,eax
    fa71:	test   eax,eax
    fa73:	js     fb79 <vvfat_write+0x4b9>
    fa79:	mov    r9d,DWORD PTR [r13+0x806c]
    fa80:	mov    rax,QWORD PTR [rsp+0x8]
    fa85:	mov    edi,DWORD PTR [r13+0x805c]
    fa8c:	sub    rax,r9
    fa8f:	cqo    
    fa91:	idiv   rdi
    fa94:	mov    rcx,rax
    fa97:	mov    esi,eax
    fa99:	mov    rax,QWORD PTR [rsp]
    fa9d:	movsxd r8,ecx
    faa0:	sub    rax,r9
    faa3:	cqo    
    faa5:	idiv   rdi
    faa8:	cmp    eax,ecx
    faaa:	jb     fae5 <vvfat_write+0x425>
    faac:	mov    rcx,QWORD PTR [rsp]
    fab0:	test   esi,esi
    fab2:	js     facf <vvfat_write+0x40f>
    fab4:	mov    rax,QWORD PTR [r13+0x80c0]
    fabb:	add    rax,r8
    fabe:	or     BYTE PTR [rax],0x4
    fac1:	mov    r9d,DWORD PTR [r13+0x806c]
    fac8:	mov    edi,DWORD PTR [r13+0x805c]
    facf:	mov    rax,rcx
    fad2:	add    esi,0x1
    fad5:	add    r8,0x1
    fad9:	sub    rax,r9
    fadc:	cqo    
    fade:	idiv   rdi
    fae1:	cmp    esi,eax
    fae3:	jbe    fab0 <vvfat_write+0x3f0>
    fae5:	mov    rdi,r13
    fae8:	xor    ebx,ebx
    faea:	call   e3e0 <try_commit>
    faef:	jmp    f994 <vvfat_write+0x2d4>
    faf4:	lea    rcx,[rip+0x10355]        # 1fe50 <__PRETTY_FUNCTION__.13830>
    fafb:	mov    edx,0x60
    fb00:	lea    rsi,[rip+0xf9bf]        # 1f4c6 <desc_template.13939+0x206>
    fb07:	lea    rdi,[rip+0xf9ed]        # 1f4fb <desc_template.13939+0x23b>
    fb0e:	call   3220 <__assert_fail@plt>
    fb13:	lea    rcx,[rip+0x10346]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    fb1a:	mov    edx,0x45a
    fb1f:	lea    rsi,[rip+0xf9a0]        # 1f4c6 <desc_template.13939+0x206>
    fb26:	lea    rdi,[rip+0xf9e2]        # 1f50f <desc_template.13939+0x24f>
    fb2d:	call   3220 <__assert_fail@plt>
    fb32:	mov    rcx,QWORD PTR [rbx+0x18]
    fb36:	mov    rdi,QWORD PTR [rip+0x189c3]        # 28500 <stderr@@GLIBC_2.2.5>
    fb3d:	lea    rdx,[rip+0x10084]        # 1fbc8 <desc_template.13939+0x908>
    fb44:	xor    eax,eax
    fb46:	mov    esi,0x1
    fb4b:	mov    ebx,0xffffffff
    fb50:	call   3630 <__fprintf_chk@plt>
    fb55:	jmp    f994 <vvfat_write+0x2d4>
    fb5a:	lea    rcx,[rip+0x102ff]        # 1fe60 <__PRETTY_FUNCTION__.14249>
    fb61:	mov    edx,0x45c
    fb66:	lea    rsi,[rip+0xf959]        # 1f4c6 <desc_template.13939+0x206>
    fb6d:	lea    rdi,[rip+0xf9b9]        # 1f52d <desc_template.13939+0x26d>
    fb74:	call   3220 <__assert_fail@plt>
    fb79:	mov    rcx,QWORD PTR [rip+0x18980]        # 28500 <stderr@@GLIBC_2.2.5>
    fb80:	mov    edx,0x1e
    fb85:	mov    esi,0x1
    fb8a:	lea    rdi,[rip+0x1009f]        # 1fc30 <desc_template.13939+0x970>
    fb91:	call   3610 <fwrite@plt>
    fb96:	jmp    f994 <vvfat_write+0x2d4>
    fb9b:	call   3190 <__stack_chk_fail@plt>
    fba0:	lea    rcx,[rip+0x102d9]        # 1fe80 <__PRETTY_FUNCTION__.14257>
    fba7:	mov    edx,0x477
    fbac:	lea    rsi,[rip+0xf913]        # 1f4c6 <desc_template.13939+0x206>
    fbb3:	lea    rdi,[rip+0xfc66]        # 1f820 <desc_template.13939+0x560>
    fbba:	call   3220 <__assert_fail@plt>
    fbbf:	nop

000000000000fbc0 <write_target_commit>:
    fbc0:	mov    rdi,QWORD PTR [rdi+0x40]
    fbc4:	jmp    e3e0 <try_commit>
    fbc9:	nop    DWORD PTR [rax+0x0]

000000000000fbd0 <fat_datetime.constprop.8>:
    fbd0:	sub    rsp,0x58
    fbd4:	mov    QWORD PTR [rsp+0x8],rdi
    fbd9:	lea    rsi,[rsp+0x10]
    fbde:	lea    rdi,[rsp+0x8]
    fbe3:	mov    rax,QWORD PTR fs:0x28
    fbec:	mov    QWORD PTR [rsp+0x48],rax
    fbf1:	xor    eax,eax
    fbf3:	call   30e0 <localtime_r@plt>
    fbf8:	mov    ecx,DWORD PTR [rsp+0x24]
    fbfc:	mov    eax,DWORD PTR [rsp+0x20]
    fc00:	lea    edx,[rcx-0x50]
    fc03:	add    eax,0x1
    fc06:	shl    eax,0x5
    fc09:	shl    edx,0x9
    fc0c:	or     eax,edx
    fc0e:	or     ax,WORD PTR [rsp+0x1c]
    fc13:	mov    rcx,QWORD PTR [rsp+0x48]
    fc18:	xor    rcx,QWORD PTR fs:0x28
    fc21:	jne    fc28 <fat_datetime.constprop.8+0x58>
    fc23:	add    rsp,0x58
    fc27:	ret    
    fc28:	call   3190 <__stack_chk_fail@plt>
    fc2d:	nop    DWORD PTR [rax]

000000000000fc30 <read_directory>:
    fc30:	push   r15
    fc32:	mov    eax,esi
    fc34:	push   r14
    fc36:	push   r13
    fc38:	push   r12
    fc3a:	push   rbp
    fc3b:	push   rbx
    fc3c:	sub    rsp,0x258
    fc43:	mov    DWORD PTR [rsp+0x40],esi
    fc47:	mov    esi,DWORD PTR [rdi+0x804c]
    fc4d:	mov    rcx,QWORD PTR fs:0x28
    fc56:	mov    QWORD PTR [rsp+0x248],rcx
    fc5e:	xor    ecx,ecx
    fc60:	cmp    eax,esi
    fc62:	jae    10a49 <read_directory+0xe19>
    fc68:	mov    ecx,DWORD PTR [rdi+0x8050]
    fc6e:	mov    ebx,DWORD PTR [rsp+0x40]
    fc72:	mov    r12,rdi
    fc75:	mov    rdx,QWORD PTR [rdi+0x8040]
    fc7c:	imul   ebx,ecx
    fc7f:	add    rbx,rdx
    fc82:	mov    rax,QWORD PTR [rbx+0x18]
    fc86:	mov    QWORD PTR [rsp+0x8],rax
    fc8b:	mov    eax,DWORD PTR [rbx]
    fc8d:	mov    DWORD PTR [rsp+0x24],eax
    fc91:	mov    eax,DWORD PTR [rbx+0x10]
    fc94:	test   eax,eax
    fc96:	js     10a3c <read_directory+0xe0c>
    fc9c:	cmp    eax,esi
    fc9e:	jae    10a49 <read_directory+0xe19>
    fca4:	imul   eax,ecx
    fca7:	mov    DWORD PTR [rsp+0x34],0xffffffff
    fcaf:	add    rax,rdx
    fcb2:	je     fcba <read_directory+0x8a>
    fcb4:	mov    eax,DWORD PTR [rax]
    fcb6:	mov    DWORD PTR [rsp+0x34],eax
    fcba:	mov    rdi,QWORD PTR [rsp+0x8]
    fcbf:	call   3160 <opendir@plt>
    fcc4:	mov    QWORD PTR [rsp+0x28],rax
    fcc9:	test   BYTE PTR [rbx+0x20],0x4
    fccd:	je     10b00 <read_directory+0xed0>
    fcd3:	cmp    QWORD PTR [rsp+0x28],0x0
    fcd9:	je     10b20 <read_directory+0xef0>
    fcdf:	mov    r10d,DWORD PTR [rsp+0x24]
    fce4:	xor    ebp,ebp
    fce6:	test   r10d,r10d
    fce9:	jne    10871 <read_directory+0xc41>
    fcef:	mov    eax,DWORD PTR [rsp+0x24]
    fcf3:	mov    DWORD PTR [rbx+0x14],ebp
    fcf6:	shr    eax,0x10
    fcf9:	mov    DWORD PTR [rsp+0x5c],eax
    fcfd:	mov    eax,DWORD PTR [rsp+0x34]
    fd01:	shr    eax,0x10
    fd04:	mov    DWORD PTR [rsp+0x44],eax
    fd08:	mov    rdi,QWORD PTR [rsp+0x28]
    fd0d:	call   3540 <readdir64@plt>
    fd12:	mov    r13,rax
    fd15:	test   rax,rax
    fd18:	je     10895 <read_directory+0xc65>
    fd1e:	mov    rdi,QWORD PTR [rsp+0x8]
    fd23:	lea    rbx,[r13+0x13]
    fd27:	call   3180 <strlen@plt>
    fd2c:	mov    rdi,rbx
    fd2f:	mov    r14,rax
    fd32:	call   3180 <strlen@plt>
    fd37:	mov    ecx,0x2
    fd3c:	mov    rsi,rbx
    fd3f:	lea    rdi,[rip+0xf8af]        # 1f5f5 <desc_template.13939+0x335>
    fd46:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    fd48:	mov    rsi,rbx
    fd4b:	lea    eax,[r14+rax*1+0x2]
    fd50:	mov    r9d,DWORD PTR [rsp+0x24]
    fd55:	lea    rdi,[rip+0xf898]        # 1f5f4 <desc_template.13939+0x334>
    fd5c:	seta   dl
    fd5f:	sbb    dl,0x0
    fd62:	movsx  ecx,dl
    fd65:	test   ecx,ecx
    fd67:	mov    DWORD PTR [rsp+0x30],ecx
    fd6b:	mov    ecx,0x3
    fd70:	sete   r14b
    fd74:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    fd76:	seta   dl
    fd79:	sbb    dl,0x0
    fd7c:	movsx  ecx,dl
    fd7f:	test   ecx,ecx
    fd81:	mov    DWORD PTR [rsp+0x1c],ecx
    fd85:	sete   r15b
    fd89:	test   r9d,r9d
    fd8c:	jne    ffa3 <read_directory+0x373>
    fd92:	test   r14b,r14b
    fd95:	jne    fd08 <read_directory+0xd8>
    fd9b:	test   r15b,r15b
    fd9e:	jne    fd08 <read_directory+0xd8>
    fda4:	mov    r14d,eax
    fda7:	mov    rdi,r14
    fdaa:	call   4cb0 <qemu_malloc>
    fdaf:	sub    rsp,0x8
    fdb3:	mov    rsi,r14
    fdb6:	mov    rcx,0xffffffffffffffff
    fdbd:	mov    QWORD PTR [rsp+0x18],rax
    fdc2:	mov    rdi,rax
    fdc5:	mov    edx,0x1
    fdca:	mov    r14,rax
    fdcd:	push   rbx
    fdce:	mov    r9,QWORD PTR [rsp+0x18]
    fdd3:	lea    r8,[rip+0xf945]        # 1f71f <desc_template.13939+0x45f>
    fdda:	xor    eax,eax
    fddc:	call   3060 <__snprintf_chk@plt>
    fde1:	lea    rdx,[rsp+0xc0]
    fde9:	mov    rsi,r14
    fdec:	mov    edi,0x1
    fdf1:	call   3150 <__xstat64@plt>
    fdf6:	pop    rdx
    fdf7:	pop    rcx
    fdf8:	test   eax,eax
    fdfa:	js     107f7 <read_directory+0xbc7>
    fe00:	mov    eax,DWORD PTR [r12+0x8034]
    fe08:	mov    DWORD PTR [rsp+0x20],eax
    fe0c:	lea    r15,[rsp+0x140]
    fe14:	xor    ecx,ecx
    fe16:	mov    eax,0x1
    fe1b:	lea    rdx,[r15+0x1]
    fe1f:	jmp    fe48 <read_directory+0x218>
    fe21:	nop    DWORD PTR [rax+0x0]
    fe28:	add    rax,0x1
    fe2c:	mov    BYTE PTR [rdx-0x1],dil
    fe30:	add    rcx,0x2
    fe34:	add    rdx,0x2
    fe38:	mov    BYTE PTR [rdx-0x2],0x0
    fe3c:	cmp    rax,0x82
    fe42:	je     1085c <read_directory+0xc2c>
    fe48:	movzx  edi,BYTE PTR [r13+rax*1+0x12]
    fe4e:	mov    esi,ecx
    fe50:	mov    r8d,eax
    fe53:	test   dil,dil
    fe56:	jne    fe28 <read_directory+0x1f8>
    fe58:	mov    BYTE PTR [rdx],0x0
    fe5b:	add    r8d,r8d
    fe5e:	mov    BYTE PTR [rdx-0x1],0x0
    fe62:	lea    edx,[rcx+0x19]
    fe65:	mov    ecx,0x4ec4ec4f
    fe6a:	mov    eax,edx
    fe6c:	mul    ecx
    fe6e:	mov    eax,r8d
    fe71:	shr    edx,0x3
    fe74:	mov    r14d,edx
    fe77:	mul    ecx
    fe79:	shr    edx,0x3
    fe7c:	imul   eax,edx,0x1a
    fe7f:	cmp    r8d,eax
    fe82:	je     febb <read_directory+0x28b>
    fe84:	add    r8d,0x1
    fe88:	mov    edi,0x4ec4ec4f
    fe8d:	movsxd rcx,r8d
    fe90:	lea    r8,[rsp+0x13f]
    fe98:	nop    DWORD PTR [rax+rax*1+0x0]
    fea0:	mov    eax,ecx
    fea2:	mov    BYTE PTR [r8+rcx*1],0xff
    fea7:	mul    edi
    fea9:	mov    eax,ecx
    feab:	add    rcx,0x1
    feaf:	shr    edx,0x3
    feb2:	imul   edx,edx,0x1a
    feb5:	sub    eax,edx
    feb7:	test   eax,eax
    feb9:	jne    fea0 <read_directory+0x270>
    febb:	test   esi,esi
    febd:	je     1087e <read_directory+0xc4e>
    fec3:	mov    r10d,r14d
    fec6:	mov    edx,DWORD PTR [rsp+0x20]
    feca:	mov    rax,r12
    fecd:	xor    ecx,ecx
    fecf:	or     r10d,0x40
    fed3:	mov    QWORD PTR [rsp+0x38],rbx
    fed8:	mov    r12d,r14d
    fedb:	mov    r14,rax
    fede:	mov    DWORD PTR [rsp+0x58],ebp
    fee2:	mov    ebx,edx
    fee4:	mov    ebp,ecx
    fee6:	mov    QWORD PTR [rsp+0x48],r13
    feeb:	mov    r13d,r10d
    feee:	mov    QWORD PTR [rsp+0x50],r15
    fef3:	jmp    ff49 <read_directory+0x319>
    fef5:	nop    DWORD PTR [rax]
    fef8:	mov    DWORD PTR [r14+0x8034],r15d
    feff:	cmp    r15d,ebx
    ff02:	jbe    10a49 <read_directory+0xe19>
    ff08:	imul   ebx,DWORD PTR [r14+0x8038]
    ff10:	mov    rax,QWORD PTR [r14+0x8028]
    ff17:	mov    edx,0xf
    ff1c:	xor    ecx,ecx
    ff1e:	add    rax,rbx
    ff21:	mov    WORD PTR [rax+0xb],dx
    ff25:	mov    edx,r12d
    ff28:	sub    edx,ebp
    ff2a:	test   ebp,ebp
    ff2c:	mov    WORD PTR [rax+0x1a],cx
    ff30:	cmove  edx,r13d
    ff34:	add    ebp,0x1
    ff37:	mov    BYTE PTR [rax],dl
    ff39:	cmp    ebp,r12d
    ff3c:	jge    10325 <read_directory+0x6f5>
    ff42:	mov    ebx,DWORD PTR [r14+0x8034]
    ff49:	lea    r15d,[rbx+0x1]
    ff4d:	mov    eax,DWORD PTR [r14+0x8038]
    ff54:	mov    esi,r15d
    ff57:	imul   esi,eax
    ff5a:	cmp    esi,DWORD PTR [r14+0x8030]
    ff61:	jbe    fef8 <read_directory+0x2c8>
    ff63:	mov    r9d,eax
    ff66:	mov    rdi,QWORD PTR [r14+0x8028]
    ff6d:	shl    r9d,0x5
    ff71:	sub    r9d,eax
    ff74:	add    r9d,esi
    ff77:	movsxd rsi,r9d
    ff7a:	mov    DWORD PTR [rsp],r9d
    ff7e:	call   4cd0 <qemu_realloc>
    ff83:	mov    QWORD PTR [r14+0x8028],rax
    ff8a:	test   rax,rax
    ff8d:	je     3798 <read_directory.cold.14+0x19>
    ff93:	mov    r9d,DWORD PTR [rsp]
    ff97:	mov    DWORD PTR [r14+0x8030],r9d
    ff9e:	jmp    fef8 <read_directory+0x2c8>
    ffa3:	mov    esi,eax
    ffa5:	mov    rdi,rsi
    ffa8:	mov    QWORD PTR [rsp],rsi
    ffac:	call   4cb0 <qemu_malloc>
    ffb1:	sub    rsp,0x8
    ffb5:	mov    edx,0x1
    ffba:	lea    r8,[rip+0xf75e]        # 1f71f <desc_template.13939+0x45f>
    ffc1:	push   rbx
    ffc2:	mov    r9,QWORD PTR [rsp+0x18]
    ffc7:	mov    rdi,rax
    ffca:	mov    rcx,0xffffffffffffffff
    ffd1:	mov    rsi,QWORD PTR [rsp+0x10]
    ffd6:	mov    QWORD PTR [rsp+0x20],rax
    ffdb:	xor    eax,eax
    ffdd:	call   3060 <__snprintf_chk@plt>
    ffe2:	mov    rsi,QWORD PTR [rsp+0x20]
    ffe7:	mov    edi,0x1
    ffec:	lea    rdx,[rsp+0xc0]
    fff4:	call   3150 <__xstat64@plt>
    fff9:	pop    rdi
    fffa:	pop    r8
    fffc:	test   eax,eax
    fffe:	js     107f7 <read_directory+0xbc7>
   10004:	mov    eax,DWORD PTR [r12+0x8034]
   1000c:	mov    DWORD PTR [rsp+0x20],eax
   10010:	or     r14b,r15b
   10013:	je     fe0c <read_directory+0x1dc>
   10019:	lea    r13d,[rax+0x1]
   1001d:	mov    eax,DWORD PTR [r12+0x8038]
   10025:	mov    edx,r13d
   10028:	imul   edx,eax
   1002b:	cmp    edx,DWORD PTR [r12+0x8030]
   10033:	ja     10767 <read_directory+0xb37>
   10039:	mov    eax,DWORD PTR [rsp+0x20]
   1003d:	mov    DWORD PTR [r12+0x8034],r13d
   10045:	cmp    eax,r13d
   10048:	jae    10a49 <read_directory+0xe19>
   1004e:	mov    r15d,eax
   10051:	imul   r15d,DWORD PTR [r12+0x8038]
   1005a:	add    r15,QWORD PTR [r12+0x8028]
   10062:	mov    esi,0x2020
   10067:	mov    BYTE PTR [r15+0xa],0x20
   1006c:	mov    rdi,rbx
   1006f:	movabs rax,0x2020202020202020
   10079:	mov    WORD PTR [r15+0x8],si
   1007e:	mov    QWORD PTR [r15],rax
   10081:	call   3180 <strlen@plt>
   10086:	mov    rsi,rbx
   10089:	mov    rdi,r15
   1008c:	mov    rdx,rax
   1008f:	call   33b0 <memcpy@plt>
   10094:	mov    edx,0x20
   10099:	lea    r13,[rsp+0x70]
   1009e:	lea    rbx,[rsp+0x68]
   100a3:	mov    eax,DWORD PTR [rsp+0xc8]
   100aa:	mov    rsi,r13
   100ad:	mov    rdi,rbx
   100b0:	and    eax,0xf000
   100b5:	cmp    eax,0x4000
   100ba:	mov    eax,0x10
   100bf:	cmovne eax,edx
   100c2:	xor    r9d,r9d
   100c5:	mov    WORD PTR [r15+0xc],r9w
   100ca:	mov    BYTE PTR [r15+0xb],al
   100ce:	mov    rax,QWORD PTR [rsp+0x118]
   100d6:	mov    QWORD PTR [rsp+0x68],rax
   100db:	call   30e0 <localtime_r@plt>
   100e0:	mov    edx,DWORD PTR [rsp+0x70]
   100e4:	mov    eax,edx
   100e6:	shr    eax,0x1f
   100e9:	add    eax,edx
   100eb:	mov    edx,DWORD PTR [rsp+0x74]
   100ef:	sar    eax,1
   100f1:	shl    edx,0x5
   100f4:	or     eax,edx
   100f6:	mov    edx,DWORD PTR [rsp+0x78]
   100fa:	shl    edx,0xb
   100fd:	or     eax,edx
   100ff:	mov    WORD PTR [r15+0xe],ax
   10104:	mov    rdi,QWORD PTR [rsp+0x118]
   1010c:	call   fbd0 <fat_datetime.constprop.8>
   10111:	mov    WORD PTR [r15+0x10],ax
   10116:	mov    rdi,QWORD PTR [rsp+0xf8]
   1011e:	call   fbd0 <fat_datetime.constprop.8>
   10123:	xor    r10d,r10d
   10126:	mov    rsi,r13
   10129:	mov    rdi,rbx
   1012c:	mov    WORD PTR [r15+0x14],r10w
   10131:	mov    WORD PTR [r15+0x12],ax
   10136:	mov    rax,QWORD PTR [rsp+0x108]
   1013e:	mov    QWORD PTR [rsp+0x68],rax
   10143:	call   30e0 <localtime_r@plt>
   10148:	mov    edx,DWORD PTR [rsp+0x70]
   1014c:	mov    eax,edx
   1014e:	shr    eax,0x1f
   10151:	add    eax,edx
   10153:	mov    edx,DWORD PTR [rsp+0x74]
   10157:	sar    eax,1
   10159:	shl    edx,0x5
   1015c:	or     eax,edx
   1015e:	mov    edx,DWORD PTR [rsp+0x78]
   10162:	shl    edx,0xb
   10165:	or     eax,edx
   10167:	mov    WORD PTR [r15+0x16],ax
   1016c:	mov    rdi,QWORD PTR [rsp+0x108]
   10174:	call   fbd0 <fat_datetime.constprop.8>
   10179:	mov    r11d,DWORD PTR [rsp+0x1c]
   1017e:	mov    WORD PTR [r15+0x18],ax
   10183:	test   r11d,r11d
   10186:	jne    102fe <read_directory+0x6ce>
   1018c:	movzx  eax,WORD PTR [rsp+0x34]
   10191:	mov    WORD PTR [r15+0x1a],ax
   10196:	movzx  eax,WORD PTR [rsp+0x44]
   1019b:	mov    WORD PTR [r15+0x14],ax
   101a0:	mov    rdx,QWORD PTR [rsp+0xe0]
   101a8:	cmp    rdx,0x7fffffff
   101af:	jg     10a01 <read_directory+0xdd1>
   101b5:	mov    eax,DWORD PTR [rsp+0xc8]
   101bc:	and    eax,0xf000
   101c1:	cmp    eax,0x4000
   101c6:	je     102de <read_directory+0x6ae>
   101cc:	mov    DWORD PTR [r15+0x1c],edx
   101d0:	test   r14b,r14b
   101d3:	jne    102ef <read_directory+0x6bf>
   101d9:	cmp    QWORD PTR [rsp+0xe0],0x0
   101e2:	je     102ef <read_directory+0x6bf>
   101e8:	mov    ebx,DWORD PTR [r12+0x804c]
   101f0:	mov    eax,DWORD PTR [r12+0x8050]
   101f8:	lea    r13d,[rbx+0x1]
   101fc:	mov    edx,r13d
   101ff:	imul   edx,eax
   10202:	cmp    edx,DWORD PTR [r12+0x8048]
   1020a:	ja     10821 <read_directory+0xbf1>
   10210:	mov    DWORD PTR [r12+0x804c],r13d
   10218:	cmp    ebx,r13d
   1021b:	jae    10a49 <read_directory+0xe19>
   10221:	imul   ebx,DWORD PTR [r12+0x8050]
   1022a:	mov    rax,QWORD PTR [r12+0x8040]
   10232:	add    rax,rbx
   10235:	mov    QWORD PTR [r12+0x8080],rax
   1023d:	mov    DWORD PTR [rax],0x0
   10243:	mov    rax,QWORD PTR [r12+0x8080]
   1024b:	mov    rdx,QWORD PTR [rsp+0xe0]
   10253:	mov    DWORD PTR [rax+0x4],edx
   10256:	mov    eax,DWORD PTR [r12+0x8034]
   1025e:	mov    rdx,QWORD PTR [r12+0x8080]
   10266:	sub    eax,0x1
   10269:	mov    DWORD PTR [rdx+0x8],eax
   1026c:	mov    rax,QWORD PTR [r12+0x8080]
   10274:	mov    DWORD PTR [rax+0xc],0xffffffff
   1027b:	mov    eax,DWORD PTR [rsp+0xc8]
   10282:	and    eax,0xf000
   10287:	cmp    eax,0x4000
   1028c:	mov    rax,QWORD PTR [r12+0x8080]
   10294:	je     10806 <read_directory+0xbd6>
   1029a:	mov    DWORD PTR [rax+0x20],0x0
   102a1:	mov    rax,QWORD PTR [r12+0x8080]
   102a9:	mov    DWORD PTR [rax+0x10],0x0
   102b0:	mov    rax,QWORD PTR [r12+0x8080]
   102b8:	mov    rcx,QWORD PTR [rsp+0x10]
   102bd:	xor    edx,edx
   102bf:	mov    QWORD PTR [rax+0x18],rcx
   102c3:	mov    rax,QWORD PTR [r12+0x8080]
   102cb:	test   BYTE PTR [rsp+0xc8],0x92
   102d3:	sete   dl
   102d6:	mov    DWORD PTR [rax+0x24],edx
   102d9:	jmp    fd08 <read_directory+0xd8>
   102de:	mov    DWORD PTR [r15+0x1c],0x0
   102e6:	test   r14b,r14b
   102e9:	je     101e8 <read_directory+0x5b8>
   102ef:	mov    rdi,QWORD PTR [rsp+0x10]
   102f4:	call   4ca0 <qemu_free>
   102f9:	jmp    fd08 <read_directory+0xd8>
   102fe:	mov    r8d,DWORD PTR [rsp+0x30]
   10303:	test   r8d,r8d
   10306:	jne    1075b <read_directory+0xb2b>
   1030c:	movzx  eax,WORD PTR [rsp+0x24]
   10311:	mov    WORD PTR [r15+0x1a],ax
   10316:	movzx  eax,WORD PTR [rsp+0x5c]
   1031b:	mov    WORD PTR [r15+0x14],ax
   10320:	jmp    101a0 <read_directory+0x570>
   10325:	mov    rax,r14
   10328:	mov    r14d,r12d
   1032b:	mov    rbx,QWORD PTR [rsp+0x38]
   10330:	mov    ebp,DWORD PTR [rsp+0x58]
   10334:	imul   r11d,r14d,0x1a
   10338:	mov    r13,QWORD PTR [rsp+0x48]
   1033d:	mov    r15,QWORD PTR [rsp+0x50]
   10342:	mov    r12,rax
   10345:	mov    r9d,DWORD PTR [rax+0x8034]
   1034c:	xor    esi,esi
   1034e:	mov    r10d,0x4ec4ec4f
   10354:	jmp    10368 <read_directory+0x738>
   10356:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10360:	mov    r9d,DWORD PTR [r12+0x8034]
   10368:	mov    eax,esi
   1036a:	mov    ecx,esi
   1036c:	mul    r10d
   1036f:	mov    eax,esi
   10371:	shr    edx,0x3
   10374:	imul   edx,edx,0x1a
   10377:	sub    eax,edx
   10379:	mov    edx,eax
   1037b:	lea    edi,[rax+0x1]
   1037e:	cmp    eax,0x9
   10381:	jle    1038f <read_directory+0x75f>
   10383:	lea    eax,[rax+0x4]
   10386:	lea    edi,[rdx+0x6]
   10389:	cmp    edx,0x15
   1038c:	cmovle edi,eax
   1038f:	mov    eax,ecx
   10391:	lea    r8d,[r9-0x1]
   10395:	mul    r10d
   10398:	mov    eax,r8d
   1039b:	shr    edx,0x3
   1039e:	sub    eax,edx
   103a0:	cmp    eax,r9d
   103a3:	jae    10a49 <read_directory+0xe19>
   103a9:	movzx  ecx,BYTE PTR [r15+rsi*1]
   103ae:	movsxd rdx,edi
   103b1:	add    rsi,0x1
   103b5:	imul   eax,DWORD PTR [r12+0x8038]
   103be:	add    rax,QWORD PTR [r12+0x8028]
   103c6:	mov    BYTE PTR [rax+rdx*1],cl
   103c9:	cmp    r11d,esi
   103cc:	jg     10360 <read_directory+0x730>
   103ce:	mov    r15d,DWORD PTR [r12+0x8034]
   103d6:	mov    eax,r15d
   103d9:	sub    eax,r14d
   103dc:	mov    r14d,eax
   103df:	cmp    eax,r15d
   103e2:	jae    10a49 <read_directory+0xe19>
   103e8:	mov    esi,DWORD PTR [r12+0x8038]
   103f0:	mov    r8,QWORD PTR [r12+0x8028]
   103f8:	mov    rdi,rbx
   103fb:	imul   r14d,esi
   103ff:	mov    DWORD PTR [rsp+0x38],esi
   10403:	mov    QWORD PTR [rsp],r8
   10407:	add    r14,r8
   1040a:	call   3180 <strlen@plt>
   1040f:	mov    r8,QWORD PTR [rsp]
   10413:	mov    esi,DWORD PTR [rsp+0x38]
   10417:	lea    edx,[rax-0x1]
   1041a:	test   edx,edx
   1041c:	jle    1044e <read_directory+0x81e>
   1041e:	movsxd rcx,edx
   10421:	cmp    BYTE PTR [r13+rcx*1+0x13],0x2e
   10427:	je     106fa <read_directory+0xaca>
   1042d:	lea    ecx,[rax-0x2]
   10430:	movsxd rcx,ecx
   10433:	jmp    10448 <read_directory+0x818>
   10435:	nop    DWORD PTR [rax]
   10438:	sub    rcx,0x1
   1043c:	cmp    BYTE PTR [r13+rcx*1+0x14],0x2e
   10442:	je     106fa <read_directory+0xaca>
   10448:	mov    edx,ecx
   1044a:	test   ecx,ecx
   1044c:	jg     10438 <read_directory+0x808>
   1044e:	cmp    eax,0x8
   10451:	mov    r9d,0x8
   10457:	cmovle r9d,eax
   1045b:	lea    ecx,[r15+0x1]
   1045f:	mov    r10d,esi
   10462:	imul   r10d,ecx
   10466:	cmp    r10d,DWORD PTR [r12+0x8030]
   1046e:	ja     107a2 <read_directory+0xb72>
   10474:	mov    DWORD PTR [r12+0x8034],ecx
   1047c:	cmp    ecx,r15d
   1047f:	jbe    10a49 <read_directory+0xe19>
   10485:	imul   r15d,DWORD PTR [r12+0x8038]
   1048e:	add    r15,QWORD PTR [r12+0x8028]
   10496:	movabs rax,0x2020202020202020
   104a0:	movsxd r9,r9d
   104a3:	mov    BYTE PTR [r15+0xa],0x20
   104a8:	mov    QWORD PTR [r15],rax
   104ab:	mov    eax,0x2020
   104b0:	mov    WORD PTR [r15+0x8],ax
   104b5:	cmp    r9,0x8
   104b9:	jae    1070c <read_directory+0xadc>
   104bf:	test   r9b,0x4
   104c3:	jne    10a68 <read_directory+0xe38>
   104c9:	test   r9,r9
   104cc:	je     104e0 <read_directory+0x8b0>
   104ce:	movzx  eax,BYTE PTR [r13+0x13]
   104d3:	mov    BYTE PTR [r15],al
   104d6:	test   r9b,0x2
   104da:	jne    10a7e <read_directory+0xe4e>
   104e0:	movsxd rcx,edx
   104e3:	xor    eax,eax
   104e5:	add    rcx,r13
   104e8:	test   edx,edx
   104ea:	jle    10504 <read_directory+0x8d4>
   104ec:	movzx  edx,BYTE PTR [rcx+rax*1+0x14]
   104f1:	test   dl,dl
   104f3:	je     10504 <read_directory+0x8d4>
   104f5:	mov    BYTE PTR [r15+rax*1+0x8],dl
   104fa:	add    rax,0x1
   104fe:	cmp    rax,0x3
   10502:	jne    104ec <read_directory+0x8bc>
   10504:	mov    ebx,0xa
   10509:	jmp    1051d <read_directory+0x8ed>
   1050b:	nop    DWORD PTR [rax+rax*1+0x0]
   10510:	movsxd rax,ebx
   10513:	mov    BYTE PTR [r15+rax*1],0x5f
   10518:	sub    ebx,0x1
   1051b:	js     1056c <read_directory+0x93c>
   1051d:	movsxd rax,ebx
   10520:	movzx  r13d,BYTE PTR [r15+rax*1]
   10525:	cmp    ebx,0xa
   10528:	je     10632 <read_directory+0xa02>
   1052e:	cmp    ebx,0x7
   10531:	je     10632 <read_directory+0xa02>
   10537:	lea    eax,[r13-0x21]
   1053b:	cmp    al,0x5e
   1053d:	ja     10510 <read_directory+0x8e0>
   1053f:	movzx  esi,r13b
   10543:	lea    rdi,[rip+0xf1db]        # 1f725 <desc_template.13939+0x465>
   1054a:	call   31d0 <strchr@plt>
   1054f:	test   rax,rax
   10552:	jne    10510 <read_directory+0x8e0>
   10554:	lea    eax,[r13-0x61]
   10558:	cmp    al,0x19
   1055a:	ja     10518 <read_directory+0x8e8>
   1055c:	movsxd rax,ebx
   1055f:	sub    r13d,0x20
   10563:	mov    BYTE PTR [r15+rax*1],r13b
   10567:	sub    ebx,0x1
   1056a:	jns    1051d <read_directory+0x8ed>
   1056c:	mov    ecx,0x30
   10571:	nop    DWORD PTR [rax+0x0]
   10578:	mov    edi,DWORD PTR [r12+0x8034]
   10580:	cmp    edi,ebp
   10582:	jbe    10a49 <read_directory+0xe19>
   10588:	mov    esi,DWORD PTR [r12+0x8038]
   10590:	mov    rdx,QWORD PTR [r12+0x8028]
   10598:	mov    eax,esi
   1059a:	imul   eax,ebp
   1059d:	add    rax,rdx
   105a0:	cmp    r15,rax
   105a3:	ja     105b9 <read_directory+0x989>
   105a5:	jmp    105dc <read_directory+0x9ac>
   105a7:	nop    WORD PTR [rax+rax*1+0x0]
   105b0:	add    rax,0x20
   105b4:	cmp    r15,rax
   105b7:	jbe    105dc <read_directory+0x9ac>
   105b9:	cmp    BYTE PTR [rax+0xb],0xf
   105bd:	je     105b0 <read_directory+0x980>
   105bf:	mov    rbx,QWORD PTR [r15]
   105c2:	cmp    QWORD PTR [rax],rbx
   105c5:	jne    105b0 <read_directory+0x980>
   105c7:	movzx  ebx,WORD PTR [r15+0x8]
   105cc:	cmp    WORD PTR [rax+0x8],bx
   105d0:	jne    105b0 <read_directory+0x980>
   105d2:	movzx  ebx,BYTE PTR [r15+0xa]
   105d7:	cmp    BYTE PTR [rax+0xa],bl
   105da:	jne    105b0 <read_directory+0x980>
   105dc:	cmp    r15,rax
   105df:	je     1068f <read_directory+0xa5f>
   105e5:	movzx  edx,BYTE PTR [r15+0x7]
   105ea:	cmp    dl,0x20
   105ed:	je     10670 <read_directory+0xa40>
   105f3:	mov    eax,0x7
   105f8:	jmp    10614 <read_directory+0x9e4>
   105fa:	nop    WORD PTR [rax+rax*1+0x0]
   10600:	mov    BYTE PTR [r15+rax*1],0x30
   10605:	sub    rax,0x1
   10609:	je     10578 <read_directory+0x948>
   1060f:	movzx  edx,BYTE PTR [r15+rax*1]
   10614:	movsxd rsi,eax
   10617:	cmp    dl,0x39
   1061a:	je     10600 <read_directory+0x9d0>
   1061c:	lea    edi,[rdx-0x30]
   1061f:	lea    eax,[rdx+0x1]
   10622:	cmp    dil,0xa
   10626:	cmovae eax,ecx
   10629:	mov    BYTE PTR [r15+rsi*1],al
   1062d:	jmp    10578 <read_directory+0x948>
   10632:	test   ebx,ebx
   10634:	jle    10537 <read_directory+0x907>
   1063a:	cmp    r13b,0x20
   1063e:	jne    10537 <read_directory+0x907>
   10644:	lea    eax,[rbx-0x1]
   10647:	cdqe   
   10649:	jmp    1065e <read_directory+0xa2e>
   1064b:	nop    DWORD PTR [rax+rax*1+0x0]
   10650:	sub    rax,0x1
   10654:	cmp    r13b,0x20
   10658:	jne    10537 <read_directory+0x907>
   1065e:	mov    ebx,eax
   10660:	movzx  r13d,BYTE PTR [r15+rax*1]
   10665:	test   eax,eax
   10667:	jg     10650 <read_directory+0xa20>
   10669:	jmp    10537 <read_directory+0x907>
   1066e:	xchg   ax,ax
   10670:	lea    rax,[r15+0x6]
   10674:	cmp    BYTE PTR [rax],0x20
   10677:	jne    10685 <read_directory+0xa55>
   10679:	mov    BYTE PTR [rax],0x7e
   1067c:	sub    rax,0x1
   10680:	cmp    r15,rax
   10683:	jne    10674 <read_directory+0xa44>
   10685:	movzx  edx,BYTE PTR [r15+0x7]
   1068a:	jmp    105f3 <read_directory+0x9c3>
   1068f:	test   r14,r14
   10692:	je     106f2 <read_directory+0xac2>
   10694:	mov    rcx,r15
   10697:	lea    r8,[r15+0x8]
   1069b:	xor    eax,eax
   1069d:	nop    DWORD PTR [rax]
   106a0:	ror    al,1
   106a2:	add    rcx,0x1
   106a6:	add    al,BYTE PTR [rcx-0x1]
   106a9:	cmp    r8,rcx
   106ac:	jne    106a0 <read_directory+0xa70>
   106ae:	xor    ecx,ecx
   106b0:	ror    al,1
   106b2:	add    al,BYTE PTR [r15+rcx*1+0x8]
   106b7:	add    rcx,0x1
   106bb:	cmp    rcx,0x3
   106bf:	jne    106b0 <read_directory+0xa80>
   106c1:	mov    ecx,DWORD PTR [rsp+0x20]
   106c5:	cmp    edi,ecx
   106c7:	jbe    10a49 <read_directory+0xe19>
   106cd:	imul   esi,ecx
   106d0:	add    rdx,rsi
   106d3:	cmp    r15,rdx
   106d6:	ja     106ec <read_directory+0xabc>
   106d8:	jmp    106f2 <read_directory+0xac2>
   106da:	nop    WORD PTR [rax+rax*1+0x0]
   106e0:	mov    BYTE PTR [rdx+0xd],al
   106e3:	add    rdx,0x20
   106e7:	cmp    r15,rdx
   106ea:	jbe    106f2 <read_directory+0xac2>
   106ec:	cmp    BYTE PTR [rdx+0xb],0xf
   106f0:	je     106e0 <read_directory+0xab0>
   106f2:	xor    r14d,r14d
   106f5:	jmp    10094 <read_directory+0x464>
   106fa:	cmp    edx,0x8
   106fd:	mov    r9d,0x8
   10703:	cmovle r9d,edx
   10707:	jmp    1045b <read_directory+0x82b>
   1070c:	mov    rax,QWORD PTR [r13+0x13]
   10710:	mov    rcx,r15
   10713:	mov    QWORD PTR [r15],rax
   10716:	mov    rax,QWORD PTR [rbx+r9*1-0x8]
   1071b:	mov    QWORD PTR [r15+r9*1-0x8],rax
   10720:	lea    rax,[r15+0x8]
   10724:	and    rax,0xfffffffffffffff8
   10728:	sub    rcx,rax
   1072b:	add    r9,rcx
   1072e:	sub    rbx,rcx
   10731:	and    r9,0xfffffffffffffff8
   10735:	cmp    r9,0x8
   10739:	jb     104e0 <read_directory+0x8b0>
   1073f:	and    r9,0xfffffffffffffff8
   10743:	xor    ecx,ecx
   10745:	mov    rsi,QWORD PTR [rbx+rcx*1]
   10749:	mov    QWORD PTR [rax+rcx*1],rsi
   1074d:	add    rcx,0x8
   10751:	cmp    rcx,r9
   10754:	jb     10745 <read_directory+0xb15>
   10756:	jmp    104e0 <read_directory+0x8b0>
   1075b:	xor    edi,edi
   1075d:	mov    WORD PTR [r15+0x1a],di
   10762:	jmp    101a0 <read_directory+0x570>
   10767:	mov    r15d,eax
   1076a:	mov    rdi,QWORD PTR [r12+0x8028]
   10772:	shl    r15d,0x5
   10776:	sub    r15d,eax
   10779:	add    r15d,edx
   1077c:	movsxd rsi,r15d
   1077f:	call   4cd0 <qemu_realloc>
   10784:	mov    QWORD PTR [r12+0x8028],rax
   1078c:	test   rax,rax
   1078f:	je     10af8 <read_directory+0xec8>
   10795:	mov    DWORD PTR [r12+0x8030],r15d
   1079d:	jmp    10039 <read_directory+0x409>
   107a2:	mov    eax,esi
   107a4:	mov    rdi,r8
   107a7:	mov    DWORD PTR [rsp+0x58],r9d
   107ac:	shl    eax,0x5
   107af:	mov    DWORD PTR [rsp+0x38],edx
   107b3:	sub    eax,esi
   107b5:	mov    DWORD PTR [rsp+0x48],ecx
   107b9:	add    r10d,eax
   107bc:	movsxd rsi,r10d
   107bf:	mov    DWORD PTR [rsp],r10d
   107c3:	call   4cd0 <qemu_realloc>
   107c8:	mov    edx,DWORD PTR [rsp+0x38]
   107cc:	mov    r9d,DWORD PTR [rsp+0x58]
   107d1:	test   rax,rax
   107d4:	mov    QWORD PTR [r12+0x8028],rax
   107dc:	je     10af0 <read_directory+0xec0>
   107e2:	mov    r10d,DWORD PTR [rsp]
   107e6:	mov    ecx,DWORD PTR [rsp+0x48]
   107ea:	mov    DWORD PTR [r12+0x8030],r10d
   107f2:	jmp    10474 <read_directory+0x844>
   107f7:	mov    rdi,QWORD PTR [rsp+0x10]
   107fc:	call   3070 <free@plt>
   10801:	jmp    fd08 <read_directory+0xd8>
   10806:	mov    DWORD PTR [rax+0x20],0x4
   1080d:	mov    ecx,DWORD PTR [rsp+0x40]
   10811:	mov    rax,QWORD PTR [r12+0x8080]
   10819:	mov    DWORD PTR [rax+0x10],ecx
   1081c:	jmp    102b0 <read_directory+0x680>
   10821:	mov    r14d,eax
   10824:	mov    rdi,QWORD PTR [r12+0x8040]
   1082c:	shl    r14d,0x5
   10830:	sub    r14d,eax
   10833:	add    r14d,edx
   10836:	movsxd rsi,r14d
   10839:	call   4cd0 <qemu_realloc>
   1083e:	mov    QWORD PTR [r12+0x8040],rax
   10846:	test   rax,rax
   10849:	je     377f <read_directory.cold.14>
   1084f:	mov    DWORD PTR [r12+0x8048],r14d
   10857:	jmp    10210 <read_directory+0x5e0>
   1085c:	xor    eax,eax
   1085e:	mov    r14d,0xa
   10864:	mov    WORD PTR [rsp+0x242],ax
   1086c:	jmp    fec3 <read_directory+0x293>
   10871:	mov    ebp,DWORD PTR [r12+0x8034]
   10879:	jmp    fcef <read_directory+0xbf>
   1087e:	imul   r11d,r14d,0x1a
   10882:	test   r11d,r11d
   10885:	jne    10b2f <read_directory+0xeff>
   1088b:	mov    r15d,DWORD PTR [rsp+0x20]
   10890:	jmp    103d6 <read_directory+0x7a6>
   10895:	mov    rdi,QWORD PTR [rsp+0x28]
   1089a:	call   3290 <closedir@plt>
   1089f:	jmp    108d7 <read_directory+0xca7>
   108a1:	nop    DWORD PTR [rax+0x0]
   108a8:	mov    DWORD PTR [r12+0x8034],ebp
   108b0:	cmp    ebx,ebp
   108b2:	jae    10a49 <read_directory+0xe19>
   108b8:	imul   ebx,DWORD PTR [r12+0x8038]
   108c1:	mov    rax,QWORD PTR [r12+0x8028]
   108c9:	add    rax,rbx
   108cc:	pxor   xmm0,xmm0
   108d0:	movups XMMWORD PTR [rax],xmm0
   108d3:	movups XMMWORD PTR [rax+0x10],xmm0
   108d7:	mov    ecx,DWORD PTR [r12+0x805c]
   108df:	mov    ebx,DWORD PTR [r12+0x8034]
   108e7:	xor    edx,edx
   108e9:	mov    esi,ecx
   108eb:	mov    eax,ebx
   108ed:	shl    esi,0x4
   108f0:	div    esi
   108f2:	test   edx,edx
   108f4:	je     1094b <read_directory+0xd1b>
   108f6:	lea    ebp,[rbx+0x1]
   108f9:	mov    eax,DWORD PTR [r12+0x8038]
   10901:	mov    edx,ebp
   10903:	imul   edx,eax
   10906:	cmp    edx,DWORD PTR [r12+0x8030]
   1090e:	jbe    108a8 <read_directory+0xc78>
   10910:	mov    r13d,eax
   10913:	mov    rdi,QWORD PTR [r12+0x8028]
   1091b:	shl    r13d,0x5
   1091f:	sub    r13d,eax
   10922:	add    r13d,edx
   10925:	movsxd rsi,r13d
   10928:	call   4cd0 <qemu_realloc>
   1092d:	mov    QWORD PTR [r12+0x8028],rax
   10935:	test   rax,rax
   10938:	je     10b39 <read_directory+0xf09>
   1093e:	mov    DWORD PTR [r12+0x8030],r13d
   10946:	jmp    108a8 <read_directory+0xc78>
   1094b:	mov    esi,DWORD PTR [rsp+0x40]
   1094f:	test   esi,esi
   10951:	jne    10963 <read_directory+0xd33>
   10953:	mov    r13d,ecx
   10956:	shl    r13d,0x5
   1095a:	cmp    r13d,ebx
   1095d:	ja     10a8f <read_directory+0xe5f>
   10963:	mov    eax,DWORD PTR [rsp+0x40]
   10967:	cmp    eax,DWORD PTR [r12+0x804c]
   1096f:	jae    10a49 <read_directory+0xe19>
   10975:	mov    ecx,eax
   10977:	mov    eax,DWORD PTR [r12+0x8034]
   1097f:	xor    edx,edx
   10981:	imul   ecx,DWORD PTR [r12+0x8050]
   1098a:	add    rcx,QWORD PTR [r12+0x8040]
   10992:	sub    eax,DWORD PTR [rcx+0x14]
   10995:	shl    eax,0x5
   10998:	div    DWORD PTR [r12+0x8058]
   109a0:	add    eax,DWORD PTR [rsp+0x24]
   109a4:	mov    DWORD PTR [rcx+0x4],eax
   109a7:	mov    eax,DWORD PTR [rcx+0x8]
   109aa:	cmp    eax,DWORD PTR [r12+0x8034]
   109b2:	jae    10a49 <read_directory+0xe19>
   109b8:	imul   eax,DWORD PTR [r12+0x8038]
   109c1:	mov    edx,DWORD PTR [rcx]
   109c3:	add    rax,QWORD PTR [r12+0x8028]
   109cb:	mov    WORD PTR [rax+0x1a],dx
   109cf:	shr    edx,0x10
   109d2:	mov    WORD PTR [rax+0x14],dx
   109d6:	xor    eax,eax
   109d8:	mov    rcx,QWORD PTR [rsp+0x248]
   109e0:	xor    rcx,QWORD PTR fs:0x28
   109e9:	jne    10ae1 <read_directory+0xeb1>
   109ef:	add    rsp,0x258
   109f6:	pop    rbx
   109f7:	pop    rbp
   109f8:	pop    r12
   109fa:	pop    r13
   109fc:	pop    r14
   109fe:	pop    r15
   10a00:	ret    
   10a01:	mov    rbx,QWORD PTR [rsp+0x10]
   10a06:	mov    rdi,QWORD PTR [rip+0x17af3]        # 28500 <stderr@@GLIBC_2.2.5>
   10a0d:	lea    rdx,[rip+0xed23]        # 1f737 <desc_template.13939+0x477>
   10a14:	xor    eax,eax
   10a16:	mov    esi,0x1
   10a1b:	mov    rcx,rbx
   10a1e:	call   3630 <__fprintf_chk@plt>
   10a23:	mov    rdi,rbx
   10a26:	call   3070 <free@plt>
   10a2b:	mov    rdi,QWORD PTR [rsp+0x28]
   10a30:	call   3290 <closedir@plt>
   10a35:	mov    eax,0xfffffffe
   10a3a:	jmp    109d8 <read_directory+0xda8>
   10a3c:	mov    DWORD PTR [rsp+0x34],0xffffffff
   10a44:	jmp    fcba <read_directory+0x8a>
   10a49:	lea    rcx,[rip+0xf400]        # 1fe50 <__PRETTY_FUNCTION__.13830>
   10a50:	mov    edx,0x60
   10a55:	lea    rsi,[rip+0xea6a]        # 1f4c6 <desc_template.13939+0x206>
   10a5c:	lea    rdi,[rip+0xea98]        # 1f4fb <desc_template.13939+0x23b>
   10a63:	call   3220 <__assert_fail@plt>
   10a68:	mov    eax,DWORD PTR [r13+0x13]
   10a6c:	mov    DWORD PTR [r15],eax
   10a6f:	mov    eax,DWORD PTR [rbx+r9*1-0x4]
   10a74:	mov    DWORD PTR [r15+r9*1-0x4],eax
   10a79:	jmp    104e0 <read_directory+0x8b0>
   10a7e:	movzx  eax,WORD PTR [rbx+r9*1-0x2]
   10a84:	mov    WORD PTR [r15+r9*1-0x2],ax
   10a8a:	jmp    104e0 <read_directory+0x8b0>
   10a8f:	mov    eax,DWORD PTR [r12+0x8038]
   10a97:	mov    edx,r13d
   10a9a:	imul   edx,eax
   10a9d:	cmp    edx,DWORD PTR [r12+0x8030]
   10aa5:	ja     10b40 <read_directory+0xf10>
   10aab:	mov    eax,DWORD PTR [r12+0x8034]
   10ab3:	shl    ecx,0x5
   10ab6:	mov    edx,ecx
   10ab8:	sub    edx,ebx
   10aba:	shl    rdx,0x5
   10abe:	cmp    eax,ebx
   10ac0:	jbe    10a49 <read_directory+0xe19>
   10ac2:	mov    edi,ebx
   10ac4:	xor    esi,esi
   10ac6:	imul   edi,DWORD PTR [r12+0x8038]
   10acf:	add    rdi,QWORD PTR [r12+0x8028]
   10ad7:	call   3240 <memset@plt>
   10adc:	jmp    10963 <read_directory+0xd33>
   10ae1:	call   3190 <__stack_chk_fail@plt>
   10ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   10af0:	xor    r15d,r15d
   10af3:	jmp    10496 <read_directory+0x866>
   10af8:	xor    r15d,r15d
   10afb:	jmp    10062 <read_directory+0x432>
   10b00:	lea    rcx,[rip+0xf1e9]        # 1fcf0 <__PRETTY_FUNCTION__.14179>
   10b07:	mov    edx,0x2c9
   10b0c:	lea    rsi,[rip+0xe9b3]        # 1f4c6 <desc_template.13939+0x206>
   10b13:	lea    rdi,[rip+0xef86]        # 1faa0 <desc_template.13939+0x7e0>
   10b1a:	call   3220 <__assert_fail@plt>
   10b1f:	nop
   10b20:	mov    eax,DWORD PTR [rbx]
   10b22:	mov    DWORD PTR [rbx+0x4],eax
   10b25:	mov    eax,0xffffffff
   10b2a:	jmp    109d8 <read_directory+0xda8>
   10b2f:	mov    r9d,DWORD PTR [rsp+0x20]
   10b34:	jmp    1034c <read_directory+0x71c>
   10b39:	xor    eax,eax
   10b3b:	jmp    108cc <read_directory+0xc9c>
   10b40:	mov    ebp,eax
   10b42:	mov    rdi,QWORD PTR [r12+0x8028]
   10b4a:	shl    ebp,0x5
   10b4d:	sub    ebp,eax
   10b4f:	add    ebp,edx
   10b51:	movsxd rsi,ebp
   10b54:	call   4cd0 <qemu_realloc>
   10b59:	mov    QWORD PTR [r12+0x8028],rax
   10b61:	test   rax,rax
   10b64:	je     10b8c <read_directory+0xf5c>
   10b66:	mov    edx,DWORD PTR [r12+0x805c]
   10b6e:	mov    DWORD PTR [r12+0x8030],ebp
   10b76:	mov    DWORD PTR [r12+0x8034],r13d
   10b7e:	shl    edx,0x5
   10b81:	sub    edx,ebx
   10b83:	shl    rdx,0x5
   10b87:	jmp    10ac2 <read_directory+0xe92>
   10b8c:	mov    eax,DWORD PTR [r12+0x8034]
   10b94:	mov    ecx,DWORD PTR [r12+0x805c]
   10b9c:	jmp    10ab3 <read_directory+0xe83>
   10ba1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   10bac:	nop    DWORD PTR [rax+0x0]

0000000000010bb0 <vvfat_open>:
   10bb0:	movabs rax,0x3f00000010
   10bba:	push   r15
   10bbc:	xor    edx,edx
   10bbe:	push   r14
   10bc0:	push   r13
   10bc2:	mov    r13,rsi
   10bc5:	lea    rsi,[rip+0xbd62]        # 1c92e <__PRETTY_FUNCTION__.13430+0x96>
   10bcc:	push   r12
   10bce:	mov    r12,rdi
   10bd1:	push   rbp
   10bd2:	push   rbx
   10bd3:	sub    rsp,0x18
   10bd7:	mov    rbx,QWORD PTR [rdi+0x40]
   10bdb:	mov    QWORD PTR [rbx],rdi
   10bde:	mov    DWORD PTR [rbx+0x800c],0x10
   10be8:	mov    DWORD PTR [rbx+0x805c],0x10
   10bf2:	mov    DWORD PTR [rdi+0x884],0x400
   10bfc:	mov    QWORD PTR [rdi+0x888],rax
   10c03:	mov    DWORD PTR [rbx+0x8098],0xffffffff
   10c0d:	mov    DWORD PTR [rbx+0x8],0x40
   10c14:	mov    DWORD PTR [rdi+0x8],0x1
   10c1b:	mov    rdi,r13
   10c1e:	mov    QWORD PTR [rbx+0x80a0],0x0
   10c29:	mov    QWORD PTR [rbx+0x80b0],0x0
   10c34:	mov    QWORD PTR [rbx+0x80a8],0x0
   10c3f:	mov    QWORD PTR [rbx+0x80b8],0x0
   10c4a:	mov    DWORD PTR [rbx+0x80e8],0x1
   10c54:	call   4960 <strstart>
   10c59:	test   eax,eax
   10c5b:	je     11488 <vvfat_open+0x8d8>
   10c61:	lea    rsi,[rip+0xeb01]        # 1f769 <desc_template.13939+0x4a9>
   10c68:	mov    rdi,r13
   10c6b:	call   36a0 <strstr@plt>
   10c70:	test   rax,rax
   10c73:	je     11808 <vvfat_open+0xc58>
   10c79:	mov    DWORD PTR [rbx+0x800c],0xc
   10c83:	mov    r14d,0x1
   10c89:	movabs rax,0x2400000002
   10c93:	mov    DWORD PTR [rbx+0x8],0x1
   10c9a:	mov    DWORD PTR [rbx+0x805c],0x2
   10ca4:	mov    DWORD PTR [r12+0x884],0x50
   10cb0:	mov    QWORD PTR [r12+0x888],rax
   10cb8:	mov    eax,0x1680
   10cbd:	mov    DWORD PTR [rbx+0x8070],eax
   10cc3:	lea    rsi,[rip+0xeaa8]        # 1f772 <desc_template.13939+0x4b2>
   10cca:	mov    rdi,r13
   10ccd:	call   36a0 <strstr@plt>
   10cd2:	test   rax,rax
   10cd5:	je     11410 <vvfat_open+0x860>
   10cdb:	mov    rcx,QWORD PTR [rip+0x1781e]        # 28500 <stderr@@GLIBC_2.2.5>
   10ce2:	mov    edx,0x4c
   10ce7:	mov    esi,0x1
   10cec:	lea    rdi,[rip+0xef5d]        # 1fc50 <desc_template.13939+0x990>
   10cf3:	call   3610 <fwrite@plt>
   10cf8:	mov    DWORD PTR [rbx+0x800c],0x20
   10d02:	lea    rsi,[rip+0xea78]        # 1f781 <desc_template.13939+0x4c1>
   10d09:	mov    rdi,r13
   10d0c:	call   36a0 <strstr@plt>
   10d11:	test   rax,rax
   10d14:	je     10e37 <vvfat_open+0x287>
   10d1a:	mov    edx,DWORD PTR [rbx+0x806c]
   10d20:	mov    eax,DWORD PTR [rbx+0x8070]
   10d26:	mov    esi,0x1
   10d2b:	mov    ecx,DWORD PTR [rbx+0x805c]
   10d31:	sub    rax,rdx
   10d34:	cqo    
   10d36:	idiv   rcx
   10d39:	movsxd rdi,eax
   10d3c:	call   3310 <calloc@plt>
   10d41:	mov    edi,0x400
   10d46:	mov    QWORD PTR [rbx+0x80c8],0x0
   10d51:	mov    QWORD PTR [rbx+0x80c0],rax
   10d58:	mov    QWORD PTR [rbx+0x80d0],0x0
   10d63:	mov    DWORD PTR [rbx+0x80d8],0x18
   10d6d:	call   4cb0 <qemu_malloc>
   10d72:	mov    esi,0x400
   10d77:	mov    QWORD PTR [rbx+0x80a8],rax
   10d7e:	mov    rdi,rax
   10d81:	call   17410 <get_tmp_filename>
   10d86:	mov    edx,DWORD PTR [rbx+0x8070]
   10d8c:	xor    r8d,r8d
   10d8f:	mov    rsi,QWORD PTR [rbx+0x80a8]
   10d96:	lea    rcx,[rip+0xbb91]        # 1c92e <__PRETTY_FUNCTION__.13430+0x96>
   10d9d:	lea    rdi,[rip+0x165bc]        # 27360 <bdrv_qcow>
   10da4:	call   173f0 <bdrv_create>
   10da9:	test   eax,eax
   10dab:	js     11488 <vvfat_open+0x8d8>
   10db1:	lea    rdi,[rip+0xe88a]        # 1f642 <desc_template.13939+0x382>
   10db8:	call   17330 <bdrv_new>
   10dbd:	mov    QWORD PTR [rbx+0x80b0],rax
   10dc4:	test   rax,rax
   10dc7:	je     11488 <vvfat_open+0x8d8>
   10dcd:	mov    rsi,QWORD PTR [rbx+0x80a8]
   10dd4:	xor    edx,edx
   10dd6:	mov    rdi,rax
   10dd9:	call   18440 <bdrv_open>
   10dde:	test   eax,eax
   10de0:	js     11488 <vvfat_open+0x8d8>
   10de6:	mov    rdi,QWORD PTR [rbx+0x80a8]
   10ded:	call   30c0 <unlink@plt>
   10df2:	mov    rbp,QWORD PTR [rbx]
   10df5:	mov    esi,0x1
   10dfa:	mov    edi,0x8c8
   10dff:	call   3310 <calloc@plt>
   10e04:	lea    rsi,[rip+0x16e15]        # 27c20 <vvfat_write_target>
   10e0b:	mov    QWORD PTR [rbp+0x850],rax
   10e12:	mov    rax,QWORD PTR [rbx]
   10e15:	mov    rax,QWORD PTR [rax+0x850]
   10e1c:	mov    QWORD PTR [rax+0x38],rsi
   10e20:	mov    rax,QWORD PTR [rbx]
   10e23:	mov    rax,QWORD PTR [rax+0x850]
   10e2a:	mov    QWORD PTR [rax+0x40],rbx
   10e2e:	mov    DWORD PTR [r12+0x8],0x0
   10e37:	mov    esi,0x3a
   10e3c:	mov    rdi,r13
   10e3f:	call   3200 <strrchr@plt>
   10e44:	sub    rax,r13
   10e47:	cmp    eax,0x2
   10e4a:	jle    11b27 <vvfat_open+0xf77>
   10e50:	movsxd r15,eax
   10e53:	cmp    BYTE PTR [r13+r15*1-0x2],0x3a
   10e59:	je     11720 <vvfat_open+0xb70>
   10e5f:	lea    rbp,[r13+r15*1+0x1]
   10e64:	mov    eax,DWORD PTR [r12+0x884]
   10e6c:	lea    r13,[rbx+0xc]
   10e70:	mov    edx,0x8000
   10e75:	xor    esi,esi
   10e77:	imul   eax,DWORD PTR [r12+0x888]
   10e80:	mov    rdi,r13
   10e83:	imul   eax,DWORD PTR [r12+0x88c]
   10e8c:	cdqe   
   10e8e:	mov    QWORD PTR [r12],rax
   10e92:	call   3240 <memset@plt>
   10e97:	mov    edi,DWORD PTR [rbx+0x805c]
   10e9d:	shl    edi,0x9
   10ea0:	mov    DWORD PTR [rbx+0x8058],edi
   10ea6:	call   4cb0 <qemu_malloc>
   10eab:	xor    edx,edx
   10ead:	mov    esi,0x400
   10eb2:	xor    edi,edi
   10eb4:	mov    QWORD PTR [rbx+0x8090],rax
   10ebb:	mov    eax,DWORD PTR [rbx+0x805c]
   10ec1:	mov    QWORD PTR [rbx+0x8040],0x0
   10ecc:	mov    QWORD PTR [rbx+0x8048],0x0
   10ed7:	shl    eax,0xc
   10eda:	div    DWORD PTR [rbx+0x800c]
   10ee0:	mov    DWORD PTR [rbx+0x8050],0x28
   10eea:	mov    QWORD PTR [rbx+0x8028],0x0
   10ef5:	mov    QWORD PTR [rbx+0x8030],0x0
   10f00:	mov    DWORD PTR [rbx+0x8038],0x20
   10f0a:	xor    edx,edx
   10f0c:	lea    ecx,[rax+0x1]
   10f0f:	mov    eax,DWORD PTR [rbx+0x8070]
   10f15:	add    eax,ecx
   10f17:	div    ecx
   10f19:	mov    DWORD PTR [rbx+0x8060],eax
   10f1f:	call   4cd0 <qemu_realloc>
   10f24:	mov    QWORD PTR [rbx+0x8028],rax
   10f2b:	test   rax,rax
   10f2e:	je     37a2 <vvfat_open.cold.15>
   10f34:	movabs rsi,0x100000400
   10f3e:	mov    edx,0x5441
   10f43:	mov    QWORD PTR [rbx+0x8030],rsi
   10f4a:	movabs rsi,0x46565620554d4551
   10f54:	mov    BYTE PTR [rax+0xb],0x28
   10f58:	mov    QWORD PTR [rax],rsi
   10f5b:	mov    WORD PTR [rax+0x8],dx
   10f5f:	mov    BYTE PTR [rax+0xa],0x0
   10f63:	mov    eax,DWORD PTR [rbx+0x800c]
   10f69:	cmp    eax,0xc
   10f6c:	je     11748 <vvfat_open+0xb98>
   10f72:	mov    QWORD PTR [rbx+0x8010],0x0
   10f7d:	xor    ecx,ecx
   10f7f:	cmp    eax,0x20
   10f82:	mov    eax,DWORD PTR [rbx+0x8060]
   10f88:	mov    QWORD PTR [rbx+0x8018],0x0
   10f93:	sete   cl
   10f96:	xor    edx,edx
   10f98:	lea    ecx,[rcx+rcx*1+0x2]
   10f9c:	shl    eax,0x9
   10f9f:	div    ecx
   10fa1:	mov    DWORD PTR [rbx+0x8020],ecx
   10fa7:	mov    r15d,ecx
   10faa:	imul   r15d,eax
   10fae:	test   r15d,r15d
   10fb1:	jne    113c0 <vvfat_open+0x810>
   10fb7:	xor    edi,edi
   10fb9:	xor    edx,edx
   10fbb:	xor    esi,esi
   10fbd:	call   3240 <memset@plt>
   10fc2:	mov    eax,DWORD PTR [rbx+0x800c]
   10fc8:	cmp    eax,0x10
   10fcb:	je     11840 <vvfat_open+0xc90>
   10fd1:	cmp    eax,0x20
   10fd4:	je     11830 <vvfat_open+0xc80>
   10fda:	cmp    eax,0xc
   10fdd:	mov    edx,0xfff
   10fe2:	mov    eax,0x0
   10fe7:	cmove  eax,edx
   10fea:	mov    DWORD PTR [rbx+0x8078],eax
   10ff0:	mov    eax,DWORD PTR [rbx+0x8]
   10ff3:	mov    edx,DWORD PTR [rbx+0x8060]
   10ff9:	mov    ecx,DWORD PTR [rbx+0x805c]
   10fff:	mov    r15d,DWORD PTR [rbx+0x804c]
   11006:	lea    edx,[rax+rdx*2]
   11009:	mov    eax,DWORD PTR [rbx+0x8070]
   1100f:	mov    DWORD PTR [rbx+0x806c],edx
   11015:	sub    rax,rdx
   11018:	cqo    
   1101a:	idiv   rcx
   1101d:	lea    edx,[r15+0x1]
   11021:	mov    ecx,edx
   11023:	mov    DWORD PTR [rbx+0x8074],eax
   11029:	mov    eax,DWORD PTR [rbx+0x8050]
   1102f:	imul   ecx,eax
   11032:	cmp    ecx,DWORD PTR [rbx+0x8048]
   11038:	ja     117c0 <vvfat_open+0xc10>
   1103e:	mov    DWORD PTR [rbx+0x804c],edx
   11044:	cmp    r15d,edx
   11047:	jae    11a80 <vvfat_open+0xed0>
   1104d:	imul   r15d,DWORD PTR [rbx+0x8050]
   11055:	add    r15,QWORD PTR [rbx+0x8040]
   1105c:	mov    rdi,rbp
   1105f:	movabs rax,0xffffffff00000000
   11069:	mov    DWORD PTR [r15],0x0
   11070:	mov    QWORD PTR [r15+0x8],rax
   11074:	mov    DWORD PTR [r15+0x10],0xffffffff
   1107c:	call   3650 <strdup@plt>
   11081:	mov    QWORD PTR [r15+0x18],rax
   11085:	mov    rcx,rax
   11088:	mov    esi,DWORD PTR [rcx]
   1108a:	add    rcx,0x4
   1108e:	lea    edx,[rsi-0x1010101]
   11094:	not    esi
   11096:	and    edx,esi
   11098:	and    edx,0x80808080
   1109e:	je     11088 <vvfat_open+0x4d8>
   110a0:	mov    esi,edx
   110a2:	shr    esi,0x10
   110a5:	test   edx,0x8080
   110ab:	cmove  edx,esi
   110ae:	lea    rsi,[rcx+0x2]
   110b2:	cmove  rcx,rsi
   110b6:	mov    esi,edx
   110b8:	add    sil,dl
   110bb:	sbb    rcx,0x3
   110bf:	sub    rcx,rax
   110c2:	test   ecx,ecx
   110c4:	je     110d5 <vvfat_open+0x525>
   110c6:	lea    edx,[rcx-0x1]
   110c9:	add    rdx,rax
   110cc:	cmp    BYTE PTR [rdx],0x2f
   110cf:	je     11850 <vvfat_open+0xca0>
   110d5:	mov    QWORD PTR [r15+0x20],0x4
   110dd:	mov    QWORD PTR [rbx+0x80e0],rax
   110e4:	mov    eax,DWORD PTR [rbx+0x804c]
   110ea:	test   eax,eax
   110ec:	je     11a80 <vvfat_open+0xed0>
   110f2:	xor    ecx,ecx
   110f4:	xor    r15d,r15d
   110f7:	jmp    11175 <vvfat_open+0x5c5>
   110f9:	nop    DWORD PTR [rax+0x0]
   11100:	mov    edx,DWORD PTR [rbp+0x8]
   11103:	cmp    edx,DWORD PTR [rbx+0x8034]
   11109:	jae    11a80 <vvfat_open+0xed0>
   1110f:	imul   edx,DWORD PTR [rbx+0x8038]
   11116:	mov    rsi,QWORD PTR [rbx+0x8028]
   1111d:	sub    eax,0x1
   11120:	add    rsi,rdx
   11123:	xor    edx,edx
   11125:	div    DWORD PTR [rbx+0x8058]
   1112b:	lea    eax,[rcx+rax*1+0x1]
   1112f:	mov    DWORD PTR [rbp+0x4],eax
   11132:	mov    WORD PTR [rsi+0x1a],cx
   11136:	shr    ecx,0x10
   11139:	mov    WORD PTR [rsi+0x14],cx
   1113d:	mov    ecx,DWORD PTR [rbp+0x0]
   11140:	mov    esi,DWORD PTR [rbp+0x4]
   11143:	cmp    esi,ecx
   11145:	jbe    11ade <vvfat_open+0xf2e>
   1114b:	cmp    DWORD PTR [rbx+0x8074],esi
   11151:	jb     11440 <vvfat_open+0x890>
   11157:	test   r8d,r8d
   1115a:	jne    11210 <vvfat_open+0x660>
   11160:	mov    eax,DWORD PTR [rbx+0x804c]
   11166:	add    r15d,0x1
   1116a:	mov    ecx,esi
   1116c:	cmp    r15d,eax
   1116f:	jae    114a0 <vvfat_open+0x8f0>
   11175:	xor    r8d,r8d
   11178:	test   r15d,r15d
   1117b:	mov    ebp,r15d
   1117e:	setne  r8b
   11182:	imul   ebp,DWORD PTR [rbx+0x8050]
   11189:	add    rbp,QWORD PTR [rbx+0x8040]
   11190:	mov    eax,DWORD PTR [rbp+0x20]
   11193:	test   al,0x4
   11195:	jne    111c0 <vvfat_open+0x610>
   11197:	test   eax,eax
   11199:	jne    11afd <vvfat_open+0xf4d>
   1119f:	mov    eax,DWORD PTR [rbp+0x4]
   111a2:	mov    DWORD PTR [rbp+0x20],0x1
   111a9:	mov    DWORD PTR [rbp+0x0],ecx
   111ac:	test   eax,eax
   111ae:	jne    11100 <vvfat_open+0x550>
   111b4:	lea    esi,[rcx+0x1]
   111b7:	xor    r8d,r8d
   111ba:	mov    DWORD PTR [rbp+0x4],esi
   111bd:	jmp    11143 <vvfat_open+0x593>
   111bf:	nop
   111c0:	mov    DWORD PTR [rbp+0x0],ecx
   111c3:	mov    esi,r15d
   111c6:	mov    rdi,rbx
   111c9:	mov    DWORD PTR [rsp+0x8],r8d
   111ce:	call   fc30 <read_directory>
   111d3:	mov    r8d,DWORD PTR [rsp+0x8]
   111d8:	test   eax,eax
   111da:	jne    11a30 <vvfat_open+0xe80>
   111e0:	cmp    r15d,DWORD PTR [rbx+0x804c]
   111e7:	jae    11a80 <vvfat_open+0xed0>
   111ed:	mov    ebp,r15d
   111f0:	imul   ebp,DWORD PTR [rbx+0x8050]
   111f7:	add    rbp,QWORD PTR [rbx+0x8040]
   111fe:	mov    ecx,DWORD PTR [rbp+0x0]
   11201:	mov    esi,DWORD PTR [rbp+0x4]
   11204:	jmp    11143 <vvfat_open+0x593>
   11209:	nop    DWORD PTR [rax+0x0]
   11210:	lea    r9d,[rcx+0x1]
   11214:	mov    edx,ecx
   11216:	mov    eax,esi
   11218:	shl    r9d,0x4
   1121c:	nop    DWORD PTR [rax+0x0]
   11220:	sub    eax,0x1
   11223:	mov    edi,edx
   11225:	mov    r10d,DWORD PTR [rbx+0x800c]
   1122c:	mov    r8d,DWORD PTR [rbx+0x801c]
   11233:	cmp    eax,edx
   11235:	jbe    11300 <vvfat_open+0x750>
   1123b:	add    edx,0x1
   1123e:	cmp    r10d,0x20
   11242:	je     112e0 <vvfat_open+0x730>
   11248:	cmp    r10d,0x10
   1124c:	je     112c0 <vvfat_open+0x710>
   1124e:	lea    eax,[rcx+rcx*2]
   11251:	shr    eax,1
   11253:	cmp    eax,r8d
   11256:	jae    11a80 <vvfat_open+0xed0>
   1125c:	imul   eax,DWORD PTR [rbx+0x8020]
   11263:	add    rax,QWORD PTR [rbx+0x8010]
   1126a:	and    edi,0x1
   1126d:	jne    112a0 <vvfat_open+0x6f0>
   1126f:	movzx  edi,BYTE PTR [rax+0x1]
   11273:	mov    r8d,edx
   11276:	mov    BYTE PTR [rax],dl
   11278:	shr    r8d,0x8
   1127c:	and    edi,0xfffffff0
   1127f:	and    r8d,0xf
   11283:	or     edi,r8d
   11286:	mov    BYTE PTR [rax+0x1],dil
   1128a:	nop    WORD PTR [rax+rax*1+0x0]
   11290:	mov    eax,DWORD PTR [rbp+0x4]
   11293:	add    ecx,0x1
   11296:	add    r9d,0x10
   1129a:	jmp    11220 <vvfat_open+0x670>
   1129c:	nop    DWORD PTR [rax+0x0]
   112a0:	movzx  edi,BYTE PTR [rax]
   112a3:	and    edi,0xf
   112a6:	or     edi,r9d
   112a9:	mov    BYTE PTR [rax],dil
   112ac:	mov    edi,edx
   112ae:	shr    edi,0x4
   112b1:	mov    BYTE PTR [rax+0x1],dil
   112b5:	jmp    11290 <vvfat_open+0x6e0>
   112b7:	nop    WORD PTR [rax+rax*1+0x0]
   112c0:	cmp    ecx,r8d
   112c3:	jae    11a80 <vvfat_open+0xed0>
   112c9:	imul   edi,DWORD PTR [rbx+0x8020]
   112d0:	mov    rax,QWORD PTR [rbx+0x8010]
   112d7:	mov    WORD PTR [rax+rdi*1],dx
   112db:	jmp    11290 <vvfat_open+0x6e0>
   112dd:	nop    DWORD PTR [rax]
   112e0:	cmp    ecx,r8d
   112e3:	jae    11a80 <vvfat_open+0xed0>
   112e9:	imul   edi,DWORD PTR [rbx+0x8020]
   112f0:	mov    rax,QWORD PTR [rbx+0x8010]
   112f7:	mov    DWORD PTR [rax+rdi*1],edx
   112fa:	jmp    11290 <vvfat_open+0x6e0>
   112fc:	nop    DWORD PTR [rax+0x0]
   11300:	mov    ecx,DWORD PTR [rbx+0x8078]
   11306:	cmp    r10d,0x20
   1130a:	je     113a0 <vvfat_open+0x7f0>
   11310:	cmp    r10d,0x10
   11314:	je     11378 <vvfat_open+0x7c8>
   11316:	lea    edx,[rax+rax*2]
   11319:	shr    edx,1
   1131b:	cmp    edx,r8d
   1131e:	jae    11a80 <vvfat_open+0xed0>
   11324:	imul   edx,DWORD PTR [rbx+0x8020]
   1132b:	add    rdx,QWORD PTR [rbx+0x8010]
   11332:	test   al,0x1
   11334:	je     11358 <vvfat_open+0x7a8>
   11336:	movzx  eax,BYTE PTR [rdx]
   11339:	mov    edi,ecx
   1133b:	shl    edi,0x4
   1133e:	and    eax,0xf
   11341:	or     eax,edi
   11343:	mov    BYTE PTR [rdx],al
   11345:	mov    eax,ecx
   11347:	shr    eax,0x4
   1134a:	mov    BYTE PTR [rdx+0x1],al
   1134d:	jmp    11160 <vvfat_open+0x5b0>
   11352:	nop    WORD PTR [rax+rax*1+0x0]
   11358:	movzx  edi,BYTE PTR [rdx+0x1]
   1135c:	mov    eax,ecx
   1135e:	mov    BYTE PTR [rdx],cl
   11360:	shr    eax,0x8
   11363:	and    edi,0xfffffff0
   11366:	and    eax,0xf
   11369:	or     eax,edi
   1136b:	mov    BYTE PTR [rdx+0x1],al
   1136e:	jmp    11160 <vvfat_open+0x5b0>
   11373:	nop    DWORD PTR [rax+rax*1+0x0]
   11378:	cmp    eax,r8d
   1137b:	jae    11a80 <vvfat_open+0xed0>
   11381:	imul   eax,DWORD PTR [rbx+0x8020]
   11388:	mov    rdx,QWORD PTR [rbx+0x8010]
   1138f:	mov    WORD PTR [rdx+rax*1],cx
   11393:	jmp    11160 <vvfat_open+0x5b0>
   11398:	nop    DWORD PTR [rax+rax*1+0x0]
   113a0:	cmp    eax,r8d
   113a3:	jae    11a80 <vvfat_open+0xed0>
   113a9:	imul   eax,DWORD PTR [rbx+0x8020]
   113b0:	mov    rdx,QWORD PTR [rbx+0x8010]
   113b7:	mov    DWORD PTR [rdx+rax*1],ecx
   113ba:	jmp    11160 <vvfat_open+0x5b0>
   113bf:	nop
   113c0:	mov    edx,ecx
   113c2:	xor    edi,edi
   113c4:	mov    DWORD PTR [rsp+0x8],eax
   113c8:	shl    edx,0x5
   113cb:	sub    edx,ecx
   113cd:	add    r15d,edx
   113d0:	movsxd rsi,r15d
   113d3:	call   4cd0 <qemu_realloc>
   113d8:	mov    r8d,DWORD PTR [rsp+0x8]
   113dd:	test   rax,rax
   113e0:	mov    rdi,rax
   113e3:	mov    QWORD PTR [rbx+0x8010],rax
   113ea:	je     11b1c <vvfat_open+0xf6c>
   113f0:	mov    DWORD PTR [rbx+0x8018],r15d
   113f7:	mov    edx,r15d
   113fa:	mov    DWORD PTR [rbx+0x801c],r8d
   11401:	jmp    10fbb <vvfat_open+0x40b>
   11406:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11410:	lea    rsi,[rip+0xe360]        # 1f777 <desc_template.13939+0x4b7>
   11417:	mov    rdi,r13
   1141a:	call   36a0 <strstr@plt>
   1141f:	test   rax,rax
   11422:	je     11998 <vvfat_open+0xde8>
   11428:	mov    DWORD PTR [rbx+0x800c],0x10
   11432:	jmp    10d02 <vvfat_open+0x152>
   11437:	nop    WORD PTR [rax+rax*1+0x0]
   11440:	mov    ecx,DWORD PTR [rbx+0x800c]
   11446:	lea    r8,[rip+0xe306]        # 1f753 <desc_template.13939+0x493>
   1144d:	cmp    ecx,0xc
   11450:	jne    1146e <vvfat_open+0x8be>
   11452:	lea    r8,[rip+0xe300]        # 1f759 <desc_template.13939+0x499>
   11459:	lea    rax,[rip+0xe301]        # 1f761 <desc_template.13939+0x4a1>
   11460:	cmp    DWORD PTR [rbx+0x8070],0xb40
   1146a:	cmovne r8,rax
   1146e:	mov    rdi,QWORD PTR [rip+0x1708b]        # 28500 <stderr@@GLIBC_2.2.5>
   11475:	lea    rdx,[rip+0xe844]        # 1fcc0 <desc_template.13939+0xa00>
   1147c:	mov    esi,0x1
   11481:	xor    eax,eax
   11483:	call   3630 <__fprintf_chk@plt>
   11488:	mov    r14d,0xffffffff
   1148e:	add    rsp,0x18
   11492:	mov    eax,r14d
   11495:	pop    rbx
   11496:	pop    rbp
   11497:	pop    r12
   11499:	pop    r13
   1149b:	pop    r14
   1149d:	pop    r15
   1149f:	ret    
   114a0:	test   eax,eax
   114a2:	je     11a80 <vvfat_open+0xed0>
   114a8:	mov    rdx,QWORD PTR [rbx+0x8040]
   114af:	mov    ecx,DWORD PTR [rbx+0x801c]
   114b5:	mov    eax,DWORD PTR [rdx+0x4]
   114b8:	imul   eax,DWORD PTR [rbx+0x805c]
   114bf:	mov    DWORD PTR [rbx+0x8064],eax
   114c5:	mov    eax,DWORD PTR [rdx+0x4]
   114c8:	mov    edx,DWORD PTR [rbx+0x800c]
   114ce:	mov    DWORD PTR [rbx+0x8068],eax
   114d4:	mov    eax,DWORD PTR [rbx+0x8078]
   114da:	cmp    edx,0x20
   114dd:	je     119d0 <vvfat_open+0xe20>
   114e3:	cmp    edx,0x10
   114e6:	je     11860 <vvfat_open+0xcb0>
   114ec:	test   ecx,ecx
   114ee:	je     11a80 <vvfat_open+0xed0>
   114f4:	mov    rcx,QWORD PTR [rbx+0x8010]
   114fb:	movzx  edx,BYTE PTR [rcx+0x1]
   114ff:	mov    BYTE PTR [rcx],al
   11501:	shr    eax,0x8
   11504:	and    eax,0xf
   11507:	and    edx,0xfffffff0
   1150a:	or     eax,edx
   1150c:	mov    BYTE PTR [rcx+0x1],al
   1150f:	mov    edx,DWORD PTR [rbx+0x800c]
   11515:	mov    eax,DWORD PTR [rbx+0x8078]
   1151b:	mov    ecx,DWORD PTR [rbx+0x801c]
   11521:	cmp    edx,0x20
   11524:	je     119f0 <vvfat_open+0xe40>
   1152a:	cmp    edx,0x10
   1152d:	je     11a60 <vvfat_open+0xeb0>
   11533:	cmp    ecx,0x1
   11536:	jbe    11a80 <vvfat_open+0xed0>
   1153c:	mov    edx,DWORD PTR [rbx+0x8020]
   11542:	add    rdx,QWORD PTR [rbx+0x8010]
   11549:	mov    esi,eax
   1154b:	shr    eax,0x4
   1154e:	movzx  ecx,BYTE PTR [rdx]
   11551:	shl    esi,0x4
   11554:	mov    BYTE PTR [rdx+0x1],al
   11557:	and    ecx,0xf
   1155a:	or     ecx,esi
   1155c:	mov    BYTE PTR [rdx],cl
   1155e:	mov    eax,DWORD PTR [rbx+0x8]
   11561:	mov    r11d,0x3eeb
   11567:	mov    ebp,0x200
   1156c:	movabs rsi,0x20202020554d4551
   11576:	mov    QWORD PTR [rbx+0x8080],0x0
   11581:	mov    r15d,0x1
   11587:	mov    ecx,0x0
   1158c:	add    eax,0x7fffff
   11591:	shl    eax,0x9
   11594:	add    rax,r13
   11597:	mov    WORD PTR [rax],r11w
   1159b:	mov    BYTE PTR [rax+0x2],0x90
   1159f:	mov    QWORD PTR [rax+0x3],rsi
   115a3:	mov    WORD PTR [rax+0xb],bp
   115a7:	mov    edx,DWORD PTR [rbx+0x805c]
   115ad:	mov    WORD PTR [rax+0xe],r15w
   115b2:	mov    BYTE PTR [rax+0xd],dl
   115b5:	mov    BYTE PTR [rax+0x10],0x2
   115b9:	movzx  edx,WORD PTR [rbx+0x8064]
   115c0:	shl    edx,0x4
   115c3:	mov    WORD PTR [rax+0x11],dx
   115c7:	mov    edx,DWORD PTR [rbx+0x8070]
   115cd:	cmp    edx,0x10000
   115d3:	cmovae edx,ecx
   115d6:	mov    WORD PTR [rax+0x13],dx
   115da:	mov    edx,0xfffffff8
   115df:	cmp    DWORD PTR [rbx+0x800c],0xc
   115e6:	mov    ecx,edx
   115e8:	je     11a10 <vvfat_open+0xe60>
   115ee:	mov    BYTE PTR [rax+0x15],cl
   115f1:	mov    rcx,QWORD PTR [rbx+0x8010]
   115f8:	mov    r9d,0xfffffabe
   115fe:	movabs rsi,0x46565620554d4551
   11608:	mov    r10d,0x5441
   1160e:	mov    BYTE PTR [rcx],dl
   11610:	mov    edx,DWORD PTR [rbx+0x8060]
   11616:	xor    ecx,ecx
   11618:	mov    WORD PTR [rax+0x16],dx
   1161c:	mov    rdx,QWORD PTR [rbx]
   1161f:	mov    edx,DWORD PTR [rdx+0x88c]
   11625:	mov    WORD PTR [rax+0x18],dx
   11629:	mov    rdx,QWORD PTR [rbx]
   1162c:	mov    edx,DWORD PTR [rdx+0x888]
   11632:	mov    WORD PTR [rax+0x1a],dx
   11636:	mov    edx,0x3f
   1163b:	cmp    DWORD PTR [rbx+0x8],0x1
   1163f:	cmove  edx,ecx
   11642:	mov    DWORD PTR [rax+0x1c],edx
   11645:	mov    edx,DWORD PTR [rbx+0x8070]
   1164b:	cmp    edx,0xffff
   11651:	cmovbe edx,ecx
   11654:	mov    ecx,0xffffff80
   11659:	mov    DWORD PTR [rax+0x20],edx
   1165c:	mov    edx,0x0
   11661:	cmp    DWORD PTR [rbx+0x800c],0xc
   11668:	cmovne edx,ecx
   1166b:	mov    DWORD PTR [rax+0x25],0x1afd2900
   11672:	mov    WORD PTR [rax+0x29],r9w
   11677:	mov    BYTE PTR [rax+0x24],dl
   1167a:	movabs rdx,0x2020203231544146
   11684:	mov    QWORD PTR [rax+0x2b],rsi
   11688:	mov    WORD PTR [rax+0x33],r10w
   1168d:	mov    BYTE PTR [rax+0x35],0x20
   11691:	mov    ecx,DWORD PTR [rbx+0x800c]
   11697:	cmp    ecx,0xc
   1169a:	je     116b7 <vvfat_open+0xb07>
   1169c:	movabs rdx,0x2020203631544146
   116a6:	cmp    ecx,0x10
   116a9:	movabs rcx,0x2020203233544146
   116b3:	cmovne rdx,rcx
   116b7:	mov    r8d,0xffffaa55
   116bd:	mov    QWORD PTR [rax+0x36],rdx
   116c1:	mov    WORD PTR [rax+0x1fe],r8w
   116c9:	mov    eax,DWORD PTR [rbx+0x805c]
   116cf:	imul   eax,DWORD PTR [rbx+0x8074]
   116d6:	add    eax,DWORD PTR [rbx+0x806c]
   116dc:	cmp    DWORD PTR [rbx+0x8],0x40
   116e0:	mov    esi,eax
   116e2:	mov    DWORD PTR [rbx+0x8070],eax
   116e8:	je     11880 <vvfat_open+0xcd0>
   116ee:	test   r14d,r14d
   116f1:	je     1148e <vvfat_open+0x8de>
   116f7:	mov    DWORD PTR [r12+0x884],0x0
   11703:	xor    r14d,r14d
   11706:	mov    QWORD PTR [r12+0x888],0x0
   11712:	jmp    1148e <vvfat_open+0x8de>
   11717:	nop    WORD PTR [rax+rax*1+0x0]
   11720:	call   36d0 <__ctype_b_loc@plt>
   11725:	lea    rbp,[r13+r15*1-0x1]
   1172a:	movzx  edx,BYTE PTR [rbp+0x0]
   1172e:	mov    rax,QWORD PTR [rax]
   11731:	test   BYTE PTR [rax+rdx*2+0x1],0x4
   11736:	jne    10e64 <vvfat_open+0x2b4>
   1173c:	jmp    10e5f <vvfat_open+0x2af>
   11741:	nop    DWORD PTR [rax+0x0]
   11748:	mov    DWORD PTR [rbx+0x8020],0x1
   11752:	mov    eax,DWORD PTR [rbx+0x8060]
   11758:	mov    QWORD PTR [rbx+0x8010],0x0
   11763:	mov    QWORD PTR [rbx+0x8018],0x0
   1176e:	lea    eax,[rax+rax*2]
   11771:	shl    eax,0x9
   11774:	cmp    eax,0x1
   11777:	jbe    10fb7 <vvfat_open+0x407>
   1177d:	shr    eax,1
   1177f:	xor    edi,edi
   11781:	lea    r15d,[rax+0x1f]
   11785:	mov    DWORD PTR [rsp+0x8],eax
   11789:	movsxd rsi,r15d
   1178c:	call   4cd0 <qemu_realloc>
   11791:	mov    edx,DWORD PTR [rsp+0x8]
   11795:	test   rax,rax
   11798:	mov    rdi,rax
   1179b:	mov    QWORD PTR [rbx+0x8010],rax
   117a2:	je     11b1c <vvfat_open+0xf6c>
   117a8:	mov    DWORD PTR [rbx+0x801c],edx
   117ae:	mov    edx,r15d
   117b1:	mov    DWORD PTR [rbx+0x8018],r15d
   117b8:	jmp    10fbb <vvfat_open+0x40b>
   117bd:	nop    DWORD PTR [rax]
   117c0:	mov    esi,eax
   117c2:	mov    rdi,QWORD PTR [rbx+0x8040]
   117c9:	mov    DWORD PTR [rsp+0xc],edx
   117cd:	shl    esi,0x5
   117d0:	sub    esi,eax
   117d2:	add    ecx,esi
   117d4:	movsxd rsi,ecx
   117d7:	mov    DWORD PTR [rsp+0x8],ecx
   117db:	call   4cd0 <qemu_realloc>
   117e0:	mov    QWORD PTR [rbx+0x8040],rax
   117e7:	test   rax,rax
   117ea:	je     37ac <vvfat_open.cold.15+0xa>
   117f0:	mov    ecx,DWORD PTR [rsp+0x8]
   117f4:	mov    edx,DWORD PTR [rsp+0xc]
   117f8:	mov    DWORD PTR [rbx+0x8048],ecx
   117fe:	jmp    1103e <vvfat_open+0x48e>
   11803:	nop    DWORD PTR [rax+rax*1+0x0]
   11808:	mov    eax,DWORD PTR [r12+0x888]
   11810:	xor    r14d,r14d
   11813:	imul   eax,DWORD PTR [r12+0x884]
   1181c:	imul   eax,DWORD PTR [r12+0x88c]
   11825:	jmp    10cbd <vvfat_open+0x10d>
   1182a:	nop    WORD PTR [rax+rax*1+0x0]
   11830:	mov    DWORD PTR [rbx+0x8078],0xfffffff
   1183a:	jmp    10ff0 <vvfat_open+0x440>
   1183f:	nop
   11840:	mov    DWORD PTR [rbx+0x8078],0xffff
   1184a:	jmp    10ff0 <vvfat_open+0x440>
   1184f:	nop
   11850:	mov    BYTE PTR [rdx],0x0
   11853:	mov    rax,QWORD PTR [r15+0x18]
   11857:	jmp    110d5 <vvfat_open+0x525>
   1185c:	nop    DWORD PTR [rax+0x0]
   11860:	test   ecx,ecx
   11862:	je     11a80 <vvfat_open+0xed0>
   11868:	mov    rdx,QWORD PTR [rbx+0x8010]
   1186f:	mov    WORD PTR [rdx],ax
   11872:	jmp    1150f <vvfat_open+0x95f>
   11877:	nop    WORD PTR [rax+rax*1+0x0]
   11880:	lea    rdi,[r13+0x8]
   11884:	mov    QWORD PTR [rbx+0xc],0x0
   1188c:	xor    eax,eax
   1188e:	mov    QWORD PTR [r13+0x1f8],0x0
   11899:	and    rdi,0xfffffffffffffff8
   1189d:	sub    r13,rdi
   118a0:	lea    ecx,[r13+0x200]
   118a7:	shr    ecx,0x3
   118aa:	rep stos QWORD PTR es:[rdi],rax
   118ad:	mov    BYTE PTR [rbx+0x1ca],0x80
   118b4:	mov    eax,0x3f
   118b9:	mov    DWORD PTR [rbx+0x1c4],0xbe1afdfa
   118c3:	cdq    
   118c4:	mov    rcx,QWORD PTR [rbx]
   118c7:	idiv   DWORD PTR [rcx+0x88c]
   118cd:	mov    edi,edx
   118cf:	cdq    
   118d0:	idiv   DWORD PTR [rcx+0x888]
   118d6:	cmp    eax,DWORD PTR [rcx+0x884]
   118dc:	jge    11ac0 <vvfat_open+0xf10>
   118e2:	mov    BYTE PTR [rbx+0x1cb],dl
   118e8:	mov    edx,eax
   118ea:	add    edi,0x1
   118ed:	xor    r8d,r8d
   118f0:	sar    edx,0x8
   118f3:	mov    BYTE PTR [rbx+0x1cd],al
   118f9:	shl    edx,0x6
   118fc:	or     edi,edx
   118fe:	mov    BYTE PTR [rbx+0x1cc],dil
   11905:	mov    eax,esi
   11907:	cdq    
   11908:	idiv   DWORD PTR [rcx+0x88c]
   1190e:	mov    edi,edx
   11910:	cdq    
   11911:	idiv   DWORD PTR [rcx+0x888]
   11917:	cmp    eax,DWORD PTR [rcx+0x884]
   1191d:	jge    11aa0 <vvfat_open+0xef0>
   11923:	mov    BYTE PTR [rbx+0x1cf],dl
   11929:	mov    edx,eax
   1192b:	add    edi,0x1
   1192e:	sar    edx,0x8
   11931:	mov    BYTE PTR [rbx+0x1d1],al
   11937:	shl    edx,0x6
   1193a:	or     edi,edx
   1193c:	mov    BYTE PTR [rbx+0x1d0],dil
   11943:	mov    edx,DWORD PTR [rbx+0x800c]
   11949:	lea    eax,[rsi-0x3f]
   1194c:	mov    DWORD PTR [rbx+0x1d2],0x3f
   11956:	mov    DWORD PTR [rbx+0x1d6],eax
   1195c:	mov    eax,0x1
   11961:	cmp    edx,0xc
   11964:	je     1197b <vvfat_open+0xdcb>
   11966:	lea    eax,[r8+0xb]
   1196a:	cmp    edx,0x10
   1196d:	jne    1197b <vvfat_open+0xdcb>
   1196f:	cmp    r8d,0x1
   11973:	sbb    eax,eax
   11975:	and    eax,0xfffffff8
   11978:	add    eax,0xe
   1197b:	mov    BYTE PTR [rbx+0x1ce],al
   11981:	mov    eax,0xffffaa55
   11986:	mov    WORD PTR [rbx+0x20a],ax
   1198d:	jmp    116ee <vvfat_open+0xb3e>
   11992:	nop    WORD PTR [rax+rax*1+0x0]
   11998:	lea    rsi,[rip+0xdddd]        # 1f77c <desc_template.13939+0x4bc>
   1199f:	mov    rdi,r13
   119a2:	call   36a0 <strstr@plt>
   119a7:	test   rax,rax
   119aa:	je     10d02 <vvfat_open+0x152>
   119b0:	mov    DWORD PTR [rbx+0x800c],0xc
   119ba:	mov    DWORD PTR [rbx+0x8070],0xb40
   119c4:	jmp    10d02 <vvfat_open+0x152>
   119c9:	nop    DWORD PTR [rax+0x0]
   119d0:	test   ecx,ecx
   119d2:	je     11a80 <vvfat_open+0xed0>
   119d8:	mov    rdx,QWORD PTR [rbx+0x8010]
   119df:	mov    DWORD PTR [rdx],eax
   119e1:	jmp    1150f <vvfat_open+0x95f>
   119e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   119f0:	cmp    ecx,0x1
   119f3:	jbe    11a80 <vvfat_open+0xed0>
   119f9:	mov    edx,DWORD PTR [rbx+0x8020]
   119ff:	mov    rcx,QWORD PTR [rbx+0x8010]
   11a06:	mov    DWORD PTR [rcx+rdx*1],eax
   11a09:	jmp    1155e <vvfat_open+0x9ae>
   11a0e:	xchg   ax,ax
   11a10:	cmp    DWORD PTR [rbx+0x8070],0x1680
   11a1a:	jne    115ee <vvfat_open+0xa3e>
   11a20:	mov    edx,0xfffffff9
   11a25:	mov    ecx,edx
   11a27:	jmp    115ee <vvfat_open+0xa3e>
   11a2c:	nop    DWORD PTR [rax+0x0]
   11a30:	mov    rcx,QWORD PTR [rbp+0x18]
   11a34:	mov    rdi,QWORD PTR [rip+0x16ac5]        # 28500 <stderr@@GLIBC_2.2.5>
   11a3b:	lea    rdx,[rip+0xdd4b]        # 1f78d <desc_template.13939+0x4cd>
   11a42:	xor    eax,eax
   11a44:	mov    esi,0x1
   11a49:	mov    r14d,0xffffffff
   11a4f:	call   3630 <__fprintf_chk@plt>
   11a54:	jmp    1148e <vvfat_open+0x8de>
   11a59:	nop    DWORD PTR [rax+0x0]
   11a60:	cmp    ecx,0x1
   11a63:	jbe    11a80 <vvfat_open+0xed0>
   11a65:	mov    edx,DWORD PTR [rbx+0x8020]
   11a6b:	mov    rcx,QWORD PTR [rbx+0x8010]
   11a72:	mov    WORD PTR [rcx+rdx*1],ax
   11a76:	jmp    1155e <vvfat_open+0x9ae>
   11a7b:	nop    DWORD PTR [rax+rax*1+0x0]
   11a80:	lea    rcx,[rip+0xe3c9]        # 1fe50 <__PRETTY_FUNCTION__.13830>
   11a87:	mov    edx,0x60
   11a8c:	lea    rsi,[rip+0xda33]        # 1f4c6 <desc_template.13939+0x206>
   11a93:	lea    rdi,[rip+0xda61]        # 1f4fb <desc_template.13939+0x23b>
   11a9a:	call   3220 <__assert_fail@plt>
   11a9f:	nop
   11aa0:	mov    edx,0xffffffff
   11aa5:	mov    BYTE PTR [rbx+0x1d1],0xff
   11aac:	mov    r8d,0x1
   11ab2:	mov    WORD PTR [rbx+0x1cf],dx
   11ab9:	jmp    11943 <vvfat_open+0xd93>
   11abe:	xchg   ax,ax
   11ac0:	mov    edi,0xffffffff
   11ac5:	mov    BYTE PTR [rbx+0x1cd],0xff
   11acc:	mov    r8d,0x1
   11ad2:	mov    WORD PTR [rbx+0x1cb],di
   11ad9:	jmp    11905 <vvfat_open+0xd55>
   11ade:	lea    rcx,[rip+0xe21b]        # 1fd00 <__PRETTY_FUNCTION__.14216>
   11ae5:	mov    edx,0x3a4
   11aea:	lea    rsi,[rip+0xd9d5]        # 1f4c6 <desc_template.13939+0x206>
   11af1:	lea    rdi,[rip+0xda17]        # 1f50f <desc_template.13939+0x24f>
   11af8:	call   3220 <__assert_fail@plt>
   11afd:	lea    rcx,[rip+0xe1fc]        # 1fd00 <__PRETTY_FUNCTION__.14216>
   11b04:	mov    edx,0x395
   11b09:	lea    rsi,[rip+0xd9b6]        # 1f4c6 <desc_template.13939+0x206>
   11b10:	lea    rdi,[rip+0xe189]        # 1fca0 <desc_template.13939+0x9e0>
   11b17:	call   3220 <__assert_fail@plt>
   11b1c:	mov    edx,DWORD PTR [rbx+0x8018]
   11b22:	jmp    10fbb <vvfat_open+0x40b>
   11b27:	lea    rcx,[rip+0xe1ea]        # 1fd18 <__PRETTY_FUNCTION__.14237>
   11b2e:	mov    edx,0x42b
   11b33:	lea    rsi,[rip+0xd98c]        # 1f4c6 <desc_template.13939+0x206>
   11b3a:	lea    rdi,[rip+0xdc45]        # 1f786 <desc_template.13939+0x4c6>
   11b41:	call   3220 <__assert_fail@plt>
   11b46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011b50 <qcow_make_empty>:
   11b50:	xor    eax,eax
   11b52:	ret    
   11b53:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   11b5e:	xchg   ax,ax

0000000000011b60 <qcow_get_info>:
   11b60:	mov    rax,QWORD PTR [rdi+0x40]
   11b64:	mov    edx,DWORD PTR [rax+0xc]
   11b67:	mov    DWORD PTR [rsi],edx
   11b69:	movsxd rdx,DWORD PTR [rax+0x20]
   11b6d:	mov    ecx,DWORD PTR [rax+0x14]
   11b70:	add    ecx,DWORD PTR [rax+0x8]
   11b73:	xor    eax,eax
   11b75:	shl    rdx,cl
   11b78:	mov    QWORD PTR [rsi+0x8],rdx
   11b7c:	ret    
   11b7d:	nop    DWORD PTR [rax]

0000000000011b80 <qcow_get_buffer>:
   11b80:	push   rbp
   11b81:	mov    rax,rsi
   11b84:	mov    rsi,rdx
   11b87:	push   rbx
   11b88:	mov    rdx,rax
   11b8b:	mov    rbx,rdi
   11b8e:	sub    rsp,0x8
   11b92:	mov    ebp,DWORD PTR [rdi+0x880]
   11b98:	mov    DWORD PTR [rdi+0x880],0x1
   11ba2:	call   17e40 <bdrv_pread>
   11ba7:	mov    DWORD PTR [rbx+0x880],ebp
   11bad:	add    rsp,0x8
   11bb1:	pop    rbx
   11bb2:	pop    rbp
   11bb3:	ret    
   11bb4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   11bbf:	nop

0000000000011bc0 <qcow_put_buffer>:
   11bc0:	push   r12
   11bc2:	mov    r12d,DWORD PTR [rdi+0x880]
   11bc9:	mov    rax,rsi
   11bcc:	mov    rsi,rdx
   11bcf:	push   rbp
   11bd0:	mov    rdx,rax
   11bd3:	mov    ebp,ecx
   11bd5:	push   rbx
   11bd6:	mov    rbx,rdi
   11bd9:	mov    DWORD PTR [rdi+0x880],0x1
   11be3:	call   18450 <bdrv_pwrite>
   11be8:	mov    DWORD PTR [rbx+0x880],r12d
   11bef:	mov    eax,ebp
   11bf1:	pop    rbx
   11bf2:	pop    rbp
   11bf3:	pop    r12
   11bf5:	ret    
   11bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011c00 <qcow_snapshot_list>:
   11c00:	push   r15
   11c02:	push   r14
   11c04:	push   r13
   11c06:	push   r12
   11c08:	push   rbp
   11c09:	push   rbx
   11c0a:	sub    rsp,0x18
   11c0e:	mov    r15,QWORD PTR [rdi+0x40]
   11c12:	mov    QWORD PTR [rsp+0x8],rsi
   11c17:	movsxd rdi,DWORD PTR [r15+0x35c]
   11c1e:	imul   rdi,rdi,0x198
   11c25:	call   4d00 <qemu_mallocz>
   11c2a:	mov    r14,rax
   11c2d:	mov    eax,DWORD PTR [r15+0x35c]
   11c34:	test   eax,eax
   11c36:	jle    11caa <qcow_snapshot_list+0xaa>
   11c38:	mov    rbx,r14
   11c3b:	xor    r13d,r13d
   11c3e:	xor    r12d,r12d
   11c41:	nop    DWORD PTR [rax+0x0]
   11c48:	mov    rbp,QWORD PTR [r15+0x360]
   11c4f:	mov    rdi,rbx
   11c52:	mov    esi,0x80
   11c57:	add    r12d,0x1
   11c5b:	add    rbp,r13
   11c5e:	add    r13,0x38
   11c62:	mov    rdx,QWORD PTR [rbp+0x10]
   11c66:	call   48a0 <pstrcpy>
   11c6b:	mov    rdx,QWORD PTR [rbp+0x18]
   11c6f:	mov    esi,0x100
   11c74:	lea    rdi,[rbx+0x80]
   11c7b:	add    rbx,0x198
   11c82:	call   48a0 <pstrcpy>
   11c87:	mov    eax,DWORD PTR [rbp+0x20]
   11c8a:	mov    DWORD PTR [rbx-0x18],eax
   11c8d:	mov    eax,DWORD PTR [rbp+0x24]
   11c90:	mov    DWORD PTR [rbx-0x14],eax
   11c93:	mov    eax,DWORD PTR [rbp+0x28]
   11c96:	mov    DWORD PTR [rbx-0x10],eax
   11c99:	mov    rax,QWORD PTR [rbp+0x30]
   11c9d:	mov    QWORD PTR [rbx-0x8],rax
   11ca1:	cmp    DWORD PTR [r15+0x35c],r12d
   11ca8:	jg     11c48 <qcow_snapshot_list+0x48>
   11caa:	mov    rax,QWORD PTR [rsp+0x8]
   11caf:	mov    QWORD PTR [rax],r14
   11cb2:	mov    eax,DWORD PTR [r15+0x35c]
   11cb9:	add    rsp,0x18
   11cbd:	pop    rbx
   11cbe:	pop    rbp
   11cbf:	pop    r12
   11cc1:	pop    r13
   11cc3:	pop    r14
   11cc5:	pop    r15
   11cc7:	ret    
   11cc8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011cd0 <qcow_aio_flush>:
   11cd0:	mov    rax,QWORD PTR [rdi+0x40]
   11cd4:	mov    rdi,QWORD PTR [rax]
   11cd7:	jmp    19870 <bdrv_aio_flush>
   11cdc:	nop    DWORD PTR [rax+0x0]

0000000000011ce0 <qcow_aio_cancel>:
   11ce0:	push   rbx
   11ce1:	mov    rbx,rdi
   11ce4:	mov    rdi,QWORD PTR [rdi+0x50]
   11ce8:	test   rdi,rdi
   11ceb:	je     11cf2 <qcow_aio_cancel+0x12>
   11ced:	call   19860 <bdrv_aio_cancel>
   11cf2:	mov    rdi,rbx
   11cf5:	pop    rbx
   11cf6:	jmp    19ba0 <qemu_aio_release>
   11cfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011d00 <qcow_flush>:
   11d00:	mov    rax,QWORD PTR [rdi+0x40]
   11d04:	mov    rdi,QWORD PTR [rax]
   11d07:	jmp    18a40 <bdrv_flush>
   11d0c:	nop    DWORD PTR [rax+0x0]

0000000000011d10 <qcow_close>:
   11d10:	push   rbp
   11d11:	mov    rbp,rdi
   11d14:	push   rbx
   11d15:	sub    rsp,0x8
   11d19:	mov    rbx,QWORD PTR [rdi+0x40]
   11d1d:	mov    rdi,QWORD PTR [rbx+0x40]
   11d21:	call   4ca0 <qemu_free>
   11d26:	mov    rdi,QWORD PTR [rbx+0x48]
   11d2a:	call   4ca0 <qemu_free>
   11d2f:	mov    rdi,QWORD PTR [rbx+0x110]
   11d36:	call   4ca0 <qemu_free>
   11d3b:	mov    rdi,QWORD PTR [rbx+0x118]
   11d42:	call   4ca0 <qemu_free>
   11d47:	mov    rbp,QWORD PTR [rbp+0x40]
   11d4b:	mov    rdi,QWORD PTR [rbp+0x148]
   11d52:	call   4ca0 <qemu_free>
   11d57:	mov    rdi,QWORD PTR [rbp+0x128]
   11d5e:	call   4ca0 <qemu_free>
   11d63:	mov    rdi,QWORD PTR [rbx]
   11d66:	add    rsp,0x8
   11d6a:	pop    rbx
   11d6b:	pop    rbp
   11d6c:	jmp    17470 <bdrv_delete>
   11d71:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   11d7c:	nop    DWORD PTR [rax+0x0]

0000000000011d80 <get_refcount.isra.4>:
   11d80:	mov    eax,DWORD PTR [rdi+0x8]
   11d83:	mov    rdx,rsi
   11d86:	lea    ecx,[rax-0x1]
   11d89:	xor    eax,eax
   11d8b:	sar    rdx,cl
   11d8e:	cmp    DWORD PTR [rdi+0x138],edx
   11d94:	jbe    11e10 <get_refcount.isra.4+0x90>
   11d96:	push   r12
   11d98:	movsxd rdx,edx
   11d9b:	push   rbp
   11d9c:	push   rbx
   11d9d:	mov    r8,QWORD PTR [rdi+0x128]
   11da4:	mov    r12,QWORD PTR [r8+rdx*8]
   11da8:	test   r12,r12
   11dab:	je     11e03 <get_refcount.isra.4+0x83>
   11dad:	mov    rbp,rsi
   11db0:	mov    rbx,rdi
   11db3:	mov    rdx,QWORD PTR [rdi+0x148]
   11dba:	cmp    r12,QWORD PTR [rdi+0x140]
   11dc1:	je     11dea <get_refcount.isra.4+0x6a>
   11dc3:	mov    ecx,DWORD PTR [rdi+0xc]
   11dc6:	mov    rdi,QWORD PTR [rdi]
   11dc9:	mov    rsi,r12
   11dcc:	call   17e40 <bdrv_pread>
   11dd1:	cmp    eax,DWORD PTR [rbx+0xc]
   11dd4:	jne    11e11 <get_refcount.isra.4+0x91>
   11dd6:	mov    eax,DWORD PTR [rbx+0x8]
   11dd9:	mov    QWORD PTR [rbx+0x140],r12
   11de0:	mov    rdx,QWORD PTR [rbx+0x148]
   11de7:	lea    ecx,[rax-0x1]
   11dea:	mov    eax,0x1
   11def:	shl    eax,cl
   11df1:	sub    eax,0x1
   11df4:	and    eax,ebp
   11df6:	cdqe   
   11df8:	movzx  eax,WORD PTR [rdx+rax*2]
   11dfc:	rol    ax,0x8
   11e00:	movzx  eax,ax
   11e03:	pop    rbx
   11e04:	pop    rbp
   11e05:	pop    r12
   11e07:	ret    
   11e08:	nop    DWORD PTR [rax+rax*1+0x0]
   11e10:	ret    
   11e11:	mov    eax,0x1
   11e16:	jmp    11e03 <get_refcount.isra.4+0x83>
   11e18:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011e20 <alloc_clusters_noref>:
   11e20:	push   r14
   11e22:	mov    r14,rdi
   11e25:	push   r13
   11e27:	push   r12
   11e29:	push   rbp
   11e2a:	push   rbx
   11e2b:	mov    rbp,QWORD PTR [rdi+0x40]
   11e2f:	mov    eax,DWORD PTR [rbp+0xc]
   11e32:	mov    ecx,DWORD PTR [rbp+0x8]
   11e35:	lea    r13d,[rax-0x1]
   11e39:	movsxd r13,r13d
   11e3c:	add    r13,rsi
   11e3f:	sar    r13,cl
   11e42:	mov    r12d,r13d
   11e45:	test   r12d,r12d
   11e48:	jle    11e77 <alloc_clusters_noref+0x57>
   11e4a:	xor    ebx,ebx
   11e4c:	nop    DWORD PTR [rax+0x0]
   11e50:	mov    rsi,QWORD PTR [rbp+0x150]
   11e57:	lea    rax,[rsi+0x1]
   11e5b:	mov    QWORD PTR [rbp+0x150],rax
   11e62:	mov    rdi,QWORD PTR [r14+0x40]
   11e66:	call   11d80 <get_refcount.isra.4>
   11e6b:	test   eax,eax
   11e6d:	jne    11e45 <alloc_clusters_noref+0x25>
   11e6f:	add    ebx,0x1
   11e72:	cmp    ebx,r12d
   11e75:	jne    11e50 <alloc_clusters_noref+0x30>
   11e77:	mov    rax,QWORD PTR [rbp+0x150]
   11e7e:	movsxd r13,r13d
   11e81:	mov    ecx,DWORD PTR [rbp+0x8]
   11e84:	pop    rbx
   11e85:	pop    rbp
   11e86:	sub    rax,r13
   11e89:	pop    r12
   11e8b:	pop    r13
   11e8d:	shl    rax,cl
   11e90:	pop    r14
   11e92:	ret    
   11e93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   11e9e:	xchg   ax,ax

0000000000011ea0 <l2_load.isra.5>:
   11ea0:	push   r13
   11ea2:	xor    eax,eax
   11ea4:	push   r12
   11ea6:	push   rbp
   11ea7:	push   rbx
   11ea8:	sub    rsp,0x8
   11eac:	mov    rbx,QWORD PTR [rdi]
   11eaf:	nop
   11eb0:	mov    edx,eax
   11eb2:	cmp    rsi,QWORD PTR [rbx+rax*8+0x50]
   11eb7:	je     11f50 <l2_load.isra.5+0xb0>
   11ebd:	add    rax,0x1
   11ec1:	cmp    rax,0x10
   11ec5:	jne    11eb0 <l2_load.isra.5+0x10>
   11ec7:	mov    ecx,DWORD PTR [rbx+0x14]
   11eca:	mov    r9,QWORD PTR [rbx+0x48]
   11ece:	mov    r8,rbx
   11ed1:	xor    eax,eax
   11ed3:	xor    ebp,ebp
   11ed5:	mov    edi,0xffffffff
   11eda:	nop    WORD PTR [rax+rax*1+0x0]
   11ee0:	mov    edx,DWORD PTR [r8+rax*4+0xd0]
   11ee8:	cmp    edx,edi
   11eea:	jae    11ef1 <l2_load.isra.5+0x51>
   11eec:	movsxd rbp,eax
   11eef:	mov    edi,edx
   11ef1:	add    rax,0x1
   11ef5:	cmp    rax,0x10
   11ef9:	jne    11ee0 <l2_load.isra.5+0x40>
   11efb:	mov    eax,ebp
   11efd:	mov    rdi,QWORD PTR [rbx]
   11f00:	mov    r13,rsi
   11f03:	shl    eax,cl
   11f05:	cdqe   
   11f07:	lea    r12,[r9+rax*8]
   11f0b:	mov    eax,DWORD PTR [rbx+0x18]
   11f0e:	mov    rdx,r12
   11f11:	lea    ecx,[rax*8+0x0]
   11f18:	call   17e40 <bdrv_pread>
   11f1d:	movsxd rdx,DWORD PTR [rbx+0x18]
   11f21:	cdqe   
   11f23:	shl    rdx,0x3
   11f27:	cmp    rax,rdx
   11f2a:	jne    11fb0 <l2_load.isra.5+0x110>
   11f30:	mov    QWORD PTR [rbx+rbp*8+0x50],r13
   11f35:	mov    DWORD PTR [rbx+rbp*4+0xd0],0x1
   11f40:	add    rsp,0x8
   11f44:	mov    rax,r12
   11f47:	pop    rbx
   11f48:	pop    rbp
   11f49:	pop    r12
   11f4b:	pop    r13
   11f4d:	ret    
   11f4e:	xchg   ax,ax
   11f50:	cdqe   
   11f52:	lea    rcx,[rbx+rax*4]
   11f56:	mov    eax,DWORD PTR [rcx+0xd0]
   11f5c:	add    eax,0x1
   11f5f:	mov    DWORD PTR [rcx+0xd0],eax
   11f65:	cmp    eax,0xffffffff
   11f68:	je     11f90 <l2_load.isra.5+0xf0>
   11f6a:	mov    ecx,DWORD PTR [rbx+0x14]
   11f6d:	mov    r9,QWORD PTR [rbx+0x48]
   11f71:	shl    edx,cl
   11f73:	movsxd rdx,edx
   11f76:	lea    r12,[r9+rdx*8]
   11f7a:	test   r12,r12
   11f7d:	jne    11f40 <l2_load.isra.5+0xa0>
   11f7f:	mov    r8,QWORD PTR [rdi]
   11f82:	jmp    11ed1 <l2_load.isra.5+0x31>
   11f87:	nop    WORD PTR [rax+rax*1+0x0]
   11f90:	lea    rax,[rbx+0xd0]
   11f97:	lea    rcx,[rbx+0x110]
   11f9e:	xchg   ax,ax
   11fa0:	shr    DWORD PTR [rax],1
   11fa2:	add    rax,0x4
   11fa6:	cmp    rax,rcx
   11fa9:	jne    11fa0 <l2_load.isra.5+0x100>
   11fab:	jmp    11f6a <l2_load.isra.5+0xca>
   11fad:	nop    DWORD PTR [rax]
   11fb0:	add    rsp,0x8
   11fb4:	xor    r12d,r12d
   11fb7:	pop    rbx
   11fb8:	mov    rax,r12
   11fbb:	pop    rbp
   11fbc:	pop    r12
   11fbe:	pop    r13
   11fc0:	ret    
   11fc1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   11fcc:	nop    DWORD PTR [rax+0x0]

0000000000011fd0 <qcow_free_snapshots.isra.7>:
   11fd0:	push   r12
   11fd2:	mov    r12,rdi
   11fd5:	push   rbp
   11fd6:	push   rbx
   11fd7:	mov    eax,DWORD PTR [rdi+0x35c]
   11fdd:	test   eax,eax
   11fdf:	jle    12029 <qcow_free_snapshots.isra.7+0x59>
   11fe1:	xor    ebp,ebp
   11fe3:	nop    DWORD PTR [rax+rax*1+0x0]
   11fe8:	lea    rbx,[rbp*8+0x0]
   11ff0:	mov    rax,QWORD PTR [r12+0x360]
   11ff8:	sub    rbx,rbp
   11ffb:	add    rbp,0x1
   11fff:	shl    rbx,0x3
   12003:	mov    rdi,QWORD PTR [rax+rbx*1+0x18]
   12008:	call   4ca0 <qemu_free>
   1200d:	mov    rax,QWORD PTR [r12+0x360]
   12015:	mov    rdi,QWORD PTR [rax+rbx*1+0x10]
   1201a:	call   4ca0 <qemu_free>
   1201f:	cmp    DWORD PTR [r12+0x35c],ebp
   12027:	jg     11fe8 <qcow_free_snapshots.isra.7+0x18>
   12029:	mov    rdi,QWORD PTR [r12+0x360]
   12031:	call   4ca0 <qemu_free>
   12036:	pop    rbx
   12037:	pop    rbp
   12038:	mov    QWORD PTR [r12+0x360],0x0
   12044:	mov    DWORD PTR [r12+0x35c],0x0
   12050:	pop    r12
   12052:	ret    
   12053:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1205e:	xchg   ax,ax

0000000000012060 <find_snapshot_by_id.isra.8>:
   12060:	push   r13
   12062:	push   r12
   12064:	push   rbp
   12065:	push   rbx
   12066:	mov    ebx,0xffffffff
   1206b:	sub    rsp,0x8
   1206f:	mov    r13d,DWORD PTR [rdi+0x35c]
   12076:	test   r13d,r13d
   12079:	jle    120ac <find_snapshot_by_id.isra.8+0x4c>
   1207b:	mov    rbp,QWORD PTR [rdi+0x360]
   12082:	mov    r12,rsi
   12085:	xor    ebx,ebx
   12087:	add    rbp,0x10
   1208b:	jmp    1209c <find_snapshot_by_id.isra.8+0x3c>
   1208d:	nop    DWORD PTR [rax]
   12090:	add    ebx,0x1
   12093:	add    rbp,0x38
   12097:	cmp    ebx,r13d
   1209a:	je     120c0 <find_snapshot_by_id.isra.8+0x60>
   1209c:	mov    rdi,QWORD PTR [rbp+0x0]
   120a0:	mov    rsi,r12
   120a3:	call   3330 <strcmp@plt>
   120a8:	test   eax,eax
   120aa:	jne    12090 <find_snapshot_by_id.isra.8+0x30>
   120ac:	add    rsp,0x8
   120b0:	mov    eax,ebx
   120b2:	pop    rbx
   120b3:	pop    rbp
   120b4:	pop    r12
   120b6:	pop    r13
   120b8:	ret    
   120b9:	nop    DWORD PTR [rax+0x0]
   120c0:	add    rsp,0x8
   120c4:	mov    ebx,0xffffffff
   120c9:	mov    eax,ebx
   120cb:	pop    rbx
   120cc:	pop    rbp
   120cd:	pop    r12
   120cf:	pop    r13
   120d1:	ret    
   120d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   120dd:	nop    DWORD PTR [rax]

00000000000120e0 <find_snapshot_by_id_or_name.isra.9>:
   120e0:	push   r13
   120e2:	push   r12
   120e4:	mov    r12,rsi
   120e7:	push   rbp
   120e8:	mov    rbp,rdi
   120eb:	push   rbx
   120ec:	sub    rsp,0x8
   120f0:	call   12060 <find_snapshot_by_id.isra.8>
   120f5:	mov    ebx,eax
   120f7:	test   eax,eax
   120f9:	jns    1213c <find_snapshot_by_id_or_name.isra.9+0x5c>
   120fb:	mov    r13d,DWORD PTR [rbp+0x35c]
   12102:	mov    ebx,0xffffffff
   12107:	test   r13d,r13d
   1210a:	jle    1213c <find_snapshot_by_id_or_name.isra.9+0x5c>
   1210c:	mov    rbp,QWORD PTR [rbp+0x360]
   12113:	xor    ebx,ebx
   12115:	add    rbp,0x18
   12119:	jmp    1212c <find_snapshot_by_id_or_name.isra.9+0x4c>
   1211b:	nop    DWORD PTR [rax+rax*1+0x0]
   12120:	add    ebx,0x1
   12123:	add    rbp,0x38
   12127:	cmp    ebx,r13d
   1212a:	je     12150 <find_snapshot_by_id_or_name.isra.9+0x70>
   1212c:	mov    rdi,QWORD PTR [rbp+0x0]
   12130:	mov    rsi,r12
   12133:	call   3330 <strcmp@plt>
   12138:	test   eax,eax
   1213a:	jne    12120 <find_snapshot_by_id_or_name.isra.9+0x40>
   1213c:	add    rsp,0x8
   12140:	mov    eax,ebx
   12142:	pop    rbx
   12143:	pop    rbp
   12144:	pop    r12
   12146:	pop    r13
   12148:	ret    
   12149:	nop    DWORD PTR [rax+0x0]
   12150:	add    rsp,0x8
   12154:	mov    ebx,0xffffffff
   12159:	mov    eax,ebx
   1215b:	pop    rbx
   1215c:	pop    rbp
   1215d:	pop    r12
   1215f:	pop    r13
   12161:	ret    
   12162:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1216d:	nop    DWORD PTR [rax]

0000000000012170 <decompress_cluster>:
   12170:	push   r15
   12172:	push   r14
   12174:	push   r13
   12176:	push   r12
   12178:	xor    r12d,r12d
   1217b:	push   rbp
   1217c:	push   rbx
   1217d:	sub    rsp,0x98
   12184:	mov    rbp,QWORD PTR [rdi+0x30]
   12188:	mov    rax,QWORD PTR fs:0x28
   12191:	mov    QWORD PTR [rsp+0x88],rax
   12199:	xor    eax,eax
   1219b:	and    rbp,rsi
   1219e:	cmp    QWORD PTR [rdi+0x120],rbp
   121a5:	jne    121d8 <decompress_cluster+0x68>
   121a7:	mov    rdi,QWORD PTR [rsp+0x88]
   121af:	xor    rdi,QWORD PTR fs:0x28
   121b8:	mov    eax,r12d
   121bb:	jne    122eb <decompress_cluster+0x17b>
   121c1:	add    rsp,0x98
   121c8:	pop    rbx
   121c9:	pop    rbp
   121ca:	pop    r12
   121cc:	pop    r13
   121ce:	pop    r14
   121d0:	pop    r15
   121d2:	ret    
   121d3:	nop    DWORD PTR [rax+rax*1+0x0]
   121d8:	mov    ecx,DWORD PTR [rdi+0x24]
   121db:	mov    r12d,ebp
   121de:	mov    rbx,rdi
   121e1:	mov    rdx,QWORD PTR [rdi+0x118]
   121e8:	and    r12d,0x1ff
   121ef:	shr    rsi,cl
   121f2:	and    esi,DWORD PTR [rdi+0x28]
   121f5:	mov    rdi,QWORD PTR [rdi]
   121f8:	lea    ecx,[rsi+0x1]
   121fb:	mov    rsi,rbp
   121fe:	mov    r13d,ecx
   12201:	shr    rsi,0x9
   12205:	shl    r13d,0x9
   12209:	sub    r13d,r12d
   1220c:	mov    DWORD PTR [rsp+0xc],r13d
   12211:	call   17550 <bdrv_read>
   12216:	test   eax,eax
   12218:	js     122e0 <decompress_cluster+0x170>
   1221e:	lea    r13,[rsp+0x10]
   12223:	xor    eax,eax
   12225:	mov    ecx,0xc
   1222a:	mov    r14d,DWORD PTR [rbx+0xc]
   1222e:	lea    rdi,[r13+0x10]
   12232:	movsxd r12,r12d
   12235:	mov    r15,QWORD PTR [rbx+0x110]
   1223c:	add    r12,QWORD PTR [rbx+0x118]
   12243:	mov    QWORD PTR [rsp+0x1c],0x0
   1224c:	lea    rdx,[rip+0xa6d4]        # 1c927 <__PRETTY_FUNCTION__.13430+0x8f>
   12253:	mov    esi,0xfffffff4
   12258:	mov    QWORD PTR [r13+0x68],0x0
   12260:	rep stos QWORD PTR es:[rdi],rax
   12263:	mov    ecx,0x70
   12268:	mov    rdi,r13
   1226b:	mov    QWORD PTR [rsp+0x10],r12
   12270:	mov    QWORD PTR [rsp+0x28],r15
   12275:	mov    eax,DWORD PTR [rsp+0xc]
   12279:	mov    DWORD PTR [rsp+0x30],r14d
   1227e:	mov    DWORD PTR [rsp+0x18],eax
   12282:	call   3580 <inflateInit2_@plt>
   12287:	mov    r12d,eax
   1228a:	test   eax,eax
   1228c:	jne    122e0 <decompress_cluster+0x170>
   1228e:	mov    rdi,r13
   12291:	mov    esi,0x4
   12296:	call   30f0 <inflate@plt>
   1229b:	mov    rdx,QWORD PTR [rsp+0x28]
   122a0:	mov    rdi,r13
   122a3:	sub    rdx,r15
   122a6:	cmp    r14d,edx
   122a9:	jne    122d0 <decompress_cluster+0x160>
   122ab:	cmp    eax,0x1
   122ae:	setne  dl
   122b1:	cmp    eax,0xfffffffb
   122b4:	setne  al
   122b7:	test   dl,al
   122b9:	jne    122d0 <decompress_cluster+0x160>
   122bb:	call   33c0 <inflateEnd@plt>
   122c0:	mov    QWORD PTR [rbx+0x120],rbp
   122c7:	jmp    121a7 <decompress_cluster+0x37>
   122cc:	nop    DWORD PTR [rax+0x0]
   122d0:	call   33c0 <inflateEnd@plt>
   122d5:	mov    r12d,0xffffffff
   122db:	jmp    121a7 <decompress_cluster+0x37>
   122e0:	mov    r12d,0xffffffff
   122e6:	jmp    121a7 <decompress_cluster+0x37>
   122eb:	call   3190 <__stack_chk_fail@plt>

00000000000122f0 <qcow_set_key>:
   122f0:	push   r12
   122f2:	pxor   xmm0,xmm0
   122f6:	push   rbp
   122f7:	mov    rbp,rsi
   122fa:	push   rbx
   122fb:	sub    rsp,0x20
   122ff:	mov    r12,QWORD PTR [rdi+0x40]
   12303:	mov    rdi,rsi
   12306:	mov    rax,QWORD PTR fs:0x28
   1230f:	mov    QWORD PTR [rsp+0x18],rax
   12314:	xor    eax,eax
   12316:	movaps XMMWORD PTR [rsp],xmm0
   1231a:	mov    rbx,rsp
   1231d:	call   3180 <strlen@plt>
   12322:	mov    edi,0x10
   12327:	cmp    eax,0x10
   1232a:	cmovle edi,eax
   1232d:	test   eax,eax
   1232f:	jle    12350 <qcow_set_key+0x60>
   12331:	xor    eax,eax
   12333:	mov    rbx,rsp
   12336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12340:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   12345:	mov    BYTE PTR [rbx+rax*1],cl
   12348:	add    rax,0x1
   1234c:	cmp    edi,eax
   1234e:	jg     12340 <qcow_set_key+0x50>
   12350:	mov    eax,DWORD PTR [r12+0x164]
   12358:	lea    rdx,[r12+0x168]
   12360:	mov    esi,0x80
   12365:	mov    rdi,rbx
   12368:	mov    DWORD PTR [r12+0x160],eax
   12370:	call   6bc0 <AES_set_encrypt_key>
   12375:	test   eax,eax
   12377:	jne    123b1 <qcow_set_key+0xc1>
   12379:	lea    rdx,[r12+0x25c]
   12381:	mov    esi,0x80
   12386:	mov    rdi,rbx
   12389:	call   6ff0 <AES_set_decrypt_key>
   1238e:	test   eax,eax
   12390:	setne  al
   12393:	movzx  eax,al
   12396:	neg    eax
   12398:	mov    rsi,QWORD PTR [rsp+0x18]
   1239d:	xor    rsi,QWORD PTR fs:0x28
   123a6:	jne    123b8 <qcow_set_key+0xc8>
   123a8:	add    rsp,0x20
   123ac:	pop    rbx
   123ad:	pop    rbp
   123ae:	pop    r12
   123b0:	ret    
   123b1:	mov    eax,0xffffffff
   123b6:	jmp    12398 <qcow_set_key+0xa8>
   123b8:	call   3190 <__stack_chk_fail@plt>
   123bd:	nop    DWORD PTR [rax]

00000000000123c0 <encrypt_sectors.isra.12>:
   123c0:	push   r15
   123c2:	push   r14
   123c4:	push   r13
   123c6:	push   r12
   123c8:	push   rbp
   123c9:	push   rbx
   123ca:	sub    rsp,0x38
   123ce:	mov    rax,QWORD PTR fs:0x28
   123d7:	mov    QWORD PTR [rsp+0x28],rax
   123dc:	xor    eax,eax
   123de:	test   ecx,ecx
   123e0:	jle    1244b <encrypt_sectors.isra.12+0x8b>
   123e2:	lea    r12d,[rcx-0x1]
   123e6:	lea    rbx,[rdi+0x1]
   123ea:	mov    rbp,rsi
   123ed:	mov    r15,rdx
   123f0:	lea    rax,[rsp+0x10]
   123f5:	mov    r13d,r8d
   123f8:	mov    r14,r9
   123fb:	add    r12,rbx
   123fe:	mov    QWORD PTR [rsp+0x8],rax
   12403:	jmp    1240c <encrypt_sectors.isra.12+0x4c>
   12405:	nop    DWORD PTR [rax]
   12408:	add    rbx,0x1
   1240c:	mov    r8,QWORD PTR [rsp+0x8]
   12411:	mov    QWORD PTR [rsp+0x10],rdi
   12416:	mov    rsi,rbp
   12419:	mov    rdi,r15
   1241c:	mov    r9d,r13d
   1241f:	mov    rcx,r14
   12422:	mov    edx,0x200
   12427:	mov    QWORD PTR [rsp+0x18],0x0
   12430:	add    r15,0x200
   12437:	add    rbp,0x200
   1243e:	call   7970 <AES_cbc_encrypt>
   12443:	mov    rdi,rbx
   12446:	cmp    rbx,r12
   12449:	jne    12408 <encrypt_sectors.isra.12+0x48>
   1244b:	mov    rax,QWORD PTR [rsp+0x28]
   12450:	xor    rax,QWORD PTR fs:0x28
   12459:	jne    1246a <encrypt_sectors.isra.12+0xaa>
   1245b:	add    rsp,0x38
   1245f:	pop    rbx
   12460:	pop    rbp
   12461:	pop    r12
   12463:	pop    r13
   12465:	pop    r14
   12467:	pop    r15
   12469:	ret    
   1246a:	call   3190 <__stack_chk_fail@plt>
   1246f:	nop

0000000000012470 <qcow_schedule_bh.constprop.13>:
   12470:	cmp    QWORD PTR [rdi+0x58],0x0
   12475:	jne    124b0 <qcow_schedule_bh.constprop.13+0x40>
   12477:	push   rbx
   12478:	mov    rsi,rdi
   1247b:	mov    rbx,rdi
   1247e:	lea    rdi,[rip+0x53b]        # 129c0 <qcow_aio_read_bh>
   12485:	call   4460 <qemu_bh_new>
   1248a:	mov    QWORD PTR [rbx+0x58],rax
   1248e:	test   rax,rax
   12491:	je     1249f <qcow_schedule_bh.constprop.13+0x2f>
   12493:	mov    rdi,rax
   12496:	call   44a0 <qemu_bh_schedule>
   1249b:	xor    eax,eax
   1249d:	pop    rbx
   1249e:	ret    
   1249f:	mov    eax,0xfffffffb
   124a4:	pop    rbx
   124a5:	ret    
   124a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   124b0:	mov    eax,0xfffffffb
   124b5:	ret    
   124b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000124c0 <qcow_probe>:
   124c0:	xor    eax,eax
   124c2:	cmp    esi,0x47
   124c5:	ja     124d0 <qcow_probe+0x10>
   124c7:	ret    
   124c8:	nop    DWORD PTR [rax+rax*1+0x0]
   124d0:	cmp    DWORD PTR [rdi],0xfb494651
   124d6:	jne    124c7 <qcow_probe+0x7>
   124d8:	cmp    DWORD PTR [rdi+0x4],0x2000000
   124df:	mov    edx,0x64
   124e4:	cmove  eax,edx
   124e7:	ret    
   124e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000124f0 <count_contiguous_clusters>:
   124f0:	mov    r10,QWORD PTR [rdx]
   124f3:	not    r8
   124f6:	bswap  r10
   124f9:	and    r10,r8
   124fc:	je     12570 <count_contiguous_clusters+0x80>
   124fe:	movsxd r9,ecx
   12501:	add    rdi,rcx
   12504:	mov    eax,ecx
   12506:	cmp    rdi,r9
   12509:	jbe    12578 <count_contiguous_clusters+0x88>
   1250b:	mov    r11d,esi
   1250e:	mov    r9,QWORD PTR [rdx+r9*8]
   12512:	imul   r11d,ecx
   12516:	bswap  r9
   12519:	and    r9,r8
   1251c:	movsxd r11,r11d
   1251f:	add    r11,r10
   12522:	cmp    r11,r9
   12525:	jne    12578 <count_contiguous_clusters+0x88>
   12527:	lea    eax,[rcx+0x1]
   1252a:	push   rbx
   1252b:	movsxd rbx,esi
   1252e:	movsxd r9,eax
   12531:	imul   eax,esi
   12534:	movsxd rsi,eax
   12537:	add    r10,rsi
   1253a:	jmp    1255a <count_contiguous_clusters+0x6a>
   1253c:	nop    DWORD PTR [rax+0x0]
   12540:	mov    rsi,QWORD PTR [rdx+r9*8]
   12544:	lea    r11,[rbx+r10*1]
   12548:	add    r9,0x1
   1254c:	bswap  rsi
   1254f:	and    rsi,r8
   12552:	cmp    rsi,r10
   12555:	jne    12562 <count_contiguous_clusters+0x72>
   12557:	mov    r10,r11
   1255a:	mov    eax,r9d
   1255d:	cmp    rdi,r9
   12560:	jne    12540 <count_contiguous_clusters+0x50>
   12562:	sub    eax,ecx
   12564:	pop    rbx
   12565:	ret    
   12566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12570:	xor    eax,eax
   12572:	ret    
   12573:	nop    DWORD PTR [rax+rax*1+0x0]
   12578:	sub    eax,ecx
   1257a:	ret    
   1257b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000012580 <get_cluster_offset>:
   12580:	push   r14
   12582:	mov    r14,rsi
   12585:	push   r13
   12587:	mov    r13,rdx
   1258a:	push   r12
   1258c:	push   rbp
   1258d:	push   rbx
   1258e:	mov    r12,QWORD PTR [rdi+0x40]
   12592:	mov    ebx,DWORD PTR [rdx]
   12594:	mov    edx,0x1
   12599:	mov    eax,DWORD PTR [r12+0x10]
   1259e:	mov    ecx,DWORD PTR [r12+0x8]
   125a3:	add    ecx,DWORD PTR [r12+0x14]
   125a8:	mov    r8d,DWORD PTR [r12+0x1c]
   125ad:	lea    ebp,[rax-0x1]
   125b0:	mov    rax,rsi
   125b3:	shl    edx,cl
   125b5:	shr    rax,0x9
   125b9:	and    ebp,eax
   125bb:	lea    eax,[rdx-0x1]
   125be:	and    eax,esi
   125c0:	sub    edx,eax
   125c2:	mov    rax,r14
   125c5:	sar    edx,0x9
   125c8:	shr    rax,cl
   125cb:	lea    esi,[rdx+rbp*1]
   125ce:	cmp    ebx,edx
   125d0:	jg     12608 <get_cluster_offset+0x88>
   125d2:	add    ebx,ebp
   125d4:	cmp    r8d,eax
   125d7:	jle    126a8 <get_cluster_offset+0x128>
   125dd:	mov    rdx,QWORD PTR [r12+0x40]
   125e2:	cdqe   
   125e4:	mov    rax,QWORD PTR [rdx+rax*8]
   125e8:	test   rax,rax
   125eb:	jne    12618 <get_cluster_offset+0x98>
   125ed:	cmp    esi,ebx
   125ef:	cmovle ebx,esi
   125f2:	mov    edx,ebx
   125f4:	sub    edx,ebp
   125f6:	mov    DWORD PTR [r13+0x0],edx
   125fa:	pop    rbx
   125fb:	pop    rbp
   125fc:	pop    r12
   125fe:	pop    r13
   12600:	pop    r14
   12602:	ret    
   12603:	nop    DWORD PTR [rax+rax*1+0x0]
   12608:	mov    ebx,esi
   1260a:	cmp    r8d,eax
   1260d:	jg     125dd <get_cluster_offset+0x5d>
   1260f:	xor    eax,eax
   12611:	jmp    125f6 <get_cluster_offset+0x76>
   12613:	nop    DWORD PTR [rax+rax*1+0x0]
   12618:	btr    rax,0x3f
   1261d:	add    rdi,0x40
   12621:	mov    rsi,rax
   12624:	call   11ea0 <l2_load.isra.5>
   12629:	mov    rsi,rax
   1262c:	xor    eax,eax
   1262e:	test   rsi,rsi
   12631:	je     125fa <get_cluster_offset+0x7a>
   12633:	mov    ecx,DWORD PTR [r12+0x8]
   12638:	mov    eax,DWORD PTR [r12+0x18]
   1263d:	mov    edi,ebx
   1263f:	shl    edi,0x9
   12642:	lea    edx,[rax-0x1]
   12645:	shr    r14,cl
   12648:	movsxd rdi,edi
   1264b:	and    edx,r14d
   1264e:	movsxd rdx,edx
   12651:	lea    r9,[rsi+rdx*8]
   12655:	mov    esi,DWORD PTR [r12+0xc]
   1265a:	mov    rax,QWORD PTR [r9]
   1265d:	lea    edx,[rsi-0x1]
   12660:	movsxd rdx,edx
   12663:	mov    r14,rax
   12666:	add    rdi,rdx
   12669:	bswap  r14
   1266c:	sar    rdi,cl
   1266f:	movsxd rdi,edi
   12672:	test   r14,r14
   12675:	jne    126b0 <get_cluster_offset+0x130>
   12677:	test   rdi,rdi
   1267a:	je     126e0 <get_cluster_offset+0x160>
   1267c:	test   rax,rax
   1267f:	jne    126e0 <get_cluster_offset+0x160>
   12681:	mov    ecx,0x1
   12686:	jmp    1269c <get_cluster_offset+0x11c>
   12688:	nop    DWORD PTR [rax+rax*1+0x0]
   12690:	add    rcx,0x1
   12694:	cmp    QWORD PTR [r9+rcx*8-0x8],0x0
   1269a:	jne    126c6 <get_cluster_offset+0x146>
   1269c:	mov    esi,ecx
   1269e:	cmp    rcx,rdi
   126a1:	jne    12690 <get_cluster_offset+0x110>
   126a3:	jmp    126c6 <get_cluster_offset+0x146>
   126a5:	nop    DWORD PTR [rax]
   126a8:	xor    eax,eax
   126aa:	jmp    125ed <get_cluster_offset+0x6d>
   126af:	nop
   126b0:	movabs r8,0x8000000000000000
   126ba:	xor    ecx,ecx
   126bc:	mov    rdx,r9
   126bf:	call   124f0 <count_contiguous_clusters>
   126c4:	mov    esi,eax
   126c6:	mov    rax,r14
   126c9:	imul   esi,DWORD PTR [r12+0x10]
   126cf:	btr    rax,0x3f
   126d4:	jmp    125ed <get_cluster_offset+0x6d>
   126d9:	nop    DWORD PTR [rax+0x0]
   126e0:	xor    esi,esi
   126e2:	jmp    126c6 <get_cluster_offset+0x146>
   126e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   126ef:	nop

00000000000126f0 <qcow_is_allocated>:
   126f0:	sub    rsp,0x8
   126f4:	mov    DWORD PTR [rcx],edx
   126f6:	shl    rsi,0x9
   126fa:	mov    rdx,rcx
   126fd:	call   12580 <get_cluster_offset>
   12702:	test   rax,rax
   12705:	setne  al
   12708:	add    rsp,0x8
   1270c:	movzx  eax,al
   1270f:	ret    

0000000000012710 <qcow_aio_read_cb>:
   12710:	push   r13
   12712:	push   r12
   12714:	push   rbp
   12715:	mov    ebp,esi
   12717:	push   rbx
   12718:	mov    rbx,rdi
   1271b:	sub    rsp,0x8
   1271f:	mov    r12,QWORD PTR [rdi+0x8]
   12723:	mov    r13,QWORD PTR [r12+0x40]
   12728:	mov    QWORD PTR [rdi+0x50],0x0
   12730:	test   esi,esi
   12732:	js     12848 <qcow_aio_read_cb+0x138>
   12738:	mov    rax,QWORD PTR [rdi+0x40]
   1273c:	mov    ecx,DWORD PTR [rdi+0x3c]
   1273f:	mov    r10,QWORD PTR [rdi+0x30]
   12743:	mov    rdi,QWORD PTR [rdi+0x28]
   12747:	test   rax,rax
   1274a:	jne    12790 <qcow_aio_read_cb+0x80>
   1274c:	mov    eax,DWORD PTR [rbx+0x38]
   1274f:	movsxd rsi,ecx
   12752:	add    rsi,rdi
   12755:	sub    eax,ecx
   12757:	shl    ecx,0x9
   1275a:	mov    QWORD PTR [rbx+0x28],rsi
   1275e:	movsxd rcx,ecx
   12761:	mov    DWORD PTR [rbx+0x38],eax
   12764:	add    rcx,r10
   12767:	mov    QWORD PTR [rbx+0x30],rcx
   1276b:	test   eax,eax
   1276d:	jne    127c8 <qcow_aio_read_cb+0xb8>
   1276f:	mov    rdi,QWORD PTR [rbx+0x18]
   12773:	xor    esi,esi
   12775:	call   QWORD PTR [rbx+0x10]
   12778:	add    rsp,0x8
   1277c:	mov    rdi,rbx
   1277f:	pop    rbx
   12780:	pop    rbp
   12781:	pop    r12
   12783:	pop    r13
   12785:	jmp    19ba0 <qemu_aio_release>
   1278a:	nop    WORD PTR [rax+rax*1+0x0]
   12790:	bt     rax,0x3e
   12795:	jb     1274c <qcow_aio_read_cb+0x3c>
   12797:	mov    eax,DWORD PTR [r13+0x160]
   1279e:	test   eax,eax
   127a0:	je     1274c <qcow_aio_read_cb+0x3c>
   127a2:	mov    rdx,r10
   127a5:	mov    rsi,r10
   127a8:	lea    r9,[r13+0x25c]
   127af:	xor    r8d,r8d
   127b2:	call   123c0 <encrypt_sectors.isra.12>
   127b7:	mov    ecx,DWORD PTR [rbx+0x3c]
   127ba:	mov    rdi,QWORD PTR [rbx+0x28]
   127be:	mov    r10,QWORD PTR [rbx+0x30]
   127c2:	jmp    1274c <qcow_aio_read_cb+0x3c>
   127c4:	nop    DWORD PTR [rax+0x0]
   127c8:	mov    DWORD PTR [rbx+0x3c],eax
   127cb:	lea    rdx,[rbx+0x3c]
   127cf:	shl    rsi,0x9
   127d3:	mov    rdi,r12
   127d6:	call   12580 <get_cluster_offset>
   127db:	mov    rcx,QWORD PTR [rbx+0x28]
   127df:	mov    QWORD PTR [rbx+0x40],rax
   127e3:	test   rax,rax
   127e6:	je     12858 <qcow_aio_read_cb+0x148>
   127e8:	mov    edx,DWORD PTR [r13+0x10]
   127ec:	lea    esi,[rdx-0x1]
   127ef:	and    esi,ecx
   127f1:	bt     rax,0x3e
   127f6:	mov    r12d,esi
   127f9:	jb     12908 <qcow_aio_read_cb+0x1f8>
   127ff:	test   eax,0x1ff
   12804:	jne    12840 <qcow_aio_read_cb+0x130>
   12806:	shr    rax,0x9
   1280a:	mov    ecx,DWORD PTR [rbx+0x3c]
   1280d:	mov    rdx,QWORD PTR [rbx+0x30]
   12811:	movsxd rsi,esi
   12814:	mov    rdi,QWORD PTR [r13+0x0]
   12818:	add    rsi,rax
   1281b:	mov    r9,rbx
   1281e:	lea    r8,[rip+0xfffffffffffffeeb]        # 12710 <qcow_aio_read_cb>
   12825:	call   193b0 <bdrv_aio_read>
   1282a:	mov    QWORD PTR [rbx+0x50],rax
   1282e:	test   rax,rax
   12831:	je     12848 <qcow_aio_read_cb+0x138>
   12833:	add    rsp,0x8
   12837:	pop    rbx
   12838:	pop    rbp
   12839:	pop    r12
   1283b:	pop    r13
   1283d:	ret    
   1283e:	xchg   ax,ax
   12840:	mov    ebp,0xfffffffb
   12845:	nop    DWORD PTR [rax]
   12848:	mov    rdi,QWORD PTR [rbx+0x18]
   1284c:	mov    esi,ebp
   1284e:	jmp    12775 <qcow_aio_read_cb+0x65>
   12853:	nop    DWORD PTR [rax+rax*1+0x0]
   12858:	mov    rax,QWORD PTR [r12+0x850]
   12860:	mov    edx,DWORD PTR [rbx+0x3c]
   12863:	mov    rdi,QWORD PTR [rbx+0x30]
   12867:	test   rax,rax
   1286a:	je     1287f <qcow_aio_read_cb+0x16f>
   1286c:	mov    rsi,QWORD PTR [rax]
   1286f:	movsxd rax,edx
   12872:	add    rax,rcx
   12875:	cmp    rsi,rax
   12878:	jge    128cc <qcow_aio_read_cb+0x1bc>
   1287a:	cmp    rcx,rsi
   1287d:	jl     128a8 <qcow_aio_read_cb+0x198>
   1287f:	shl    edx,0x9
   12882:	xor    esi,esi
   12884:	movsxd rdx,edx
   12887:	call   3240 <memset@plt>
   1288c:	mov    rdi,rbx
   1288f:	call   12470 <qcow_schedule_bh.constprop.13>
   12894:	mov    ebp,eax
   12896:	test   eax,eax
   12898:	js     12848 <qcow_aio_read_cb+0x138>
   1289a:	add    rsp,0x8
   1289e:	pop    rbx
   1289f:	pop    rbp
   128a0:	pop    r12
   128a2:	pop    r13
   128a4:	ret    
   128a5:	nop    DWORD PTR [rax]
   128a8:	mov    r13d,esi
   128ab:	xor    esi,esi
   128ad:	sub    r13d,ecx
   128b0:	mov    eax,r13d
   128b3:	sub    edx,r13d
   128b6:	shl    eax,0x9
   128b9:	shl    edx,0x9
   128bc:	cdqe   
   128be:	movsxd rdx,edx
   128c1:	add    rdi,rax
   128c4:	call   3240 <memset@plt>
   128c9:	mov    edx,r13d
   128cc:	test   edx,edx
   128ce:	jle    1288c <qcow_aio_read_cb+0x17c>
   128d0:	mov    ecx,DWORD PTR [rbx+0x3c]
   128d3:	mov    rdx,QWORD PTR [rbx+0x30]
   128d7:	mov    r9,rbx
   128da:	lea    r8,[rip+0xfffffffffffffe2f]        # 12710 <qcow_aio_read_cb>
   128e1:	mov    rsi,QWORD PTR [rbx+0x28]
   128e5:	mov    rdi,QWORD PTR [r12+0x850]
   128ed:	call   193b0 <bdrv_aio_read>
   128f2:	mov    QWORD PTR [rbx+0x50],rax
   128f6:	test   rax,rax
   128f9:	jne    12833 <qcow_aio_read_cb+0x123>
   128ff:	jmp    12848 <qcow_aio_read_cb+0x138>
   12904:	nop    DWORD PTR [rax+0x0]
   12908:	mov    rsi,rax
   1290b:	mov    rdi,r13
   1290e:	call   12170 <decompress_cluster>
   12913:	test   eax,eax
   12915:	js     12848 <qcow_aio_read_cb+0x138>
   1291b:	mov    edx,DWORD PTR [rbx+0x3c]
   1291e:	mov    esi,r12d
   12921:	mov    rdi,QWORD PTR [rbx+0x30]
   12925:	shl    esi,0x9
   12928:	shl    edx,0x9
   1292b:	movsxd rsi,esi
   1292e:	add    rsi,QWORD PTR [r13+0x110]
   12935:	movsxd rdx,edx
   12938:	call   33b0 <memcpy@plt>
   1293d:	jmp    1288c <qcow_aio_read_cb+0x17c>
   12942:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1294d:	nop    DWORD PTR [rax]

0000000000012950 <qcow_aio_read>:
   12950:	push   r13
   12952:	mov    r13d,ecx
   12955:	push   r12
   12957:	mov    r12,rsi
   1295a:	mov    rsi,r8
   1295d:	push   rbp
   1295e:	mov    rbp,rdx
   12961:	mov    rdx,r9
   12964:	push   rbx
   12965:	sub    rsp,0x8
   12969:	call   199c0 <qemu_aio_get>
   1296e:	mov    rbx,rax
   12971:	test   rax,rax
   12974:	je     129aa <qcow_aio_read+0x5a>
   12976:	mov    QWORD PTR [rax+0x50],0x0
   1297e:	xor    esi,esi
   12980:	mov    rdi,rax
   12983:	mov    QWORD PTR [rax+0x28],r12
   12987:	mov    QWORD PTR [rax+0x30],rbp
   1298b:	mov    DWORD PTR [rax+0x38],r13d
   1298f:	mov    DWORD PTR [rax+0x3c],0x0
   12996:	mov    QWORD PTR [rax+0x40],0x0
   1299e:	mov    DWORD PTR [rax+0x70],0x0
   129a5:	call   12710 <qcow_aio_read_cb>
   129aa:	add    rsp,0x8
   129ae:	mov    rax,rbx
   129b1:	pop    rbx
   129b2:	pop    rbp
   129b3:	pop    r12
   129b5:	pop    r13
   129b7:	ret    
   129b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000129c0 <qcow_aio_read_bh>:
   129c0:	push   rbx
   129c1:	mov    rbx,rdi
   129c4:	mov    rdi,QWORD PTR [rdi+0x58]
   129c8:	call   44c0 <qemu_bh_delete>
   129cd:	mov    QWORD PTR [rbx+0x58],0x0
   129d5:	mov    rdi,rbx
   129d8:	xor    esi,esi
   129da:	pop    rbx
   129db:	jmp    12710 <qcow_aio_read_cb>

00000000000129e0 <create_refcount_update>:
   129e0:	mov    eax,DWORD PTR [rdi]
   129e2:	neg    eax
   129e4:	cdqe   
   129e6:	mov    r8,rax
   129e9:	and    r8,rsi
   129ec:	lea    rsi,[rsi+rdx*1-0x1]
   129f1:	and    rsi,rax
   129f4:	cmp    r8,rsi
   129f7:	jg     12a2d <create_refcount_update+0x4d>
   129f9:	nop    DWORD PTR [rax+0x0]
   12a00:	mov    ecx,DWORD PTR [rdi+0x4]
   12a03:	mov    rax,QWORD PTR [rdi+0x8]
   12a07:	mov    rdx,r8
   12a0a:	sar    rdx,cl
   12a0d:	lea    rdx,[rax+rdx*2]
   12a11:	movzx  eax,WORD PTR [rdx]
   12a14:	rol    ax,0x8
   12a18:	add    eax,0x1
   12a1b:	rol    ax,0x8
   12a1f:	mov    WORD PTR [rdx],ax
   12a22:	movsxd rax,DWORD PTR [rdi]
   12a25:	add    r8,rax
   12a28:	cmp    rsi,r8
   12a2b:	jge    12a00 <create_refcount_update+0x20>
   12a2d:	ret    
   12a2e:	xchg   ax,ax

0000000000012a30 <qcow_create>:
   12a30:	push   r15
   12a32:	pxor   xmm0,xmm0
   12a36:	push   r14
   12a38:	mov    r14,rdx
   12a3b:	mov    edx,0x1a4
   12a40:	push   r13
   12a42:	push   r12
   12a44:	mov    r12d,ecx
   12a47:	push   rbp
   12a48:	mov    rbp,rsi
   12a4b:	mov    esi,0x241
   12a50:	push   rbx
   12a51:	sub    rsp,0xb8
   12a58:	mov    rax,QWORD PTR fs:0x28
   12a61:	mov    QWORD PTR [rsp+0xa8],rax
   12a69:	xor    eax,eax
   12a6b:	movaps XMMWORD PTR [rsp+0x30],xmm0
   12a70:	movaps XMMWORD PTR [rsp+0x40],xmm0
   12a75:	movaps XMMWORD PTR [rsp+0x50],xmm0
   12a7a:	call   3500 <open64@plt>
   12a7f:	test   eax,eax
   12a81:	js     12d8b <qcow_create+0x35b>
   12a87:	mov    ebx,eax
   12a89:	shl    rbp,0x9
   12a8d:	pxor   xmm0,xmm0
   12a91:	lea    r15,[rsp+0x60]
   12a96:	movabs rax,0x2000000fb494651
   12aa0:	movups XMMWORD PTR [rsp+0x68],xmm0
   12aa5:	mov    QWORD PTR [rsp+0x60],rax
   12aaa:	mov    rax,rbp
   12aad:	movups XMMWORD PTR [r15+0x18],xmm0
   12ab2:	bswap  rax
   12ab5:	movups XMMWORD PTR [r15+0x28],xmm0
   12aba:	movups XMMWORD PTR [r15+0x38],xmm0
   12abf:	mov    QWORD PTR [rsp+0x78],rax
   12ac4:	test   r14,r14
   12ac7:	je     12d60 <qcow_create+0x330>
   12acd:	movabs rax,0x4800000000000000
   12ad7:	mov    rdi,r14
   12ada:	mov    QWORD PTR [rsp+0x68],rax
   12adf:	call   3180 <strlen@plt>
   12ae4:	mov    edx,eax
   12ae6:	mov    DWORD PTR [rsp+0x1c],eax
   12aea:	add    eax,0x4f
   12aed:	and    eax,0xfffffff8
   12af0:	bswap  edx
   12af2:	mov    DWORD PTR [rsp+0x70],edx
   12af6:	cdqe   
   12af8:	mov    QWORD PTR [rsp+0x10],rax
   12afd:	add    rax,0xfff
   12b03:	and    rax,0xfffffffffffff000
   12b09:	mov    rdx,rax
   12b0c:	mov    r13,rax
   12b0f:	bswap  rdx
   12b12:	movabs rsi,0xc00001000
   12b1c:	and    r12d,0x1
   12b20:	mov    DWORD PTR [rsp+0x74],0xc000000
   12b28:	mov    QWORD PTR [rsp+0x30],rsi
   12b2d:	jne    12d48 <qcow_create+0x318>
   12b33:	add    rbp,0x1fffff
   12b3a:	mov    QWORD PTR [rsp+0x48],rax
   12b3f:	mov    edi,0x1000
   12b44:	sar    rbp,0x15
   12b48:	mov    QWORD PTR [rsp+0x88],rdx
   12b50:	mov    eax,ebp
   12b52:	mov    r12d,ebp
   12b55:	bswap  eax
   12b57:	mov    DWORD PTR [rsp+0x84],eax
   12b5e:	movsxd rax,ebp
   12b61:	shl    rax,0x3
   12b65:	lea    rsi,[rax+0xfff]
   12b6c:	mov    QWORD PTR [rsp+0x8],rax
   12b71:	and    rsi,0xfffffffffffff000
   12b78:	add    r13,rsi
   12b7b:	call   4d00 <qemu_mallocz>
   12b80:	movsxd rsi,DWORD PTR [rsp+0x30]
   12b85:	mov    rdx,r13
   12b88:	mov    ecx,DWORD PTR [rsp+0x34]
   12b8c:	bswap  rdx
   12b8f:	mov    QWORD PTR [rsp+0x50],r13
   12b94:	mov    rdi,rsi
   12b97:	add    rsi,r13
   12b9a:	mov    QWORD PTR [rsp+0x90],rdx
   12ba2:	mov    rdx,rsi
   12ba5:	mov    QWORD PTR [rsp+0x40],rax
   12baa:	shr    rdx,cl
   12bad:	sub    ecx,0x1
   12bb0:	mov    QWORD PTR [rsp+0x58],rsi
   12bb5:	mov    QWORD PTR [rsp+0x28],rdx
   12bba:	shr    rdx,cl
   12bbd:	mov    DWORD PTR [rsp+0x98],0x1000000
   12bc8:	lea    r13d,[rdx+0x1]
   12bcc:	test   r13d,r13d
   12bcf:	jle    12c03 <qcow_create+0x1d3>
   12bd1:	mov    edx,edx
   12bd3:	lea    r8,[rdx*8+0x8]
   12bdb:	xor    edx,edx
   12bdd:	jmp    12be5 <qcow_create+0x1b5>
   12bdf:	nop
   12be0:	mov    rax,QWORD PTR [rsp+0x40]
   12be5:	mov    rcx,rsi
   12be8:	bswap  rcx
   12beb:	mov    QWORD PTR [rax+rdx*1],rcx
   12bef:	movsxd rax,DWORD PTR [rsp+0x30]
   12bf4:	add    rdx,0x8
   12bf8:	mov    rdi,rax
   12bfb:	add    rsi,rax
   12bfe:	cmp    r8,rdx
   12c01:	jne    12be0 <qcow_create+0x1b0>
   12c03:	imul   edi,r13d
   12c07:	movsxd rdi,edi
   12c0a:	call   4d00 <qemu_mallocz>
   12c0f:	lea    r9,[rsp+0x30]
   12c14:	mov    rdx,QWORD PTR [rsp+0x10]
   12c19:	xor    esi,esi
   12c1b:	mov    rdi,r9
   12c1e:	mov    QWORD PTR [rsp+0x38],rax
   12c23:	call   129e0 <create_refcount_update>
   12c28:	mov    rdx,QWORD PTR [rsp+0x8]
   12c2d:	mov    rsi,QWORD PTR [rsp+0x48]
   12c32:	call   129e0 <create_refcount_update>
   12c37:	movsxd rdx,DWORD PTR [rsp+0x30]
   12c3c:	mov    rsi,QWORD PTR [rsp+0x50]
   12c41:	call   129e0 <create_refcount_update>
   12c46:	mov    edx,DWORD PTR [rsp+0x30]
   12c4a:	mov    rsi,QWORD PTR [rsp+0x58]
   12c4f:	imul   edx,r13d
   12c53:	movsxd rdx,edx
   12c56:	call   129e0 <create_refcount_update>
   12c5b:	mov    edx,0x48
   12c60:	mov    rsi,r15
   12c63:	mov    edi,ebx
   12c65:	call   3130 <write@plt>
   12c6a:	test   r14,r14
   12c6d:	je     12c7e <qcow_create+0x24e>
   12c6f:	movsxd rdx,DWORD PTR [rsp+0x1c]
   12c74:	mov    rsi,r14
   12c77:	mov    edi,ebx
   12c79:	call   3130 <write@plt>
   12c7e:	mov    rsi,QWORD PTR [rsp+0x48]
   12c83:	xor    edx,edx
   12c85:	mov    edi,ebx
   12c87:	xor    r14d,r14d
   12c8a:	lea    r15,[rsp+0x28]
   12c8f:	call   3620 <lseek64@plt>
   12c94:	mov    QWORD PTR [rsp+0x28],0x0
   12c9d:	test   ebp,ebp
   12c9f:	jle    12cc0 <qcow_create+0x290>
   12ca1:	nop    DWORD PTR [rax+0x0]
   12ca8:	mov    edx,0x8
   12cad:	mov    rsi,r15
   12cb0:	mov    edi,ebx
   12cb2:	add    r14d,0x1
   12cb6:	call   3130 <write@plt>
   12cbb:	cmp    r12d,r14d
   12cbe:	jne    12ca8 <qcow_create+0x278>
   12cc0:	mov    rsi,QWORD PTR [rsp+0x50]
   12cc5:	xor    edx,edx
   12cc7:	mov    edi,ebx
   12cc9:	call   3620 <lseek64@plt>
   12cce:	movsxd rdx,DWORD PTR [rsp+0x30]
   12cd3:	mov    rsi,QWORD PTR [rsp+0x40]
   12cd8:	mov    edi,ebx
   12cda:	call   3130 <write@plt>
   12cdf:	mov    rsi,QWORD PTR [rsp+0x58]
   12ce4:	xor    edx,edx
   12ce6:	mov    edi,ebx
   12ce8:	call   3620 <lseek64@plt>
   12ced:	imul   r13d,DWORD PTR [rsp+0x30]
   12cf3:	mov    rsi,QWORD PTR [rsp+0x38]
   12cf8:	mov    edi,ebx
   12cfa:	movsxd rdx,r13d
   12cfd:	call   3130 <write@plt>
   12d02:	mov    rdi,QWORD PTR [rsp+0x40]
   12d07:	call   4ca0 <qemu_free>
   12d0c:	mov    rdi,QWORD PTR [rsp+0x38]
   12d11:	call   4ca0 <qemu_free>
   12d16:	mov    edi,ebx
   12d18:	call   3260 <close@plt>
   12d1d:	xor    eax,eax
   12d1f:	mov    rbx,QWORD PTR [rsp+0xa8]
   12d27:	xor    rbx,QWORD PTR fs:0x28
   12d30:	jne    12d92 <qcow_create+0x362>
   12d32:	add    rsp,0xb8
   12d39:	pop    rbx
   12d3a:	pop    rbp
   12d3b:	pop    r12
   12d3d:	pop    r13
   12d3f:	pop    r14
   12d41:	pop    r15
   12d43:	ret    
   12d44:	nop    DWORD PTR [rax+0x0]
   12d48:	mov    DWORD PTR [rsp+0x80],0x1000000
   12d53:	jmp    12b33 <qcow_create+0x103>
   12d58:	nop    DWORD PTR [rax+rax*1+0x0]
   12d60:	movabs rdx,0x10000000000000
   12d6a:	mov    eax,0x1000
   12d6f:	mov    r13d,0x1000
   12d75:	mov    QWORD PTR [rsp+0x10],0x48
   12d7e:	mov    DWORD PTR [rsp+0x1c],0x0
   12d86:	jmp    12b12 <qcow_create+0xe2>
   12d8b:	mov    eax,0xffffffff
   12d90:	jmp    12d1f <qcow_create+0x2ef>
   12d92:	call   3190 <__stack_chk_fail@plt>
   12d97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000012da0 <qcow_open>:
   12da0:	push   r15
   12da2:	push   r14
   12da4:	push   r13
   12da6:	push   r12
   12da8:	push   rbp
   12da9:	push   rbx
   12daa:	sub    rsp,0xb8
   12db1:	mov    r15,QWORD PTR [rdi+0x40]
   12db5:	mov    QWORD PTR [rsp+0x18],rdi
   12dba:	mov    rbx,QWORD PTR fs:0x28
   12dc3:	mov    QWORD PTR [rsp+0xa8],rbx
   12dcb:	xor    ebx,ebx
   12dcd:	test   dl,0x80
   12dd0:	je     12dd8 <qcow_open+0x38>
   12dd2:	and    dl,0x7f
   12dd5:	or     edx,0x40
   12dd8:	mov    rdi,r15
   12ddb:	call   183c0 <bdrv_file_open>
   12de0:	test   eax,eax
   12de2:	js     13153 <qcow_open+0x3b3>
   12de8:	mov    rdi,QWORD PTR [r15]
   12deb:	xor    esi,esi
   12ded:	lea    rdx,[rsp+0x60]
   12df2:	mov    ecx,0x48
   12df7:	call   17e40 <bdrv_pread>
   12dfc:	cmp    eax,0x48
   12dff:	jne    1333e <qcow_open+0x59e>
   12e05:	mov    ecx,DWORD PTR [rsp+0x74]
   12e09:	mov    eax,DWORD PTR [rsp+0x60]
   12e0d:	mov    rsi,QWORD PTR [rsp+0x78]
   12e12:	mov    edx,ecx
   12e14:	mov    rcx,QWORD PTR [rsp+0x88]
   12e1c:	bswap  eax
   12e1e:	mov    DWORD PTR [rsp+0x60],eax
   12e22:	mov    eax,DWORD PTR [rsp+0x64]
   12e26:	bswap  rsi
   12e29:	mov    QWORD PTR [rsp+0x78],rsi
   12e2e:	bswap  edx
   12e30:	bswap  rcx
   12e33:	mov    QWORD PTR [rsp+0x88],rcx
   12e3b:	mov    ecx,DWORD PTR [rsp+0x84]
   12e42:	bswap  eax
   12e44:	mov    DWORD PTR [rsp+0x64],eax
   12e48:	mov    rax,QWORD PTR [rsp+0x68]
   12e4d:	bswap  ecx
   12e4f:	mov    DWORD PTR [rsp+0x84],ecx
   12e56:	mov    rcx,QWORD PTR [rsp+0x90]
   12e5e:	bswap  rax
   12e61:	mov    QWORD PTR [rsp+0x68],rax
   12e66:	mov    eax,DWORD PTR [rsp+0x70]
   12e6a:	bswap  rcx
   12e6d:	mov    QWORD PTR [rsp+0x90],rcx
   12e75:	mov    ecx,DWORD PTR [rsp+0x98]
   12e7c:	bswap  eax
   12e7e:	mov    DWORD PTR [rsp+0x70],eax
   12e82:	mov    eax,DWORD PTR [rsp+0x80]
   12e89:	bswap  ecx
   12e8b:	mov    DWORD PTR [rsp+0x98],ecx
   12e92:	mov    rcx,QWORD PTR [rsp+0xa0]
   12e9a:	bswap  eax
   12e9c:	cmp    eax,0x1
   12e9f:	mov    DWORD PTR [rsp+0x74],edx
   12ea3:	bswap  rcx
   12ea6:	mov    QWORD PTR [rsp+0xa0],rcx
   12eae:	mov    ecx,DWORD PTR [rsp+0x9c]
   12eb5:	mov    DWORD PTR [rsp+0x80],eax
   12ebc:	bswap  ecx
   12ebe:	mov    DWORD PTR [rsp+0x9c],ecx
   12ec5:	seta   cl
   12ec8:	cmp    rsi,0x1
   12ecc:	setbe  sil
   12ed0:	or     ecx,esi
   12ed2:	movabs rsi,0x2514649fb
   12edc:	cmp    QWORD PTR [rsp+0x60],rsi
   12ee1:	setne  sil
   12ee5:	or     cl,sil
   12ee8:	jne    1333e <qcow_open+0x59e>
   12eee:	lea    esi,[rdx-0x9]
   12ef1:	cmp    esi,0x7
   12ef4:	ja     1333e <qcow_open+0x59e>
   12efa:	mov    DWORD PTR [r15+0x164],eax
   12f01:	test   eax,eax
   12f03:	jne    13180 <qcow_open+0x3e0>
   12f09:	mov    eax,0x1
   12f0e:	mov    ecx,edx
   12f10:	mov    DWORD PTR [r15+0x8],edx
   12f14:	mov    ebx,eax
   12f16:	shl    ebx,cl
   12f18:	mov    ecx,esi
   12f1a:	mov    rsi,QWORD PTR [rsp+0x18]
   12f1f:	mov    DWORD PTR [r15+0xc],ebx
   12f23:	mov    ebx,eax
   12f25:	shl    ebx,cl
   12f27:	lea    ecx,[rdx-0x3]
   12f2a:	mov    edx,eax
   12f2c:	shl    edx,cl
   12f2e:	mov    DWORD PTR [r15+0x14],ecx
   12f32:	mov    DWORD PTR [r15+0x10],ebx
   12f36:	mov    DWORD PTR [r15+0x18],edx
   12f3a:	mov    rdx,QWORD PTR [rsp+0x78]
   12f3f:	shr    rdx,0x9
   12f43:	mov    QWORD PTR [rsi],rdx
   12f46:	mov    edx,DWORD PTR [r15+0x8]
   12f4a:	mov    esi,0x46
   12f4f:	lea    ecx,[rdx-0x8]
   12f52:	sub    esi,edx
   12f54:	shl    eax,cl
   12f56:	mov    ecx,esi
   12f58:	mov    DWORD PTR [r15+0x24],esi
   12f5c:	movsxd rdi,DWORD PTR [rsp+0x84]
   12f64:	sub    eax,0x1
   12f67:	mov    DWORD PTR [r15+0x28],eax
   12f6b:	mov    eax,0x1
   12f70:	mov    rbx,rax
   12f73:	shl    rbx,cl
   12f76:	mov    rcx,rbx
   12f79:	sub    rcx,0x1
   12f7d:	mov    QWORD PTR [r15+0x30],rcx
   12f81:	mov    rcx,QWORD PTR [rsp+0x90]
   12f89:	mov    esi,DWORD PTR [rsp+0x98]
   12f90:	mov    QWORD PTR [r15+0x130],rcx
   12f97:	lea    ecx,[rdx-0x3]
   12f9a:	shl    esi,cl
   12f9c:	mov    rcx,QWORD PTR [rsp+0xa0]
   12fa4:	mov    DWORD PTR [r15+0x138],esi
   12fab:	mov    QWORD PTR [r15+0x350],rcx
   12fb2:	mov    ecx,DWORD PTR [rsp+0x9c]
   12fb9:	mov    DWORD PTR [r15+0x1c],edi
   12fbd:	mov    DWORD PTR [r15+0x35c],ecx
   12fc4:	mov    ecx,DWORD PTR [r15+0x14]
   12fc8:	add    ecx,edx
   12fca:	mov    rdx,QWORD PTR [rsp+0x78]
   12fcf:	shl    rax,cl
   12fd2:	lea    rax,[rdx+rax*1-0x1]
   12fd7:	shr    rax,cl
   12fda:	mov    DWORD PTR [r15+0x20],eax
   12fde:	cmp    edi,eax
   12fe0:	jl     1333e <qcow_open+0x59e>
   12fe6:	mov    rax,QWORD PTR [rsp+0x88]
   12fee:	shl    rdi,0x3
   12ff2:	mov    QWORD PTR [r15+0x38],rax
   12ff6:	call   4cb0 <qemu_malloc>
   12ffb:	mov    esi,DWORD PTR [r15+0x1c]
   12fff:	mov    rdi,QWORD PTR [r15]
   13002:	mov    QWORD PTR [r15+0x40],rax
   13006:	mov    rdx,rax
   13009:	lea    ecx,[rsi*8+0x0]
   13010:	mov    rsi,QWORD PTR [r15+0x38]
   13014:	call   17e40 <bdrv_pread>
   13019:	movsxd rdx,DWORD PTR [r15+0x1c]
   1301d:	cdqe   
   1301f:	mov    rcx,rdx
   13022:	shl    rdx,0x3
   13026:	cmp    rax,rdx
   13029:	jne    1333e <qcow_open+0x59e>
   1302f:	test   ecx,ecx
   13031:	jle    13053 <qcow_open+0x2b3>
   13033:	xor    eax,eax
   13035:	nop    DWORD PTR [rax]
   13038:	mov    rdx,QWORD PTR [r15+0x40]
   1303c:	lea    rcx,[rdx+rax*8]
   13040:	add    rax,0x1
   13044:	mov    rdx,QWORD PTR [rcx]
   13047:	bswap  rdx
   1304a:	mov    QWORD PTR [rcx],rdx
   1304d:	cmp    DWORD PTR [r15+0x1c],eax
   13051:	jg     13038 <qcow_open+0x298>
   13053:	mov    edi,DWORD PTR [r15+0x18]
   13057:	shl    edi,0x4
   1305a:	movsxd rdi,edi
   1305d:	shl    rdi,0x3
   13061:	call   4cb0 <qemu_malloc>
   13066:	movsxd rdi,DWORD PTR [r15+0xc]
   1306a:	mov    QWORD PTR [r15+0x48],rax
   1306e:	call   4cb0 <qemu_malloc>
   13073:	mov    QWORD PTR [r15+0x110],rax
   1307a:	mov    eax,DWORD PTR [r15+0xc]
   1307e:	lea    edi,[rax+0x10]
   13081:	shl    edi,0x5
   13084:	movsxd rdi,edi
   13087:	call   4cb0 <qemu_malloc>
   1308c:	mov    QWORD PTR [r15+0x120],0xffffffffffffffff
   13097:	mov    QWORD PTR [r15+0x118],rax
   1309e:	mov    rax,QWORD PTR [rsp+0x18]
   130a3:	mov    rbx,QWORD PTR [rax+0x40]
   130a7:	movsxd rdi,DWORD PTR [rbx+0xc]
   130ab:	call   4cb0 <qemu_malloc>
   130b0:	mov    QWORD PTR [rbx+0x148],rax
   130b7:	mov    eax,DWORD PTR [rbx+0x138]
   130bd:	lea    ebp,[rax*8+0x0]
   130c4:	movsxd rdi,ebp
   130c7:	call   4cb0 <qemu_malloc>
   130cc:	mov    ecx,DWORD PTR [rbx+0x138]
   130d2:	mov    QWORD PTR [rbx+0x128],rax
   130d9:	test   ecx,ecx
   130db:	jne    133a8 <qcow_open+0x608>
   130e1:	mov    rsi,QWORD PTR [rsp+0x68]
   130e6:	test   rsi,rsi
   130e9:	je     13126 <qcow_open+0x386>
   130eb:	mov    ebx,DWORD PTR [rsp+0x70]
   130ef:	mov    eax,0x3ff
   130f4:	mov    r14,QWORD PTR [rsp+0x18]
   130f9:	mov    rdi,QWORD PTR [r15]
   130fc:	cmp    ebx,0x3ff
   13102:	lea    rdx,[r14+0x448]
   13109:	cmovg  ebx,eax
   1310c:	mov    ecx,ebx
   1310e:	call   17e40 <bdrv_pread>
   13113:	cmp    eax,ebx
   13115:	jne    1333e <qcow_open+0x59e>
   1311b:	cdqe   
   1311d:	mov    BYTE PTR [r14+rax*1+0x448],0x0
   13126:	mov    rax,QWORD PTR [rsp+0x18]
   1312b:	mov    r12,QWORD PTR [rax+0x40]
   1312f:	movsxd rax,DWORD PTR [r12+0x35c]
   13137:	test   eax,eax
   13139:	jne    13198 <qcow_open+0x3f8>
   1313b:	mov    QWORD PTR [r12+0x360],0x0
   13147:	mov    DWORD PTR [r12+0x358],0x0
   13153:	mov    rsi,QWORD PTR [rsp+0xa8]
   1315b:	xor    rsi,QWORD PTR fs:0x28
   13164:	jne    13427 <qcow_open+0x687>
   1316a:	add    rsp,0xb8
   13171:	pop    rbx
   13172:	pop    rbp
   13173:	pop    r12
   13175:	pop    r13
   13177:	pop    r14
   13179:	pop    r15
   1317b:	ret    
   1317c:	nop    DWORD PTR [rax+0x0]
   13180:	mov    rax,QWORD PTR [rsp+0x18]
   13185:	mov    DWORD PTR [rax+0x14],0x1
   1318c:	jmp    12f09 <qcow_open+0x169>
   13191:	nop    DWORD PTR [rax+0x0]
   13198:	lea    rdi,[rax*8+0x0]
   131a0:	mov    rbx,QWORD PTR [r12+0x350]
   131a8:	sub    rdi,rax
   131ab:	shl    rdi,0x3
   131af:	call   4d00 <qemu_mallocz>
   131b4:	mov    QWORD PTR [r12+0x360],rax
   131bc:	mov    eax,DWORD PTR [r12+0x35c]
   131c4:	test   eax,eax
   131c6:	jle    13410 <qcow_open+0x670>
   131cc:	lea    rax,[rsp+0x30]
   131d1:	mov    DWORD PTR [rsp+0x10],0x0
   131d9:	mov    QWORD PTR [rsp+0x8],0x0
   131e2:	mov    QWORD PTR [rsp+0x20],rax
   131e7:	mov    QWORD PTR [rsp+0x28],r15
   131ec:	jmp    13304 <qcow_open+0x564>
   131f1:	nop    DWORD PTR [rax+0x0]
   131f8:	mov    rax,QWORD PTR [rsp+0x30]
   131fd:	mov    r15,QWORD PTR [rsp+0x8]
   13202:	add    r15,QWORD PTR [r12+0x360]
   1320a:	bswap  rax
   1320d:	mov    QWORD PTR [r15],rax
   13210:	mov    eax,DWORD PTR [rsp+0x38]
   13214:	bswap  eax
   13216:	mov    DWORD PTR [r15+0x8],eax
   1321a:	mov    eax,DWORD PTR [rsp+0x50]
   1321e:	movzx  r9d,WORD PTR [rsp+0x3c]
   13224:	movzx  ebp,WORD PTR [rsp+0x3e]
   13229:	bswap  eax
   1322b:	mov    DWORD PTR [r15+0x20],eax
   1322f:	mov    eax,DWORD PTR [rsp+0x40]
   13233:	rol    r9w,0x8
   13238:	rol    bp,0x8
   1323c:	bswap  eax
   1323e:	mov    DWORD PTR [r15+0x24],eax
   13242:	mov    eax,DWORD PTR [rsp+0x44]
   13246:	movzx  r13d,r9w
   1324a:	lea    edi,[r13+0x1]
   1324e:	mov    DWORD PTR [rsp+0x14],r9d
   13253:	movzx  r14d,bp
   13257:	bswap  eax
   13259:	mov    DWORD PTR [r15+0x28],eax
   1325d:	mov    rax,QWORD PTR [rsp+0x48]
   13262:	movsxd rdi,edi
   13265:	bswap  rax
   13268:	mov    QWORD PTR [r15+0x30],rax
   1326c:	mov    eax,DWORD PTR [rsp+0x54]
   13270:	bswap  eax
   13272:	mov    eax,eax
   13274:	lea    rbx,[rbx+rax*1+0x28]
   13279:	call   4cb0 <qemu_malloc>
   1327e:	mov    ecx,r13d
   13281:	mov    rsi,rbx
   13284:	mov    QWORD PTR [r15+0x10],rax
   13288:	mov    rdi,QWORD PTR [r12]
   1328c:	mov    rdx,rax
   1328f:	call   17e40 <bdrv_pread>
   13294:	cmp    r13d,eax
   13297:	jne    1332b <qcow_open+0x58b>
   1329d:	mov    r9d,DWORD PTR [rsp+0x14]
   132a2:	mov    rax,QWORD PTR [r15+0x10]
   132a6:	lea    edi,[r14+0x1]
   132aa:	movsxd rdi,edi
   132ad:	movzx  r9d,r9w
   132b1:	mov    BYTE PTR [rax+r9*1],0x0
   132b6:	add    rbx,r9
   132b9:	call   4cb0 <qemu_malloc>
   132be:	mov    ecx,r14d
   132c1:	mov    rsi,rbx
   132c4:	mov    QWORD PTR [r15+0x18],rax
   132c8:	mov    rdi,QWORD PTR [r12]
   132cc:	mov    rdx,rax
   132cf:	call   17e40 <bdrv_pread>
   132d4:	cmp    r14d,eax
   132d7:	jne    1332b <qcow_open+0x58b>
   132d9:	mov    rax,QWORD PTR [r15+0x18]
   132dd:	movzx  ebp,bp
   132e0:	add    DWORD PTR [rsp+0x10],0x1
   132e5:	add    rbx,rbp
   132e8:	add    QWORD PTR [rsp+0x8],0x38
   132ee:	mov    BYTE PTR [rax+rbp*1],0x0
   132f2:	mov    eax,DWORD PTR [rsp+0x10]
   132f6:	cmp    eax,DWORD PTR [r12+0x35c]
   132fe:	jge    13410 <qcow_open+0x670>
   13304:	add    rbx,0x7
   13308:	mov    rdx,QWORD PTR [rsp+0x20]
   1330d:	mov    rdi,QWORD PTR [r12]
   13311:	mov    ecx,0x28
   13316:	and    rbx,0xfffffffffffffff8
   1331a:	mov    rsi,rbx
   1331d:	call   17e40 <bdrv_pread>
   13322:	cmp    eax,0x28
   13325:	je     131f8 <qcow_open+0x458>
   1332b:	mov    rax,QWORD PTR [rsp+0x18]
   13330:	mov    r15,QWORD PTR [rsp+0x28]
   13335:	mov    rdi,QWORD PTR [rax+0x40]
   13339:	call   11fd0 <qcow_free_snapshots.isra.7>
   1333e:	mov    rbx,QWORD PTR [rsp+0x18]
   13343:	mov    rdi,QWORD PTR [rbx+0x40]
   13347:	call   11fd0 <qcow_free_snapshots.isra.7>
   1334c:	mov    rbx,QWORD PTR [rbx+0x40]
   13350:	mov    rdi,QWORD PTR [rbx+0x148]
   13357:	call   4ca0 <qemu_free>
   1335c:	mov    rdi,QWORD PTR [rbx+0x128]
   13363:	call   4ca0 <qemu_free>
   13368:	mov    rdi,QWORD PTR [r15+0x40]
   1336c:	call   4ca0 <qemu_free>
   13371:	mov    rdi,QWORD PTR [r15+0x48]
   13375:	call   4ca0 <qemu_free>
   1337a:	mov    rdi,QWORD PTR [r15+0x110]
   13381:	call   4ca0 <qemu_free>
   13386:	mov    rdi,QWORD PTR [r15+0x118]
   1338d:	call   4ca0 <qemu_free>
   13392:	mov    rdi,QWORD PTR [r15]
   13395:	call   17470 <bdrv_delete>
   1339a:	mov    eax,0xffffffff
   1339f:	jmp    13153 <qcow_open+0x3b3>
   133a4:	nop    DWORD PTR [rax+0x0]
   133a8:	mov    rsi,QWORD PTR [rbx+0x130]
   133af:	mov    rdi,QWORD PTR [rbx]
   133b2:	mov    ecx,ebp
   133b4:	mov    rdx,rax
   133b7:	call   17e40 <bdrv_pread>
   133bc:	cmp    ebp,eax
   133be:	jne    1333e <qcow_open+0x59e>
   133c4:	mov    edx,DWORD PTR [rbx+0x138]
   133ca:	test   edx,edx
   133cc:	je     130e1 <qcow_open+0x341>
   133d2:	xor    eax,eax
   133d4:	nop    DWORD PTR [rax+0x0]
   133d8:	mov    rdx,QWORD PTR [rbx+0x128]
   133df:	lea    rcx,[rdx+rax*8]
   133e3:	add    rax,0x1
   133e7:	mov    rdx,QWORD PTR [rcx]
   133ea:	bswap  rdx
   133ed:	mov    QWORD PTR [rcx],rdx
   133f0:	cmp    DWORD PTR [rbx+0x138],eax
   133f6:	ja     133d8 <qcow_open+0x638>
   133f8:	mov    rsi,QWORD PTR [rsp+0x68]
   133fd:	test   rsi,rsi
   13400:	jne    130eb <qcow_open+0x34b>
   13406:	jmp    13126 <qcow_open+0x386>
   1340b:	nop    DWORD PTR [rax+rax*1+0x0]
   13410:	sub    ebx,DWORD PTR [r12+0x350]
   13418:	xor    eax,eax
   1341a:	mov    DWORD PTR [r12+0x358],ebx
   13422:	jmp    13153 <qcow_open+0x3b3>
   13427:	call   3190 <__stack_chk_fail@plt>
   1342c:	nop    DWORD PTR [rax+0x0]

0000000000013430 <copy_sectors>:
   13430:	push   r15
   13432:	sub    r8d,ecx
   13435:	push   r14
   13437:	push   r13
   13439:	push   r12
   1343b:	push   rbp
   1343c:	push   rbx
   1343d:	sub    rsp,0x48
   13441:	mov    QWORD PTR [rsp+0x10],rdx
   13446:	mov    rax,QWORD PTR fs:0x28
   1344f:	mov    QWORD PTR [rsp+0x38],rax
   13454:	xor    eax,eax
   13456:	test   r8d,r8d
   13459:	jle    135ec <copy_sectors+0x1bc>
   1345f:	movsxd rax,ecx
   13462:	mov    r12,QWORD PTR [rdi+0x40]
   13466:	mov    r15,rdi
   13469:	mov    r14d,r8d
   1346c:	add    rsi,rax
   1346f:	mov    QWORD PTR [rsp+0x18],rax
   13474:	lea    rax,[rsp+0x34]
   13479:	mov    rbx,QWORD PTR [r12+0x118]
   13481:	mov    QWORD PTR [rsp+0x28],rsi
   13486:	mov    rbp,rsi
   13489:	mov    QWORD PTR [rsp+0x8],rax
   1348e:	mov    DWORD PTR [rsp+0x24],r8d
   13493:	jmp    134f4 <copy_sectors+0xc4>
   13495:	nop    DWORD PTR [rax]
   13498:	mov    rax,QWORD PTR [r15+0x850]
   1349f:	mov    ecx,DWORD PTR [rsp+0x34]
   134a3:	test   rax,rax
   134a6:	je     13660 <copy_sectors+0x230>
   134ac:	mov    r8,QWORD PTR [rax]
   134af:	movsxd rax,ecx
   134b2:	add    rax,rbp
   134b5:	cmp    r8,rax
   134b8:	jge    13635 <copy_sectors+0x205>
   134be:	cmp    r8,rbp
   134c1:	jg     13610 <copy_sectors+0x1e0>
   134c7:	shl    ecx,0x9
   134ca:	mov    rdi,rbx
   134cd:	movsxd rdx,ecx
   134d0:	call   3240 <memset@plt>
   134d5:	movsxd rcx,DWORD PTR [rsp+0x34]
   134da:	mov    edx,ecx
   134dc:	shl    edx,0x9
   134df:	movsxd rdx,edx
   134e2:	sub    r14d,ecx
   134e5:	add    rbp,rcx
   134e8:	add    rbx,rdx
   134eb:	test   r14d,r14d
   134ee:	jle    13580 <copy_sectors+0x150>
   134f4:	mov    rsi,rbp
   134f7:	mov    rdx,QWORD PTR [rsp+0x8]
   134fc:	mov    rdi,r15
   134ff:	mov    DWORD PTR [rsp+0x34],r14d
   13504:	shl    rsi,0x9
   13508:	call   12580 <get_cluster_offset>
   1350d:	mov    rsi,rax
   13510:	test   rax,rax
   13513:	je     13498 <copy_sectors+0x68>
   13515:	mov    eax,DWORD PTR [r12+0x10]
   1351a:	lea    r8d,[rax-0x1]
   1351e:	movabs rax,0x4000000000000000
   13528:	and    r8d,ebp
   1352b:	mov    r13d,r8d
   1352e:	test   rsi,rax
   13531:	je     13680 <copy_sectors+0x250>
   13537:	mov    rdi,r12
   1353a:	call   12170 <decompress_cluster>
   1353f:	test   eax,eax
   13541:	js     13657 <copy_sectors+0x227>
   13547:	mov    edx,DWORD PTR [rsp+0x34]
   1354b:	mov    r8d,r13d
   1354e:	mov    rdi,rbx
   13551:	shl    r8d,0x9
   13555:	shl    edx,0x9
   13558:	movsxd rsi,r8d
   1355b:	add    rsi,QWORD PTR [r12+0x110]
   13563:	movsxd rdx,edx
   13566:	call   33b0 <memcpy@plt>
   1356b:	movsxd rcx,DWORD PTR [rsp+0x34]
   13570:	mov    edx,ecx
   13572:	shl    edx,0x9
   13575:	jmp    134df <copy_sectors+0xaf>
   1357a:	nop    WORD PTR [rax+rax*1+0x0]
   13580:	mov    edx,DWORD PTR [r12+0x160]
   13588:	mov    r13d,DWORD PTR [rsp+0x24]
   1358d:	mov    rax,QWORD PTR [r12+0x118]
   13595:	test   edx,edx
   13597:	je     135c2 <copy_sectors+0x192>
   13599:	mov    rdi,QWORD PTR [rsp+0x28]
   1359e:	mov    rdx,rax
   135a1:	mov    rsi,rax
   135a4:	mov    ecx,r13d
   135a7:	lea    r9,[r12+0x168]
   135af:	mov    r8d,0x1
   135b5:	call   123c0 <encrypt_sectors.isra.12>
   135ba:	mov    rax,QWORD PTR [r12+0x118]
   135c2:	mov    rcx,QWORD PTR [rsp+0x10]
   135c7:	mov    rsi,QWORD PTR [rsp+0x18]
   135cc:	mov    rdx,rax
   135cf:	mov    rdi,QWORD PTR [r12]
   135d3:	shr    rcx,0x9
   135d7:	add    rsi,rcx
   135da:	mov    ecx,r13d
   135dd:	call   17990 <bdrv_write>
   135e2:	mov    edx,0x0
   135e7:	test   eax,eax
   135e9:	cmovg  eax,edx
   135ec:	mov    rbx,QWORD PTR [rsp+0x38]
   135f1:	xor    rbx,QWORD PTR fs:0x28
   135fa:	jne    136d9 <copy_sectors+0x2a9>
   13600:	add    rsp,0x48
   13604:	pop    rbx
   13605:	pop    rbp
   13606:	pop    r12
   13608:	pop    r13
   1360a:	pop    r14
   1360c:	pop    r15
   1360e:	ret    
   1360f:	nop
   13610:	mov    r13d,r8d
   13613:	xor    esi,esi
   13615:	sub    r13d,ebp
   13618:	mov    edi,r13d
   1361b:	sub    ecx,r13d
   1361e:	shl    edi,0x9
   13621:	shl    ecx,0x9
   13624:	movsxd rdi,edi
   13627:	movsxd rdx,ecx
   1362a:	add    rdi,rbx
   1362d:	call   3240 <memset@plt>
   13632:	mov    ecx,r13d
   13635:	test   ecx,ecx
   13637:	jle    134d5 <copy_sectors+0xa5>
   1363d:	mov    rdi,QWORD PTR [r15+0x850]
   13644:	mov    rdx,rbx
   13647:	mov    rsi,rbp
   1364a:	call   17550 <bdrv_read>
   1364f:	test   eax,eax
   13651:	jns    134d5 <copy_sectors+0xa5>
   13657:	mov    eax,0xffffffff
   1365c:	jmp    135ec <copy_sectors+0x1bc>
   1365e:	xchg   ax,ax
   13660:	shl    ecx,0x9
   13663:	xor    esi,esi
   13665:	mov    rdi,rbx
   13668:	movsxd rdx,ecx
   1366b:	call   3240 <memset@plt>
   13670:	movsxd rcx,DWORD PTR [rsp+0x34]
   13675:	mov    edx,ecx
   13677:	shl    edx,0x9
   1367a:	jmp    134df <copy_sectors+0xaf>
   1367f:	nop
   13680:	mov    ecx,DWORD PTR [rsp+0x34]
   13684:	shl    r8d,0x9
   13688:	mov    rdi,QWORD PTR [r12]
   1368c:	mov    rdx,rbx
   1368f:	movsxd r8,r8d
   13692:	shl    ecx,0x9
   13695:	add    rsi,r8
   13698:	call   17e40 <bdrv_pread>
   1369d:	movsxd rcx,DWORD PTR [rsp+0x34]
   136a2:	mov    edx,ecx
   136a4:	shl    edx,0x9
   136a7:	cmp    eax,edx
   136a9:	jne    13657 <copy_sectors+0x227>
   136ab:	mov    esi,DWORD PTR [r12+0x160]
   136b3:	test   esi,esi
   136b5:	je     134df <copy_sectors+0xaf>
   136bb:	xor    r8d,r8d
   136be:	mov    rdx,rbx
   136c1:	mov    rsi,rbx
   136c4:	mov    rdi,rbp
   136c7:	lea    r9,[r12+0x25c]
   136cf:	call   123c0 <encrypt_sectors.isra.12>
   136d4:	jmp    134d5 <copy_sectors+0xa5>
   136d9:	call   3190 <__stack_chk_fail@plt>
   136de:	xchg   ax,ax

00000000000136e0 <update_cluster_refcount>:
   136e0:	push   r15
   136e2:	push   r14
   136e4:	push   r13
   136e6:	mov    r13d,edx
   136e9:	push   r12
   136eb:	push   rbp
   136ec:	push   rbx
   136ed:	mov    rbx,rdi
   136f0:	sub    rsp,0x58
   136f4:	mov    rbp,QWORD PTR [rdi+0x40]
   136f8:	mov    QWORD PTR [rsp+0x8],rsi
   136fd:	mov    r9d,DWORD PTR [rbp+0x138]
   13704:	mov    rax,QWORD PTR fs:0x28
   1370d:	mov    QWORD PTR [rsp+0x48],rax
   13712:	xor    eax,eax
   13714:	mov    eax,DWORD PTR [rbp+0x8]
   13717:	lea    ecx,[rax-0x1]
   1371a:	sar    rsi,cl
   1371d:	mov    r14,rsi
   13720:	cmp    r9d,esi
   13723:	jbe    13830 <update_cluster_refcount+0x150>
   13729:	mov    rax,QWORD PTR [rbp+0x128]
   13730:	movsxd r10,esi
   13733:	lea    r15,[r10*8+0x0]
   1373b:	mov    r14,QWORD PTR [rax+r10*8]
   1373f:	mov    r12,r14
   13742:	test   r14,r14
   13745:	je     13ac0 <update_cluster_refcount+0x3e0>
   1374b:	cmp    QWORD PTR [rbp+0x140],r14
   13752:	je     1377d <update_cluster_refcount+0x9d>
   13754:	mov    rbx,QWORD PTR [rbx+0x40]
   13758:	mov    rsi,r14
   1375b:	mov    ecx,DWORD PTR [rbx+0xc]
   1375e:	mov    rdx,QWORD PTR [rbx+0x148]
   13765:	mov    rdi,QWORD PTR [rbx]
   13768:	call   17e40 <bdrv_pread>
   1376d:	cmp    eax,DWORD PTR [rbx+0xc]
   13770:	jne    13af0 <update_cluster_refcount+0x410>
   13776:	mov    QWORD PTR [rbx+0x140],r14
   1377d:	mov    eax,DWORD PTR [rbp+0x8]
   13780:	mov    rbx,QWORD PTR [rsp+0x8]
   13785:	mov    rsi,QWORD PTR [rbp+0x148]
   1378c:	lea    ecx,[rax-0x1]
   1378f:	mov    eax,0x1
   13794:	shl    eax,cl
   13796:	lea    ecx,[rax-0x1]
   13799:	and    ecx,ebx
   1379b:	movsxd rdx,ecx
   1379e:	add    rdx,rdx
   137a1:	add    rsi,rdx
   137a4:	movzx  eax,WORD PTR [rsi]
   137a7:	rol    ax,0x8
   137ab:	movzx  eax,ax
   137ae:	add    r13d,eax
   137b1:	cmp    r13d,0xffff
   137b8:	ja     13ad0 <update_cluster_refcount+0x3f0>
   137be:	test   r13d,r13d
   137c1:	jne    137d3 <update_cluster_refcount+0xf3>
   137c3:	cmp    QWORD PTR [rbp+0x150],rbx
   137ca:	jle    137d3 <update_cluster_refcount+0xf3>
   137cc:	mov    QWORD PTR [rbp+0x150],rbx
   137d3:	mov    eax,r13d
   137d6:	rol    ax,0x8
   137da:	mov    WORD PTR [rsi],ax
   137dd:	lea    esi,[rcx+rcx*1]
   137e0:	mov    rdi,QWORD PTR [rbp+0x0]
   137e4:	mov    ecx,0x2
   137e9:	movsxd rsi,esi
   137ec:	add    rdx,QWORD PTR [rbp+0x148]
   137f3:	add    rsi,r12
   137f6:	call   18450 <bdrv_pwrite>
   137fb:	cmp    eax,0x2
   137fe:	jne    13af0 <update_cluster_refcount+0x410>
   13804:	mov    rdi,QWORD PTR [rsp+0x48]
   13809:	xor    rdi,QWORD PTR fs:0x28
   13812:	mov    eax,r13d
   13815:	jne    13b2a <update_cluster_refcount+0x44a>
   1381b:	add    rsp,0x58
   1381f:	pop    rbx
   13820:	pop    rbp
   13821:	pop    r12
   13823:	pop    r13
   13825:	pop    r14
   13827:	pop    r15
   13829:	ret    
   1382a:	nop    WORD PTR [rax+rax*1+0x0]
   13830:	cmp    edx,0xffffffff
   13833:	je     13ad0 <update_cluster_refcount+0x3f0>
   13839:	lea    edx,[rsi+0x1]
   1383c:	cmp    r9d,edx
   1383f:	jae    13a09 <update_cluster_refcount+0x329>
   13845:	lea    ecx,[rax-0x3]
   13848:	mov    r12d,0x1
   1384e:	mov    eax,0x2
   13853:	shr    r9d,cl
   13856:	shl    r12d,cl
   13859:	shl    eax,cl
   1385b:	test   r9d,r9d
   1385e:	jne    13873 <update_cluster_refcount+0x193>
   13860:	cmp    edx,r12d
   13863:	jle    13898 <update_cluster_refcount+0x1b8>
   13865:	cmp    edx,eax
   13867:	jle    13ae0 <update_cluster_refcount+0x400>
   1386d:	mov    r9d,0x2
   13873:	lea    esi,[r9+r9*2+0x1]
   13878:	mov    r9d,esi
   1387b:	shr    r9d,0x1f
   1387f:	add    r9d,esi
   13882:	sar    r9d,1
   13885:	mov    esi,r9d
   13888:	shl    esi,cl
   1388a:	cmp    edx,esi
   1388c:	jg     1385b <update_cluster_refcount+0x17b>
   1388e:	mov    r12d,esi
   13891:	jmp    1389e <update_cluster_refcount+0x1be>
   13893:	nop    DWORD PTR [rax+rax*1+0x0]
   13898:	mov    r9d,0x1
   1389e:	lea    eax,[r12*8+0x0]
   138a6:	mov    DWORD PTR [rsp+0x20],r9d
   138ab:	mov    DWORD PTR [rsp+0x10],eax
   138af:	cdqe   
   138b1:	mov    rdi,rax
   138b4:	mov    QWORD PTR [rsp+0x18],rax
   138b9:	call   4d00 <qemu_mallocz>
   138be:	mov    edx,DWORD PTR [rbp+0x138]
   138c4:	mov    rsi,QWORD PTR [rbp+0x128]
   138cb:	mov    rdi,rax
   138ce:	mov    r15,rax
   138d1:	shl    rdx,0x3
   138d5:	call   33b0 <memcpy@plt>
   138da:	mov    ecx,DWORD PTR [rbp+0x138]
   138e0:	xor    eax,eax
   138e2:	mov    r9d,DWORD PTR [rsp+0x20]
   138e7:	test   ecx,ecx
   138e9:	je     13907 <update_cluster_refcount+0x227>
   138eb:	nop    DWORD PTR [rax+rax*1+0x0]
   138f0:	mov    rdx,QWORD PTR [r15+rax*8]
   138f4:	bswap  rdx
   138f7:	mov    QWORD PTR [r15+rax*8],rdx
   138fb:	add    rax,0x1
   138ff:	cmp    DWORD PTR [rbp+0x138],eax
   13905:	ja     138f0 <update_cluster_refcount+0x210>
   13907:	mov    rsi,QWORD PTR [rsp+0x18]
   1390c:	mov    rdi,rbx
   1390f:	mov    DWORD PTR [rsp+0x2c],r9d
   13914:	call   11e20 <alloc_clusters_noref>
   13919:	mov    ecx,DWORD PTR [rsp+0x10]
   1391d:	mov    rdi,QWORD PTR [rbp+0x0]
   13921:	mov    rdx,r15
   13924:	mov    rsi,rax
   13927:	mov    QWORD PTR [rsp+0x20],rax
   1392c:	call   18450 <bdrv_pwrite>
   13931:	cmp    DWORD PTR [rsp+0x10],eax
   13935:	mov    r9d,DWORD PTR [rsp+0x2c]
   1393a:	jne    13b00 <update_cluster_refcount+0x420>
   13940:	mov    edx,DWORD PTR [rbp+0x138]
   13946:	xor    eax,eax
   13948:	test   edx,edx
   1394a:	je     13967 <update_cluster_refcount+0x287>
   1394c:	nop    DWORD PTR [rax+0x0]
   13950:	mov    rdx,QWORD PTR [r15+rax*8]
   13954:	bswap  rdx
   13957:	mov    QWORD PTR [r15+rax*8],rdx
   1395b:	add    rax,0x1
   1395f:	cmp    DWORD PTR [rbp+0x138],eax
   13965:	ja     13950 <update_cluster_refcount+0x270>
   13967:	mov    rax,QWORD PTR [rsp+0x20]
   1396c:	bswap  r9d
   1396f:	mov    DWORD PTR [rsp+0x44],r9d
   13974:	lea    rdx,[rsp+0x3c]
   13979:	mov    ecx,0xc
   1397e:	mov    esi,0x30
   13983:	bswap  rax
   13986:	mov    QWORD PTR [rsp+0x3c],rax
   1398b:	mov    rdi,QWORD PTR [rbp+0x0]
   1398f:	call   18450 <bdrv_pwrite>
   13994:	cmp    eax,0xc
   13997:	jne    13b00 <update_cluster_refcount+0x420>
   1399d:	mov    rdi,QWORD PTR [rbp+0x128]
   139a4:	call   4ca0 <qemu_free>
   139a9:	mov    edi,DWORD PTR [rbp+0x138]
   139af:	mov    rdx,QWORD PTR [rsp+0x18]
   139b4:	mov    QWORD PTR [rbp+0x128],r15
   139bb:	mov    rax,QWORD PTR [rbp+0x130]
   139c2:	mov    DWORD PTR [rbp+0x138],r12d
   139c9:	mov    ecx,0x1
   139ce:	mov    DWORD PTR [rsp+0x2c],edi
   139d2:	mov    rdi,rbx
   139d5:	mov    QWORD PTR [rsp+0x10],rax
   139da:	mov    rax,QWORD PTR [rsp+0x20]
   139df:	mov    QWORD PTR [rbp+0x130],rax
   139e6:	mov    rsi,rax
   139e9:	call   13b30 <update_refcount>
   139ee:	movsxd rdx,DWORD PTR [rsp+0x2c]
   139f3:	mov    rsi,QWORD PTR [rsp+0x10]
   139f8:	mov    rdi,rbx
   139fb:	mov    ecx,0xffffffff
   13a00:	shl    rdx,0x3
   13a04:	call   13b30 <update_refcount>
   13a09:	mov    rax,QWORD PTR [rbp+0x128]
   13a10:	movsxd r10,r14d
   13a13:	lea    r15,[r10*8+0x0]
   13a1b:	mov    r14,QWORD PTR [rax+r10*8]
   13a1f:	mov    r12,r14
   13a22:	test   r14,r14
   13a25:	jne    1374b <update_cluster_refcount+0x6b>
   13a2b:	movsxd rsi,DWORD PTR [rbp+0xc]
   13a2f:	mov    rdi,rbx
   13a32:	call   11e20 <alloc_clusters_noref>
   13a37:	movsxd rdx,DWORD PTR [rbp+0xc]
   13a3b:	mov    rdi,QWORD PTR [rbp+0x148]
   13a42:	xor    esi,esi
   13a44:	mov    r12,rax
   13a47:	call   3240 <memset@plt>
   13a4c:	mov    ecx,DWORD PTR [rbp+0xc]
   13a4f:	mov    rdi,QWORD PTR [rbp+0x0]
   13a53:	mov    rsi,r12
   13a56:	mov    rdx,QWORD PTR [rbp+0x148]
   13a5d:	call   18450 <bdrv_pwrite>
   13a62:	cmp    DWORD PTR [rbp+0xc],eax
   13a65:	jne    13ad0 <update_cluster_refcount+0x3f0>
   13a67:	mov    rax,QWORD PTR [rbp+0x128]
   13a6e:	lea    rdx,[rsp+0x30]
   13a73:	mov    ecx,0x8
   13a78:	mov    QWORD PTR [rax+r15*1],r12
   13a7c:	mov    rax,r12
   13a7f:	mov    rsi,QWORD PTR [rbp+0x130]
   13a86:	bswap  rax
   13a89:	mov    QWORD PTR [rsp+0x30],rax
   13a8e:	mov    rdi,QWORD PTR [rbp+0x0]
   13a92:	add    rsi,r15
   13a95:	call   18450 <bdrv_pwrite>
   13a9a:	cmp    eax,0x8
   13a9d:	jne    13ad0 <update_cluster_refcount+0x3f0>
   13a9f:	movsxd rdx,DWORD PTR [rbp+0xc]
   13aa3:	mov    ecx,0x1
   13aa8:	mov    rsi,r12
   13aab:	mov    rdi,rbx
   13aae:	mov    QWORD PTR [rbp+0x140],r12
   13ab5:	call   13b30 <update_refcount>
   13aba:	jmp    1377d <update_cluster_refcount+0x9d>
   13abf:	nop
   13ac0:	cmp    edx,0xffffffff
   13ac3:	jne    13a2b <update_cluster_refcount+0x34b>
   13ac9:	nop    DWORD PTR [rax+0x0]
   13ad0:	mov    r13d,0xffffffea
   13ad6:	jmp    13804 <update_cluster_refcount+0x124>
   13adb:	nop    DWORD PTR [rax+rax*1+0x0]
   13ae0:	mov    r12d,eax
   13ae3:	mov    r9d,0x2
   13ae9:	jmp    1389e <update_cluster_refcount+0x1be>
   13aee:	xchg   ax,ax
   13af0:	mov    r13d,0xfffffffb
   13af6:	jmp    13804 <update_cluster_refcount+0x124>
   13afb:	nop    DWORD PTR [rax+rax*1+0x0]
   13b00:	mov    rdx,QWORD PTR [rsp+0x18]
   13b05:	mov    rsi,QWORD PTR [rsp+0x20]
   13b0a:	mov    ecx,0xffffffff
   13b0f:	mov    rdi,rbx
   13b12:	mov    r13d,0xfffffffb
   13b18:	call   13b30 <update_refcount>
   13b1d:	mov    rdi,r15
   13b20:	call   4ca0 <qemu_free>
   13b25:	jmp    13804 <update_cluster_refcount+0x124>
   13b2a:	call   3190 <__stack_chk_fail@plt>
   13b2f:	nop

0000000000013b30 <update_refcount>:
   13b30:	test   rdx,rdx
   13b33:	jle    13b98 <update_refcount+0x68>
   13b35:	push   r14
   13b37:	mov    r14d,ecx
   13b3a:	push   r13
   13b3c:	push   r12
   13b3e:	mov    r12,rdi
   13b41:	push   rbp
   13b42:	push   rbx
   13b43:	mov    rbp,QWORD PTR [rdi+0x40]
   13b47:	mov    r13d,DWORD PTR [rbp+0xc]
   13b4b:	neg    r13d
   13b4e:	movsxd rax,r13d
   13b51:	lea    r13,[rsi+rdx*1-0x1]
   13b56:	mov    rbx,rax
   13b59:	and    r13,rax
   13b5c:	and    rbx,rsi
   13b5f:	cmp    rbx,r13
   13b62:	jg     13b88 <update_refcount+0x58>
   13b64:	nop    DWORD PTR [rax+0x0]
   13b68:	mov    ecx,DWORD PTR [rbp+0x8]
   13b6b:	mov    rsi,rbx
   13b6e:	mov    edx,r14d
   13b71:	mov    rdi,r12
   13b74:	sar    rsi,cl
   13b77:	call   136e0 <update_cluster_refcount>
   13b7c:	movsxd rax,DWORD PTR [rbp+0xc]
   13b80:	add    rbx,rax
   13b83:	cmp    r13,rbx
   13b86:	jge    13b68 <update_refcount+0x38>
   13b88:	pop    rbx
   13b89:	pop    rbp
   13b8a:	pop    r12
   13b8c:	pop    r13
   13b8e:	pop    r14
   13b90:	ret    
   13b91:	nop    DWORD PTR [rax+0x0]
   13b98:	ret    
   13b99:	nop    DWORD PTR [rax+0x0]

0000000000013ba0 <free_any_clusters>:
   13ba0:	bt     rsi,0x3e
   13ba5:	mov    rax,QWORD PTR [rdi+0x40]
   13ba9:	jb     13bc0 <free_any_clusters+0x20>
   13bab:	mov    ecx,DWORD PTR [rax+0x8]
   13bae:	shl    edx,cl
   13bb0:	mov    ecx,0xffffffff
   13bb5:	movsxd rdx,edx
   13bb8:	jmp    13b30 <update_refcount>
   13bbd:	nop    DWORD PTR [rax]
   13bc0:	mov    ecx,DWORD PTR [rax+0x24]
   13bc3:	mov    rdx,rsi
   13bc6:	and    rsi,QWORD PTR [rax+0x30]
   13bca:	and    rsi,0xfffffffffffffe00
   13bd1:	shr    rdx,cl
   13bd4:	and    edx,DWORD PTR [rax+0x28]
   13bd7:	mov    ecx,0xffffffff
   13bdc:	add    edx,0x1
   13bdf:	shl    edx,0x9
   13be2:	movsxd rdx,edx
   13be5:	jmp    13b30 <update_refcount>
   13bea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000013bf0 <alloc_clusters>:
   13bf0:	push   r12
   13bf2:	mov    r12,rsi
   13bf5:	push   rbp
   13bf6:	mov    rbp,rdi
   13bf9:	push   rbx
   13bfa:	call   11e20 <alloc_clusters_noref>
   13bff:	mov    rdx,r12
   13c02:	mov    rdi,rbp
   13c05:	mov    ecx,0x1
   13c0a:	mov    rbx,rax
   13c0d:	mov    rsi,rax
   13c10:	call   13b30 <update_refcount>
   13c15:	mov    rax,rbx
   13c18:	pop    rbx
   13c19:	pop    rbp
   13c1a:	pop    r12
   13c1c:	ret    
   13c1d:	nop    DWORD PTR [rax]

0000000000013c20 <grow_l1_table>:
   13c20:	push   r15
   13c22:	push   r14
   13c24:	push   r13
   13c26:	push   r12
   13c28:	push   rbp
   13c29:	push   rbx
   13c2a:	sub    rsp,0x28
   13c2e:	mov    r15,QWORD PTR [rdi+0x40]
   13c32:	mov    rax,QWORD PTR fs:0x28
   13c3b:	mov    QWORD PTR [rsp+0x18],rax
   13c40:	xor    eax,eax
   13c42:	mov    ecx,DWORD PTR [r15+0x1c]
   13c46:	cmp    ecx,esi
   13c48:	jge    13d64 <grow_l1_table+0x144>
   13c4e:	mov    r12,rdi
   13c51:	nop    DWORD PTR [rax+0x0]
   13c58:	lea    eax,[rcx+rcx*2+0x1]
   13c5c:	mov    ebx,eax
   13c5e:	shr    ebx,0x1f
   13c61:	add    ebx,eax
   13c63:	sar    ebx,1
   13c65:	mov    ecx,ebx
   13c67:	cmp    esi,ebx
   13c69:	jg     13c58 <grow_l1_table+0x38>
   13c6b:	lea    ebp,[rbx*8+0x0]
   13c72:	movsxd r13,ebp
   13c75:	mov    rdi,r13
   13c78:	call   4d00 <qemu_mallocz>
   13c7d:	movsxd rdx,DWORD PTR [r15+0x1c]
   13c81:	mov    rsi,QWORD PTR [r15+0x40]
   13c85:	mov    rdi,rax
   13c88:	mov    r14,rax
   13c8b:	shl    rdx,0x3
   13c8f:	call   33b0 <memcpy@plt>
   13c94:	mov    rsi,r13
   13c97:	mov    rdi,r12
   13c9a:	call   13bf0 <alloc_clusters>
   13c9f:	mov    edx,DWORD PTR [r15+0x1c]
   13ca3:	mov    r13,rax
   13ca6:	test   edx,edx
   13ca8:	jle    13cc5 <grow_l1_table+0xa5>
   13caa:	xor    eax,eax
   13cac:	nop    DWORD PTR [rax+0x0]
   13cb0:	mov    rdx,QWORD PTR [r14+rax*8]
   13cb4:	bswap  rdx
   13cb7:	mov    QWORD PTR [r14+rax*8],rdx
   13cbb:	add    rax,0x1
   13cbf:	cmp    DWORD PTR [r15+0x1c],eax
   13cc3:	jg     13cb0 <grow_l1_table+0x90>
   13cc5:	mov    rdi,QWORD PTR [r15]
   13cc8:	mov    ecx,ebp
   13cca:	mov    rdx,r14
   13ccd:	mov    rsi,r13
   13cd0:	call   18450 <bdrv_pwrite>
   13cd5:	cmp    ebp,eax
   13cd7:	jne    13d83 <grow_l1_table+0x163>
   13cdd:	mov    eax,DWORD PTR [r15+0x1c]
   13ce1:	test   eax,eax
   13ce3:	jle    13d05 <grow_l1_table+0xe5>
   13ce5:	xor    eax,eax
   13ce7:	nop    WORD PTR [rax+rax*1+0x0]
   13cf0:	mov    rdx,QWORD PTR [r14+rax*8]
   13cf4:	bswap  rdx
   13cf7:	mov    QWORD PTR [r14+rax*8],rdx
   13cfb:	add    rax,0x1
   13cff:	cmp    DWORD PTR [r15+0x1c],eax
   13d03:	jg     13cf0 <grow_l1_table+0xd0>
   13d05:	mov    eax,ebx
   13d07:	lea    rdx,[rsp+0xc]
   13d0c:	mov    ecx,0xc
   13d11:	mov    esi,0x24
   13d16:	bswap  eax
   13d18:	mov    DWORD PTR [rsp+0xc],eax
   13d1c:	mov    rax,r13
   13d1f:	bswap  rax
   13d22:	mov    QWORD PTR [rsp+0x10],rax
   13d27:	mov    rdi,QWORD PTR [r15]
   13d2a:	call   18450 <bdrv_pwrite>
   13d2f:	cmp    eax,0xc
   13d32:	jne    13d83 <grow_l1_table+0x163>
   13d34:	mov    rdi,QWORD PTR [r15+0x40]
   13d38:	call   4ca0 <qemu_free>
   13d3d:	movsxd rdx,DWORD PTR [r15+0x1c]
   13d41:	mov    rsi,QWORD PTR [r15+0x38]
   13d45:	mov    rdi,r12
   13d48:	mov    ecx,0xffffffff
   13d4d:	shl    rdx,0x3
   13d51:	call   13b30 <update_refcount>
   13d56:	mov    QWORD PTR [r15+0x38],r13
   13d5a:	xor    eax,eax
   13d5c:	mov    QWORD PTR [r15+0x40],r14
   13d60:	mov    DWORD PTR [r15+0x1c],ebx
   13d64:	mov    rdi,QWORD PTR [rsp+0x18]
   13d69:	xor    rdi,QWORD PTR fs:0x28
   13d72:	jne    13d93 <grow_l1_table+0x173>
   13d74:	add    rsp,0x28
   13d78:	pop    rbx
   13d79:	pop    rbp
   13d7a:	pop    r12
   13d7c:	pop    r13
   13d7e:	pop    r14
   13d80:	pop    r15
   13d82:	ret    
   13d83:	mov    rdi,QWORD PTR [r15+0x40]
   13d87:	call   4ca0 <qemu_free>
   13d8c:	mov    eax,0xfffffffb
   13d91:	jmp    13d64 <grow_l1_table+0x144>
   13d93:	call   3190 <__stack_chk_fail@plt>
   13d98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000013da0 <get_cluster_table>:
   13da0:	push   r15
   13da2:	push   r14
   13da4:	mov    r14,rdi
   13da7:	push   r13
   13da9:	push   r12
   13dab:	mov    r12,rsi
   13dae:	push   rbp
   13daf:	push   rbx
   13db0:	mov    rbx,rsi
   13db3:	sub    rsp,0x48
   13db7:	mov    r15,QWORD PTR [rdi+0x40]
   13dbb:	mov    QWORD PTR [rsp+0x10],rcx
   13dc0:	mov    QWORD PTR [rsp+0x8],rdx
   13dc5:	mov    ecx,DWORD PTR [r15+0x8]
   13dc9:	mov    QWORD PTR [rsp+0x18],r8
   13dce:	add    ecx,DWORD PTR [r15+0x14]
   13dd2:	shr    r12,cl
   13dd5:	mov    rax,QWORD PTR fs:0x28
   13dde:	mov    QWORD PTR [rsp+0x38],rax
   13de3:	xor    eax,eax
   13de5:	cmp    DWORD PTR [r15+0x1c],r12d
   13de9:	jle    13f88 <get_cluster_table+0x1e8>
   13def:	mov    rax,QWORD PTR [r15+0x40]
   13df3:	movsxd r12,r12d
   13df6:	lea    rbp,[r12*8+0x0]
   13dfe:	mov    rsi,QWORD PTR [rax+r12*8]
   13e02:	test   rsi,rsi
   13e05:	js     13fa0 <get_cluster_table+0x200>
   13e0b:	jne    13f68 <get_cluster_table+0x1c8>
   13e11:	mov    r13,QWORD PTR [r14+0x40]
   13e15:	mov    rdi,r14
   13e18:	mov    rax,QWORD PTR [r13+0x40]
   13e1c:	movsxd rsi,DWORD PTR [r13+0x18]
   13e20:	mov    r8,QWORD PTR [rax+r12*8]
   13e24:	shl    rsi,0x3
   13e28:	mov    QWORD PTR [rsp+0x28],r8
   13e2d:	call   13bf0 <alloc_clusters>
   13e32:	mov    rdx,QWORD PTR [r13+0x40]
   13e36:	mov    ecx,0x8
   13e3b:	mov    QWORD PTR [rsp+0x20],rax
   13e40:	bts    rax,0x3f
   13e45:	mov    QWORD PTR [rdx+r12*8],rax
   13e49:	mov    rsi,QWORD PTR [r13+0x38]
   13e4d:	bswap  rax
   13e50:	lea    rdx,[rsp+0x30]
   13e55:	mov    QWORD PTR [rsp+0x30],rax
   13e5a:	mov    rdi,QWORD PTR [r13+0x0]
   13e5e:	add    rsi,rbp
   13e61:	call   18450 <bdrv_pwrite>
   13e66:	mov    r8,QWORD PTR [rsp+0x28]
   13e6b:	cmp    eax,0x8
   13e6e:	jne    13f40 <get_cluster_table+0x1a0>
   13e74:	mov    rsi,QWORD PTR [r14+0x40]
   13e78:	xor    eax,eax
   13e7a:	xor    ebp,ebp
   13e7c:	mov    ecx,0xffffffff
   13e81:	nop    DWORD PTR [rax+0x0]
   13e88:	mov    edx,DWORD PTR [rsi+rax*4+0xd0]
   13e8f:	cmp    edx,ecx
   13e91:	jae    13e98 <get_cluster_table+0xf8>
   13e93:	movsxd rbp,eax
   13e96:	mov    ecx,edx
   13e98:	add    rax,0x1
   13e9c:	cmp    rax,0x10
   13ea0:	jne    13e88 <get_cluster_table+0xe8>
   13ea2:	mov    ecx,DWORD PTR [r13+0x14]
   13ea6:	mov    eax,ebp
   13ea8:	mov    rdx,QWORD PTR [r13+0x48]
   13eac:	shl    eax,cl
   13eae:	cdqe   
   13eb0:	lea    r14,[rdx+rax*8]
   13eb4:	movsxd rdx,DWORD PTR [r13+0x18]
   13eb8:	mov    rcx,rdx
   13ebb:	test   r8,r8
   13ebe:	jne    13f18 <get_cluster_table+0x178>
   13ec0:	shl    rdx,0x3
   13ec4:	xor    esi,esi
   13ec6:	mov    rdi,r14
   13ec9:	call   3240 <memset@plt>
   13ece:	mov    eax,DWORD PTR [r13+0x18]
   13ed2:	mov    rdi,QWORD PTR [r13+0x0]
   13ed6:	mov    rdx,r14
   13ed9:	mov    rsi,QWORD PTR [rsp+0x20]
   13ede:	lea    ecx,[rax*8+0x0]
   13ee5:	call   18450 <bdrv_pwrite>
   13eea:	movsxd rdx,DWORD PTR [r13+0x18]
   13eee:	cdqe   
   13ef0:	shl    rdx,0x3
   13ef4:	cmp    rdx,rax
   13ef7:	jne    13f40 <get_cluster_table+0x1a0>
   13ef9:	mov    rax,QWORD PTR [rsp+0x20]
   13efe:	mov    QWORD PTR [r13+rbp*8+0x50],rax
   13f03:	mov    DWORD PTR [r13+rbp*4+0xd0],0x1
   13f0f:	jmp    14036 <get_cluster_table+0x296>
   13f14:	nop    DWORD PTR [rax+0x0]
   13f18:	mov    rdi,QWORD PTR [r13+0x0]
   13f1c:	shl    ecx,0x3
   13f1f:	mov    rdx,r14
   13f22:	mov    rsi,r8
   13f25:	call   17e40 <bdrv_pread>
   13f2a:	movsxd rdx,DWORD PTR [r13+0x18]
   13f2e:	cdqe   
   13f30:	mov    rcx,rdx
   13f33:	shl    rdx,0x3
   13f37:	cmp    rax,rdx
   13f3a:	je     13ff0 <get_cluster_table+0x250>
   13f40:	xor    eax,eax
   13f42:	mov    rdi,QWORD PTR [rsp+0x38]
   13f47:	xor    rdi,QWORD PTR fs:0x28
   13f50:	jne    14050 <get_cluster_table+0x2b0>
   13f56:	add    rsp,0x48
   13f5a:	pop    rbx
   13f5b:	pop    rbp
   13f5c:	pop    r12
   13f5e:	pop    r13
   13f60:	pop    r14
   13f62:	pop    r15
   13f64:	ret    
   13f65:	nop    DWORD PTR [rax]
   13f68:	movsxd rdx,DWORD PTR [r15+0x18]
   13f6c:	mov    ecx,0xffffffff
   13f71:	mov    rdi,r14
   13f74:	shl    rdx,0x3
   13f78:	call   13b30 <update_refcount>
   13f7d:	jmp    13e11 <get_cluster_table+0x71>
   13f82:	nop    WORD PTR [rax+rax*1+0x0]
   13f88:	lea    esi,[r12+0x1]
   13f8d:	call   13c20 <grow_l1_table>
   13f92:	test   eax,eax
   13f94:	jns    13def <get_cluster_table+0x4f>
   13f9a:	jmp    13f40 <get_cluster_table+0x1a0>
   13f9c:	nop    DWORD PTR [rax+0x0]
   13fa0:	btr    rsi,0x3f
   13fa5:	lea    rdi,[r14+0x40]
   13fa9:	mov    rbp,rsi
   13fac:	call   11ea0 <l2_load.isra.5>
   13fb1:	mov    r14,rax
   13fb4:	test   rax,rax
   13fb7:	je     13f40 <get_cluster_table+0x1a0>
   13fb9:	mov    ecx,DWORD PTR [r15+0x8]
   13fbd:	mov    eax,DWORD PTR [r15+0x18]
   13fc1:	shr    rbx,cl
   13fc4:	sub    eax,0x1
   13fc7:	and    ebx,eax
   13fc9:	mov    rax,QWORD PTR [rsp+0x8]
   13fce:	mov    QWORD PTR [rax],r14
   13fd1:	mov    rax,QWORD PTR [rsp+0x10]
   13fd6:	mov    QWORD PTR [rax],rbp
   13fd9:	mov    rax,QWORD PTR [rsp+0x18]
   13fde:	mov    DWORD PTR [rax],ebx
   13fe0:	mov    eax,0x1
   13fe5:	jmp    13f42 <get_cluster_table+0x1a2>
   13fea:	nop    WORD PTR [rax+rax*1+0x0]
   13ff0:	mov    rsi,QWORD PTR [rsp+0x20]
   13ff5:	mov    rdi,QWORD PTR [r13+0x0]
   13ff9:	mov    rdx,r14
   13ffc:	shl    ecx,0x3
   13fff:	call   18450 <bdrv_pwrite>
   14004:	movsxd rdx,DWORD PTR [r13+0x18]
   14008:	cdqe   
   1400a:	shl    rdx,0x3
   1400e:	cmp    rax,rdx
   14011:	jne    13f40 <get_cluster_table+0x1a0>
   14017:	mov    rax,QWORD PTR [rsp+0x20]
   1401c:	mov    QWORD PTR [r13+rbp*8+0x50],rax
   14021:	mov    DWORD PTR [r13+rbp*4+0xd0],0x1
   1402d:	test   r14,r14
   14030:	je     13f40 <get_cluster_table+0x1a0>
   14036:	movabs rsi,0x7fffffffffffffff
   14040:	mov    rax,QWORD PTR [r15+0x40]
   14044:	and    rsi,QWORD PTR [rax+r12*8]
   14048:	mov    rbp,rsi
   1404b:	jmp    13fb9 <get_cluster_table+0x219>
   14050:	call   3190 <__stack_chk_fail@plt>
   14055:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000014060 <alloc_cluster_offset>:
   14060:	push   r15
   14062:	push   r14
   14064:	mov    r14d,ecx
   14067:	push   r13
   14069:	xor    r13d,r13d
   1406c:	push   r12
   1406e:	push   rbp
   1406f:	push   rbx
   14070:	sub    rsp,0x68
   14074:	mov    rbx,QWORD PTR [rdi+0x40]
   14078:	mov    DWORD PTR [rsp+0x14],edx
   1407c:	lea    rdx,[rsp+0x50]
   14081:	mov    DWORD PTR [rsp+0x38],ecx
   14085:	lea    rcx,[rsp+0x48]
   1408a:	mov    QWORD PTR [rsp+0x20],r8
   1408f:	lea    r8,[rsp+0x44]
   14094:	mov    QWORD PTR [rsp+0x28],rdi
   14099:	mov    QWORD PTR [rsp+0x30],rsi
   1409e:	mov    QWORD PTR [rsp+0x8],r9
   140a3:	mov    rax,QWORD PTR fs:0x28
   140ac:	mov    QWORD PTR [rsp+0x58],rax
   140b1:	xor    eax,eax
   140b3:	mov    QWORD PTR [rsp+0x18],rbx
   140b8:	call   13da0 <get_cluster_table>
   140bd:	test   eax,eax
   140bf:	jne    140f0 <alloc_cluster_offset+0x90>
   140c1:	mov    rdi,QWORD PTR [rsp+0x58]
   140c6:	xor    rdi,QWORD PTR fs:0x28
   140cf:	mov    rax,r13
   140d2:	jne    14288 <alloc_cluster_offset+0x228>
   140d8:	add    rsp,0x68
   140dc:	pop    rbx
   140dd:	pop    rbp
   140de:	pop    r12
   140e0:	pop    r13
   140e2:	pop    r14
   140e4:	pop    r15
   140e6:	ret    
   140e7:	nop    WORD PTR [rax+rax*1+0x0]
   140f0:	mov    esi,DWORD PTR [rbx+0xc]
   140f3:	mov    eax,r14d
   140f6:	mov    edi,DWORD PTR [rbx+0x18]
   140f9:	shl    eax,0x9
   140fc:	mov    r15d,DWORD PTR [rsp+0x44]
   14101:	mov    ecx,DWORD PTR [rbx+0x8]
   14104:	lea    r9d,[rsi-0x1]
   14108:	cdqe   
   1410a:	mov    rbp,QWORD PTR [rsp+0x50]
   1410f:	mov    DWORD PTR [rsp+0x10],esi
   14113:	movsxd r9,r9d
   14116:	mov    DWORD PTR [rsp+0x3c],edi
   1411a:	add    r9,rax
   1411d:	mov    rax,r9
   14120:	mov    r9d,edi
   14123:	sar    rax,cl
   14126:	sub    r9d,r15d
   14129:	cmp    r9d,eax
   1412c:	mov    r14d,eax
   1412f:	movsxd rax,r15d
   14132:	lea    r12,[rbp+rax*8+0x0]
   14137:	cmovl  r14d,r9d
   1413b:	mov    r13,QWORD PTR [r12]
   1413f:	bswap  r13
   14142:	test   r13,r13
   14145:	js     14263 <alloc_cluster_offset+0x203>
   1414b:	bt     r13,0x3e
   14150:	jae    14254 <alloc_cluster_offset+0x1f4>
   14156:	mov    r14d,0x1
   1415c:	movabs r13,0x4000000000000000
   14166:	xor    ebx,ebx
   14168:	nop    DWORD PTR [rax+rax*1+0x0]
   14170:	mov    edi,r14d
   14173:	mov    esi,DWORD PTR [rsp+0x10]
   14177:	movsxd rcx,ebx
   1417a:	xor    r8d,r8d
   1417d:	sub    edi,ebx
   1417f:	mov    rdx,r12
   14182:	movsxd rdi,edi
   14185:	call   124f0 <count_contiguous_clusters>
   1418a:	add    ebx,eax
   1418c:	lea    eax,[r15+rbx*1]
   14190:	cdqe   
   14192:	lea    rcx,[rbp+rax*8+0x0]
   14197:	mov    rax,QWORD PTR [rcx]
   1419a:	test   rax,rax
   1419d:	jne    141f6 <alloc_cluster_offset+0x196>
   1419f:	mov    edx,r14d
   141a2:	sub    edx,ebx
   141a4:	movsxd rdx,edx
   141a7:	test   rdx,rdx
   141aa:	je     141ed <alloc_cluster_offset+0x18d>
   141ac:	test   rax,rax
   141af:	jne    141ed <alloc_cluster_offset+0x18d>
   141b1:	mov    eax,0x1
   141b6:	jmp    141cc <alloc_cluster_offset+0x16c>
   141b8:	nop    DWORD PTR [rax+rax*1+0x0]
   141c0:	add    rax,0x1
   141c4:	cmp    QWORD PTR [rcx+rax*8-0x8],0x0
   141ca:	jne    141d3 <alloc_cluster_offset+0x173>
   141cc:	mov    esi,eax
   141ce:	cmp    rdx,rax
   141d1:	jne    141c0 <alloc_cluster_offset+0x160>
   141d3:	add    ebx,esi
   141d5:	lea    eax,[r15+rbx*1]
   141d9:	cdqe   
   141db:	mov    rax,QWORD PTR [rbp+rax*8+0x0]
   141e0:	bswap  rax
   141e3:	test   rax,rax
   141e6:	js     141f6 <alloc_cluster_offset+0x196>
   141e8:	test   rax,r13
   141eb:	jne    141f6 <alloc_cluster_offset+0x196>
   141ed:	cmp    ebx,r14d
   141f0:	jl     14170 <alloc_cluster_offset+0x110>
   141f6:	mov    ebp,DWORD PTR [rsp+0x10]
   141fa:	imul   ebp,ebx
   141fd:	movsxd rsi,ebp
   14200:	mov    rdi,QWORD PTR [rsp+0x28]
   14205:	call   13bf0 <alloc_clusters>
   1420a:	mov    rdi,QWORD PTR [rsp+0x30]
   1420f:	mov    r13,rax
   14212:	mov    rax,QWORD PTR [rsp+0x8]
   14217:	mov    QWORD PTR [rax],rdi
   1421a:	mov    edi,DWORD PTR [rsp+0x14]
   1421e:	mov    DWORD PTR [rax+0x10],ebx
   14221:	mov    DWORD PTR [rax+0x8],edi
   14224:	mov    rax,QWORD PTR [rsp+0x18]
   14229:	mov    ecx,DWORD PTR [rax+0x8]
   1422c:	mov    eax,DWORD PTR [rsp+0x38]
   14230:	sub    ecx,0x9
   14233:	mov    edx,eax
   14235:	shl    ebx,cl
   14237:	cmp    ebx,eax
   14239:	mov    rax,QWORD PTR [rsp+0x8]
   1423e:	cmovle edx,ebx
   14241:	mov    DWORD PTR [rax+0xc],edx
   14244:	mov    rax,QWORD PTR [rsp+0x20]
   14249:	sub    edx,DWORD PTR [rsp+0x14]
   1424d:	mov    DWORD PTR [rax],edx
   1424f:	jmp    140c1 <alloc_cluster_offset+0x61>
   14254:	xor    esi,esi
   14256:	xor    ebx,ebx
   14258:	test   r14d,r14d
   1425b:	jg     1415c <alloc_cluster_offset+0xfc>
   14261:	jmp    14200 <alloc_cluster_offset+0x1a0>
   14263:	movsxd rdi,r14d
   14266:	xor    r8d,r8d
   14269:	xor    ecx,ecx
   1426b:	mov    rdx,r12
   1426e:	call   124f0 <count_contiguous_clusters>
   14273:	btr    r13,0x3f
   14278:	mov    ebx,eax
   1427a:	mov    rax,QWORD PTR [rsp+0x8]
   1427f:	mov    DWORD PTR [rax+0x10],0x0
   14286:	jmp    14224 <alloc_cluster_offset+0x1c4>
   14288:	call   3190 <__stack_chk_fail@plt>
   1428d:	nop    DWORD PTR [rax]

0000000000014290 <alloc_cluster_link_l2>:
   14290:	push   r15
   14292:	push   r14
   14294:	push   r13
   14296:	push   r12
   14298:	push   rbp
   14299:	push   rbx
   1429a:	sub    rsp,0x38
   1429e:	mov    r15d,DWORD PTR [rdx+0x10]
   142a2:	mov    rax,QWORD PTR fs:0x28
   142ab:	mov    QWORD PTR [rsp+0x28],rax
   142b0:	xor    eax,eax
   142b2:	test   r15d,r15d
   142b5:	jne    142e0 <alloc_cluster_link_l2+0x50>
   142b7:	mov    rbx,QWORD PTR [rsp+0x28]
   142bc:	xor    rbx,QWORD PTR fs:0x28
   142c5:	mov    eax,r15d
   142c8:	jne    144dc <alloc_cluster_link_l2+0x24c>
   142ce:	add    rsp,0x38
   142d2:	pop    rbx
   142d3:	pop    rbp
   142d4:	pop    r12
   142d6:	pop    r13
   142d8:	pop    r14
   142da:	pop    r15
   142dc:	ret    
   142dd:	nop    DWORD PTR [rax]
   142e0:	mov    r13,QWORD PTR [rdi+0x40]
   142e4:	mov    rbx,rdi
   142e7:	movsxd rdi,r15d
   142ea:	mov    r12,rdx
   142ed:	shl    rdi,0x3
   142f1:	mov    r14,rsi
   142f4:	call   4cb0 <qemu_malloc>
   142f9:	mov    esi,DWORD PTR [r13+0xc]
   142fd:	mov    r8d,DWORD PTR [r12+0x8]
   14302:	mov    rbp,rax
   14305:	neg    esi
   14307:	movsxd rsi,esi
   1430a:	and    rsi,QWORD PTR [r12]
   1430e:	shr    rsi,0x9
   14312:	mov    r9,rsi
   14315:	test   r8d,r8d
   14318:	jne    144b8 <alloc_cluster_link_l2+0x228>
   1431e:	mov    r8d,DWORD PTR [r13+0x10]
   14322:	mov    ecx,DWORD PTR [r12+0xc]
   14327:	lea    eax,[r8-0x1]
   1432b:	test   eax,ecx
   1432d:	je     1435b <alloc_cluster_link_l2+0xcb>
   1432f:	mov    eax,r8d
   14332:	mov    rdi,rbx
   14335:	neg    eax
   14337:	and    eax,ecx
   14339:	movsxd rsi,eax
   1433c:	sub    ecx,eax
   1433e:	mov    rdx,rsi
   14341:	add    rsi,r9
   14344:	shl    rdx,0x9
   14348:	add    rdx,r14
   1434b:	call   13430 <copy_sectors>
   14350:	mov    r15d,eax
   14353:	test   eax,eax
   14355:	js     144a6 <alloc_cluster_link_l2+0x216>
   1435b:	mov    rsi,QWORD PTR [r12]
   1435f:	lea    rcx,[rsp+0x18]
   14364:	lea    rdx,[rsp+0x20]
   14369:	mov    rdi,rbx
   1436c:	lea    r8,[rsp+0x14]
   14371:	call   13da0 <get_cluster_table>
   14376:	test   eax,eax
   14378:	je     144a0 <alloc_cluster_link_l2+0x210>
   1437e:	mov    eax,DWORD PTR [r12+0x10]
   14383:	test   eax,eax
   14385:	jle    14460 <alloc_cluster_link_l2+0x1d0>
   1438b:	movabs rsi,0x8000000000000000
   14395:	xor    r15d,r15d
   14398:	xor    edx,edx
   1439a:	nop    WORD PTR [rax+rax*1+0x0]
   143a0:	mov    eax,DWORD PTR [rsp+0x14]
   143a4:	mov    rcx,QWORD PTR [rsp+0x20]
   143a9:	add    eax,edx
   143ab:	cdqe   
   143ad:	lea    rdi,[rcx+rax*8]
   143b1:	mov    rax,QWORD PTR [rdi]
   143b4:	test   rax,rax
   143b7:	je     143d6 <alloc_cluster_link_l2+0x146>
   143b9:	movsxd rcx,r15d
   143bc:	add    r15d,0x1
   143c0:	mov    QWORD PTR [rbp+rcx*8+0x0],rax
   143c5:	mov    eax,DWORD PTR [rsp+0x14]
   143c9:	mov    rcx,QWORD PTR [rsp+0x20]
   143ce:	add    eax,edx
   143d0:	cdqe   
   143d2:	lea    rdi,[rcx+rax*8]
   143d6:	mov    ecx,DWORD PTR [r13+0x8]
   143da:	mov    eax,edx
   143dc:	add    edx,0x1
   143df:	shl    eax,cl
   143e1:	cdqe   
   143e3:	add    rax,r14
   143e6:	or     rax,rsi
   143e9:	bswap  rax
   143ec:	mov    QWORD PTR [rdi],rax
   143ef:	mov    ecx,DWORD PTR [r12+0x10]
   143f4:	cmp    ecx,edx
   143f6:	jg     143a0 <alloc_cluster_link_l2+0x110>
   143f8:	movsxd rsi,DWORD PTR [rsp+0x14]
   143fd:	mov    rdx,QWORD PTR [rsp+0x20]
   14402:	shl    ecx,0x3
   14405:	mov    rdi,QWORD PTR [r13+0x0]
   14409:	shl    rsi,0x3
   1440d:	add    rdx,rsi
   14410:	add    rsi,QWORD PTR [rsp+0x18]
   14415:	call   18450 <bdrv_pwrite>
   1441a:	movsxd rdx,DWORD PTR [r12+0x10]
   1441f:	cdqe   
   14421:	shl    rdx,0x3
   14425:	cmp    rax,rdx
   14428:	jne    144a0 <alloc_cluster_link_l2+0x210>
   1442a:	test   r15d,r15d
   1442d:	je     1445a <alloc_cluster_link_l2+0x1ca>
   1442f:	lea    eax,[r15-0x1]
   14433:	mov    r12,rbp
   14436:	lea    r13,[rbp+rax*8+0x8]
   1443b:	nop    DWORD PTR [rax+rax*1+0x0]
   14440:	mov    rsi,QWORD PTR [r12]
   14444:	mov    edx,0x1
   14449:	mov    rdi,rbx
   1444c:	add    r12,0x8
   14450:	call   13ba0 <free_any_clusters>
   14455:	cmp    r13,r12
   14458:	jne    14440 <alloc_cluster_link_l2+0x1b0>
   1445a:	xor    r15d,r15d
   1445d:	jmp    144a6 <alloc_cluster_link_l2+0x216>
   1445f:	nop
   14460:	movsxd rsi,DWORD PTR [rsp+0x14]
   14465:	mov    rdx,QWORD PTR [rsp+0x20]
   1446a:	lea    ecx,[rax*8+0x0]
   14471:	mov    rdi,QWORD PTR [r13+0x0]
   14475:	shl    rsi,0x3
   14479:	add    rdx,rsi
   1447c:	add    rsi,QWORD PTR [rsp+0x18]
   14481:	call   18450 <bdrv_pwrite>
   14486:	movsxd rdx,DWORD PTR [r12+0x10]
   1448b:	cdqe   
   1448d:	shl    rdx,0x3
   14491:	cmp    rdx,rax
   14494:	je     1445a <alloc_cluster_link_l2+0x1ca>
   14496:	nop    WORD PTR cs:[rax+rax*1+0x0]
   144a0:	mov    r15d,0xfffffffb
   144a6:	mov    rdi,rbp
   144a9:	call   4ca0 <qemu_free>
   144ae:	jmp    142b7 <alloc_cluster_link_l2+0x27>
   144b3:	nop    DWORD PTR [rax+rax*1+0x0]
   144b8:	xor    ecx,ecx
   144ba:	mov    rdx,r14
   144bd:	mov    rdi,rbx
   144c0:	mov    QWORD PTR [rsp+0x8],rsi
   144c5:	call   13430 <copy_sectors>
   144ca:	mov    r9,QWORD PTR [rsp+0x8]
   144cf:	test   eax,eax
   144d1:	mov    r15d,eax
   144d4:	jns    1431e <alloc_cluster_link_l2+0x8e>
   144da:	jmp    144a6 <alloc_cluster_link_l2+0x216>
   144dc:	call   3190 <__stack_chk_fail@plt>
   144e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   144ec:	nop    DWORD PTR [rax+0x0]

00000000000144f0 <qcow_aio_write_cb>:
   144f0:	push   r15
   144f2:	push   r14
   144f4:	push   r13
   144f6:	push   r12
   144f8:	mov    r12d,esi
   144fb:	push   rbp
   144fc:	push   rbx
   144fd:	mov    rbx,rdi
   14500:	sub    rsp,0x8
   14504:	mov    rbp,QWORD PTR [rdi+0x8]
   14508:	mov    r13,QWORD PTR [rbp+0x40]
   1450c:	mov    QWORD PTR [rdi+0x50],0x0
   14514:	test   esi,esi
   14516:	js     14610 <qcow_aio_write_cb+0x120>
   1451c:	lea    r15,[rdi+0x60]
   14520:	mov    rsi,QWORD PTR [rdi+0x40]
   14524:	mov    rdi,rbp
   14527:	mov    rdx,r15
   1452a:	call   14290 <alloc_cluster_link_l2>
   1452f:	test   eax,eax
   14531:	js     145f8 <qcow_aio_write_cb+0x108>
   14537:	movsxd rsi,DWORD PTR [rbx+0x3c]
   1453b:	mov    ecx,DWORD PTR [rbx+0x38]
   1453e:	mov    rax,rsi
   14541:	sub    ecx,esi
   14543:	add    rsi,QWORD PTR [rbx+0x28]
   14547:	shl    eax,0x9
   1454a:	mov    DWORD PTR [rbx+0x38],ecx
   1454d:	cdqe   
   1454f:	mov    QWORD PTR [rbx+0x28],rsi
   14553:	add    QWORD PTR [rbx+0x30],rax
   14557:	test   ecx,ecx
   14559:	je     14630 <qcow_aio_write_cb+0x140>
   1455f:	mov    eax,DWORD PTR [r13+0x10]
   14563:	mov    edi,DWORD PTR [r13+0x160]
   1456a:	lea    r14d,[rax-0x1]
   1456e:	and    r14d,esi
   14571:	add    ecx,r14d
   14574:	test   edi,edi
   14576:	jne    14640 <qcow_aio_write_cb+0x150>
   1457c:	shl    rsi,0x9
   14580:	mov    r9,r15
   14583:	lea    r8,[rbx+0x3c]
   14587:	mov    edx,r14d
   1458a:	mov    rdi,rbp
   1458d:	call   14060 <alloc_cluster_offset>
   14592:	mov    QWORD PTR [rbx+0x40],rax
   14596:	test   rax,rax
   14599:	je     14688 <qcow_aio_write_cb+0x198>
   1459f:	test   eax,0x1ff
   145a4:	jne    14688 <qcow_aio_write_cb+0x198>
   145aa:	mov    edx,DWORD PTR [r13+0x160]
   145b1:	test   edx,edx
   145b3:	jne    14650 <qcow_aio_write_cb+0x160>
   145b9:	mov    rdx,QWORD PTR [rbx+0x30]
   145bd:	shr    rax,0x9
   145c1:	mov    ecx,DWORD PTR [rbx+0x3c]
   145c4:	movsxd rsi,r14d
   145c7:	mov    rdi,QWORD PTR [r13+0x0]
   145cb:	add    rsi,rax
   145ce:	mov    r9,rbx
   145d1:	lea    r8,[rip+0xffffffffffffff18]        # 144f0 <qcow_aio_write_cb>
   145d8:	call   194e0 <bdrv_aio_write>
   145dd:	mov    QWORD PTR [rbx+0x50],rax
   145e1:	test   rax,rax
   145e4:	je     14610 <qcow_aio_write_cb+0x120>
   145e6:	add    rsp,0x8
   145ea:	pop    rbx
   145eb:	pop    rbp
   145ec:	pop    r12
   145ee:	pop    r13
   145f0:	pop    r14
   145f2:	pop    r15
   145f4:	ret    
   145f5:	nop    DWORD PTR [rax]
   145f8:	mov    edx,DWORD PTR [rbx+0x70]
   145fb:	mov    rsi,QWORD PTR [rbx+0x40]
   145ff:	mov    rdi,rbp
   14602:	call   13ba0 <free_any_clusters>
   14607:	nop    WORD PTR [rax+rax*1+0x0]
   14610:	mov    rdi,QWORD PTR [rbx+0x18]
   14614:	mov    esi,r12d
   14617:	call   QWORD PTR [rbx+0x10]
   1461a:	add    rsp,0x8
   1461e:	mov    rdi,rbx
   14621:	pop    rbx
   14622:	pop    rbp
   14623:	pop    r12
   14625:	pop    r13
   14627:	pop    r14
   14629:	pop    r15
   1462b:	jmp    19ba0 <qemu_aio_release>
   14630:	mov    rdi,QWORD PTR [rbx+0x18]
   14634:	xor    esi,esi
   14636:	jmp    14617 <qcow_aio_write_cb+0x127>
   14638:	nop    DWORD PTR [rax+rax*1+0x0]
   14640:	shl    eax,0x5
   14643:	cmp    ecx,eax
   14645:	cmovg  ecx,eax
   14648:	jmp    1457c <qcow_aio_write_cb+0x8c>
   1464d:	nop    DWORD PTR [rax]
   14650:	mov    rsi,QWORD PTR [rbx+0x48]
   14654:	test   rsi,rsi
   14657:	je     14690 <qcow_aio_write_cb+0x1a0>
   14659:	mov    rdx,QWORD PTR [rbx+0x30]
   1465d:	mov    ecx,DWORD PTR [rbx+0x3c]
   14660:	lea    r9,[r13+0x168]
   14667:	mov    r8d,0x1
   1466d:	mov    rdi,QWORD PTR [rbx+0x28]
   14671:	call   123c0 <encrypt_sectors.isra.12>
   14676:	mov    rdx,QWORD PTR [rbx+0x48]
   1467a:	mov    rax,QWORD PTR [rbx+0x40]
   1467e:	jmp    145bd <qcow_aio_write_cb+0xcd>
   14683:	nop    DWORD PTR [rax+rax*1+0x0]
   14688:	mov    r12d,0xfffffffb
   1468e:	jmp    14610 <qcow_aio_write_cb+0x120>
   14690:	mov    edi,DWORD PTR [r13+0xc]
   14694:	shl    edi,0x5
   14697:	movsxd rdi,edi
   1469a:	call   4d00 <qemu_mallocz>
   1469f:	mov    rsi,rax
   146a2:	mov    QWORD PTR [rbx+0x48],rax
   146a6:	jmp    14659 <qcow_aio_write_cb+0x169>
   146a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000146b0 <qcow_aio_write>:
   146b0:	push   r13
   146b2:	mov    r13d,ecx
   146b5:	push   r12
   146b7:	mov    r12,rsi
   146ba:	mov    rsi,r8
   146bd:	push   rbp
   146be:	mov    rbp,rdx
   146c1:	mov    rdx,r9
   146c4:	push   rbx
   146c5:	sub    rsp,0x8
   146c9:	mov    rax,QWORD PTR [rdi+0x40]
   146cd:	mov    QWORD PTR [rax+0x120],0xffffffffffffffff
   146d8:	call   199c0 <qemu_aio_get>
   146dd:	mov    rbx,rax
   146e0:	test   rax,rax
   146e3:	je     14719 <qcow_aio_write+0x69>
   146e5:	mov    QWORD PTR [rax+0x50],0x0
   146ed:	xor    esi,esi
   146ef:	mov    rdi,rax
   146f2:	mov    QWORD PTR [rax+0x28],r12
   146f6:	mov    QWORD PTR [rax+0x30],rbp
   146fa:	mov    DWORD PTR [rax+0x38],r13d
   146fe:	mov    DWORD PTR [rax+0x3c],0x0
   14705:	mov    QWORD PTR [rax+0x40],0x0
   1470d:	mov    DWORD PTR [rax+0x70],0x0
   14714:	call   144f0 <qcow_aio_write_cb>
   14719:	add    rsp,0x8
   1471d:	mov    rax,rbx
   14720:	pop    rbx
   14721:	pop    rbp
   14722:	pop    r12
   14724:	pop    r13
   14726:	ret    
   14727:	nop    WORD PTR [rax+rax*1+0x0]

0000000000014730 <qcow_write_snapshots>:
   14730:	push   r15
   14732:	push   r14
   14734:	push   r13
   14736:	push   r12
   14738:	push   rbp
   14739:	push   rbx
   1473a:	sub    rsp,0x68
   1473e:	mov    rbx,QWORD PTR [rdi+0x40]
   14742:	mov    QWORD PTR [rsp+0x10],rdi
   14747:	mov    eax,DWORD PTR [rbx+0x35c]
   1474d:	mov    rcx,QWORD PTR fs:0x28
   14756:	mov    QWORD PTR [rsp+0x58],rcx
   1475b:	xor    ecx,ecx
   1475d:	test   eax,eax
   1475f:	jle    149e0 <qcow_write_snapshots+0x2b0>
   14765:	lea    ecx,[rax-0x1]
   14768:	mov    rdx,QWORD PTR [rbx+0x360]
   1476f:	xor    ebp,ebp
   14771:	lea    rax,[rcx*8+0x0]
   14779:	sub    rax,rcx
   1477c:	lea    r12,[rdx+0x10]
   14780:	lea    r13,[rdx+rax*8+0x48]
   14785:	nop    DWORD PTR [rax]
   14788:	mov    rdi,QWORD PTR [r12]
   1478c:	add    rbp,0x7
   14790:	add    r12,0x38
   14794:	and    rbp,0xfffffffffffffff8
   14798:	call   3180 <strlen@plt>
   1479d:	mov    rdi,QWORD PTR [r12-0x30]
   147a2:	mov    r14,rax
   147a5:	call   3180 <strlen@plt>
   147aa:	lea    rbp,[r14+rbp*1+0x28]
   147af:	add    rbp,rax
   147b2:	cmp    r13,r12
   147b5:	jne    14788 <qcow_write_snapshots+0x58>
   147b7:	mov    DWORD PTR [rsp+0x1c],ebp
   147bb:	movsxd rsi,ebp
   147be:	mov    rdi,QWORD PTR [rsp+0x10]
   147c3:	call   13bf0 <alloc_clusters>
   147c8:	mov    QWORD PTR [rsp+0x8],rax
   147cd:	mov    eax,DWORD PTR [rbx+0x35c]
   147d3:	test   eax,eax
   147d5:	jle    14950 <qcow_write_snapshots+0x220>
   147db:	mov    rax,QWORD PTR [rsp+0x8]
   147e0:	xor    r14d,r14d
   147e3:	lea    rbp,[rsp+0x30]
   147e8:	mov    DWORD PTR [rsp+0x18],0x0
   147f0:	mov    QWORD PTR [rsp],rax
   147f4:	jmp    1486a <qcow_write_snapshots+0x13a>
   147f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14800:	add    r9,0x28
   14804:	mov    rdx,QWORD PTR [r15+0x10]
   14808:	mov    rdi,QWORD PTR [rbx]
   1480b:	mov    ecx,r12d
   1480e:	mov    rsi,r9
   14811:	mov    QWORD PTR [rsp],r9
   14815:	call   18450 <bdrv_pwrite>
   1481a:	cmp    eax,r12d
   1481d:	jne    14927 <qcow_write_snapshots+0x1f7>
   14823:	mov    r9,QWORD PTR [rsp]
   14827:	cdqe   
   14829:	mov    rdx,QWORD PTR [r15+0x18]
   1482d:	mov    ecx,r13d
   14830:	mov    rdi,QWORD PTR [rbx]
   14833:	lea    r12,[rax+r9*1]
   14837:	mov    rsi,r12
   1483a:	call   18450 <bdrv_pwrite>
   1483f:	cmp    eax,r13d
   14842:	jne    14927 <qcow_write_snapshots+0x1f7>
   14848:	cdqe   
   1484a:	add    DWORD PTR [rsp+0x18],0x1
   1484f:	add    r14,0x38
   14853:	add    rax,r12
   14856:	mov    QWORD PTR [rsp],rax
   1485a:	mov    eax,DWORD PTR [rsp+0x18]
   1485e:	cmp    DWORD PTR [rbx+0x35c],eax
   14864:	jle    14950 <qcow_write_snapshots+0x220>
   1486a:	mov    r15,QWORD PTR [rbx+0x360]
   14871:	pxor   xmm0,xmm0
   14875:	mov    QWORD PTR [rbp+0x20],0x0
   1487d:	movaps XMMWORD PTR [rbp+0x0],xmm0
   14881:	add    r15,r14
   14884:	movaps XMMWORD PTR [rbp+0x10],xmm0
   14888:	mov    rax,QWORD PTR [r15]
   1488b:	bswap  rax
   1488e:	mov    QWORD PTR [rsp+0x30],rax
   14893:	mov    eax,DWORD PTR [r15+0x8]
   14897:	bswap  eax
   14899:	mov    DWORD PTR [rsp+0x38],eax
   1489d:	mov    eax,DWORD PTR [r15+0x20]
   148a1:	bswap  eax
   148a3:	mov    DWORD PTR [rsp+0x50],eax
   148a7:	mov    eax,DWORD PTR [r15+0x24]
   148ab:	bswap  eax
   148ad:	mov    DWORD PTR [rsp+0x40],eax
   148b1:	mov    eax,DWORD PTR [r15+0x28]
   148b5:	bswap  eax
   148b7:	mov    DWORD PTR [rsp+0x44],eax
   148bb:	mov    rax,QWORD PTR [r15+0x30]
   148bf:	bswap  rax
   148c2:	mov    QWORD PTR [rsp+0x48],rax
   148c7:	mov    rdi,QWORD PTR [r15+0x10]
   148cb:	call   3180 <strlen@plt>
   148d0:	mov    rdi,QWORD PTR [r15+0x18]
   148d4:	mov    r12,rax
   148d7:	call   3180 <strlen@plt>
   148dc:	mov    r9,QWORD PTR [rsp]
   148e0:	mov    ecx,0x28
   148e5:	mov    rdx,rbp
   148e8:	mov    r13,rax
   148eb:	mov    eax,r12d
   148ee:	rol    ax,0x8
   148f2:	add    r9,0x7
   148f6:	mov    WORD PTR [rsp+0x3c],ax
   148fb:	mov    eax,r13d
   148fe:	and    r9,0xfffffffffffffff8
   14902:	rol    ax,0x8
   14906:	mov    rsi,r9
   14909:	mov    QWORD PTR [rsp],r9
   1490d:	mov    WORD PTR [rsp+0x3e],ax
   14912:	mov    rdi,QWORD PTR [rbx]
   14915:	call   18450 <bdrv_pwrite>
   1491a:	mov    r9,QWORD PTR [rsp]
   1491e:	cmp    eax,0x28
   14921:	je     14800 <qcow_write_snapshots+0xd0>
   14927:	mov    eax,0xffffffff
   1492c:	mov    rsi,QWORD PTR [rsp+0x58]
   14931:	xor    rsi,QWORD PTR fs:0x28
   1493a:	jne    149ef <qcow_write_snapshots+0x2bf>
   14940:	add    rsp,0x68
   14944:	pop    rbx
   14945:	pop    rbp
   14946:	pop    r12
   14948:	pop    r13
   1494a:	pop    r14
   1494c:	pop    r15
   1494e:	ret    
   1494f:	nop
   14950:	mov    rax,QWORD PTR [rsp+0x8]
   14955:	lea    rdx,[rsp+0x28]
   1495a:	mov    ecx,0x8
   1495f:	mov    esi,0x40
   14964:	bswap  rax
   14967:	mov    QWORD PTR [rsp+0x28],rax
   1496c:	mov    rdi,QWORD PTR [rbx]
   1496f:	call   18450 <bdrv_pwrite>
   14974:	cmp    eax,0x8
   14977:	jne    14927 <qcow_write_snapshots+0x1f7>
   14979:	mov    eax,DWORD PTR [rbx+0x35c]
   1497f:	lea    rdx,[rsp+0x24]
   14984:	mov    ecx,0x4
   14989:	mov    esi,0x3c
   1498e:	bswap  eax
   14990:	mov    DWORD PTR [rsp+0x24],eax
   14994:	mov    rdi,QWORD PTR [rbx]
   14997:	call   18450 <bdrv_pwrite>
   1499c:	cmp    eax,0x4
   1499f:	jne    14927 <qcow_write_snapshots+0x1f7>
   149a1:	movsxd rdx,DWORD PTR [rbx+0x358]
   149a8:	mov    rdi,QWORD PTR [rsp+0x10]
   149ad:	mov    ecx,0xffffffff
   149b2:	mov    rsi,QWORD PTR [rbx+0x350]
   149b9:	call   13b30 <update_refcount>
   149be:	mov    rax,QWORD PTR [rsp+0x8]
   149c3:	mov    QWORD PTR [rbx+0x350],rax
   149ca:	mov    eax,DWORD PTR [rsp+0x1c]
   149ce:	mov    DWORD PTR [rbx+0x358],eax
   149d4:	xor    eax,eax
   149d6:	jmp    1492c <qcow_write_snapshots+0x1fc>
   149db:	nop    DWORD PTR [rax+rax*1+0x0]
   149e0:	mov    DWORD PTR [rsp+0x1c],0x0
   149e8:	xor    esi,esi
   149ea:	jmp    147be <qcow_write_snapshots+0x8e>
   149ef:	call   3190 <__stack_chk_fail@plt>
   149f4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   149ff:	nop

0000000000014a00 <update_snapshot_refcount>:
   14a00:	push   r15
   14a02:	mov    r15,rsi
   14a05:	push   r14
   14a07:	push   r13
   14a09:	push   r12
   14a0b:	push   rbp
   14a0c:	push   rbx
   14a0d:	mov    ebx,edx
   14a0f:	sub    rsp,0x68
   14a13:	mov    r14,QWORD PTR [rdi+0x40]
   14a17:	mov    DWORD PTR [rsp+0x28],edx
   14a1b:	mov    edx,DWORD PTR [r14+0x18]
   14a1f:	mov    QWORD PTR [rsp+0x10],rdi
   14a24:	mov    rdi,QWORD PTR [r14+0x48]
   14a28:	mov    QWORD PTR [rsp+0x58],rsi
   14a2d:	xor    esi,esi
   14a2f:	shl    edx,0x4
   14a32:	mov    DWORD PTR [rsp+0x2c],ecx
   14a36:	movsxd rdx,edx
   14a39:	shl    rdx,0x3
   14a3d:	call   3240 <memset@plt>
   14a42:	lea    rdi,[r14+0x58]
   14a46:	mov    eax,r14d
   14a49:	pxor   xmm0,xmm0
   14a4d:	and    rdi,0xfffffffffffffff8
   14a51:	mov    QWORD PTR [r14+0x50],0x0
   14a59:	mov    QWORD PTR [r14+0xc8],0x0
   14a64:	sub    eax,edi
   14a66:	lea    ecx,[rax+0xd0]
   14a6c:	xor    eax,eax
   14a6e:	shr    ecx,0x3
   14a71:	rep stos QWORD PTR es:[rdi],rax
   14a74:	movsxd rax,ebx
   14a77:	movups XMMWORD PTR [r14+0xd0],xmm0
   14a7f:	lea    rbp,[rax*8+0x0]
   14a87:	movups XMMWORD PTR [r14+0xe0],xmm0
   14a8f:	movups XMMWORD PTR [r14+0xf0],xmm0
   14a97:	movups XMMWORD PTR [r14+0x100],xmm0
   14a9f:	mov    QWORD PTR [rsp+0x50],rbp
   14aa4:	cmp    QWORD PTR [r14+0x38],r15
   14aa8:	jne    14e30 <update_snapshot_refcount+0x430>
   14aae:	mov    eax,DWORD PTR [rsp+0x28]
   14ab2:	cmp    DWORD PTR [r14+0x1c],eax
   14ab6:	jne    14ee7 <update_snapshot_refcount+0x4e7>
   14abc:	mov    eax,DWORD PTR [r14+0x18]
   14ac0:	mov    r10,QWORD PTR [r14+0x40]
   14ac4:	shl    eax,0x3
   14ac7:	mov    QWORD PTR [rsp+0x8],r10
   14acc:	movsxd rdi,eax
   14acf:	mov    DWORD PTR [rsp+0x40],eax
   14ad3:	call   4cb0 <qemu_malloc>
   14ad8:	mov    edi,DWORD PTR [rsp+0x28]
   14adc:	mov    r15,rax
   14adf:	test   edi,edi
   14ae1:	jle    14d87 <update_snapshot_refcount+0x387>
   14ae7:	mov    QWORD PTR [rsp+0x48],0x0
   14af0:	mov    r10,QWORD PTR [rsp+0x8]
   14af5:	xor    r12d,r12d
   14af8:	mov    DWORD PTR [rsp+0x44],0x0
   14b00:	mov    QWORD PTR [rsp+0x8],r10
   14b05:	jmp    14b1f <update_snapshot_refcount+0x11f>
   14b07:	nop    WORD PTR [rax+rax*1+0x0]
   14b10:	add    r12,0x1
   14b14:	cmp    DWORD PTR [rsp+0x28],r12d
   14b19:	jle    14d08 <update_snapshot_refcount+0x308>
   14b1f:	mov    rax,QWORD PTR [rsp+0x8]
   14b24:	mov    r9,QWORD PTR [rax+r12*8]
   14b28:	test   r9,r9
   14b2b:	je     14b10 <update_snapshot_refcount+0x110>
   14b2d:	mov    ebx,DWORD PTR [rsp+0x40]
   14b31:	mov    rdi,QWORD PTR [r14]
   14b34:	mov    rdx,r15
   14b37:	mov    QWORD PTR [rsp+0x30],r9
   14b3c:	movabs rax,0x7fffffffffffffff
   14b46:	and    rax,r9
   14b49:	mov    ecx,ebx
   14b4b:	mov    rsi,rax
   14b4e:	mov    QWORD PTR [rsp+0x20],rax
   14b53:	call   17e40 <bdrv_pread>
   14b58:	cmp    eax,ebx
   14b5a:	jne    14eb1 <update_snapshot_refcount+0x4b1>
   14b60:	mov    esi,DWORD PTR [r14+0x18]
   14b64:	xor    ebp,ebp
   14b66:	mov    r9,QWORD PTR [rsp+0x30]
   14b6b:	mov    DWORD PTR [rsp+0x18],0x0
   14b73:	test   esi,esi
   14b75:	jle    14c90 <update_snapshot_refcount+0x290>
   14b7b:	mov    rax,rbp
   14b7e:	mov    QWORD PTR [rsp+0x38],r12
   14b83:	mov    rbp,r15
   14b86:	mov    r12,r14
   14b89:	mov    QWORD PTR [rsp+0x30],r9
   14b8e:	mov    r13d,DWORD PTR [rsp+0x2c]
   14b93:	mov    r15,rax
   14b96:	jmp    14bd0 <update_snapshot_refcount+0x1d0>
   14b98:	nop    DWORD PTR [rax+rax*1+0x0]
   14ba0:	test   r13d,r13d
   14ba3:	jne    14da0 <update_snapshot_refcount+0x3a0>
   14ba9:	cmp    r14,rbx
   14bac:	je     14bc1 <update_snapshot_refcount+0x1c1>
   14bae:	mov    rax,r14
   14bb1:	mov    DWORD PTR [rsp+0x18],0x1
   14bb9:	bswap  rax
   14bbc:	mov    QWORD PTR [rbp+r15*8+0x0],rax
   14bc1:	add    r15,0x1
   14bc5:	cmp    DWORD PTR [r12+0x18],r15d
   14bca:	jle    14c50 <update_snapshot_refcount+0x250>
   14bd0:	mov    rbx,QWORD PTR [rbp+r15*8+0x0]
   14bd5:	bswap  rbx
   14bd8:	test   rbx,rbx
   14bdb:	je     14bc1 <update_snapshot_refcount+0x1c1>
   14bdd:	movabs r14,0x7fffffffffffffff
   14be7:	movabs rax,0x4000000000000000
   14bf1:	and    r14,rbx
   14bf4:	test   rbx,rax
   14bf7:	jne    14ba0 <update_snapshot_refcount+0x1a0>
   14bf9:	mov    ecx,DWORD PTR [r12+0x8]
   14bfe:	mov    rsi,r14
   14c01:	shr    rsi,cl
   14c04:	test   r13d,r13d
   14c07:	je     14c38 <update_snapshot_refcount+0x238>
   14c09:	mov    rdi,QWORD PTR [rsp+0x10]
   14c0e:	mov    edx,r13d
   14c11:	call   136e0 <update_cluster_refcount>
   14c16:	movabs r10,0x8000000000000000
   14c20:	mov    rdx,r14
   14c23:	or     r10,r14
   14c26:	cmp    eax,0x1
   14c29:	cmove  rdx,r10
   14c2d:	mov    r14,rdx
   14c30:	jmp    14ba9 <update_snapshot_refcount+0x1a9>
   14c35:	nop    DWORD PTR [rax]
   14c38:	mov    rax,QWORD PTR [rsp+0x10]
   14c3d:	mov    rdi,QWORD PTR [rax+0x40]
   14c41:	call   11d80 <get_refcount.isra.4>
   14c46:	jmp    14c16 <update_snapshot_refcount+0x216>
   14c48:	nop    DWORD PTR [rax+rax*1+0x0]
   14c50:	mov    edx,DWORD PTR [rsp+0x18]
   14c54:	mov    r14,r12
   14c57:	mov    r15,rbp
   14c5a:	mov    r9,QWORD PTR [rsp+0x30]
   14c5f:	mov    r12,QWORD PTR [rsp+0x38]
   14c64:	test   edx,edx
   14c66:	je     14c90 <update_snapshot_refcount+0x290>
   14c68:	mov    ebx,DWORD PTR [rsp+0x40]
   14c6c:	mov    rdi,QWORD PTR [r14]
   14c6f:	mov    rdx,rbp
   14c72:	mov    QWORD PTR [rsp+0x18],r9
   14c77:	mov    rsi,QWORD PTR [rsp+0x20]
   14c7c:	mov    ecx,ebx
   14c7e:	call   18450 <bdrv_pwrite>
   14c83:	mov    r9,QWORD PTR [rsp+0x18]
   14c88:	cmp    eax,ebx
   14c8a:	jne    14eb1 <update_snapshot_refcount+0x4b1>
   14c90:	mov    ecx,DWORD PTR [r14+0x8]
   14c94:	mov    rsi,QWORD PTR [rsp+0x20]
   14c99:	shr    rsi,cl
   14c9c:	mov    ecx,DWORD PTR [rsp+0x2c]
   14ca0:	test   ecx,ecx
   14ca2:	je     14de0 <update_snapshot_refcount+0x3e0>
   14ca8:	mov    edx,DWORD PTR [rsp+0x2c]
   14cac:	mov    rdi,QWORD PTR [rsp+0x10]
   14cb1:	mov    QWORD PTR [rsp+0x18],r9
   14cb6:	call   136e0 <update_cluster_refcount>
   14cbb:	mov    r9,QWORD PTR [rsp+0x18]
   14cc0:	movabs rcx,0x8000000000000000
   14cca:	mov    rdi,QWORD PTR [rsp+0x20]
   14ccf:	or     rcx,rdi
   14cd2:	mov    rdx,rdi
   14cd5:	cmp    eax,0x1
   14cd8:	cmove  rdx,rcx
   14cdc:	cmp    rdx,r9
   14cdf:	je     14b10 <update_snapshot_refcount+0x110>
   14ce5:	mov    rdi,QWORD PTR [rsp+0x8]
   14cea:	mov    DWORD PTR [rsp+0x44],0x1
   14cf2:	mov    QWORD PTR [rdi+r12*8],rdx
   14cf6:	add    r12,0x1
   14cfa:	cmp    DWORD PTR [rsp+0x28],r12d
   14cff:	jg     14b1f <update_snapshot_refcount+0x11f>
   14d05:	nop    DWORD PTR [rax]
   14d08:	mov    eax,DWORD PTR [rsp+0x44]
   14d0c:	mov    r10,QWORD PTR [rsp+0x8]
   14d11:	test   eax,eax
   14d13:	je     14d7b <update_snapshot_refcount+0x37b>
   14d15:	mov    ecx,DWORD PTR [rsp+0x28]
   14d19:	xor    eax,eax
   14d1b:	nop    DWORD PTR [rax+rax*1+0x0]
   14d20:	mov    rdx,QWORD PTR [r10+rax*8]
   14d24:	bswap  rdx
   14d27:	mov    QWORD PTR [r10+rax*8],rdx
   14d2b:	add    rax,0x1
   14d2f:	cmp    ecx,eax
   14d31:	jg     14d20 <update_snapshot_refcount+0x320>
   14d33:	mov    rbx,QWORD PTR [rsp+0x50]
   14d38:	mov    rdi,QWORD PTR [r14]
   14d3b:	mov    rdx,r10
   14d3e:	mov    QWORD PTR [rsp+0x8],r10
   14d43:	mov    rsi,QWORD PTR [rsp+0x58]
   14d48:	mov    ecx,ebx
   14d4a:	call   18450 <bdrv_pwrite>
   14d4f:	mov    r10,QWORD PTR [rsp+0x8]
   14d54:	cdqe   
   14d56:	cmp    rax,rbx
   14d59:	jne    14eb6 <update_snapshot_refcount+0x4b6>
   14d5f:	mov    ecx,DWORD PTR [rsp+0x28]
   14d63:	xor    eax,eax
   14d65:	nop    DWORD PTR [rax]
   14d68:	mov    rdx,QWORD PTR [r10+rax*8]
   14d6c:	bswap  rdx
   14d6f:	mov    QWORD PTR [r10+rax*8],rdx
   14d73:	add    rax,0x1
   14d77:	cmp    ecx,eax
   14d79:	jg     14d68 <update_snapshot_refcount+0x368>
   14d7b:	cmp    QWORD PTR [rsp+0x48],0x0
   14d81:	jne    14e19 <update_snapshot_refcount+0x419>
   14d87:	mov    rdi,r15
   14d8a:	call   4ca0 <qemu_free>
   14d8f:	add    rsp,0x68
   14d93:	xor    eax,eax
   14d95:	pop    rbx
   14d96:	pop    rbp
   14d97:	pop    r12
   14d99:	pop    r13
   14d9b:	pop    r14
   14d9d:	pop    r15
   14d9f:	ret    
   14da0:	mov    ecx,DWORD PTR [r12+0x24]
   14da5:	mov    rdx,r14
   14da8:	mov    rsi,QWORD PTR [r12+0x30]
   14dad:	mov    rdi,QWORD PTR [rsp+0x10]
   14db2:	shr    rdx,cl
   14db5:	and    edx,DWORD PTR [r12+0x28]
   14dba:	and    rsi,r14
   14dbd:	mov    ecx,r13d
   14dc0:	add    edx,0x1
   14dc3:	and    rsi,0xfffffffffffffe00
   14dca:	shl    edx,0x9
   14dcd:	movsxd rdx,edx
   14dd0:	call   13b30 <update_refcount>
   14dd5:	jmp    14ba9 <update_snapshot_refcount+0x1a9>
   14dda:	nop    WORD PTR [rax+rax*1+0x0]
   14de0:	mov    rax,QWORD PTR [rsp+0x10]
   14de5:	mov    QWORD PTR [rsp+0x18],r9
   14dea:	mov    rdi,QWORD PTR [rax+0x40]
   14dee:	call   11d80 <get_refcount.isra.4>
   14df3:	mov    r9,QWORD PTR [rsp+0x18]
   14df8:	jmp    14cc0 <update_snapshot_refcount+0x2c0>
   14dfd:	mov    edi,DWORD PTR [r14+0x18]
   14e01:	mov    QWORD PTR [rsp+0x8],r10
   14e06:	shl    edi,0x3
   14e09:	movsxd rdi,edi
   14e0c:	call   4cb0 <qemu_malloc>
   14e11:	mov    r10,QWORD PTR [rsp+0x8]
   14e16:	mov    r15,rax
   14e19:	mov    rdi,r10
   14e1c:	call   4ca0 <qemu_free>
   14e21:	jmp    14d87 <update_snapshot_refcount+0x387>
   14e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14e30:	mov    rdi,rbp
   14e33:	call   4cb0 <qemu_malloc>
   14e38:	mov    rdi,QWORD PTR [r14]
   14e3b:	mov    ecx,ebp
   14e3d:	mov    rsi,r15
   14e40:	mov    rdx,rax
   14e43:	mov    QWORD PTR [rsp+0x8],rax
   14e48:	call   17e40 <bdrv_pread>
   14e4d:	mov    r10,QWORD PTR [rsp+0x8]
   14e52:	cdqe   
   14e54:	cmp    rax,rbp
   14e57:	jne    14eda <update_snapshot_refcount+0x4da>
   14e5d:	test   ebx,ebx
   14e5f:	jle    14dfd <update_snapshot_refcount+0x3fd>
   14e61:	lea    edx,[rbx-0x1]
   14e64:	mov    rax,r10
   14e67:	lea    rcx,[r10+rdx*8+0x8]
   14e6c:	nop    DWORD PTR [rax+0x0]
   14e70:	mov    rdx,QWORD PTR [rax]
   14e73:	add    rax,0x8
   14e77:	bswap  rdx
   14e7a:	mov    QWORD PTR [rax-0x8],rdx
   14e7e:	cmp    rcx,rax
   14e81:	jne    14e70 <update_snapshot_refcount+0x470>
   14e83:	mov    eax,DWORD PTR [r14+0x18]
   14e87:	mov    QWORD PTR [rsp+0x8],r10
   14e8c:	shl    eax,0x3
   14e8f:	movsxd rdi,eax
   14e92:	mov    DWORD PTR [rsp+0x40],eax
   14e96:	call   4cb0 <qemu_malloc>
   14e9b:	mov    r10,QWORD PTR [rsp+0x8]
   14ea0:	mov    QWORD PTR [rsp+0x48],0x1
   14ea9:	mov    r15,rax
   14eac:	jmp    14af5 <update_snapshot_refcount+0xf5>
   14eb1:	mov    r10,QWORD PTR [rsp+0x8]
   14eb6:	cmp    QWORD PTR [rsp+0x48],0x0
   14ebc:	jne    14edd <update_snapshot_refcount+0x4dd>
   14ebe:	mov    rdi,r15
   14ec1:	call   4ca0 <qemu_free>
   14ec6:	add    rsp,0x68
   14eca:	mov    eax,0xfffffffb
   14ecf:	pop    rbx
   14ed0:	pop    rbp
   14ed1:	pop    r12
   14ed3:	pop    r13
   14ed5:	pop    r14
   14ed7:	pop    r15
   14ed9:	ret    
   14eda:	xor    r15d,r15d
   14edd:	mov    rdi,r10
   14ee0:	call   4ca0 <qemu_free>
   14ee5:	jmp    14ebe <update_snapshot_refcount+0x4be>
   14ee7:	lea    rcx,[rip+0xb012]        # 1ff00 <__PRETTY_FUNCTION__.14669>
   14eee:	mov    edx,0x69b
   14ef3:	lea    rsi,[rip+0xaf9f]        # 1fe99 <__PRETTY_FUNCTION__.14257+0x19>
   14efa:	lea    rdi,[rip+0xafa6]        # 1fea7 <__PRETTY_FUNCTION__.14257+0x27>
   14f01:	call   3220 <__assert_fail@plt>
   14f06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000014f10 <qcow_snapshot_goto>:
   14f10:	push   r13
   14f12:	push   r12
   14f14:	push   rbp
   14f15:	mov    rbp,rdi
   14f18:	push   rbx
   14f19:	sub    rsp,0x8
   14f1d:	mov    rbx,QWORD PTR [rdi+0x40]
   14f21:	mov    rdi,rbx
   14f24:	call   120e0 <find_snapshot_by_id_or_name.isra.9>
   14f29:	test   eax,eax
   14f2b:	js     15017 <qcow_snapshot_goto+0x107>
   14f31:	cdqe   
   14f33:	mov    rsi,QWORD PTR [rbx+0x38]
   14f37:	mov    ecx,0xffffffff
   14f3c:	mov    rdi,rbp
   14f3f:	lea    rdx,[rax*8+0x0]
   14f47:	sub    rdx,rax
   14f4a:	mov    rax,rdx
   14f4d:	mov    rdx,QWORD PTR [rbx+0x360]
   14f54:	lea    r13,[rdx+rax*8]
   14f58:	mov    edx,DWORD PTR [rbx+0x1c]
   14f5b:	call   14a00 <update_snapshot_refcount>
   14f60:	test   eax,eax
   14f62:	js     15010 <qcow_snapshot_goto+0x100>
   14f68:	mov    esi,DWORD PTR [r13+0x8]
   14f6c:	mov    rdi,rbp
   14f6f:	call   13c20 <grow_l1_table>
   14f74:	test   eax,eax
   14f76:	js     15010 <qcow_snapshot_goto+0x100>
   14f7c:	mov    r12d,DWORD PTR [r13+0x8]
   14f80:	mov    rdx,QWORD PTR [rbx+0x40]
   14f84:	mov    rdi,QWORD PTR [rbx]
   14f87:	mov    DWORD PTR [rbx+0x1c],r12d
   14f8b:	shl    r12d,0x3
   14f8f:	mov    rsi,QWORD PTR [r13+0x0]
   14f93:	mov    ecx,r12d
   14f96:	call   17e40 <bdrv_pread>
   14f9b:	mov    r13d,eax
   14f9e:	cmp    eax,r12d
   14fa1:	jne    15010 <qcow_snapshot_goto+0x100>
   14fa3:	mov    rdx,QWORD PTR [rbx+0x40]
   14fa7:	mov    rsi,QWORD PTR [rbx+0x38]
   14fab:	mov    ecx,eax
   14fad:	mov    rdi,QWORD PTR [rbx]
   14fb0:	call   18450 <bdrv_pwrite>
   14fb5:	cmp    eax,r13d
   14fb8:	jne    15010 <qcow_snapshot_goto+0x100>
   14fba:	mov    edx,DWORD PTR [rbx+0x1c]
   14fbd:	test   edx,edx
   14fbf:	jle    14fe4 <qcow_snapshot_goto+0xd4>
   14fc1:	xor    eax,eax
   14fc3:	nop    DWORD PTR [rax+rax*1+0x0]
   14fc8:	mov    rdx,QWORD PTR [rbx+0x40]
   14fcc:	lea    rcx,[rdx+rax*8]
   14fd0:	add    rax,0x1
   14fd4:	mov    rdx,QWORD PTR [rcx]
   14fd7:	bswap  rdx
   14fda:	mov    QWORD PTR [rcx],rdx
   14fdd:	mov    edx,DWORD PTR [rbx+0x1c]
   14fe0:	cmp    edx,eax
   14fe2:	jg     14fc8 <qcow_snapshot_goto+0xb8>
   14fe4:	mov    rsi,QWORD PTR [rbx+0x38]
   14fe8:	mov    ecx,0x1
   14fed:	mov    rdi,rbp
   14ff0:	call   14a00 <update_snapshot_refcount>
   14ff5:	test   eax,eax
   14ff7:	js     15010 <qcow_snapshot_goto+0x100>
   14ff9:	xor    eax,eax
   14ffb:	add    rsp,0x8
   14fff:	pop    rbx
   15000:	pop    rbp
   15001:	pop    r12
   15003:	pop    r13
   15005:	ret    
   15006:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15010:	mov    eax,0xfffffffb
   15015:	jmp    14ffb <qcow_snapshot_goto+0xeb>
   15017:	mov    eax,0xfffffffe
   1501c:	jmp    14ffb <qcow_snapshot_goto+0xeb>
   1501e:	xchg   ax,ax

0000000000015020 <qcow_snapshot_delete>:
   15020:	push   r13
   15022:	push   r12
   15024:	push   rbp
   15025:	mov    rbp,rdi
   15028:	push   rbx
   15029:	sub    rsp,0x8
   1502d:	mov    r12,QWORD PTR [rdi+0x40]
   15031:	mov    rdi,r12
   15034:	call   120e0 <find_snapshot_by_id_or_name.isra.9>
   15039:	test   eax,eax
   1503b:	js     15110 <qcow_snapshot_delete+0xf0>
   15041:	movsxd rdx,eax
   15044:	mov    ebx,eax
   15046:	mov    ecx,0xffffffff
   1504b:	mov    rdi,rbp
   1504e:	lea    rax,[rdx*8+0x0]
   15056:	sub    rax,rdx
   15059:	mov    rdx,QWORD PTR [r12+0x360]
   15061:	lea    r13,[rdx+rax*8]
   15065:	mov    edx,DWORD PTR [r13+0x8]
   15069:	mov    rsi,QWORD PTR [r13+0x0]
   1506d:	call   14a00 <update_snapshot_refcount>
   15072:	test   eax,eax
   15074:	js     15100 <qcow_snapshot_delete+0xe0>
   1507a:	mov    edx,DWORD PTR [r12+0x1c]
   1507f:	mov    rsi,QWORD PTR [r12+0x38]
   15084:	xor    ecx,ecx
   15086:	mov    rdi,rbp
   15089:	call   14a00 <update_snapshot_refcount>
   1508e:	test   eax,eax
   15090:	js     15100 <qcow_snapshot_delete+0xe0>
   15092:	mov    edx,DWORD PTR [r13+0x8]
   15096:	mov    rsi,QWORD PTR [r13+0x0]
   1509a:	mov    ecx,0xffffffff
   1509f:	mov    rdi,rbp
   150a2:	not    ebx
   150a4:	shl    rdx,0x3
   150a8:	call   13b30 <update_refcount>
   150ad:	mov    rdi,QWORD PTR [r13+0x10]
   150b1:	call   4ca0 <qemu_free>
   150b6:	mov    rdi,QWORD PTR [r13+0x18]
   150ba:	call   4ca0 <qemu_free>
   150bf:	add    ebx,DWORD PTR [r12+0x35c]
   150c7:	lea    rsi,[r13+0x38]
   150cb:	mov    rdi,r13
   150ce:	movsxd rbx,ebx
   150d1:	lea    rdx,[rbx*8+0x0]
   150d9:	sub    rdx,rbx
   150dc:	shl    rdx,0x3
   150e0:	call   3530 <memmove@plt>
   150e5:	mov    rdi,rbp
   150e8:	sub    DWORD PTR [r12+0x35c],0x1
   150f1:	call   14730 <qcow_write_snapshots>
   150f6:	mov    edx,0x0
   150fb:	test   eax,eax
   150fd:	cmovg  eax,edx
   15100:	add    rsp,0x8
   15104:	pop    rbx
   15105:	pop    rbp
   15106:	pop    r12
   15108:	pop    r13
   1510a:	ret    
   1510b:	nop    DWORD PTR [rax+rax*1+0x0]
   15110:	mov    eax,0xfffffffe
   15115:	jmp    15100 <qcow_snapshot_delete+0xe0>
   15117:	nop    WORD PTR [rax+rax*1+0x0]

0000000000015120 <qcow_snapshot_create>:
   15120:	push   r15
   15122:	pxor   xmm0,xmm0
   15126:	push   r14
   15128:	push   r13
   1512a:	mov    r13,rsi
   1512d:	push   r12
   1512f:	mov    r12,rdi
   15132:	push   rbp
   15133:	push   rbx
   15134:	sub    rsp,0x48
   15138:	mov    rbx,QWORD PTR [rdi+0x40]
   1513c:	mov    rax,QWORD PTR fs:0x28
   15145:	mov    QWORD PTR [rsp+0x38],rax
   1514a:	xor    eax,eax
   1514c:	cmp    BYTE PTR [rsi],0x0
   1514f:	movaps XMMWORD PTR [rsp],xmm0
   15153:	movaps XMMWORD PTR [rsp+0x10],xmm0
   15158:	mov    rdi,rbx
   1515b:	movaps XMMWORD PTR [rsp+0x20],xmm0
   15160:	mov    QWORD PTR [rsp+0x30],0x0
   15169:	je     15350 <qcow_snapshot_create+0x230>
   1516f:	mov    rsi,r13
   15172:	call   12060 <find_snapshot_by_id.isra.8>
   15177:	test   eax,eax
   15179:	jns    153f1 <qcow_snapshot_create+0x2d1>
   1517f:	mov    rdi,r13
   15182:	call   4d20 <qemu_strdup>
   15187:	mov    rbp,rax
   1518a:	mov    QWORD PTR [rsp+0x10],rax
   1518f:	test   rax,rax
   15192:	je     153cc <qcow_snapshot_create+0x2ac>
   15198:	lea    rdi,[r13+0x80]
   1519f:	call   4d20 <qemu_strdup>
   151a4:	mov    rbp,rax
   151a7:	mov    QWORD PTR [rsp+0x18],rax
   151ac:	test   rax,rax
   151af:	je     153cc <qcow_snapshot_create+0x2ac>
   151b5:	mov    eax,DWORD PTR [r13+0x188]
   151bc:	mov    rdx,QWORD PTR [r13+0x180]
   151c3:	mov    ecx,0x1
   151c8:	mov    rdi,r12
   151cb:	mov    rsi,QWORD PTR [rbx+0x38]
   151cf:	mov    QWORD PTR [rsp+0x20],rdx
   151d4:	mov    edx,DWORD PTR [rbx+0x1c]
   151d7:	mov    DWORD PTR [rsp+0x28],eax
   151db:	mov    rax,QWORD PTR [r13+0x190]
   151e2:	mov    QWORD PTR [rsp+0x30],rax
   151e7:	call   14a00 <update_snapshot_refcount>
   151ec:	test   eax,eax
   151ee:	js     153cc <qcow_snapshot_create+0x2ac>
   151f4:	movsxd rsi,DWORD PTR [rbx+0x1c]
   151f8:	mov    rdi,r12
   151fb:	shl    rsi,0x3
   151ff:	call   13bf0 <alloc_clusters>
   15204:	movsxd rdi,DWORD PTR [rbx+0x1c]
   15208:	mov    r14,rax
   1520b:	mov    QWORD PTR [rsp],rax
   1520f:	mov    DWORD PTR [rsp+0x8],edi
   15213:	shl    rdi,0x3
   15217:	call   4cb0 <qemu_malloc>
   1521c:	mov    ecx,DWORD PTR [rbx+0x1c]
   1521f:	mov    r13,rax
   15222:	test   ecx,ecx
   15224:	jle    1524b <qcow_snapshot_create+0x12b>
   15226:	xor    eax,eax
   15228:	nop    DWORD PTR [rax+rax*1+0x0]
   15230:	mov    rdx,QWORD PTR [rbx+0x40]
   15234:	mov    rdx,QWORD PTR [rdx+rax*8]
   15238:	bswap  rdx
   1523b:	mov    QWORD PTR [r13+rax*8+0x0],rdx
   15240:	mov    ecx,DWORD PTR [rbx+0x1c]
   15243:	add    rax,0x1
   15247:	cmp    ecx,eax
   15249:	jg     15230 <qcow_snapshot_create+0x110>
   1524b:	mov    rdi,QWORD PTR [rbx]
   1524e:	mov    rdx,r13
   15251:	shl    ecx,0x3
   15254:	mov    rsi,r14
   15257:	call   18450 <bdrv_pwrite>
   1525c:	movsxd rdx,DWORD PTR [rbx+0x1c]
   15260:	cdqe   
   15262:	shl    rdx,0x3
   15266:	cmp    rax,rdx
   15269:	jne    153cf <qcow_snapshot_create+0x2af>
   1526f:	mov    rdi,r13
   15272:	call   4ca0 <qemu_free>
   15277:	mov    eax,DWORD PTR [rbx+0x35c]
   1527d:	add    eax,0x1
   15280:	cdqe   
   15282:	lea    rdi,[rax*8+0x0]
   1528a:	sub    rdi,rax
   1528d:	shl    rdi,0x3
   15291:	call   4cb0 <qemu_malloc>
   15296:	mov    rsi,QWORD PTR [rbx+0x360]
   1529d:	mov    r13,rax
   152a0:	test   rsi,rsi
   152a3:	je     152cf <qcow_snapshot_create+0x1af>
   152a5:	movsxd rax,DWORD PTR [rbx+0x35c]
   152ac:	mov    rdi,r13
   152af:	lea    rdx,[rax*8+0x0]
   152b7:	sub    rdx,rax
   152ba:	shl    rdx,0x3
   152be:	call   33b0 <memcpy@plt>
   152c3:	mov    rdi,QWORD PTR [rbx+0x360]
   152ca:	call   4ca0 <qemu_free>
   152cf:	movsxd rax,DWORD PTR [rbx+0x35c]
   152d6:	mov    QWORD PTR [rbx+0x360],r13
   152dd:	mov    rdi,r12
   152e0:	movdqa xmm1,XMMWORD PTR [rsp]
   152e5:	movdqa xmm2,XMMWORD PTR [rsp+0x10]
   152eb:	lea    edx,[rax+0x1]
   152ee:	movdqa xmm3,XMMWORD PTR [rsp+0x20]
   152f4:	mov    DWORD PTR [rbx+0x35c],edx
   152fa:	lea    rdx,[rax*8+0x0]
   15302:	sub    rdx,rax
   15305:	lea    rax,[r13+rdx*8+0x0]
   1530a:	mov    rdx,QWORD PTR [rsp+0x30]
   1530f:	movups XMMWORD PTR [rax],xmm1
   15312:	mov    QWORD PTR [rax+0x30],rdx
   15316:	movups XMMWORD PTR [rax+0x10],xmm2
   1531a:	movups XMMWORD PTR [rax+0x20],xmm3
   1531e:	call   14730 <qcow_write_snapshots>
   15323:	test   eax,eax
   15325:	js     153cc <qcow_snapshot_create+0x2ac>
   1532b:	xor    eax,eax
   1532d:	mov    rsi,QWORD PTR [rsp+0x38]
   15332:	xor    rsi,QWORD PTR fs:0x28
   1533b:	jne    153fb <qcow_snapshot_create+0x2db>
   15341:	add    rsp,0x48
   15345:	pop    rbx
   15346:	pop    rbp
   15347:	pop    r12
   15349:	pop    r13
   1534b:	pop    r14
   1534d:	pop    r15
   1534f:	ret    
   15350:	mov    eax,DWORD PTR [rbx+0x35c]
   15356:	test   eax,eax
   15358:	jle    153e9 <qcow_snapshot_create+0x2c9>
   1535e:	xor    r15d,r15d
   15361:	xor    ebp,ebp
   15363:	xor    r14d,r14d
   15366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15370:	mov    rax,QWORD PTR [rbx+0x360]
   15377:	xor    esi,esi
   15379:	mov    edx,0xa
   1537e:	mov    rdi,QWORD PTR [rax+r15*1+0x10]
   15383:	call   35c0 <strtoul@plt>
   15388:	cmp    ebp,eax
   1538a:	cmovl  ebp,eax
   1538d:	add    r14d,0x1
   15391:	add    r15,0x38
   15395:	cmp    r14d,DWORD PTR [rbx+0x35c]
   1539c:	jl     15370 <qcow_snapshot_create+0x250>
   1539e:	lea    r9d,[rbp+0x1]
   153a2:	mov    rdi,r13
   153a5:	mov    ecx,0x80
   153aa:	mov    edx,0x1
   153af:	xor    eax,eax
   153b1:	lea    r8,[rip+0x6cd7]        # 1c08f <_IO_stdin_used+0x8f>
   153b8:	mov    esi,0x80
   153bd:	call   3060 <__snprintf_chk@plt>
   153c2:	mov    rdi,QWORD PTR [r12+0x40]
   153c7:	jmp    1516f <qcow_snapshot_create+0x4f>
   153cc:	xor    r13d,r13d
   153cf:	mov    rdi,rbp
   153d2:	call   4ca0 <qemu_free>
   153d7:	mov    rdi,r13
   153da:	call   4ca0 <qemu_free>
   153df:	mov    eax,0xffffffff
   153e4:	jmp    1532d <qcow_snapshot_create+0x20d>
   153e9:	mov    r9d,0x1
   153ef:	jmp    153a2 <qcow_snapshot_create+0x282>
   153f1:	mov    eax,0xfffffffe
   153f6:	jmp    1532d <qcow_snapshot_create+0x20d>
   153fb:	call   3190 <__stack_chk_fail@plt>

0000000000015400 <qcow_write_compressed>:
   15400:	push   r15
   15402:	push   r14
   15404:	push   r13
   15406:	push   r12
   15408:	push   rbp
   15409:	push   rbx
   1540a:	sub    rsp,0xe8
   15411:	mov    r14,QWORD PTR [rdi+0x40]
   15415:	mov    rax,QWORD PTR fs:0x28
   1541e:	mov    QWORD PTR [rsp+0xd8],rax
   15426:	xor    eax,eax
   15428:	test   ecx,ecx
   1542a:	je     156c8 <qcow_write_compressed+0x2c8>
   15430:	cmp    DWORD PTR [r14+0x10],ecx
   15434:	jne    158c0 <qcow_write_compressed+0x4c0>
   1543a:	mov    ecx,DWORD PTR [r14+0xc]
   1543e:	mov    r12,rdx
   15441:	mov    edx,0x10624dd3
   15446:	mov    r13,rdi
   15449:	lea    rbx,[rsp+0x60]
   1544e:	mov    rbp,rsi
   15451:	mov    eax,ecx
   15453:	imul   edx
   15455:	mov    eax,ecx
   15457:	sar    eax,0x1f
   1545a:	sar    edx,0x6
   1545d:	sub    edx,eax
   1545f:	lea    edi,[rcx+rdx*1+0x80]
   15466:	movsxd rdi,edi
   15469:	call   4cb0 <qemu_malloc>
   1546e:	mov    ecx,0xe
   15473:	mov    rdi,rbx
   15476:	xor    r9d,r9d
   15479:	mov    QWORD PTR [rsp],rax
   1547d:	xor    eax,eax
   1547f:	mov    esi,0xffffffff
   15484:	mov    r8d,0x9
   1548a:	rep stos QWORD PTR es:[rdi],rax
   1548d:	lea    rax,[rip+0x7493]        # 1c927 <__PRETTY_FUNCTION__.13430+0x8f>
   15494:	push   0x70
   15496:	mov    rdi,rbx
   15499:	push   rax
   1549a:	mov    ecx,0xfffffff4
   1549f:	mov    edx,0x8
   154a4:	call   32a0 <deflateInit2_@plt>
   154a9:	mov    DWORD PTR [rsp+0x24],eax
   154ad:	pop    rcx
   154ae:	pop    rsi
   154af:	test   eax,eax
   154b1:	jne    15886 <qcow_write_compressed+0x486>
   154b7:	mov    eax,DWORD PTR [r14+0xc]
   154bb:	mov    esi,0x4
   154c0:	mov    rdi,rbx
   154c3:	mov    QWORD PTR [rsp+0x60],r12
   154c8:	mov    DWORD PTR [rsp+0x68],eax
   154cc:	mov    DWORD PTR [rsp+0x80],eax
   154d3:	mov    rax,QWORD PTR [rsp]
   154d7:	mov    QWORD PTR [rsp+0x78],rax
   154dc:	call   3230 <deflate@plt>
   154e1:	mov    r15d,eax
   154e4:	cmp    eax,0x1
   154e7:	ja     15958 <qcow_write_compressed+0x558>
   154ed:	mov    rax,QWORD PTR [rsp+0x78]
   154f2:	mov    rdi,rbx
   154f5:	mov    QWORD PTR [rsp+0x8],rax
   154fa:	call   3490 <deflateEnd@plt>
   154ff:	cmp    r15d,0x1
   15503:	jne    156b8 <qcow_write_compressed+0x2b8>
   15509:	mov    rax,QWORD PTR [rsp+0x8]
   1550e:	sub    rax,QWORD PTR [rsp]
   15512:	mov    QWORD PTR [rsp+0x8],rax
   15517:	mov    r15d,eax
   1551a:	mov    rbx,QWORD PTR [r13+0x40]
   1551e:	cmp    DWORD PTR [r14+0xc],eax
   15522:	jg     15700 <qcow_write_compressed+0x300>
   15528:	lea    rax,[rsp+0x40]
   1552d:	mov    r14d,DWORD PTR [r14+0x10]
   15531:	mov    QWORD PTR [rsp+0x8],rax
   15536:	lea    rax,[rsp+0x38]
   1553b:	mov    QWORD PTR [rsp+0x20],rax
   15540:	lea    rax,[rbx+0x168]
   15547:	mov    QWORD PTR [rsp+0x28],rax
   1554c:	test   r14d,r14d
   1554f:	jg     155e6 <qcow_write_compressed+0x1e6>
   15555:	jmp    156f0 <qcow_write_compressed+0x2f0>
   1555a:	nop    WORD PTR [rax+rax*1+0x0]
   15560:	mov    r9,QWORD PTR [rsp+0x28]
   15565:	mov    rdx,r12
   15568:	mov    rdi,rbp
   1556b:	mov    QWORD PTR [rsp+0x18],r10
   15570:	mov    rsi,QWORD PTR [rbx+0x118]
   15577:	mov    r8d,0x1
   1557d:	call   123c0 <encrypt_sectors.isra.12>
   15582:	mov    ecx,DWORD PTR [rsp+0x38]
   15586:	mov    r10,QWORD PTR [rsp+0x18]
   1558b:	mov    rdx,QWORD PTR [rbx+0x118]
   15592:	mov    rdi,QWORD PTR [rbx]
   15595:	shl    ecx,0x9
   15598:	mov    rsi,r10
   1559b:	call   18450 <bdrv_pwrite>
   155a0:	mov    edx,DWORD PTR [rsp+0x38]
   155a4:	shl    edx,0x9
   155a7:	cmp    edx,eax
   155a9:	jne    15670 <qcow_write_compressed+0x270>
   155af:	mov    rdx,QWORD PTR [rsp+0x8]
   155b4:	mov    rsi,r15
   155b7:	mov    rdi,r13
   155ba:	call   14290 <alloc_cluster_link_l2>
   155bf:	test   eax,eax
   155c1:	js     15670 <qcow_write_compressed+0x270>
   155c7:	movsxd rdx,DWORD PTR [rsp+0x38]
   155cc:	mov    rax,rdx
   155cf:	sub    r14d,edx
   155d2:	add    rbp,rdx
   155d5:	shl    eax,0x9
   155d8:	cdqe   
   155da:	add    r12,rax
   155dd:	test   r14d,r14d
   155e0:	jle    156f0 <qcow_write_compressed+0x2f0>
   155e6:	mov    eax,DWORD PTR [rbx+0x10]
   155e9:	mov    edx,DWORD PTR [rbx+0x160]
   155ef:	lea    r10d,[rax-0x1]
   155f3:	and    r10d,ebp
   155f6:	lea    ecx,[r10+r14*1]
   155fa:	test   edx,edx
   155fc:	je     15606 <qcow_write_compressed+0x206>
   155fe:	shl    eax,0x5
   15601:	cmp    ecx,eax
   15603:	cmovg  ecx,eax
   15606:	mov    rsi,rbp
   15609:	mov    r9,QWORD PTR [rsp+0x8]
   1560e:	mov    r8,QWORD PTR [rsp+0x20]
   15613:	mov    edx,r10d
   15616:	shl    rsi,0x9
   1561a:	mov    rdi,r13
   1561d:	mov    DWORD PTR [rsp+0x18],r10d
   15622:	call   14060 <alloc_cluster_offset>
   15627:	mov    r15,rax
   1562a:	test   rax,rax
   1562d:	je     1567f <qcow_write_compressed+0x27f>
   1562f:	mov    r10d,DWORD PTR [rsp+0x18]
   15634:	mov    ecx,DWORD PTR [rsp+0x38]
   15638:	shl    r10d,0x9
   1563c:	movsxd r10,r10d
   1563f:	add    r10,rax
   15642:	mov    eax,DWORD PTR [rbx+0x160]
   15648:	test   eax,eax
   1564a:	jne    15560 <qcow_write_compressed+0x160>
   15650:	mov    rdi,QWORD PTR [rbx]
   15653:	mov    rdx,r12
   15656:	shl    ecx,0x9
   15659:	mov    rsi,r10
   1565c:	call   18450 <bdrv_pwrite>
   15661:	mov    edx,DWORD PTR [rsp+0x38]
   15665:	shl    edx,0x9
   15668:	cmp    edx,eax
   1566a:	je     155af <qcow_write_compressed+0x1af>
   15670:	mov    edx,DWORD PTR [rsp+0x50]
   15674:	mov    rsi,r15
   15677:	mov    rdi,r13
   1567a:	call   13ba0 <free_any_clusters>
   1567f:	mov    rdi,QWORD PTR [rsp]
   15683:	call   4ca0 <qemu_free>
   15688:	mov    rbx,QWORD PTR [rsp+0xd8]
   15690:	xor    rbx,QWORD PTR fs:0x28
   15699:	mov    eax,DWORD PTR [rsp+0x14]
   1569d:	jne    1598c <qcow_write_compressed+0x58c>
   156a3:	add    rsp,0xe8
   156aa:	pop    rbx
   156ab:	pop    rbp
   156ac:	pop    r12
   156ae:	pop    r13
   156b0:	pop    r14
   156b2:	pop    r15
   156b4:	ret    
   156b5:	nop    DWORD PTR [rax]
   156b8:	mov    rbx,QWORD PTR [r13+0x40]
   156bc:	jmp    15528 <qcow_write_compressed+0x128>
   156c1:	nop    DWORD PTR [rax+0x0]
   156c8:	mov    rdi,QWORD PTR [r14]
   156cb:	call   18500 <bdrv_getlength>
   156d0:	mov    rdi,QWORD PTR [r14]
   156d3:	lea    rsi,[rax+0x1ff]
   156da:	and    rsi,0xfffffffffffffe00
   156e1:	call   184d0 <bdrv_truncate>
   156e6:	mov    DWORD PTR [rsp+0x14],0x0
   156ee:	jmp    15688 <qcow_write_compressed+0x288>
   156f0:	mov    QWORD PTR [rbx+0x120],0xffffffffffffffff
   156fb:	jmp    1567f <qcow_write_compressed+0x27f>
   15700:	mov    rsi,rbp
   15703:	lea    rcx,[rsp+0x38]
   15708:	lea    rdx,[rsp+0x40]
   1570d:	mov    rdi,r13
   15710:	shl    rsi,0x9
   15714:	lea    r8,[rsp+0x34]
   15719:	call   13da0 <get_cluster_table>
   1571e:	test   eax,eax
   15720:	je     158b0 <qcow_write_compressed+0x4b0>
   15726:	movsxd rdx,DWORD PTR [rsp+0x34]
   1572b:	mov    rax,QWORD PTR [rsp+0x40]
   15730:	mov    rsi,QWORD PTR [rax+rdx*8]
   15734:	bswap  rsi
   15737:	test   rsi,rsi
   1573a:	js     158a0 <qcow_write_compressed+0x4a0>
   15740:	jne    15920 <qcow_write_compressed+0x520>
   15746:	mov    rax,QWORD PTR [rsp+0x8]
   1574b:	mov    r12,QWORD PTR [r13+0x40]
   1574f:	test   eax,eax
   15751:	jle    15991 <qcow_write_compressed+0x591>
   15757:	movsxd rsi,DWORD PTR [r12+0xc]
   1575c:	cmp    eax,esi
   1575e:	jg     15991 <qcow_write_compressed+0x591>
   15764:	mov    rbp,QWORD PTR [r12+0x158]
   1576c:	test   rbp,rbp
   1576f:	je     15938 <qcow_write_compressed+0x538>
   15775:	lea    ecx,[rsi-0x1]
   15778:	mov    edx,esi
   1577a:	mov    eax,ecx
   1577c:	and    eax,ebp
   1577e:	sub    edx,eax
   15780:	cmp    DWORD PTR [rsp+0x8],edx
   15784:	jg     157aa <qcow_write_compressed+0x3aa>
   15786:	jmp    158d3 <qcow_write_compressed+0x4d3>
   1578b:	nop    DWORD PTR [rax+rax*1+0x0]
   15790:	lea    ecx,[rsi-0x1]
   15793:	mov    QWORD PTR [r12+0x158],rax
   1579b:	mov    edi,ecx
   1579d:	and    edi,eax
   1579f:	sub    edx,edi
   157a1:	cmp    r15d,edx
   157a4:	jle    158d0 <qcow_write_compressed+0x4d0>
   157aa:	mov    rdi,r13
   157ad:	call   13bf0 <alloc_clusters>
   157b2:	movsxd rsi,DWORD PTR [r12+0xc]
   157b7:	mov    r8,QWORD PTR [r12+0x158]
   157bf:	mov    ecx,esi
   157c1:	mov    rdx,rsi
   157c4:	neg    ecx
   157c6:	movsxd rcx,ecx
   157c9:	and    rcx,r8
   157cc:	add    rcx,rsi
   157cf:	cmp    rax,rcx
   157d2:	jne    15790 <qcow_write_compressed+0x390>
   157d4:	mov    ecx,DWORD PTR [r12+0x8]
   157d9:	mov    rsi,r8
   157dc:	mov    edx,0x1
   157e1:	mov    rdi,r13
   157e4:	mov    QWORD PTR [rsp+0x18],r8
   157e9:	sar    rsi,cl
   157ec:	call   136e0 <update_cluster_refcount>
   157f1:	movsxd r15,DWORD PTR [rsp+0x8]
   157f6:	mov    r8,QWORD PTR [rsp+0x18]
   157fb:	add    QWORD PTR [r12+0x158],r15
   15803:	mov    rbp,r8
   15806:	lea    rax,[rbp+r15*1-0x1]
   1580b:	mov    rdx,rbp
   1580e:	mov    ecx,DWORD PTR [rbx+0x24]
   15811:	shr    rdx,0x9
   15815:	shr    rax,0x9
   15819:	sub    eax,edx
   1581b:	movsxd rdx,DWORD PTR [rsp+0x34]
   15820:	cdqe   
   15822:	shl    rax,cl
   15825:	or     rbp,rax
   15828:	mov    rax,QWORD PTR [rsp+0x40]
   1582d:	bts    rbp,0x3e
   15832:	mov    rcx,rbp
   15835:	bswap  rcx
   15838:	mov    QWORD PTR [rax+rdx*8],rcx
   1583c:	mov    rdi,QWORD PTR [rbx]
   1583f:	mov    ecx,0x8
   15844:	movsxd rsi,DWORD PTR [rsp+0x34]
   15849:	mov    rdx,QWORD PTR [rsp+0x40]
   1584e:	shl    rsi,0x3
   15852:	add    rdx,rsi
   15855:	add    rsi,QWORD PTR [rsp+0x38]
   1585a:	call   18450 <bdrv_pwrite>
   1585f:	cmp    eax,0x8
   15862:	jne    158b0 <qcow_write_compressed+0x4b0>
   15864:	mov    rbx,QWORD PTR [rsp+0x8]
   15869:	mov    rsi,QWORD PTR [r14+0x30]
   1586d:	mov    rdx,QWORD PTR [rsp]
   15871:	mov    rdi,QWORD PTR [r14]
   15874:	and    rsi,rbp
   15877:	mov    ecx,ebx
   15879:	call   18450 <bdrv_pwrite>
   1587e:	cmp    eax,ebx
   15880:	je     1567f <qcow_write_compressed+0x27f>
   15886:	mov    rdi,QWORD PTR [rsp]
   1588a:	call   4ca0 <qemu_free>
   1588f:	mov    DWORD PTR [rsp+0x14],0xffffffff
   15897:	jmp    15688 <qcow_write_compressed+0x288>
   1589c:	nop    DWORD PTR [rax+0x0]
   158a0:	btr    rsi,0x3f
   158a5:	mov    rbp,rsi
   158a8:	test   rsi,rsi
   158ab:	jne    15864 <qcow_write_compressed+0x464>
   158ad:	nop    DWORD PTR [rax]
   158b0:	mov    DWORD PTR [rsp+0x14],0xffffffff
   158b8:	jmp    15688 <qcow_write_compressed+0x288>
   158bd:	nop    DWORD PTR [rax]
   158c0:	mov    DWORD PTR [rsp+0x14],0xffffffea
   158c8:	jmp    15688 <qcow_write_compressed+0x288>
   158cd:	nop    DWORD PTR [rax]
   158d0:	mov    rbp,rax
   158d3:	mov    rax,QWORD PTR [rsp+0x8]
   158d8:	cmp    eax,edx
   158da:	je     15976 <qcow_write_compressed+0x576>
   158e0:	movsxd r15,eax
   158e3:	lea    rax,[r15+rbp*1]
   158e7:	mov    QWORD PTR [r12+0x158],rax
   158ef:	movsxd rcx,ecx
   158f2:	test   rcx,rbp
   158f5:	je     15806 <qcow_write_compressed+0x406>
   158fb:	mov    ecx,DWORD PTR [r12+0x8]
   15900:	mov    rsi,rbp
   15903:	mov    edx,0x1
   15908:	mov    rdi,r13
   1590b:	sar    rsi,cl
   1590e:	call   136e0 <update_cluster_refcount>
   15913:	jmp    15806 <qcow_write_compressed+0x406>
   15918:	nop    DWORD PTR [rax+rax*1+0x0]
   15920:	mov    edx,0x1
   15925:	mov    rdi,r13
   15928:	call   13ba0 <free_any_clusters>
   1592d:	jmp    15746 <qcow_write_compressed+0x346>
   15932:	nop    WORD PTR [rax+rax*1+0x0]
   15938:	mov    rdi,r13
   1593b:	call   13bf0 <alloc_clusters>
   15940:	movsxd rsi,DWORD PTR [r12+0xc]
   15945:	mov    rbp,rax
   15948:	mov    QWORD PTR [r12+0x158],rax
   15950:	jmp    15775 <qcow_write_compressed+0x375>
   15955:	nop    DWORD PTR [rax]
   15958:	mov    rdi,QWORD PTR [rsp]
   1595c:	call   4ca0 <qemu_free>
   15961:	mov    rdi,rbx
   15964:	call   3490 <deflateEnd@plt>
   15969:	mov    DWORD PTR [rsp+0x14],0xffffffff
   15971:	jmp    15688 <qcow_write_compressed+0x288>
   15976:	mov    QWORD PTR [r12+0x158],0x0
   15982:	movsxd r15,DWORD PTR [rsp+0x8]
   15987:	jmp    158ef <qcow_write_compressed+0x4ef>
   1598c:	call   3190 <__stack_chk_fail@plt>
   15991:	lea    rcx,[rip+0xa558]        # 1fef0 <__PRETTY_FUNCTION__.14860>
   15998:	mov    edx,0x8bd
   1599d:	lea    rsi,[rip+0xa4f5]        # 1fe99 <__PRETTY_FUNCTION__.14257+0x19>
   159a4:	lea    rdi,[rip+0xa51d]        # 1fec8 <__PRETTY_FUNCTION__.14257+0x48>
   159ab:	call   3220 <__assert_fail@plt>

00000000000159b0 <parallels_close>:
   159b0:	push   rbx
   159b1:	mov    rbx,QWORD PTR [rdi+0x40]
   159b5:	mov    rdi,QWORD PTR [rbx+0x8]
   159b9:	call   4ca0 <qemu_free>
   159be:	mov    edi,DWORD PTR [rbx]
   159c0:	pop    rbx
   159c1:	jmp    3260 <close@plt>
   159c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000159d0 <parallels_read>:
   159d0:	push   r15
   159d2:	push   r14
   159d4:	push   r13
   159d6:	push   r12
   159d8:	push   rbp
   159d9:	push   rbx
   159da:	sub    rsp,0x8
   159de:	mov    r13,QWORD PTR [rdi+0x40]
   159e2:	test   ecx,ecx
   159e4:	jle    15a88 <parallels_read+0xb8>
   159ea:	lea    r12d,[rcx-0x1]
   159ee:	mov    r14,rdi
   159f1:	mov    rbp,rsi
   159f4:	mov    rbx,rdx
   159f7:	add    r12,0x1
   159fb:	mov    rdi,r13
   159fe:	shl    r12,0x9
   15a02:	add    r12,rdx
   15a05:	jmp    15a24 <parallels_read+0x54>
   15a07:	nop    WORD PTR [rax+rax*1+0x0]
   15a10:	add    rbx,0x200
   15a17:	add    rbp,0x1
   15a1b:	cmp    rbx,r12
   15a1e:	je     15a88 <parallels_read+0xb8>
   15a20:	mov    rdi,QWORD PTR [r14+0x40]
   15a24:	mov    rax,rbp
   15a27:	movsxd rsi,DWORD PTR [rdi+0x14]
   15a2b:	cqo    
   15a2d:	idiv   rsi
   15a30:	cmp    DWORD PTR [rdi+0x10],eax
   15a33:	jb     15aa0 <parallels_read+0xd0>
   15a35:	mov    rsi,QWORD PTR [rdi+0x8]
   15a39:	mov    eax,eax
   15a3b:	mov    eax,DWORD PTR [rsi+rax*4]
   15a3e:	test   eax,eax
   15a40:	je     15aa0 <parallels_read+0xd0>
   15a42:	add    eax,edx
   15a44:	mov    edi,DWORD PTR [rdi]
   15a46:	xor    edx,edx
   15a48:	shl    eax,0x9
   15a4b:	mov    r15d,eax
   15a4e:	mov    rsi,r15
   15a51:	call   3620 <lseek64@plt>
   15a56:	cmp    r15,rax
   15a59:	jne    15aa0 <parallels_read+0xd0>
   15a5b:	mov    edi,DWORD PTR [r13+0x0]
   15a5f:	mov    edx,0x200
   15a64:	mov    rsi,rbx
   15a67:	call   4600 <qemu_read_ok>
   15a6c:	test   eax,eax
   15a6e:	jns    15a10 <parallels_read+0x40>
   15a70:	add    rsp,0x8
   15a74:	mov    eax,0xffffffff
   15a79:	pop    rbx
   15a7a:	pop    rbp
   15a7b:	pop    r12
   15a7d:	pop    r13
   15a7f:	pop    r14
   15a81:	pop    r15
   15a83:	ret    
   15a84:	nop    DWORD PTR [rax+0x0]
   15a88:	add    rsp,0x8
   15a8c:	xor    eax,eax
   15a8e:	pop    rbx
   15a8f:	pop    rbp
   15a90:	pop    r12
   15a92:	pop    r13
   15a94:	pop    r14
   15a96:	pop    r15
   15a98:	ret    
   15a99:	nop    DWORD PTR [rax+0x0]
   15aa0:	lea    rdi,[rbx+0x8]
   15aa4:	mov    rcx,rbx
   15aa7:	xor    eax,eax
   15aa9:	mov    QWORD PTR [rbx],0x0
   15ab0:	mov    QWORD PTR [rbx+0x1f8],0x0
   15abb:	and    rdi,0xfffffffffffffff8
   15abf:	sub    rcx,rdi
   15ac2:	add    ecx,0x200
   15ac8:	shr    ecx,0x3
   15acb:	rep stos QWORD PTR es:[rdi],rax
   15ace:	jmp    15a10 <parallels_read+0x40>
   15ad3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   15ade:	xchg   ax,ax

0000000000015ae0 <parallels_open>:
   15ae0:	push   r13
   15ae2:	mov    r13,rdi
   15ae5:	push   r12
   15ae7:	mov    r12,rsi
   15aea:	mov    esi,0x2
   15aef:	push   rbp
   15af0:	push   rbx
   15af1:	sub    rsp,0x58
   15af5:	mov    rbx,QWORD PTR [rdi+0x40]
   15af9:	mov    rdi,r12
   15afc:	mov    rax,QWORD PTR fs:0x28
   15b05:	mov    QWORD PTR [rsp+0x48],rax
   15b0a:	xor    eax,eax
   15b0c:	call   3500 <open64@plt>
   15b11:	mov    ebp,eax
   15b13:	test   eax,eax
   15b15:	js     15c00 <parallels_open+0x120>
   15b1b:	mov    DWORD PTR [r13+0x8],0x1
   15b23:	mov    rsi,rsp
   15b26:	mov    edx,0x40
   15b2b:	mov    edi,ebp
   15b2d:	mov    DWORD PTR [rbx],ebp
   15b2f:	call   4600 <qemu_read_ok>
   15b34:	test   eax,eax
   15b36:	js     15c20 <parallels_open+0x140>
   15b3c:	movabs rdx,0x6563617053656572
   15b46:	xor    rdx,QWORD PTR [rsp+0x8]
   15b4b:	movabs rax,0x4674756f68746957
   15b55:	xor    rax,QWORD PTR [rsp]
   15b59:	or     rdx,rax
   15b5c:	jne    15c20 <parallels_open+0x140>
   15b62:	xor    r12d,r12d
   15b65:	cmp    DWORD PTR [rsp+0x10],0x2
   15b6a:	jne    15c20 <parallels_open+0x140>
   15b70:	mov    eax,DWORD PTR [rsp+0x24]
   15b74:	xor    edx,edx
   15b76:	mov    esi,0x40
   15b7b:	mov    QWORD PTR [r13+0x0],rax
   15b7f:	mov    edi,DWORD PTR [rbx]
   15b81:	call   3620 <lseek64@plt>
   15b86:	cmp    rax,0x40
   15b8a:	jne    15c20 <parallels_open+0x140>
   15b90:	mov    eax,DWORD PTR [rsp+0x1c]
   15b94:	mov    DWORD PTR [rbx+0x14],eax
   15b97:	mov    edi,DWORD PTR [rsp+0x20]
   15b9b:	mov    DWORD PTR [rbx+0x10],edi
   15b9e:	shl    edi,0x2
   15ba1:	movsxd rdi,edi
   15ba4:	call   4cb0 <qemu_malloc>
   15ba9:	mov    QWORD PTR [rbx+0x8],rax
   15bad:	test   rax,rax
   15bb0:	je     15c2e <parallels_open+0x14e>
   15bb2:	mov    ecx,DWORD PTR [rbx+0x10]
   15bb5:	mov    edi,DWORD PTR [rbx]
   15bb7:	mov    rsi,rax
   15bba:	lea    edx,[rcx*4+0x0]
   15bc1:	movsxd rdx,edx
   15bc4:	call   32c0 <read@plt>
   15bc9:	mov    ecx,DWORD PTR [rbx+0x10]
   15bcc:	lea    edx,[rcx*4+0x0]
   15bd3:	movsxd rdx,edx
   15bd6:	cmp    rdx,rax
   15bd9:	jne    15c20 <parallels_open+0x140>
   15bdb:	mov    rcx,QWORD PTR [rsp+0x48]
   15be0:	xor    rcx,QWORD PTR fs:0x28
   15be9:	mov    eax,r12d
   15bec:	jne    15c3d <parallels_open+0x15d>
   15bee:	add    rsp,0x58
   15bf2:	pop    rbx
   15bf3:	pop    rbp
   15bf4:	pop    r12
   15bf6:	pop    r13
   15bf8:	ret    
   15bf9:	nop    DWORD PTR [rax+0x0]
   15c00:	xor    esi,esi
   15c02:	mov    rdi,r12
   15c05:	xor    eax,eax
   15c07:	call   3500 <open64@plt>
   15c0c:	mov    ebp,eax
   15c0e:	test   eax,eax
   15c10:	jns    15b1b <parallels_open+0x3b>
   15c16:	mov    r12d,0xffffffff
   15c1c:	jmp    15bdb <parallels_open+0xfb>
   15c1e:	xchg   ax,ax
   15c20:	mov    rdi,QWORD PTR [rbx+0x8]
   15c24:	test   rdi,rdi
   15c27:	je     15c2e <parallels_open+0x14e>
   15c29:	call   4ca0 <qemu_free>
   15c2e:	mov    edi,ebp
   15c30:	mov    r12d,0xffffffff
   15c36:	call   3260 <close@plt>
   15c3b:	jmp    15bdb <parallels_open+0xfb>
   15c3d:	call   3190 <__stack_chk_fail@plt>
   15c42:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   15c4d:	nop    DWORD PTR [rax]

0000000000015c50 <parallels_probe>:
   15c50:	xor    eax,eax
   15c52:	cmp    esi,0x3f
   15c55:	jle    15c79 <parallels_probe+0x29>
   15c57:	movabs rcx,0x6563617053656572
   15c61:	xor    rcx,QWORD PTR [rdi+0x8]
   15c65:	movabs rdx,0x4674756f68746957
   15c6f:	xor    rdx,QWORD PTR [rdi]
   15c72:	or     rcx,rdx
   15c75:	je     15c80 <parallels_probe+0x30>
   15c77:	xor    eax,eax
   15c79:	ret    
   15c7a:	nop    WORD PTR [rax+rax*1+0x0]
   15c80:	cmp    DWORD PTR [rdi+0x10],0x2
   15c84:	mov    edx,0x64
   15c89:	cmove  eax,edx
   15c8c:	ret    
   15c8d:	nop    DWORD PTR [rax]

0000000000015c90 <nbd_getlength>:
   15c90:	mov    rax,QWORD PTR [rdi+0x40]
   15c94:	mov    rax,QWORD PTR [rax+0x8]
   15c98:	ret    
   15c99:	nop    DWORD PTR [rax+0x0]

0000000000015ca0 <nbd_close>:
   15ca0:	push   rbx
   15ca1:	sub    rsp,0x30
   15ca5:	mov    rbx,QWORD PTR [rdi+0x40]
   15ca9:	mov    rax,QWORD PTR fs:0x28
   15cb2:	mov    QWORD PTR [rsp+0x28],rax
   15cb7:	xor    eax,eax
   15cb9:	mov    DWORD PTR [rsp],0x2
   15cc0:	mov    rsi,rsp
   15cc3:	mov    QWORD PTR [rsp+0x8],rdi
   15cc8:	mov    QWORD PTR [rsp+0x10],0x0
   15cd1:	mov    DWORD PTR [rsp+0x18],0x0
   15cd9:	mov    edi,DWORD PTR [rbx]
   15cdb:	call   168a0 <nbd_send_request>
   15ce0:	mov    edi,DWORD PTR [rbx]
   15ce2:	call   3260 <close@plt>
   15ce7:	mov    rax,QWORD PTR [rsp+0x28]
   15cec:	xor    rax,QWORD PTR fs:0x28
   15cf5:	jne    15cfd <nbd_close+0x5d>
   15cf7:	add    rsp,0x30
   15cfb:	pop    rbx
   15cfc:	ret    
   15cfd:	call   3190 <__stack_chk_fail@plt>
   15d02:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   15d0d:	nop    DWORD PTR [rax]

0000000000015d10 <nbd_write>:
   15d10:	push   rbp
   15d11:	shl    rsi,0x9
   15d15:	shl    ecx,0x9
   15d18:	mov    rbp,rdx
   15d1b:	push   rbx
   15d1c:	sub    rsp,0x48
   15d20:	mov    rbx,QWORD PTR [rdi+0x40]
   15d24:	mov    rax,QWORD PTR fs:0x28
   15d2d:	mov    QWORD PTR [rsp+0x38],rax
   15d32:	xor    eax,eax
   15d34:	mov    QWORD PTR [rsp+0x20],rsi
   15d39:	lea    rsi,[rsp+0x10]
   15d3e:	mov    DWORD PTR [rsp+0x10],0x1
   15d46:	mov    QWORD PTR [rsp+0x18],rdi
   15d4b:	mov    DWORD PTR [rsp+0x28],ecx
   15d4f:	mov    edi,DWORD PTR [rbx]
   15d51:	call   168a0 <nbd_send_request>
   15d56:	cmp    eax,0xffffffff
   15d59:	je     15db0 <nbd_write+0xa0>
   15d5b:	mov    edx,DWORD PTR [rsp+0x28]
   15d5f:	mov    edi,DWORD PTR [rbx]
   15d61:	xor    ecx,ecx
   15d63:	mov    rsi,rbp
   15d66:	call   16020 <nbd_wr_sync>
   15d6b:	mov    edx,DWORD PTR [rsp+0x28]
   15d6f:	cmp    rax,rdx
   15d72:	jne    15dc8 <nbd_write+0xb8>
   15d74:	mov    edi,DWORD PTR [rbx]
   15d76:	mov    rsi,rsp
   15d79:	call   16960 <nbd_receive_reply>
   15d7e:	cmp    eax,0xffffffff
   15d81:	je     15db0 <nbd_write+0xa0>
   15d83:	mov    eax,DWORD PTR [rsp]
   15d86:	test   eax,eax
   15d88:	jne    15dc0 <nbd_write+0xb0>
   15d8a:	mov    rax,QWORD PTR [rsp+0x18]
   15d8f:	cmp    QWORD PTR [rsp+0x8],rax
   15d94:	jne    15dc8 <nbd_write+0xb8>
   15d96:	xor    eax,eax
   15d98:	mov    rbx,QWORD PTR [rsp+0x38]
   15d9d:	xor    rbx,QWORD PTR fs:0x28
   15da6:	jne    15dcf <nbd_write+0xbf>
   15da8:	add    rsp,0x48
   15dac:	pop    rbx
   15dad:	pop    rbp
   15dae:	ret    
   15daf:	nop
   15db0:	call   30b0 <__errno_location@plt>
   15db5:	mov    eax,DWORD PTR [rax]
   15db7:	neg    eax
   15db9:	jmp    15d98 <nbd_write+0x88>
   15dbb:	nop    DWORD PTR [rax+rax*1+0x0]
   15dc0:	neg    eax
   15dc2:	jmp    15d98 <nbd_write+0x88>
   15dc4:	nop    DWORD PTR [rax+0x0]
   15dc8:	mov    eax,0xfffffffb
   15dcd:	jmp    15d98 <nbd_write+0x88>
   15dcf:	call   3190 <__stack_chk_fail@plt>
   15dd4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   15ddf:	nop

0000000000015de0 <nbd_read>:
   15de0:	push   rbp
   15de1:	shl    rsi,0x9
   15de5:	shl    ecx,0x9
   15de8:	mov    rbp,rdx
   15deb:	push   rbx
   15dec:	sub    rsp,0x48
   15df0:	mov    rbx,QWORD PTR [rdi+0x40]
   15df4:	mov    rax,QWORD PTR fs:0x28
   15dfd:	mov    QWORD PTR [rsp+0x38],rax
   15e02:	xor    eax,eax
   15e04:	mov    QWORD PTR [rsp+0x20],rsi
   15e09:	lea    rsi,[rsp+0x10]
   15e0e:	mov    DWORD PTR [rsp+0x10],0x0
   15e16:	mov    QWORD PTR [rsp+0x18],rdi
   15e1b:	mov    DWORD PTR [rsp+0x28],ecx
   15e1f:	mov    edi,DWORD PTR [rbx]
   15e21:	call   168a0 <nbd_send_request>
   15e26:	cmp    eax,0xffffffff
   15e29:	je     15e88 <nbd_read+0xa8>
   15e2b:	mov    edi,DWORD PTR [rbx]
   15e2d:	mov    rsi,rsp
   15e30:	call   16960 <nbd_receive_reply>
   15e35:	cmp    eax,0xffffffff
   15e38:	je     15e88 <nbd_read+0xa8>
   15e3a:	mov    eax,DWORD PTR [rsp]
   15e3d:	test   eax,eax
   15e3f:	jne    15e98 <nbd_read+0xb8>
   15e41:	mov    rax,QWORD PTR [rsp+0x18]
   15e46:	cmp    QWORD PTR [rsp+0x8],rax
   15e4b:	jne    15ea0 <nbd_read+0xc0>
   15e4d:	mov    edx,DWORD PTR [rsp+0x28]
   15e51:	mov    edi,DWORD PTR [rbx]
   15e53:	mov    ecx,0x1
   15e58:	mov    rsi,rbp
   15e5b:	call   16020 <nbd_wr_sync>
   15e60:	mov    edx,DWORD PTR [rsp+0x28]
   15e64:	cmp    rax,rdx
   15e67:	jne    15ea0 <nbd_read+0xc0>
   15e69:	xor    eax,eax
   15e6b:	mov    rdx,QWORD PTR [rsp+0x38]
   15e70:	xor    rdx,QWORD PTR fs:0x28
   15e79:	jne    15ea7 <nbd_read+0xc7>
   15e7b:	add    rsp,0x48
   15e7f:	pop    rbx
   15e80:	pop    rbp
   15e81:	ret    
   15e82:	nop    WORD PTR [rax+rax*1+0x0]
   15e88:	call   30b0 <__errno_location@plt>
   15e8d:	mov    eax,DWORD PTR [rax]
   15e8f:	neg    eax
   15e91:	jmp    15e6b <nbd_read+0x8b>
   15e93:	nop    DWORD PTR [rax+rax*1+0x0]
   15e98:	neg    eax
   15e9a:	jmp    15e6b <nbd_read+0x8b>
   15e9c:	nop    DWORD PTR [rax+0x0]
   15ea0:	mov    eax,0xfffffffb
   15ea5:	jmp    15e6b <nbd_read+0x8b>
   15ea7:	call   3190 <__stack_chk_fail@plt>
   15eac:	nop    DWORD PTR [rax+0x0]

0000000000015eb0 <nbd_open>:
   15eb0:	push   r13
   15eb2:	push   r12
   15eb4:	push   rbp
   15eb5:	push   rbx
   15eb6:	sub    rsp,0xb8
   15ebd:	mov    r12,QWORD PTR [rdi+0x40]
   15ec1:	mov    rax,QWORD PTR fs:0x28
   15eca:	mov    QWORD PTR [rsp+0xa8],rax
   15ed2:	xor    eax,eax
   15ed4:	and    edx,0x4
   15ed7:	jne    16010 <nbd_open+0x160>
   15edd:	mov    rcx,rsi
   15ee0:	mov    ebp,edx
   15ee2:	lea    rsi,[rip+0xa04b]        # 1ff34 <__PRETTY_FUNCTION__.14669+0x34>
   15ee9:	mov    rdx,rsp
   15eec:	mov    rdi,rcx
   15eef:	call   4960 <strstart>
   15ef4:	test   eax,eax
   15ef6:	je     16010 <nbd_open+0x160>
   15efc:	mov    rdi,QWORD PTR [rsp]
   15f00:	lea    rdx,[rsp+0x8]
   15f05:	lea    rsi,[rip+0xa02d]        # 1ff39 <__PRETTY_FUNCTION__.14669+0x39>
   15f0c:	call   4960 <strstart>
   15f11:	test   eax,eax
   15f13:	je     15fb0 <nbd_open+0x100>
   15f19:	mov    rdi,QWORD PTR [rsp+0x8]
   15f1e:	cmp    BYTE PTR [rdi],0x2f
   15f21:	jne    16010 <nbd_open+0x160>
   15f27:	call   16410 <unix_socket_outgoing>
   15f2c:	mov    ebx,eax
   15f2e:	cmp    ebx,0xffffffff
   15f31:	je     15fa0 <nbd_open+0xf0>
   15f33:	lea    rdx,[rsp+0x18]
   15f38:	lea    rsi,[rsp+0x10]
   15f3d:	mov    edi,ebx
   15f3f:	call   165a0 <nbd_receive_negotiate>
   15f44:	cmp    eax,0xffffffff
   15f47:	je     15f90 <nbd_open+0xe0>
   15f49:	mov    DWORD PTR [r12],ebx
   15f4d:	mov    rax,QWORD PTR [rsp+0x10]
   15f52:	mov    QWORD PTR [r12+0x8],rax
   15f57:	mov    rax,QWORD PTR [rsp+0x18]
   15f5c:	mov    QWORD PTR [r12+0x10],rax
   15f61:	mov    rcx,QWORD PTR [rsp+0xa8]
   15f69:	xor    rcx,QWORD PTR fs:0x28
   15f72:	mov    eax,ebp
   15f74:	jne    1601a <nbd_open+0x16a>
   15f7a:	add    rsp,0xb8
   15f81:	pop    rbx
   15f82:	pop    rbp
   15f83:	pop    r12
   15f85:	pop    r13
   15f87:	ret    
   15f88:	nop    DWORD PTR [rax+rax*1+0x0]
   15f90:	mov    edi,ebx
   15f92:	call   3260 <close@plt>
   15f97:	nop    WORD PTR [rax+rax*1+0x0]
   15fa0:	call   30b0 <__errno_location@plt>
   15fa5:	mov    eax,DWORD PTR [rax]
   15fa7:	neg    eax
   15fa9:	mov    ebp,eax
   15fab:	jmp    15f61 <nbd_open+0xb1>
   15fad:	nop    DWORD PTR [rax]
   15fb0:	lea    r13,[rsp+0x20]
   15fb5:	mov    rdx,QWORD PTR [rsp]
   15fb9:	mov    esi,0x80
   15fbe:	mov    rdi,r13
   15fc1:	call   48a0 <pstrcpy>
   15fc6:	mov    esi,0x3a
   15fcb:	mov    rdi,r13
   15fce:	call   31d0 <strchr@plt>
   15fd3:	test   rax,rax
   15fd6:	je     16010 <nbd_open+0x160>
   15fd8:	mov    BYTE PTR [rax],0x0
   15fdb:	lea    rbx,[rax+0x1]
   15fdf:	xor    edx,edx
   15fe1:	lea    rsi,[rsp+0x18]
   15fe6:	mov    rdi,rbx
   15fe9:	call   3390 <strtol@plt>
   15fee:	cmp    QWORD PTR [rsp+0x18],rbx
   15ff3:	je     16010 <nbd_open+0x160>
   15ff5:	movzx  esi,ax
   15ff8:	mov    rdi,r13
   15ffb:	call   16140 <tcp_socket_outgoing>
   16000:	mov    ebx,eax
   16002:	jmp    15f2e <nbd_open+0x7e>
   16007:	nop    WORD PTR [rax+rax*1+0x0]
   16010:	mov    ebp,0xffffffea
   16015:	jmp    15f61 <nbd_open+0xb1>
   1601a:	call   3190 <__stack_chk_fail@plt>
   1601f:	nop

0000000000016020 <nbd_wr_sync>:
   16020:	push   r14
   16022:	push   r13
   16024:	push   r12
   16026:	push   rbp
   16027:	push   rbx
   16028:	test   rdx,rdx
   1602b:	je     1607e <nbd_wr_sync+0x5e>
   1602d:	mov    r14d,edi
   16030:	mov    r13,rsi
   16033:	mov    rbp,rdx
   16036:	mov    r12d,ecx
   16039:	xor    ebx,ebx
   1603b:	jmp    1604d <nbd_wr_sync+0x2d>
   1603d:	nop    DWORD PTR [rax]
   16040:	test   rax,rax
   16043:	je     16080 <nbd_wr_sync+0x60>
   16045:	add    rbx,rax
   16048:	cmp    rbp,rbx
   1604b:	jbe    16080 <nbd_wr_sync+0x60>
   1604d:	mov    rdx,rbp
   16050:	lea    rsi,[r13+rbx*1+0x0]
   16055:	xor    ecx,ecx
   16057:	mov    edi,r14d
   1605a:	sub    rdx,rbx
   1605d:	test   r12b,r12b
   16060:	je     16090 <nbd_wr_sync+0x70>
   16062:	call   3080 <recv@plt>
   16067:	cmp    rax,0xffffffffffffffff
   1606b:	jne    16040 <nbd_wr_sync+0x20>
   1606d:	call   30b0 <__errno_location@plt>
   16072:	mov    eax,DWORD PTR [rax]
   16074:	cmp    eax,0xb
   16077:	je     16048 <nbd_wr_sync+0x28>
   16079:	cmp    eax,0x4
   1607c:	je     16048 <nbd_wr_sync+0x28>
   1607e:	xor    ebx,ebx
   16080:	mov    rax,rbx
   16083:	pop    rbx
   16084:	pop    rbp
   16085:	pop    r12
   16087:	pop    r13
   16089:	pop    r14
   1608b:	ret    
   1608c:	nop    DWORD PTR [rax+0x0]
   16090:	call   31c0 <send@plt>
   16095:	jmp    16067 <nbd_wr_sync+0x47>
   16097:	nop    WORD PTR [rax+rax*1+0x0]

00000000000160a0 <nbd_send_reply.isra.0>:
   160a0:	sub    rsp,0x28
   160a4:	bswap  esi
   160a6:	bswap  rdx
   160a9:	xor    ecx,ecx
   160ab:	mov    rax,QWORD PTR fs:0x28
   160b4:	mov    QWORD PTR [rsp+0x18],rax
   160b9:	xor    eax,eax
   160bb:	mov    DWORD PTR [rsp+0x4],esi
   160bf:	mov    rsi,rsp
   160c2:	mov    QWORD PTR [rsp+0x8],rdx
   160c7:	mov    edx,0x10
   160cc:	mov    DWORD PTR [rsp],0x98664467
   160d3:	call   16020 <nbd_wr_sync>
   160d8:	cmp    rax,0x10
   160dc:	jne    160f5 <nbd_send_reply.isra.0+0x55>
   160de:	xor    eax,eax
   160e0:	mov    rcx,QWORD PTR [rsp+0x18]
   160e5:	xor    rcx,QWORD PTR fs:0x28
   160ee:	jne    16135 <nbd_send_reply.isra.0+0x95>
   160f0:	add    rsp,0x28
   160f4:	ret    
   160f5:	mov    rdi,QWORD PTR [rip+0x12404]        # 28500 <stderr@@GLIBC_2.2.5>
   160fc:	mov    r9d,0x225
   16102:	xor    eax,eax
   16104:	lea    r8,[rip+0xa185]        # 20290 <__FUNCTION__.13867>
   1610b:	lea    rcx,[rip+0x9e31]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16112:	lea    rdx,[rip+0x9e67]        # 1ff80 <__PRETTY_FUNCTION__.14669+0x80>
   16119:	mov    esi,0x1
   1611e:	call   3630 <__fprintf_chk@plt>
   16123:	call   30b0 <__errno_location@plt>
   16128:	mov    DWORD PTR [rax],0x16
   1612e:	mov    eax,0xffffffff
   16133:	jmp    160e0 <nbd_send_reply.isra.0+0x40>
   16135:	call   3190 <__stack_chk_fail@plt>
   1613a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000016140 <tcp_socket_outgoing>:
   16140:	push   r12
   16142:	xor    edx,edx
   16144:	mov    r12,rdi
   16147:	mov    edi,0x2
   1614c:	push   rbp
   1614d:	mov    ebp,esi
   1614f:	mov    esi,0x1
   16154:	push   rbx
   16155:	sub    rsp,0x30
   16159:	mov    rax,QWORD PTR fs:0x28
   16162:	mov    QWORD PTR [rsp+0x28],rax
   16167:	xor    eax,eax
   16169:	call   36f0 <socket@plt>
   1616e:	mov    ebx,eax
   16170:	cmp    eax,0xffffffff
   16173:	je     161e8 <tcp_socket_outgoing+0xa8>
   16175:	lea    rsi,[rsp+0xc]
   1617a:	mov    rdi,r12
   1617d:	call   3400 <inet_aton@plt>
   16182:	test   eax,eax
   16184:	jne    161a8 <tcp_socket_outgoing+0x68>
   16186:	mov    rdi,r12
   16189:	call   3350 <gethostbyname@plt>
   1618e:	test   rax,rax
   16191:	je     161d9 <tcp_socket_outgoing+0x99>
   16193:	mov    rax,QWORD PTR [rax+0x18]
   16197:	mov    rax,QWORD PTR [rax]
   1619a:	mov    eax,DWORD PTR [rax]
   1619c:	mov    DWORD PTR [rsp+0xc],eax
   161a0:	jmp    161ac <tcp_socket_outgoing+0x6c>
   161a2:	nop    WORD PTR [rax+rax*1+0x0]
   161a8:	mov    eax,DWORD PTR [rsp+0xc]
   161ac:	mov    edx,0x2
   161b1:	rol    bp,0x8
   161b5:	lea    rsi,[rsp+0x10]
   161ba:	mov    edi,ebx
   161bc:	mov    WORD PTR [rsp+0x10],dx
   161c1:	mov    edx,0x10
   161c6:	mov    WORD PTR [rsp+0x12],bp
   161cb:	mov    DWORD PTR [rsp+0x14],eax
   161cf:	call   3600 <connect@plt>
   161d4:	cmp    eax,0xffffffff
   161d7:	jne    161e8 <tcp_socket_outgoing+0xa8>
   161d9:	mov    edi,ebx
   161db:	mov    ebx,0xffffffff
   161e0:	call   3260 <close@plt>
   161e5:	nop    DWORD PTR [rax]
   161e8:	mov    rcx,QWORD PTR [rsp+0x28]
   161ed:	xor    rcx,QWORD PTR fs:0x28
   161f6:	mov    eax,ebx
   161f8:	jne    16203 <tcp_socket_outgoing+0xc3>
   161fa:	add    rsp,0x30
   161fe:	pop    rbx
   161ff:	pop    rbp
   16200:	pop    r12
   16202:	ret    
   16203:	call   3190 <__stack_chk_fail@plt>
   16208:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000016210 <tcp_socket_incoming>:
   16210:	push   r12
   16212:	xor    edx,edx
   16214:	mov    r12,rdi
   16217:	mov    edi,0x2
   1621c:	push   rbp
   1621d:	mov    ebp,esi
   1621f:	mov    esi,0x1
   16224:	push   rbx
   16225:	sub    rsp,0x30
   16229:	mov    rax,QWORD PTR fs:0x28
   16232:	mov    QWORD PTR [rsp+0x28],rax
   16237:	xor    eax,eax
   16239:	call   36f0 <socket@plt>
   1623e:	mov    ebx,eax
   16240:	cmp    eax,0xffffffff
   16243:	je     162c9 <tcp_socket_incoming+0xb9>
   16249:	lea    rsi,[rsp+0x8]
   1624e:	mov    rdi,r12
   16251:	call   3400 <inet_aton@plt>
   16256:	test   eax,eax
   16258:	je     162e8 <tcp_socket_incoming+0xd8>
   1625e:	mov    eax,DWORD PTR [rsp+0x8]
   16262:	mov    edx,0x2
   16267:	rol    bp,0x8
   1626b:	lea    rcx,[rsp+0xc]
   16270:	mov    edi,ebx
   16272:	mov    WORD PTR [rsp+0x10],dx
   16277:	mov    r8d,0x4
   1627d:	mov    edx,0x2
   16282:	mov    esi,0x1
   16287:	mov    WORD PTR [rsp+0x12],bp
   1628c:	mov    DWORD PTR [rsp+0x14],eax
   16290:	mov    DWORD PTR [rsp+0xc],0x1
   16298:	call   3120 <setsockopt@plt>
   1629d:	cmp    eax,0xffffffff
   162a0:	je     16310 <tcp_socket_incoming+0x100>
   162a2:	lea    rsi,[rsp+0x10]
   162a7:	mov    edx,0x10
   162ac:	mov    edi,ebx
   162ae:	call   34f0 <bind@plt>
   162b3:	cmp    eax,0xffffffff
   162b6:	je     16310 <tcp_socket_incoming+0x100>
   162b8:	mov    esi,0x80
   162bd:	mov    edi,ebx
   162bf:	call   3460 <listen@plt>
   162c4:	cmp    eax,0xffffffff
   162c7:	je     16310 <tcp_socket_incoming+0x100>
   162c9:	mov    rcx,QWORD PTR [rsp+0x28]
   162ce:	xor    rcx,QWORD PTR fs:0x28
   162d7:	mov    eax,ebx
   162d9:	jne    1631e <tcp_socket_incoming+0x10e>
   162db:	add    rsp,0x30
   162df:	pop    rbx
   162e0:	pop    rbp
   162e1:	pop    r12
   162e3:	ret    
   162e4:	nop    DWORD PTR [rax+0x0]
   162e8:	mov    rdi,r12
   162eb:	call   3350 <gethostbyname@plt>
   162f0:	test   rax,rax
   162f3:	je     16310 <tcp_socket_incoming+0x100>
   162f5:	mov    rax,QWORD PTR [rax+0x18]
   162f9:	mov    rax,QWORD PTR [rax]
   162fc:	mov    eax,DWORD PTR [rax]
   162fe:	mov    DWORD PTR [rsp+0x8],eax
   16302:	jmp    16262 <tcp_socket_incoming+0x52>
   16307:	nop    WORD PTR [rax+rax*1+0x0]
   16310:	mov    edi,ebx
   16312:	mov    ebx,0xffffffff
   16317:	call   3260 <close@plt>
   1631c:	jmp    162c9 <tcp_socket_incoming+0xb9>
   1631e:	call   3190 <__stack_chk_fail@plt>
   16323:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1632e:	xchg   ax,ax

0000000000016330 <unix_socket_incoming>:
   16330:	push   r12
   16332:	xor    edx,edx
   16334:	mov    esi,0x1
   16339:	push   rbp
   1633a:	mov    rbp,rdi
   1633d:	mov    edi,0x1
   16342:	push   rbx
   16343:	add    rsp,0xffffffffffffff80
   16347:	mov    rax,QWORD PTR fs:0x28
   16350:	mov    QWORD PTR [rsp+0x78],rax
   16355:	xor    eax,eax
   16357:	call   36f0 <socket@plt>
   1635c:	mov    ebx,eax
   1635e:	cmp    eax,0xffffffff
   16361:	je     163d1 <unix_socket_incoming+0xa1>
   16363:	mov    r12,rsp
   16366:	xor    eax,eax
   16368:	mov    rdx,rbp
   1636b:	mov    esi,0x6c
   16370:	lea    r8,[r12+0x2]
   16375:	lea    rdi,[r12+0x8]
   1637a:	mov    QWORD PTR [rsp+0x2],0x0
   16383:	mov    QWORD PTR [r12+0x66],0x0
   1638c:	mov    rcx,r8
   1638f:	sub    rcx,rdi
   16392:	add    ecx,0x6c
   16395:	shr    ecx,0x3
   16398:	rep stos QWORD PTR es:[rdi],rax
   1639b:	mov    eax,0x1
   163a0:	mov    rdi,r8
   163a3:	mov    WORD PTR [rsp],ax
   163a7:	call   48a0 <pstrcpy>
   163ac:	mov    edx,0x6e
   163b1:	mov    rsi,r12
   163b4:	mov    edi,ebx
   163b6:	call   34f0 <bind@plt>
   163bb:	cmp    eax,0xffffffff
   163be:	je     163f0 <unix_socket_incoming+0xc0>
   163c0:	mov    esi,0x80
   163c5:	mov    edi,ebx
   163c7:	call   3460 <listen@plt>
   163cc:	cmp    eax,0xffffffff
   163cf:	je     163f0 <unix_socket_incoming+0xc0>
   163d1:	mov    rdx,QWORD PTR [rsp+0x78]
   163d6:	xor    rdx,QWORD PTR fs:0x28
   163df:	mov    eax,ebx
   163e1:	jne    163fe <unix_socket_incoming+0xce>
   163e3:	sub    rsp,0xffffffffffffff80
   163e7:	pop    rbx
   163e8:	pop    rbp
   163e9:	pop    r12
   163eb:	ret    
   163ec:	nop    DWORD PTR [rax+0x0]
   163f0:	mov    edi,ebx
   163f2:	mov    ebx,0xffffffff
   163f7:	call   3260 <close@plt>
   163fc:	jmp    163d1 <unix_socket_incoming+0xa1>
   163fe:	call   3190 <__stack_chk_fail@plt>
   16403:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1640e:	xchg   ax,ax

0000000000016410 <unix_socket_outgoing>:
   16410:	push   r12
   16412:	xor    edx,edx
   16414:	mov    esi,0x1
   16419:	push   rbp
   1641a:	mov    rbp,rdi
   1641d:	mov    edi,0x1
   16422:	push   rbx
   16423:	add    rsp,0xffffffffffffff80
   16427:	mov    rax,QWORD PTR fs:0x28
   16430:	mov    QWORD PTR [rsp+0x78],rax
   16435:	xor    eax,eax
   16437:	call   36f0 <socket@plt>
   1643c:	mov    ebx,eax
   1643e:	cmp    eax,0xffffffff
   16441:	je     164a2 <unix_socket_outgoing+0x92>
   16443:	mov    r12,rsp
   16446:	xor    eax,eax
   16448:	mov    rdx,rbp
   1644b:	mov    esi,0x6c
   16450:	lea    r8,[r12+0x2]
   16455:	lea    rdi,[r12+0x8]
   1645a:	mov    QWORD PTR [rsp+0x2],0x0
   16463:	mov    QWORD PTR [r12+0x66],0x0
   1646c:	mov    rcx,r8
   1646f:	sub    rcx,rdi
   16472:	add    ecx,0x6c
   16475:	shr    ecx,0x3
   16478:	rep stos QWORD PTR es:[rdi],rax
   1647b:	mov    eax,0x1
   16480:	mov    rdi,r8
   16483:	mov    WORD PTR [rsp],ax
   16487:	call   48a0 <pstrcpy>
   1648c:	mov    edx,0x6e
   16491:	mov    rsi,r12
   16494:	mov    edi,ebx
   16496:	call   3600 <connect@plt>
   1649b:	mov    ebp,eax
   1649d:	cmp    eax,0xffffffff
   164a0:	je     164bd <unix_socket_outgoing+0xad>
   164a2:	mov    rdx,QWORD PTR [rsp+0x78]
   164a7:	xor    rdx,QWORD PTR fs:0x28
   164b0:	mov    eax,ebx
   164b2:	jne    164c8 <unix_socket_outgoing+0xb8>
   164b4:	sub    rsp,0xffffffffffffff80
   164b8:	pop    rbx
   164b9:	pop    rbp
   164ba:	pop    r12
   164bc:	ret    
   164bd:	mov    edi,ebx
   164bf:	mov    ebx,ebp
   164c1:	call   3260 <close@plt>
   164c6:	jmp    164a2 <unix_socket_outgoing+0x92>
   164c8:	call   3190 <__stack_chk_fail@plt>
   164cd:	nop    DWORD PTR [rax]

00000000000164d0 <nbd_negotiate>:
   164d0:	sub    rsp,0xa8
   164d7:	mov    rax,rsi
   164da:	mov    r8d,edi
   164dd:	movabs rdx,0x434947414d44424e
   164e7:	mov    rdi,QWORD PTR fs:0x28
   164f0:	mov    QWORD PTR [rsp+0x98],rdi
   164f8:	xor    edi,edi
   164fa:	mov    rsi,rsp
   164fd:	mov    QWORD PTR [rsp],rdx
   16501:	bswap  rax
   16504:	movabs rcx,0x5312868102420000
   1650e:	lea    rdx,[rsi+0x18]
   16512:	mov    QWORD PTR [rsp+0x10],rax
   16517:	xor    eax,eax
   16519:	mov    rdi,rdx
   1651c:	mov    QWORD PTR [rsp+0x8],rcx
   16521:	mov    ecx,0x10
   16526:	mov    edx,0x98
   1652b:	rep stos QWORD PTR es:[rdi],rax
   1652e:	mov    edi,r8d
   16531:	call   16020 <nbd_wr_sync>
   16536:	cmp    rax,0x98
   1653c:	jne    1655b <nbd_negotiate+0x8b>
   1653e:	xor    eax,eax
   16540:	mov    rdx,QWORD PTR [rsp+0x98]
   16548:	xor    rdx,QWORD PTR fs:0x28
   16551:	jne    1659b <nbd_negotiate+0xcb>
   16553:	add    rsp,0xa8
   1655a:	ret    
   1655b:	mov    rdi,QWORD PTR [rip+0x11f9e]        # 28500 <stderr@@GLIBC_2.2.5>
   16562:	mov    r9d,0x123
   16568:	xor    eax,eax
   1656a:	lea    r8,[rip+0x9dc7]        # 20338 <__FUNCTION__.13813>
   16571:	lea    rcx,[rip+0x99cb]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16578:	lea    rdx,[rip+0x99ca]        # 1ff49 <__PRETTY_FUNCTION__.14669+0x49>
   1657f:	mov    esi,0x1
   16584:	call   3630 <__fprintf_chk@plt>
   16589:	call   30b0 <__errno_location@plt>
   1658e:	mov    DWORD PTR [rax],0x16
   16594:	mov    eax,0xffffffff
   16599:	jmp    16540 <nbd_negotiate+0x70>
   1659b:	call   3190 <__stack_chk_fail@plt>

00000000000165a0 <nbd_receive_negotiate>:
   165a0:	push   rbp
   165a1:	mov    ecx,0x1
   165a6:	mov    rbp,rsi
   165a9:	push   rbx
   165aa:	mov    rbx,rdx
   165ad:	mov    edx,0x98
   165b2:	sub    rsp,0xa8
   165b9:	mov    rax,QWORD PTR fs:0x28
   165c2:	mov    QWORD PTR [rsp+0x98],rax
   165ca:	xor    eax,eax
   165cc:	mov    rsi,rsp
   165cf:	call   16020 <nbd_wr_sync>
   165d4:	cmp    rax,0x98
   165da:	jne    16640 <nbd_receive_negotiate+0xa0>
   165dc:	mov    rax,QWORD PTR [rsp+0x8]
   165e1:	bswap  rax
   165e4:	mov    rdx,rax
   165e7:	mov    rax,QWORD PTR [rsp+0x10]
   165ec:	bswap  rax
   165ef:	mov    QWORD PTR [rbp+0x0],rax
   165f3:	movabs rax,0x434947414d44424e
   165fd:	mov    QWORD PTR [rbx],0x400
   16604:	cmp    QWORD PTR [rsp],rax
   16608:	jne    1669d <nbd_receive_negotiate+0xfd>
   1660e:	movabs rax,0x420281861253
   16618:	cmp    rdx,rax
   1661b:	jne    16680 <nbd_receive_negotiate+0xe0>
   1661d:	xor    eax,eax
   1661f:	mov    rcx,QWORD PTR [rsp+0x98]
   16627:	xor    rcx,QWORD PTR fs:0x28
   16630:	jne    166ba <nbd_receive_negotiate+0x11a>
   16636:	add    rsp,0xa8
   1663d:	pop    rbx
   1663e:	pop    rbp
   1663f:	ret    
   16640:	mov    r9d,0x135
   16646:	lea    r8,[rip+0x9cd3]        # 20320 <__FUNCTION__.13821>
   1664d:	lea    rcx,[rip+0x98ef]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16654:	lea    rdx,[rip+0x9909]        # 1ff64 <__PRETTY_FUNCTION__.14669+0x64>
   1665b:	mov    rdi,QWORD PTR [rip+0x11e9e]        # 28500 <stderr@@GLIBC_2.2.5>
   16662:	mov    esi,0x1
   16667:	xor    eax,eax
   16669:	call   3630 <__fprintf_chk@plt>
   1666e:	call   30b0 <__errno_location@plt>
   16673:	mov    DWORD PTR [rax],0x16
   16679:	mov    eax,0xffffffff
   1667e:	jmp    1661f <nbd_receive_negotiate+0x7f>
   16680:	mov    r9d,0x153
   16686:	lea    r8,[rip+0x9c93]        # 20320 <__FUNCTION__.13821>
   1668d:	lea    rcx,[rip+0x98af]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16694:	lea    rdx,[rip+0x9935]        # 1ffd0 <__PRETTY_FUNCTION__.14669+0xd0>
   1669b:	jmp    1665b <nbd_receive_negotiate+0xbb>
   1669d:	mov    r9d,0x14b
   166a3:	lea    r8,[rip+0x9c76]        # 20320 <__FUNCTION__.13821>
   166aa:	lea    rcx,[rip+0x9892]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   166b1:	lea    rdx,[rip+0x98f0]        # 1ffa8 <__PRETTY_FUNCTION__.14669+0xa8>
   166b8:	jmp    1665b <nbd_receive_negotiate+0xbb>
   166ba:	call   3190 <__stack_chk_fail@plt>
   166bf:	nop

00000000000166c0 <nbd_init>:
   166c0:	push   r14
   166c2:	xor    eax,eax
   166c4:	mov    r14d,esi
   166c7:	mov    esi,0xab01
   166cc:	push   r13
   166ce:	mov    r13,rcx
   166d1:	push   r12
   166d3:	mov    r12d,edi
   166d6:	push   rbp
   166d7:	mov    rbp,rdx
   166da:	mov    rdx,rcx
   166dd:	push   rbx
   166de:	call   3250 <ioctl@plt>
   166e3:	cmp    eax,0xffffffff
   166e6:	je     16751 <nbd_init+0x91>
   166e8:	mov    rax,rbp
   166eb:	xor    edx,edx
   166ed:	mov    esi,0xab07
   166f2:	mov    edi,r12d
   166f5:	div    r13
   166f8:	mov    rdx,rax
   166fb:	xor    eax,eax
   166fd:	call   3250 <ioctl@plt>
   16702:	mov    ebx,eax
   16704:	cmp    eax,0xffffffff
   16707:	je     16792 <nbd_init+0xd2>
   1670d:	mov    esi,0xab04
   16712:	mov    edi,r12d
   16715:	xor    eax,eax
   16717:	call   3250 <ioctl@plt>
   1671c:	mov    ebx,eax
   1671e:	cmp    eax,0xffffffff
   16721:	je     167ba <nbd_init+0xfa>
   16727:	mov    edx,r14d
   1672a:	mov    esi,0xab00
   1672f:	mov    edi,r12d
   16732:	xor    eax,eax
   16734:	call   3250 <ioctl@plt>
   16739:	mov    ebx,eax
   1673b:	cmp    eax,0xffffffff
   1673e:	je     167e2 <nbd_init+0x122>
   16744:	xor    ebx,ebx
   16746:	mov    eax,ebx
   16748:	pop    rbx
   16749:	pop    rbp
   1674a:	pop    r12
   1674c:	pop    r13
   1674e:	pop    r14
   16750:	ret    
   16751:	mov    ebx,eax
   16753:	call   30b0 <__errno_location@plt>
   16758:	mov    r9d,0x161
   1675e:	lea    r8,[rip+0x9ba3]        # 20308 <__FUNCTION__.13829>
   16765:	lea    rcx,[rip+0x97d7]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   1676c:	mov    r12d,DWORD PTR [rax]
   1676f:	mov    rbp,rax
   16772:	lea    rdx,[rip+0x987f]        # 1fff8 <__PRETTY_FUNCTION__.14669+0xf8>
   16779:	mov    rdi,QWORD PTR [rip+0x11d80]        # 28500 <stderr@@GLIBC_2.2.5>
   16780:	mov    esi,0x1
   16785:	xor    eax,eax
   16787:	call   3630 <__fprintf_chk@plt>
   1678c:	mov    DWORD PTR [rbp+0x0],r12d
   16790:	jmp    16746 <nbd_init+0x86>
   16792:	call   30b0 <__errno_location@plt>
   16797:	mov    r9d,0x16b
   1679d:	lea    r8,[rip+0x9b64]        # 20308 <__FUNCTION__.13829>
   167a4:	lea    rcx,[rip+0x9798]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   167ab:	mov    rbp,rax
   167ae:	mov    r12d,DWORD PTR [rax]
   167b1:	lea    rdx,[rip+0x9870]        # 20028 <__PRETTY_FUNCTION__.14669+0x128>
   167b8:	jmp    16779 <nbd_init+0xb9>
   167ba:	call   30b0 <__errno_location@plt>
   167bf:	mov    r9d,0x174
   167c5:	lea    r8,[rip+0x9b3c]        # 20308 <__FUNCTION__.13829>
   167cc:	lea    rcx,[rip+0x9770]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   167d3:	mov    rbp,rax
   167d6:	mov    r12d,DWORD PTR [rax]
   167d9:	lea    rdx,[rip+0x9878]        # 20058 <__PRETTY_FUNCTION__.14669+0x158>
   167e0:	jmp    16779 <nbd_init+0xb9>
   167e2:	call   30b0 <__errno_location@plt>
   167e7:	mov    r9d,0x17d
   167ed:	lea    r8,[rip+0x9b14]        # 20308 <__FUNCTION__.13829>
   167f4:	lea    rcx,[rip+0x9748]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   167fb:	mov    rbp,rax
   167fe:	mov    r12d,DWORD PTR [rax]
   16801:	lea    rdx,[rip+0x9880]        # 20088 <__PRETTY_FUNCTION__.14669+0x188>
   16808:	jmp    16779 <nbd_init+0xb9>
   1680d:	nop    DWORD PTR [rax]

0000000000016810 <nbd_disconnect>:
   16810:	push   rbx
   16811:	mov    esi,0xab05
   16816:	mov    ebx,edi
   16818:	xor    eax,eax
   1681a:	call   3250 <ioctl@plt>
   1681f:	mov    edi,ebx
   16821:	mov    esi,0xab08
   16826:	xor    eax,eax
   16828:	call   3250 <ioctl@plt>
   1682d:	mov    edi,ebx
   1682f:	mov    esi,0xab04
   16834:	xor    eax,eax
   16836:	call   3250 <ioctl@plt>
   1683b:	xor    eax,eax
   1683d:	pop    rbx
   1683e:	ret    
   1683f:	nop

0000000000016840 <nbd_client>:
   16840:	push   r13
   16842:	mov    esi,0xab03
   16847:	xor    eax,eax
   16849:	push   r12
   1684b:	push   rbp
   1684c:	push   rbx
   1684d:	mov    ebx,edi
   1684f:	sub    rsp,0x8
   16853:	call   3250 <ioctl@plt>
   16858:	mov    r12d,eax
   1685b:	call   30b0 <__errno_location@plt>
   16860:	mov    edi,ebx
   16862:	mov    esi,0xab05
   16867:	mov    r13d,DWORD PTR [rax]
   1686a:	mov    rbp,rax
   1686d:	xor    eax,eax
   1686f:	call   3250 <ioctl@plt>
   16874:	mov    edi,ebx
   16876:	mov    esi,0xab04
   1687b:	xor    eax,eax
   1687d:	call   3250 <ioctl@plt>
   16882:	mov    DWORD PTR [rbp+0x0],r13d
   16886:	add    rsp,0x8
   1688a:	mov    eax,r12d
   1688d:	pop    rbx
   1688e:	pop    rbp
   1688f:	pop    r12
   16891:	pop    r13
   16893:	ret    
   16894:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1689f:	nop

00000000000168a0 <nbd_send_request>:
   168a0:	sub    rsp,0x38
   168a4:	xor    ecx,ecx
   168a6:	mov    edx,0x1c
   168ab:	mov    rax,QWORD PTR fs:0x28
   168b4:	mov    QWORD PTR [rsp+0x28],rax
   168b9:	xor    eax,eax
   168bb:	mov    eax,DWORD PTR [rsi]
   168bd:	mov    DWORD PTR [rsp],0x13956025
   168c4:	bswap  eax
   168c6:	mov    DWORD PTR [rsp+0x4],eax
   168ca:	mov    rax,QWORD PTR [rsi+0x8]
   168ce:	bswap  rax
   168d1:	mov    QWORD PTR [rsp+0x8],rax
   168d6:	mov    rax,QWORD PTR [rsi+0x10]
   168da:	bswap  rax
   168dd:	mov    QWORD PTR [rsp+0x10],rax
   168e2:	mov    eax,DWORD PTR [rsi+0x18]
   168e5:	mov    rsi,rsp
   168e8:	bswap  eax
   168ea:	mov    DWORD PTR [rsp+0x18],eax
   168ee:	call   16020 <nbd_wr_sync>
   168f3:	cmp    rax,0x1c
   168f7:	jne    16910 <nbd_send_request+0x70>
   168f9:	xor    eax,eax
   168fb:	mov    rdx,QWORD PTR [rsp+0x28]
   16900:	xor    rdx,QWORD PTR fs:0x28
   16909:	jne    16950 <nbd_send_request+0xb0>
   1690b:	add    rsp,0x38
   1690f:	ret    
   16910:	mov    rdi,QWORD PTR [rip+0x11be9]        # 28500 <stderr@@GLIBC_2.2.5>
   16917:	mov    r9d,0x1c5
   1691d:	xor    eax,eax
   1691f:	lea    r8,[rip+0x99ca]        # 202f0 <__FUNCTION__.13847>
   16926:	lea    rcx,[rip+0x9616]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   1692d:	lea    rdx,[rip+0x964c]        # 1ff80 <__PRETTY_FUNCTION__.14669+0x80>
   16934:	mov    esi,0x1
   16939:	call   3630 <__fprintf_chk@plt>
   1693e:	call   30b0 <__errno_location@plt>
   16943:	mov    DWORD PTR [rax],0x16
   16949:	mov    eax,0xffffffff
   1694e:	jmp    168fb <nbd_send_request+0x5b>
   16950:	call   3190 <__stack_chk_fail@plt>
   16955:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000016960 <nbd_receive_reply>:
   16960:	push   rbx
   16961:	mov    ecx,0x1
   16966:	mov    rbx,rsi
   16969:	mov    edx,0x10
   1696e:	sub    rsp,0x20
   16972:	movdqa xmm0,XMMWORD PTR [rip+0x99d6]        # 20350 <__FUNCTION__.13813+0x18>
   1697a:	mov    rax,QWORD PTR fs:0x28
   16983:	mov    QWORD PTR [rsp+0x18],rax
   16988:	xor    eax,eax
   1698a:	mov    rsi,rsp
   1698d:	movaps XMMWORD PTR [rsp],xmm0
   16991:	call   16020 <nbd_wr_sync>
   16996:	cmp    rax,0x10
   1699a:	jne    169d8 <nbd_receive_reply+0x78>
   1699c:	mov    edx,DWORD PTR [rsp+0x4]
   169a0:	mov    eax,DWORD PTR [rsp]
   169a3:	bswap  edx
   169a5:	mov    DWORD PTR [rbx],edx
   169a7:	mov    rdx,QWORD PTR [rsp+0x8]
   169ac:	bswap  eax
   169ae:	bswap  rdx
   169b1:	mov    QWORD PTR [rbx+0x8],rdx
   169b5:	cmp    eax,0x67446698
   169ba:	jne    16a18 <nbd_receive_reply+0xb8>
   169bc:	xor    eax,eax
   169be:	mov    rcx,QWORD PTR [rsp+0x18]
   169c3:	xor    rcx,QWORD PTR fs:0x28
   169cc:	jne    16a62 <nbd_receive_reply+0x102>
   169d2:	add    rsp,0x20
   169d6:	pop    rbx
   169d7:	ret    
   169d8:	mov    rdi,QWORD PTR [rip+0x11b21]        # 28500 <stderr@@GLIBC_2.2.5>
   169df:	mov    r9d,0x1fa
   169e5:	xor    eax,eax
   169e7:	lea    r8,[rip+0x98e2]        # 202d0 <__FUNCTION__.13861>
   169ee:	lea    rcx,[rip+0x954e]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   169f5:	lea    rdx,[rip+0x9568]        # 1ff64 <__PRETTY_FUNCTION__.14669+0x64>
   169fc:	mov    esi,0x1
   16a01:	call   3630 <__fprintf_chk@plt>
   16a06:	call   30b0 <__errno_location@plt>
   16a0b:	mov    DWORD PTR [rax],0x16
   16a11:	mov    eax,0xffffffff
   16a16:	jmp    169be <nbd_receive_reply+0x5e>
   16a18:	sub    rsp,0x8
   16a1c:	mov    rdi,QWORD PTR [rip+0x11add]        # 28500 <stderr@@GLIBC_2.2.5>
   16a23:	lea    rdx,[rip+0x9686]        # 200b0 <__PRETTY_FUNCTION__.14669+0x1b0>
   16a2a:	mov    r9d,0x20e
   16a30:	push   rax
   16a31:	lea    r8,[rip+0x9898]        # 202d0 <__FUNCTION__.13861>
   16a38:	lea    rcx,[rip+0x9504]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16a3f:	xor    eax,eax
   16a41:	mov    esi,0x1
   16a46:	call   3630 <__fprintf_chk@plt>
   16a4b:	call   30b0 <__errno_location@plt>
   16a50:	mov    DWORD PTR [rax],0x16
   16a56:	pop    rax
   16a57:	mov    eax,0xffffffff
   16a5c:	pop    rdx
   16a5d:	jmp    169be <nbd_receive_reply+0x5e>
   16a62:	call   3190 <__stack_chk_fail@plt>
   16a67:	nop    WORD PTR [rax+rax*1+0x0]

0000000000016a70 <nbd_trip>:
   16a70:	push   r15
   16a72:	mov    r15,rdi
   16a75:	push   r14
   16a77:	mov    r14,r8
   16a7a:	push   r13
   16a7c:	push   r12
   16a7e:	mov    r12,rcx
   16a81:	mov    ecx,0x1
   16a86:	push   rbp
   16a87:	mov    rbp,rdx
   16a8a:	mov    edx,0x1c
   16a8f:	push   rbx
   16a90:	mov    ebx,esi
   16a92:	mov    edi,ebx
   16a94:	sub    rsp,0x58
   16a98:	mov    DWORD PTR [rsp],r9d
   16a9c:	lea    rsi,[rsp+0x20]
   16aa1:	mov    r13,QWORD PTR [rsp+0x90]
   16aa9:	mov    rax,QWORD PTR fs:0x28
   16ab2:	mov    QWORD PTR [rsp+0x48],rax
   16ab7:	xor    eax,eax
   16ab9:	call   16020 <nbd_wr_sync>
   16abe:	cmp    rax,0x1c
   16ac2:	jne    16e0e <nbd_trip+0x39e>
   16ac8:	mov    eax,DWORD PTR [rsp+0x20]
   16acc:	mov    r8d,DWORD PTR [rsp+0x38]
   16ad1:	mov    edx,DWORD PTR [rsp+0x24]
   16ad5:	mov    rcx,QWORD PTR [rsp+0x28]
   16ada:	bswap  eax
   16adc:	mov    r9,QWORD PTR [rsp+0x30]
   16ae1:	bswap  r8d
   16ae4:	cmp    eax,0x25609513
   16ae9:	jne    16e2e <nbd_trip+0x3be>
   16aef:	cmp    DWORD PTR [rsp+0x98],r8d
   16af7:	jb     16c48 <nbd_trip+0x1d8>
   16afd:	mov    r10d,r8d
   16b00:	bswap  r9
   16b03:	mov    rax,r10
   16b06:	add    rax,r9
   16b09:	jb     16e78 <nbd_trip+0x408>
   16b0f:	cmp    rax,rbp
   16b12:	ja     16c78 <nbd_trip+0x208>
   16b18:	mov    eax,edx
   16b1a:	bswap  rcx
   16b1d:	mov    rbp,rcx
   16b20:	bswap  eax
   16b22:	cmp    eax,0x1
   16b25:	je     16bb0 <nbd_trip+0x140>
   16b2b:	test   eax,eax
   16b2d:	je     16d10 <nbd_trip+0x2a0>
   16b33:	cmp    eax,0x2
   16b36:	je     16cf8 <nbd_trip+0x288>
   16b3c:	sub    rsp,0x8
   16b40:	mov    r9d,0x28f
   16b46:	lea    r8,[rip+0x976b]        # 202b8 <__FUNCTION__.13880>
   16b4d:	push   rax
   16b4e:	lea    rcx,[rip+0x93ee]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16b55:	lea    rdx,[rip+0x96f4]        # 20250 <__PRETTY_FUNCTION__.14669+0x350>
   16b5c:	mov    rdi,QWORD PTR [rip+0x1199d]        # 28500 <stderr@@GLIBC_2.2.5>
   16b63:	mov    esi,0x1
   16b68:	xor    eax,eax
   16b6a:	mov    r12d,0xffffffff
   16b70:	call   3630 <__fprintf_chk@plt>
   16b75:	call   30b0 <__errno_location@plt>
   16b7a:	mov    DWORD PTR [rax],0x16
   16b80:	pop    rax
   16b81:	pop    rdx
   16b82:	mov    rbx,QWORD PTR [rsp+0x48]
   16b87:	xor    rbx,QWORD PTR fs:0x28
   16b90:	mov    eax,r12d
   16b93:	jne    16e73 <nbd_trip+0x403>
   16b99:	add    rsp,0x58
   16b9d:	pop    rbx
   16b9e:	pop    rbp
   16b9f:	pop    r12
   16ba1:	pop    r13
   16ba3:	pop    r14
   16ba5:	pop    r15
   16ba7:	ret    
   16ba8:	nop    DWORD PTR [rax+rax*1+0x0]
   16bb0:	mov    rdx,r10
   16bb3:	mov    ecx,0x1
   16bb8:	mov    rsi,r13
   16bbb:	mov    edi,ebx
   16bbd:	mov    DWORD PTR [rsp+0x1c],r8d
   16bc2:	mov    QWORD PTR [rsp+0x10],r9
   16bc7:	mov    QWORD PTR [rsp+0x8],r10
   16bcc:	call   16020 <nbd_wr_sync>
   16bd1:	mov    r10,QWORD PTR [rsp+0x8]
   16bd6:	mov    r9,QWORD PTR [rsp+0x10]
   16bdb:	mov    r8d,DWORD PTR [rsp+0x1c]
   16be0:	cmp    r10,rax
   16be3:	jne    16db0 <nbd_trip+0x340>
   16be9:	cmp    BYTE PTR [rsp],0x0
   16bed:	mov    QWORD PTR [rsp+0x8],r10
   16bf2:	jne    16da0 <nbd_trip+0x330>
   16bf8:	lea    rsi,[r12+r9*1]
   16bfc:	mov    ecx,r8d
   16bff:	mov    rdx,r13
   16c02:	mov    rdi,r15
   16c05:	shr    ecx,0x9
   16c08:	shr    rsi,0x9
   16c0c:	call   17990 <bdrv_write>
   16c11:	mov    r10,QWORD PTR [rsp+0x8]
   16c16:	cmp    eax,0xffffffff
   16c19:	mov    r12d,eax
   16c1c:	je     16e53 <nbd_trip+0x3e3>
   16c22:	add    QWORD PTR [r14],r10
   16c25:	xor    esi,esi
   16c27:	mov    rdx,rbp
   16c2a:	mov    edi,ebx
   16c2c:	xor    r12d,r12d
   16c2f:	call   160a0 <nbd_send_reply.isra.0>
   16c34:	cmp    eax,0xffffffff
   16c37:	sete   r12b
   16c3b:	neg    r12d
   16c3e:	jmp    16b82 <nbd_trip+0x112>
   16c43:	nop    DWORD PTR [rax+rax*1+0x0]
   16c48:	mov    eax,DWORD PTR [rsp+0x98]
   16c4f:	mov    r9d,0x239
   16c55:	lea    rcx,[rip+0x92e7]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16c5c:	lea    rdx,[rip+0x9475]        # 200d8 <__PRETTY_FUNCTION__.14669+0x1d8>
   16c63:	push   rax
   16c64:	push   r8
   16c66:	lea    r8,[rip+0x964b]        # 202b8 <__FUNCTION__.13880>
   16c6d:	jmp    16b5c <nbd_trip+0xec>
   16c72:	nop    WORD PTR [rax+rax*1+0x0]
   16c78:	push   r12
   16c7a:	mov    rdi,QWORD PTR [rip+0x1187f]        # 28500 <stderr@@GLIBC_2.2.5>
   16c81:	mov    esi,0x1
   16c86:	xor    eax,eax
   16c88:	push   rbp
   16c89:	lea    rcx,[rip+0x92b3]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16c90:	lea    rdx,[rip+0x94c1]        # 20158 <__PRETTY_FUNCTION__.14669+0x258>
   16c97:	push   r8
   16c99:	lea    r8,[rip+0x9618]        # 202b8 <__FUNCTION__.13880>
   16ca0:	push   r9
   16ca2:	mov    r9d,0x248
   16ca8:	call   3630 <__fprintf_chk@plt>
   16cad:	add    rsp,0x20
   16cb1:	mov    r9d,0x249
   16cb7:	lea    r8,[rip+0x95fa]        # 202b8 <__FUNCTION__.13880>
   16cbe:	lea    rcx,[rip+0x927e]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16cc5:	lea    rdx,[rip+0x94cc]        # 20198 <__PRETTY_FUNCTION__.14669+0x298>
   16ccc:	mov    rdi,QWORD PTR [rip+0x1182d]        # 28500 <stderr@@GLIBC_2.2.5>
   16cd3:	mov    esi,0x1
   16cd8:	xor    eax,eax
   16cda:	mov    r12d,0xffffffff
   16ce0:	call   3630 <__fprintf_chk@plt>
   16ce5:	call   30b0 <__errno_location@plt>
   16cea:	mov    DWORD PTR [rax],0x16
   16cf0:	jmp    16b82 <nbd_trip+0x112>
   16cf5:	nop    DWORD PTR [rax]
   16cf8:	call   30b0 <__errno_location@plt>
   16cfd:	mov    r12d,0x1
   16d03:	mov    DWORD PTR [rax],0x0
   16d09:	jmp    16b82 <nbd_trip+0x112>
   16d0e:	xchg   ax,ax
   16d10:	lea    rsi,[r12+r9*1]
   16d14:	mov    ecx,r8d
   16d17:	mov    rdx,r13
   16d1a:	mov    rdi,r15
   16d1d:	shr    ecx,0x9
   16d20:	shr    rsi,0x9
   16d24:	mov    QWORD PTR [rsp],r10
   16d28:	call   17550 <bdrv_read>
   16d2d:	mov    r10,QWORD PTR [rsp]
   16d31:	cmp    eax,0xffffffff
   16d34:	mov    r12d,eax
   16d37:	je     16dd0 <nbd_trip+0x360>
   16d3d:	add    QWORD PTR [r14],r10
   16d40:	mov    rdx,rbp
   16d43:	xor    esi,esi
   16d45:	mov    edi,ebx
   16d47:	mov    QWORD PTR [rsp],r10
   16d4b:	call   160a0 <nbd_send_reply.isra.0>
   16d50:	mov    r12d,eax
   16d53:	cmp    eax,0xffffffff
   16d56:	je     16b82 <nbd_trip+0x112>
   16d5c:	mov    r10,QWORD PTR [rsp]
   16d60:	xor    ecx,ecx
   16d62:	mov    rsi,r13
   16d65:	mov    edi,ebx
   16d67:	xor    r12d,r12d
   16d6a:	mov    rdx,r10
   16d6d:	call   16020 <nbd_wr_sync>
   16d72:	mov    r10,QWORD PTR [rsp]
   16d76:	cmp    r10,rax
   16d79:	je     16b82 <nbd_trip+0x112>
   16d7f:	mov    r9d,0x267
   16d85:	lea    r8,[rip+0x952c]        # 202b8 <__FUNCTION__.13880>
   16d8c:	lea    rcx,[rip+0x91b0]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16d93:	lea    rdx,[rip+0x91e6]        # 1ff80 <__PRETTY_FUNCTION__.14669+0x80>
   16d9a:	jmp    16ccc <nbd_trip+0x25c>
   16d9f:	nop
   16da0:	mov    esi,0x1
   16da5:	jmp    16c27 <nbd_trip+0x1b7>
   16daa:	nop    WORD PTR [rax+rax*1+0x0]
   16db0:	mov    r9d,0x272
   16db6:	lea    r8,[rip+0x94fb]        # 202b8 <__FUNCTION__.13880>
   16dbd:	lea    rcx,[rip+0x917f]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16dc4:	lea    rdx,[rip+0x942d]        # 201f8 <__PRETTY_FUNCTION__.14669+0x2f8>
   16dcb:	jmp    16ccc <nbd_trip+0x25c>
   16dd0:	mov    r9d,0x259
   16dd6:	lea    r8,[rip+0x94db]        # 202b8 <__FUNCTION__.13880>
   16ddd:	lea    rcx,[rip+0x915f]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16de4:	lea    rdx,[rip+0x93e5]        # 201d0 <__PRETTY_FUNCTION__.14669+0x2d0>
   16deb:	mov    rdi,QWORD PTR [rip+0x1170e]        # 28500 <stderr@@GLIBC_2.2.5>
   16df2:	mov    esi,0x1
   16df7:	xor    eax,eax
   16df9:	call   3630 <__fprintf_chk@plt>
   16dfe:	call   30b0 <__errno_location@plt>
   16e03:	mov    DWORD PTR [rax],0x16
   16e09:	jmp    16b82 <nbd_trip+0x112>
   16e0e:	mov    r9d,0x1d3
   16e14:	lea    r8,[rip+0x9485]        # 202a0 <__FUNCTION__.13854>
   16e1b:	lea    rcx,[rip+0x9121]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16e22:	lea    rdx,[rip+0x913b]        # 1ff64 <__PRETTY_FUNCTION__.14669+0x64>
   16e29:	jmp    16ccc <nbd_trip+0x25c>
   16e2e:	sub    rsp,0x8
   16e32:	mov    r9d,0x1eb
   16e38:	lea    r8,[rip+0x9461]        # 202a0 <__FUNCTION__.13854>
   16e3f:	push   rax
   16e40:	lea    rcx,[rip+0x90fc]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16e47:	lea    rdx,[rip+0x9262]        # 200b0 <__PRETTY_FUNCTION__.14669+0x1b0>
   16e4e:	jmp    16b5c <nbd_trip+0xec>
   16e53:	mov    r9d,0x27f
   16e59:	lea    r8,[rip+0x9458]        # 202b8 <__FUNCTION__.13880>
   16e60:	lea    rcx,[rip+0x90dc]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16e67:	lea    rdx,[rip+0x93ba]        # 20228 <__PRETTY_FUNCTION__.14669+0x328>
   16e6e:	jmp    16deb <nbd_trip+0x37b>
   16e73:	call   3190 <__stack_chk_fail@plt>
   16e78:	mov    r9d,0x240
   16e7e:	lea    r8,[rip+0x9433]        # 202b8 <__FUNCTION__.13880>
   16e85:	lea    rcx,[rip+0x90b7]        # 1ff43 <__PRETTY_FUNCTION__.14669+0x43>
   16e8c:	lea    rdx,[rip+0x927d]        # 20110 <__PRETTY_FUNCTION__.14669+0x210>
   16e93:	jmp    16ccc <nbd_trip+0x25c>
   16e98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000016ea0 <bdrv_register>:
   16ea0:	cmp    QWORD PTR [rdi+0x60],0x0
   16ea5:	je     16f20 <bdrv_register+0x80>
   16ea7:	cmp    QWORD PTR [rdi+0x20],0x0
   16eac:	mov    rax,QWORD PTR [rdi+0x70]
   16eb0:	mov    edx,DWORD PTR [rdi+0x80]
   16eb6:	je     16ef8 <bdrv_register+0x58>
   16eb8:	cmp    QWORD PTR [rdi+0x78],0x0
   16ebd:	je     16f5b <bdrv_register+0xbb>
   16ec3:	mov    QWORD PTR [rdi+0x120],rax
   16eca:	mov    rax,QWORD PTR [rip+0x1165f]        # 28530 <first_drv>
   16ed1:	mov    DWORD PTR [rdi+0x128],edx
   16ed7:	mov    QWORD PTR [rdi+0x130],0x0
   16ee2:	mov    QWORD PTR [rdi+0x138],rax
   16ee9:	mov    QWORD PTR [rip+0x11640],rdi        # 28530 <first_drv>
   16ef0:	ret    
   16ef1:	nop    DWORD PTR [rax+0x0]
   16ef8:	cmp    QWORD PTR [rdi+0x90],0x0
   16f00:	jne    16eb8 <bdrv_register+0x18>
   16f02:	lea    rsi,[rip+0x2557]        # 19460 <bdrv_read_em>
   16f09:	mov    QWORD PTR [rdi+0x20],rsi
   16f0d:	lea    rsi,[rip+0x28cc]        # 197e0 <bdrv_write_em>
   16f14:	mov    QWORD PTR [rdi+0x28],rsi
   16f18:	jmp    16eb8 <bdrv_register+0x18>
   16f1a:	nop    WORD PTR [rax+rax*1+0x0]
   16f20:	lea    rax,[rip+0x2b99]        # 19ac0 <bdrv_aio_read_em>
   16f27:	cmp    QWORD PTR [rdi+0x78],0x0
   16f2c:	mov    edx,0x38
   16f31:	mov    DWORD PTR [rdi+0x80],0x38
   16f3b:	mov    QWORD PTR [rdi+0x60],rax
   16f3f:	lea    rax,[rip+0x2bea]        # 19b30 <bdrv_aio_write_em>
   16f46:	mov    QWORD PTR [rdi+0x68],rax
   16f4a:	lea    rax,[rip+0x1bf]        # 17110 <bdrv_aio_cancel_em>
   16f51:	mov    QWORD PTR [rdi+0x70],rax
   16f55:	jne    16ec3 <bdrv_register+0x23>
   16f5b:	lea    rcx,[rip+0x2ace]        # 19a30 <bdrv_aio_flush_em>
   16f62:	mov    QWORD PTR [rdi+0x78],rcx
   16f66:	jmp    16ec3 <bdrv_register+0x23>
   16f6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000016f70 <bdrv_invalid_protocol_open>:
   16f70:	mov    eax,0xfffffffe
   16f75:	ret    
   16f76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016f80 <bdrv_aio_cancel_vector>:
   16f80:	mov    rdi,QWORD PTR [rdi+0x40]
   16f84:	mov    rax,QWORD PTR [rdi]
   16f87:	jmp    QWORD PTR [rax]
   16f89:	nop    DWORD PTR [rax+0x0]

0000000000016f90 <bdrv_rw_em_cb>:
   16f90:	mov    DWORD PTR [rdi],esi
   16f92:	ret    
   16f93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   16f9e:	xchg   ax,ax

0000000000016fa0 <find_protocol>:
   16fa0:	push   r12
   16fa2:	mov    esi,0x3a
   16fa7:	push   rbp
   16fa8:	push   rbx
   16fa9:	mov    rbx,rdi
   16fac:	sub    rsp,0x90
   16fb3:	mov    rax,QWORD PTR fs:0x28
   16fbc:	mov    QWORD PTR [rsp+0x88],rax
   16fc4:	xor    eax,eax
   16fc6:	call   31d0 <strchr@plt>
   16fcb:	test   rax,rax
   16fce:	je     17070 <find_protocol+0xd0>
   16fd4:	sub    rax,rbx
   16fd7:	cmp    eax,0x7f
   16fda:	ja     17060 <find_protocol+0xc0>
   16fe0:	mov    r12d,eax
   16fe3:	movsxd rdx,eax
   16fe6:	mov    rbp,rsp
   16fe9:	mov    rsi,rbx
   16fec:	mov    ecx,0x80
   16ff1:	mov    rdi,rbp
   16ff4:	call   3360 <__memcpy_chk@plt>
   16ff9:	mov    rbx,QWORD PTR [rip+0x11530]        # 28530 <first_drv>
   17000:	movsxd rax,r12d
   17003:	mov    BYTE PTR [rsp+rax*1],0x0
   17007:	test   rbx,rbx
   1700a:	je     17034 <find_protocol+0x94>
   1700c:	nop    DWORD PTR [rax+0x0]
   17010:	mov    rdi,QWORD PTR [rbx+0x88]
   17017:	test   rdi,rdi
   1701a:	je     17028 <find_protocol+0x88>
   1701c:	mov    rsi,rbp
   1701f:	call   3330 <strcmp@plt>
   17024:	test   eax,eax
   17026:	je     1703b <find_protocol+0x9b>
   17028:	mov    rbx,QWORD PTR [rbx+0x138]
   1702f:	test   rbx,rbx
   17032:	jne    17010 <find_protocol+0x70>
   17034:	lea    rbx,[rip+0x110e5]        # 28120 <bdrv_invalid_protocol>
   1703b:	mov    rcx,QWORD PTR [rsp+0x88]
   17043:	xor    rcx,QWORD PTR fs:0x28
   1704c:	mov    rax,rbx
   1704f:	jne    17074 <find_protocol+0xd4>
   17051:	add    rsp,0x90
   17058:	pop    rbx
   17059:	pop    rbp
   1705a:	pop    r12
   1705c:	ret    
   1705d:	nop    DWORD PTR [rax]
   17060:	mov    edx,0x7f
   17065:	mov    r12d,0x7f
   1706b:	jmp    16fe6 <find_protocol+0x46>
   17070:	xor    ebx,ebx
   17072:	jmp    1703b <find_protocol+0x9b>
   17074:	call   3190 <__stack_chk_fail@plt>
   17079:	nop    DWORD PTR [rax+0x0]

0000000000017080 <bdrv_aio_rw_vector_cb>:
   17080:	push   rbp
   17081:	mov    ebp,esi
   17083:	push   rbx
   17084:	mov    rbx,rdi
   17087:	sub    rsp,0x8
   1708b:	mov    eax,DWORD PTR [rbx+0x38]
   1708e:	mov    rdi,QWORD PTR [rdi+0x30]
   17092:	test   eax,eax
   17094:	je     170c0 <bdrv_aio_rw_vector_cb+0x40>
   17096:	call   47a0 <qemu_vfree>
   1709b:	mov    rdi,QWORD PTR [rbx+0x18]
   1709f:	mov    esi,ebp
   170a1:	call   QWORD PTR [rbx+0x10]
   170a4:	mov    rax,QWORD PTR [rbx]
   170a7:	mov    rdx,QWORD PTR [rax+0x10]
   170ab:	mov    QWORD PTR [rbx+0x20],rdx
   170af:	mov    QWORD PTR [rax+0x10],rbx
   170b3:	add    rsp,0x8
   170b7:	pop    rbx
   170b8:	pop    rbp
   170b9:	ret    
   170ba:	nop    WORD PTR [rax+rax*1+0x0]
   170c0:	mov    rax,QWORD PTR [rbx+0x28]
   170c4:	mov    rsi,rdi
   170c7:	mov    rdx,QWORD PTR [rax+0x10]
   170cb:	mov    rdi,rax
   170ce:	call   4c20 <qemu_iovec_from_buffer>
   170d3:	mov    rdi,QWORD PTR [rbx+0x30]
   170d7:	jmp    17096 <bdrv_aio_rw_vector_cb+0x16>
   170d9:	nop    DWORD PTR [rax+0x0]

00000000000170e0 <bdrv_aio_bh_cb>:
   170e0:	push   rbx
   170e1:	mov    rbx,rdi
   170e4:	mov    esi,DWORD PTR [rdi+0x30]
   170e7:	mov    rdi,QWORD PTR [rdi+0x18]
   170eb:	call   QWORD PTR [rbx+0x10]
   170ee:	mov    rdi,QWORD PTR [rbx+0x28]
   170f2:	call   44c0 <qemu_bh_delete>
   170f7:	mov    rax,QWORD PTR [rbx]
   170fa:	mov    QWORD PTR [rbx+0x28],0x0
   17102:	mov    rdx,QWORD PTR [rax+0x10]
   17106:	mov    QWORD PTR [rbx+0x20],rdx
   1710a:	mov    QWORD PTR [rax+0x10],rbx
   1710e:	pop    rbx
   1710f:	ret    

0000000000017110 <bdrv_aio_cancel_em>:
   17110:	push   rbx
   17111:	mov    rbx,rdi
   17114:	mov    rdi,QWORD PTR [rdi+0x28]
   17118:	call   44c0 <qemu_bh_delete>
   1711d:	mov    rax,QWORD PTR [rbx]
   17120:	mov    QWORD PTR [rbx+0x28],0x0
   17128:	mov    rdx,QWORD PTR [rax+0x10]
   1712c:	mov    QWORD PTR [rbx+0x20],rdx
   17130:	mov    QWORD PTR [rax+0x10],rbx
   17134:	pop    rbx
   17135:	ret    
   17136:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000017140 <bdrv_check_byte_request>:
   17140:	mov    rax,QWORD PTR [rdi+0x38]
   17144:	test   rax,rax
   17147:	je     171e0 <bdrv_check_byte_request+0xa0>
   1714d:	push   r12
   1714f:	mov    r12,rdx
   17152:	push   rbp
   17153:	mov    rbp,rsi
   17156:	push   rbx
   17157:	mov    rdx,QWORD PTR [rax+0xf0]
   1715e:	mov    rbx,rdi
   17161:	test   rdx,rdx
   17164:	je     171b8 <bdrv_check_byte_request+0x78>
   17166:	call   rdx
   17168:	test   eax,eax
   1716a:	je     171a9 <bdrv_check_byte_request+0x69>
   1716c:	mov    ecx,DWORD PTR [rbx+0x880]
   17172:	test   ecx,ecx
   17174:	jne    171a2 <bdrv_check_byte_request+0x62>
   17176:	mov    rax,QWORD PTR [rbx+0x38]
   1717a:	test   rax,rax
   1717d:	je     171e6 <bdrv_check_byte_request+0xa6>
   1717f:	mov    rax,QWORD PTR [rax+0xa8]
   17186:	test   rax,rax
   17189:	je     171c8 <bdrv_check_byte_request+0x88>
   1718b:	mov    rdi,rbx
   1718e:	call   rax
   17190:	test   rbp,rbp
   17193:	js     171d8 <bdrv_check_byte_request+0x98>
   17195:	cmp    rbp,rax
   17198:	jg     171d8 <bdrv_check_byte_request+0x98>
   1719a:	sub    rax,rbp
   1719d:	cmp    r12,rax
   171a0:	ja     171d8 <bdrv_check_byte_request+0x98>
   171a2:	xor    eax,eax
   171a4:	pop    rbx
   171a5:	pop    rbp
   171a6:	pop    r12
   171a8:	ret    
   171a9:	pop    rbx
   171aa:	mov    eax,0xffffff85
   171af:	pop    rbp
   171b0:	pop    r12
   171b2:	ret    
   171b3:	nop    DWORD PTR [rax+rax*1+0x0]
   171b8:	mov    edx,DWORD PTR [rdi+0x880]
   171be:	test   edx,edx
   171c0:	je     1717f <bdrv_check_byte_request+0x3f>
   171c2:	jmp    171a2 <bdrv_check_byte_request+0x62>
   171c4:	nop    DWORD PTR [rax+0x0]
   171c8:	mov    rax,QWORD PTR [rbx]
   171cb:	shl    rax,0x9
   171cf:	jmp    17190 <bdrv_check_byte_request+0x50>
   171d1:	nop    DWORD PTR [rax+0x0]
   171d8:	mov    eax,0xfffffffb
   171dd:	jmp    171a4 <bdrv_check_byte_request+0x64>
   171df:	nop
   171e0:	mov    eax,0xffffff85
   171e5:	ret    
   171e6:	mov    rax,0xffffffffffffff85
   171ed:	jmp    17190 <bdrv_check_byte_request+0x50>
   171ef:	nop

00000000000171f0 <path_is_absolute>:
   171f0:	push   rbx
   171f1:	mov    esi,0x3a
   171f6:	mov    rbx,rdi
   171f9:	call   31d0 <strchr@plt>
   171fe:	test   rax,rax
   17201:	lea    rdx,[rax+0x1]
   17205:	cmovne rbx,rdx
   17209:	xor    eax,eax
   1720b:	cmp    BYTE PTR [rbx],0x2f
   1720e:	pop    rbx
   1720f:	sete   al
   17212:	ret    
   17213:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1721e:	xchg   ax,ax

0000000000017220 <path_combine>:
   17220:	test   esi,esi
   17222:	jle    172e0 <path_combine+0xc0>
   17228:	push   r15
   1722a:	push   r14
   1722c:	push   r13
   1722e:	movsxd r13,esi
   17231:	mov    esi,0x3a
   17236:	push   r12
   17238:	mov    r12,rdi
   1723b:	mov    rdi,rcx
   1723e:	mov    r14,r13
   17241:	push   rbp
   17242:	mov    rbp,rcx
   17245:	push   rbx
   17246:	mov    rbx,rdx
   17249:	sub    rsp,0x8
   1724d:	call   31d0 <strchr@plt>
   17252:	test   rax,rax
   17255:	lea    rdx,[rax+0x1]
   17259:	cmove  rdx,rbp
   1725d:	cmp    BYTE PTR [rdx],0x2f
   17260:	je     17310 <path_combine+0xf0>
   17266:	mov    esi,0x3a
   1726b:	mov    rdi,rbx
   1726e:	call   31d0 <strchr@plt>
   17273:	mov    esi,0x2f
   17278:	mov    rdi,rbx
   1727b:	mov    r15,rax
   1727e:	call   3200 <strrchr@plt>
   17283:	test   r15,r15
   17286:	je     172f8 <path_combine+0xd8>
   17288:	lea    rdx,[r15+0x1]
   1728c:	mov    r8,rbx
   1728f:	test   rax,rax
   17292:	je     17298 <path_combine+0x78>
   17294:	lea    r8,[rax+0x1]
   17298:	cmp    r8,rdx
   1729b:	cmovae rdx,r8
   1729f:	sub    rdx,rbx
   172a2:	cmp    r14d,edx
   172a5:	jg     172e8 <path_combine+0xc8>
   172a7:	lea    edx,[r14-0x1]
   172ab:	movsxd rdx,edx
   172ae:	lea    r14,[r12+rdx*1]
   172b2:	mov    rsi,rbx
   172b5:	mov    rdi,r12
   172b8:	call   33b0 <memcpy@plt>
   172bd:	mov    BYTE PTR [r14],0x0
   172c1:	add    rsp,0x8
   172c5:	mov    rdx,rbp
   172c8:	pop    rbx
   172c9:	mov    rsi,r13
   172cc:	pop    rbp
   172cd:	mov    rdi,r12
   172d0:	pop    r12
   172d2:	pop    r13
   172d4:	pop    r14
   172d6:	pop    r15
   172d8:	jmp    48e0 <pstrcat>
   172dd:	nop    DWORD PTR [rax]
   172e0:	ret    
   172e1:	nop    DWORD PTR [rax+0x0]
   172e8:	movsxd rdx,edx
   172eb:	lea    r14,[r12+rdx*1]
   172ef:	jmp    172b2 <path_combine+0x92>
   172f1:	nop    DWORD PTR [rax+0x0]
   172f8:	mov    rdx,rbx
   172fb:	test   rax,rax
   172fe:	jne    17294 <path_combine+0x74>
   17300:	mov    r14,r12
   17303:	xor    edx,edx
   17305:	jmp    172b2 <path_combine+0x92>
   17307:	nop    WORD PTR [rax+rax*1+0x0]
   17310:	add    rsp,0x8
   17314:	mov    rdx,rbp
   17317:	mov    rsi,r13
   1731a:	mov    rdi,r12
   1731d:	pop    rbx
   1731e:	pop    rbp
   1731f:	pop    r12
   17321:	pop    r13
   17323:	pop    r14
   17325:	pop    r15
   17327:	jmp    48a0 <pstrcpy>
   1732c:	nop    DWORD PTR [rax+0x0]

0000000000017330 <bdrv_new>:
   17330:	push   rbp
   17331:	mov    rbp,rdi
   17334:	mov    edi,0x8c8
   17339:	push   rbx
   1733a:	sub    rsp,0x8
   1733e:	call   4d00 <qemu_mallocz>
   17343:	mov    rdx,rbp
   17346:	mov    esi,0x20
   1734b:	lea    rdi,[rax+0x898]
   17352:	mov    rbx,rax
   17355:	call   48a0 <pstrcpy>
   1735a:	cmp    BYTE PTR [rbp+0x0],0x0
   1735e:	je     17391 <bdrv_new+0x61>
   17360:	mov    rcx,QWORD PTR [rip+0x112f1]        # 28658 <bdrv_first>
   17367:	test   rcx,rcx
   1736a:	jne    1737b <bdrv_new+0x4b>
   1736c:	lea    rcx,[rip+0x112e5]        # 28658 <bdrv_first>
   17373:	jmp    1738e <bdrv_new+0x5e>
   17375:	nop    DWORD PTR [rax]
   17378:	mov    rcx,rdx
   1737b:	mov    rdx,QWORD PTR [rcx+0x8b8]
   17382:	test   rdx,rdx
   17385:	jne    17378 <bdrv_new+0x48>
   17387:	add    rcx,0x8b8
   1738e:	mov    QWORD PTR [rcx],rbx
   17391:	add    rsp,0x8
   17395:	mov    rax,rbx
   17398:	pop    rbx
   17399:	pop    rbp
   1739a:	ret    
   1739b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000173a0 <bdrv_find_format>:
   173a0:	push   rbp
   173a1:	push   rbx
   173a2:	sub    rsp,0x8
   173a6:	mov    rbx,QWORD PTR [rip+0x11183]        # 28530 <first_drv>
   173ad:	test   rbx,rbx
   173b0:	je     173db <bdrv_find_format+0x3b>
   173b2:	mov    rbp,rdi
   173b5:	jmp    173cc <bdrv_find_format+0x2c>
   173b7:	nop    WORD PTR [rax+rax*1+0x0]
   173c0:	mov    rbx,QWORD PTR [rbx+0x138]
   173c7:	test   rbx,rbx
   173ca:	je     173db <bdrv_find_format+0x3b>
   173cc:	mov    rdi,QWORD PTR [rbx]
   173cf:	mov    rsi,rbp
   173d2:	call   3330 <strcmp@plt>
   173d7:	test   eax,eax
   173d9:	jne    173c0 <bdrv_find_format+0x20>
   173db:	add    rsp,0x8
   173df:	mov    rax,rbx
   173e2:	pop    rbx
   173e3:	pop    rbp
   173e4:	ret    
   173e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000173f0 <bdrv_create>:
   173f0:	mov    rax,QWORD PTR [rdi+0x38]
   173f4:	mov    r9,rsi
   173f7:	mov    rsi,rdx
   173fa:	mov    rdx,rcx
   173fd:	test   rax,rax
   17400:	je     1740a <bdrv_create+0x1a>
   17402:	mov    ecx,r8d
   17405:	mov    rdi,r9
   17408:	jmp    rax
   1740a:	mov    eax,0xffffffa1
   1740f:	ret    

0000000000017410 <get_tmp_filename>:
   17410:	push   rbp
   17411:	mov    rbp,rdi
   17414:	lea    rdi,[rip+0x8f4a]        # 20365 <__FUNCTION__.13813+0x2d>
   1741b:	push   rbx
   1741c:	mov    ebx,esi
   1741e:	sub    rsp,0x8
   17422:	call   3040 <getenv@plt>
   17427:	movsxd rsi,ebx
   1742a:	mov    rdi,rbp
   1742d:	mov    edx,0x1
   17432:	test   rax,rax
   17435:	lea    r9,[rip+0x8f24]        # 20360 <__FUNCTION__.13813+0x28>
   1743c:	lea    r8,[rip+0x8f29]        # 2036c <__FUNCTION__.13813+0x34>
   17443:	mov    rcx,0xffffffffffffffff
   1744a:	cmovne r9,rax
   1744e:	xor    eax,eax
   17450:	call   3060 <__snprintf_chk@plt>
   17455:	mov    rdi,rbp
   17458:	call   32e0 <mkstemp64@plt>
   1745d:	add    rsp,0x8
   17461:	pop    rbx
   17462:	mov    edi,eax
   17464:	pop    rbp
   17465:	jmp    3260 <close@plt>
   1746a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000017470 <bdrv_delete>:
   17470:	mov    rax,QWORD PTR [rip+0x111e1]        # 28658 <bdrv_first>
   17477:	push   rbx
   17478:	mov    rbx,rdi
   1747b:	cmp    rax,rdi
   1747e:	je     174d6 <bdrv_delete+0x66>
   17480:	test   rax,rax
   17483:	jne    17495 <bdrv_delete+0x25>
   17485:	jmp    174b4 <bdrv_delete+0x44>
   17487:	nop    WORD PTR [rax+rax*1+0x0]
   17490:	test   rax,rax
   17493:	je     174c0 <bdrv_delete+0x50>
   17495:	lea    rdx,[rax+0x8b8]
   1749c:	mov    rax,QWORD PTR [rax+0x8b8]
   174a3:	cmp    rbx,rax
   174a6:	jne    17490 <bdrv_delete+0x20>
   174a8:	mov    rax,QWORD PTR [rbx+0x8b8]
   174af:	mov    QWORD PTR [rdx],rax
   174b2:	jmp    174c5 <bdrv_delete+0x55>
   174b4:	lea    rdx,[rip+0x1119d]        # 28658 <bdrv_first>
   174bb:	nop    DWORD PTR [rax+rax*1+0x0]
   174c0:	test   rbx,rbx
   174c3:	je     174a8 <bdrv_delete+0x38>
   174c5:	mov    rdi,rbx
   174c8:	call   174e0 <bdrv_close>
   174cd:	mov    rdi,rbx
   174d0:	pop    rbx
   174d1:	jmp    4ca0 <qemu_free>
   174d6:	lea    rdx,[rip+0x1117b]        # 28658 <bdrv_first>
   174dd:	jmp    174a8 <bdrv_delete+0x38>
   174df:	nop

00000000000174e0 <bdrv_close>:
   174e0:	mov    rax,QWORD PTR [rdi+0x38]
   174e4:	test   rax,rax
   174e7:	je     17548 <bdrv_close+0x68>
   174e9:	push   rbx
   174ea:	mov    rbx,rdi
   174ed:	mov    rdi,QWORD PTR [rdi+0x850]
   174f4:	test   rdi,rdi
   174f7:	je     17502 <bdrv_close+0x22>
   174f9:	call   17470 <bdrv_delete>
   174fe:	mov    rax,QWORD PTR [rbx+0x38]
   17502:	mov    rdi,rbx
   17505:	call   QWORD PTR [rax+0x30]
   17508:	mov    rdi,QWORD PTR [rbx+0x40]
   1750c:	call   4ca0 <qemu_free>
   17511:	mov    rax,QWORD PTR [rbx+0x28]
   17515:	mov    QWORD PTR [rbx+0x40],0x0
   1751d:	mov    QWORD PTR [rbx+0x38],0x0
   17525:	mov    DWORD PTR [rbx+0x84c],0x1
   1752f:	test   rax,rax
   17532:	je     17540 <bdrv_close+0x60>
   17534:	mov    rdi,QWORD PTR [rbx+0x30]
   17538:	pop    rbx
   17539:	jmp    rax
   1753b:	nop    DWORD PTR [rax+rax*1+0x0]
   17540:	pop    rbx
   17541:	ret    
   17542:	nop    WORD PTR [rax+rax*1+0x0]
   17548:	ret    
   17549:	nop    DWORD PTR [rax+0x0]

0000000000017550 <bdrv_read>:
   17550:	push   r15
   17552:	push   r14
   17554:	push   r13
   17556:	push   r12
   17558:	push   rbp
   17559:	push   rbx
   1755a:	sub    rsp,0x28
   1755e:	mov    r14,QWORD PTR [rdi+0x38]
   17562:	test   r14,r14
   17565:	je     17658 <bdrv_read+0x108>
   1756b:	mov    eax,ecx
   1756d:	mov    DWORD PTR [rsp+0x1c],ecx
   17571:	mov    r15,rsi
   17574:	mov    rcx,rsi
   17577:	neg    rcx
   1757a:	shl    r15,0x9
   1757e:	test   rsi,rsi
   17581:	mov    QWORD PTR [rsp+0x10],rdx
   17586:	cmovns rcx,r15
   1758a:	shl    eax,0x9
   1758d:	mov    rbx,rsi
   17590:	mov    rbp,rdi
   17593:	movsxd r12,eax
   17596:	mov    rsi,rcx
   17599:	mov    rdx,r12
   1759c:	mov    QWORD PTR [rsp+0x8],rcx
   175a1:	call   17140 <bdrv_check_byte_request>
   175a6:	mov    rcx,QWORD PTR [rsp+0x8]
   175ab:	test   eax,eax
   175ad:	jne    17648 <bdrv_read+0xf8>
   175b3:	mov    rdx,r12
   175b6:	mov    rsi,rcx
   175b9:	mov    rdi,rbp
   175bc:	call   17140 <bdrv_check_byte_request>
   175c1:	test   eax,eax
   175c3:	mov    DWORD PTR [rsp+0x8],eax
   175c7:	jne    17648 <bdrv_read+0xf8>
   175c9:	mov    rax,QWORD PTR [r14+0x90]
   175d0:	test   rax,rax
   175d3:	je     17620 <bdrv_read+0xd0>
   175d5:	mov    ecx,r12d
   175d8:	mov    rdx,QWORD PTR [rsp+0x10]
   175dd:	mov    rsi,r15
   175e0:	mov    rdi,rbp
   175e3:	call   rax
   175e5:	mov    r9d,eax
   175e8:	test   eax,eax
   175ea:	js     17605 <bdrv_read+0xb5>
   175ec:	cmp    eax,r12d
   175ef:	jne    17650 <bdrv_read+0x100>
   175f1:	add    QWORD PTR [rbp+0x860],r12
   175f8:	mov    r9d,DWORD PTR [rsp+0x8]
   175fd:	add    QWORD PTR [rbp+0x870],0x1
   17605:	add    rsp,0x28
   17609:	mov    eax,r9d
   1760c:	pop    rbx
   1760d:	pop    rbp
   1760e:	pop    r12
   17610:	pop    r13
   17612:	pop    r14
   17614:	pop    r15
   17616:	ret    
   17617:	nop    WORD PTR [rax+rax*1+0x0]
   17620:	mov    rax,QWORD PTR [r14+0x20]
   17624:	mov    ecx,DWORD PTR [rsp+0x1c]
   17628:	mov    rsi,rbx
   1762b:	mov    rdi,rbp
   1762e:	mov    rdx,QWORD PTR [rsp+0x10]
   17633:	add    rsp,0x28
   17637:	pop    rbx
   17638:	pop    rbp
   17639:	pop    r12
   1763b:	pop    r13
   1763d:	pop    r14
   1763f:	pop    r15
   17641:	jmp    rax
   17643:	nop    DWORD PTR [rax+rax*1+0x0]
   17648:	mov    r9d,0xfffffffb
   1764e:	jmp    17605 <bdrv_read+0xb5>
   17650:	mov    r9d,0xffffffea
   17656:	jmp    17605 <bdrv_read+0xb5>
   17658:	mov    r9d,0xffffff85
   1765e:	jmp    17605 <bdrv_read+0xb5>

0000000000017660 <bdrv_pread_em>:
   17660:	push   r15
   17662:	mov    r15,rsi
   17665:	mov    r8,rdi
   17668:	push   r14
   1766a:	mov    r14,rdx
   1766d:	push   r13
   1766f:	push   r12
   17671:	mov    r12d,ecx
   17674:	push   rbp
   17675:	mov    ebp,ecx
   17677:	push   rbx
   17678:	mov    ebx,esi
   1767a:	neg    ebx
   1767c:	and    ebx,0x1ff
   17682:	sub    rsp,0x228
   17689:	mov    rax,QWORD PTR fs:0x28
   17692:	mov    QWORD PTR [rsp+0x218],rax
   1769a:	xor    eax,eax
   1769c:	cmp    ecx,ebx
   1769e:	cmovle ebx,ecx
   176a1:	sar    r15,0x9
   176a5:	test   ebx,ebx
   176a7:	jg     17720 <bdrv_pread_em+0xc0>
   176a9:	mov    ebx,ebp
   176ab:	sar    ebx,0x9
   176ae:	test   ebx,ebx
   176b0:	jg     17790 <bdrv_pread_em+0x130>
   176b6:	test   ebp,ebp
   176b8:	jg     176f0 <bdrv_pread_em+0x90>
   176ba:	mov    eax,r12d
   176bd:	mov    rdi,QWORD PTR [rsp+0x218]
   176c5:	xor    rdi,QWORD PTR fs:0x28
   176ce:	jne    1783a <bdrv_pread_em+0x1da>
   176d4:	add    rsp,0x228
   176db:	pop    rbx
   176dc:	pop    rbp
   176dd:	pop    r12
   176df:	pop    r13
   176e1:	pop    r14
   176e3:	pop    r15
   176e5:	ret    
   176e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   176f0:	lea    rbx,[rsp+0x10]
   176f5:	mov    ecx,0x1
   176fa:	mov    rsi,r15
   176fd:	mov    rdi,r8
   17700:	mov    rdx,rbx
   17703:	call   17550 <bdrv_read>
   17708:	test   eax,eax
   1770a:	js     17830 <bdrv_pread_em+0x1d0>
   17710:	movsxd rdx,ebp
   17713:	mov    rsi,rbx
   17716:	mov    rdi,r14
   17719:	call   33b0 <memcpy@plt>
   1771e:	jmp    176ba <bdrv_pread_em+0x5a>
   17720:	lea    rbp,[rsp+0x10]
   17725:	mov    r13,rsi
   17728:	mov    ecx,0x1
   1772d:	mov    rsi,r15
   17730:	mov    rdx,rbp
   17733:	mov    QWORD PTR [rsp+0x8],rdi
   17738:	call   17550 <bdrv_read>
   1773d:	mov    r8,QWORD PTR [rsp+0x8]
   17742:	test   eax,eax
   17744:	js     17830 <bdrv_pread_em+0x1d0>
   1774a:	and    r13d,0x1ff
   17751:	movsxd rax,ebx
   17754:	lea    rsi,[rbp+r13*1+0x0]
   17759:	cmp    ebx,0x8
   1775c:	jae    177d0 <bdrv_pread_em+0x170>
   1775e:	test   bl,0x4
   17761:	jne    17818 <bdrv_pread_em+0x1b8>
   17767:	test   ebx,ebx
   17769:	je     177fb <bdrv_pread_em+0x19b>
   1776f:	movzx  edx,BYTE PTR [rsi]
   17772:	mov    BYTE PTR [r14],dl
   17775:	test   bl,0x2
   17778:	je     177fb <bdrv_pread_em+0x19b>
   1777e:	mov    edx,ebx
   17780:	movzx  ecx,WORD PTR [rsi+rdx*1-0x2]
   17785:	mov    WORD PTR [r14+rdx*1-0x2],cx
   1778b:	jmp    177fb <bdrv_pread_em+0x19b>
   1778d:	nop    DWORD PTR [rax]
   17790:	mov    ecx,ebx
   17792:	mov    rdx,r14
   17795:	mov    rsi,r15
   17798:	mov    rdi,r8
   1779b:	mov    QWORD PTR [rsp+0x8],r8
   177a0:	call   17550 <bdrv_read>
   177a5:	test   eax,eax
   177a7:	js     17830 <bdrv_pread_em+0x1d0>
   177ad:	mov    eax,ebp
   177af:	movsxd rbx,ebx
   177b2:	mov    r8,QWORD PTR [rsp+0x8]
   177b7:	and    eax,0xfffffe00
   177bc:	add    r15,rbx
   177bf:	movsxd rdx,eax
   177c2:	sub    ebp,eax
   177c4:	add    r14,rdx
   177c7:	jmp    176b6 <bdrv_pread_em+0x56>
   177cc:	nop    DWORD PTR [rax+0x0]
   177d0:	mov    rdx,QWORD PTR [rsi]
   177d3:	lea    rdi,[r14+0x8]
   177d7:	and    rdi,0xfffffffffffffff8
   177db:	mov    QWORD PTR [r14],rdx
   177de:	mov    edx,ebx
   177e0:	mov    rcx,QWORD PTR [rsi+rdx*1-0x8]
   177e5:	mov    QWORD PTR [r14+rdx*1-0x8],rcx
   177ea:	mov    rcx,r14
   177ed:	sub    rcx,rdi
   177f0:	sub    rsi,rcx
   177f3:	add    ecx,ebx
   177f5:	shr    ecx,0x3
   177f8:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   177fb:	mov    ebp,r12d
   177fe:	add    r15,0x1
   17802:	add    r14,rax
   17805:	sub    ebp,ebx
   17807:	jne    176a9 <bdrv_pread_em+0x49>
   1780d:	jmp    176ba <bdrv_pread_em+0x5a>
   17812:	nop    WORD PTR [rax+rax*1+0x0]
   17818:	mov    edx,DWORD PTR [rsi]
   1781a:	mov    DWORD PTR [r14],edx
   1781d:	mov    edx,ebx
   1781f:	mov    ecx,DWORD PTR [rsi+rdx*1-0x4]
   17823:	mov    DWORD PTR [r14+rdx*1-0x4],ecx
   17828:	jmp    177fb <bdrv_pread_em+0x19b>
   1782a:	nop    WORD PTR [rax+rax*1+0x0]
   17830:	mov    eax,0xfffffffb
   17835:	jmp    176bd <bdrv_pread_em+0x5d>
   1783a:	call   3190 <__stack_chk_fail@plt>
   1783f:	nop

0000000000017840 <guess_disk_lchs>:
   17840:	push   r15
   17842:	push   r14
   17844:	mov    r14,rdi
   17847:	push   r13
   17849:	mov    r13,rdx
   1784c:	push   r12
   1784e:	mov    r12,rcx
   17851:	push   rbp
   17852:	mov    rbp,rsi
   17855:	push   rbx
   17856:	sub    rsp,0x218
   1785d:	mov    rax,QWORD PTR fs:0x28
   17866:	mov    QWORD PTR [rsp+0x208],rax
   1786e:	xor    eax,eax
   17870:	mov    rax,QWORD PTR [rdi+0x38]
   17874:	test   rax,rax
   17877:	je     17968 <guess_disk_lchs+0x128>
   1787d:	mov    rax,QWORD PTR [rax+0xa8]
   17884:	test   rax,rax
   17887:	je     17970 <guess_disk_lchs+0x130>
   1788d:	call   rax
   1788f:	test   rax,rax
   17892:	js     17968 <guess_disk_lchs+0x128>
   17898:	sar    rax,0x9
   1789c:	mov    rbx,rax
   1789f:	mov    r15,rsp
   178a2:	xor    esi,esi
   178a4:	mov    ecx,0x1
   178a9:	mov    rdi,r14
   178ac:	mov    rdx,r15
   178af:	call   17550 <bdrv_read>
   178b4:	test   eax,eax
   178b6:	js     17939 <guess_disk_lchs+0xf9>
   178bc:	cmp    BYTE PTR [rsp+0x1fe],0x55
   178c4:	jne    17939 <guess_disk_lchs+0xf9>
   178c6:	cmp    BYTE PTR [rsp+0x1ff],0xaa
   178ce:	jne    17939 <guess_disk_lchs+0xf9>
   178d0:	mov    rcx,r15
   178d3:	lea    r8,[r15+0x40]
   178d7:	mov    eax,DWORD PTR [rcx+0x1ca]
   178dd:	test   eax,eax
   178df:	je     17930 <guess_disk_lchs+0xf0>
   178e1:	movzx  eax,BYTE PTR [rcx+0x1c3]
   178e8:	test   al,al
   178ea:	je     17930 <guess_disk_lchs+0xf0>
   178ec:	movzx  esi,BYTE PTR [rcx+0x1c4]
   178f3:	and    esi,0x3f
   178f6:	je     17930 <guess_disk_lchs+0xf0>
   178f8:	lea    edi,[rax+0x1]
   178fb:	movzx  esi,sil
   178ff:	mov    rax,rbx
   17902:	xor    edx,edx
   17904:	mov    r9d,edi
   17907:	imul   r9d,esi
   1790b:	movsxd r9,r9d
   1790e:	div    r9
   17911:	lea    edx,[rax-0x1]
   17914:	cmp    edx,0x3ffe
   1791a:	ja     17930 <guess_disk_lchs+0xf0>
   1791c:	mov    DWORD PTR [r13+0x0],edi
   17920:	mov    DWORD PTR [r12],esi
   17924:	mov    DWORD PTR [rbp+0x0],eax
   17927:	xor    eax,eax
   17929:	jmp    1793e <guess_disk_lchs+0xfe>
   1792b:	nop    DWORD PTR [rax+rax*1+0x0]
   17930:	add    rcx,0x10
   17934:	cmp    r8,rcx
   17937:	jne    178d7 <guess_disk_lchs+0x97>
   17939:	mov    eax,0xffffffff
   1793e:	mov    rbx,QWORD PTR [rsp+0x208]
   17946:	xor    rbx,QWORD PTR fs:0x28
   1794f:	jne    1797c <guess_disk_lchs+0x13c>
   17951:	add    rsp,0x218
   17958:	pop    rbx
   17959:	pop    rbp
   1795a:	pop    r12
   1795c:	pop    r13
   1795e:	pop    r14
   17960:	pop    r15
   17962:	ret    
   17963:	nop    DWORD PTR [rax+rax*1+0x0]
   17968:	xor    ebx,ebx
   1796a:	jmp    1789f <guess_disk_lchs+0x5f>
   1796f:	nop
   17970:	mov    rax,QWORD PTR [rdi]
   17973:	shl    rax,0x9
   17977:	jmp    1788f <guess_disk_lchs+0x4f>
   1797c:	call   3190 <__stack_chk_fail@plt>
   17981:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1798c:	nop    DWORD PTR [rax+0x0]

0000000000017990 <bdrv_write>:
   17990:	push   r15
   17992:	push   r14
   17994:	push   r13
   17996:	push   r12
   17998:	push   rbp
   17999:	push   rbx
   1799a:	sub    rsp,0x18
   1799e:	mov    r14,QWORD PTR [rdi+0x38]
   179a2:	test   r14,r14
   179a5:	je     17a9e <bdrv_write+0x10e>
   179ab:	mov    eax,DWORD PTR [rdi+0x8]
   179ae:	mov    r12,rdi
   179b1:	test   eax,eax
   179b3:	jne    17a97 <bdrv_write+0x107>
   179b9:	mov    rbx,rsi
   179bc:	mov    r15d,ecx
   179bf:	neg    rsi
   179c2:	mov    r13,rdx
   179c5:	mov    rcx,rbx
   179c8:	mov    ebp,r15d
   179cb:	shl    rcx,0x9
   179cf:	test   rbx,rbx
   179d2:	cmovns rsi,rcx
   179d6:	shl    ebp,0x9
   179d9:	mov    QWORD PTR [rsp+0x8],rcx
   179de:	movsxd rdx,ebp
   179e1:	call   17140 <bdrv_check_byte_request>
   179e6:	test   eax,eax
   179e8:	jne    17a90 <bdrv_write+0x100>
   179ee:	mov    rax,QWORD PTR [r14+0x98]
   179f5:	test   rax,rax
   179f8:	je     17a70 <bdrv_write+0xe0>
   179fa:	xor    r15d,r15d
   179fd:	jmp    17a12 <bdrv_write+0x82>
   179ff:	nop
   17a00:	add    r15d,ebx
   17a03:	add    r13,rbx
   17a06:	cmp    r15d,ebp
   17a09:	je     17a58 <bdrv_write+0xc8>
   17a0b:	mov    rax,QWORD PTR [r14+0x98]
   17a12:	mov    ecx,ebp
   17a14:	mov    rdx,r13
   17a17:	mov    rsi,QWORD PTR [rsp+0x8]
   17a1c:	mov    rdi,r12
   17a1f:	sub    ecx,r15d
   17a22:	call   rax
   17a24:	movsxd rbx,eax
   17a27:	test   ebx,ebx
   17a29:	jns    17a00 <bdrv_write+0x70>
   17a2b:	mov    edx,ebx
   17a2d:	lea    rsi,[rip+0x8945]        # 20379 <__FUNCTION__.13813+0x41>
   17a34:	mov    edi,0x1
   17a39:	xor    eax,eax
   17a3b:	call   34d0 <__printf_chk@plt>
   17a40:	add    rsp,0x18
   17a44:	mov    eax,ebx
   17a46:	pop    rbx
   17a47:	pop    rbp
   17a48:	pop    r12
   17a4a:	pop    r13
   17a4c:	pop    r14
   17a4e:	pop    r15
   17a50:	ret    
   17a51:	nop    DWORD PTR [rax+0x0]
   17a58:	add    QWORD PTR [r12+0x868],r15
   17a60:	xor    ebx,ebx
   17a62:	add    QWORD PTR [r12+0x878],0x1
   17a6b:	jmp    17a40 <bdrv_write+0xb0>
   17a6d:	nop    DWORD PTR [rax]
   17a70:	mov    rax,QWORD PTR [r14+0x28]
   17a74:	add    rsp,0x18
   17a78:	mov    ecx,r15d
   17a7b:	mov    rdx,r13
   17a7e:	mov    rsi,rbx
   17a81:	mov    rdi,r12
   17a84:	pop    rbx
   17a85:	pop    rbp
   17a86:	pop    r12
   17a88:	pop    r13
   17a8a:	pop    r14
   17a8c:	pop    r15
   17a8e:	jmp    rax
   17a90:	mov    ebx,0xfffffffb
   17a95:	jmp    17a40 <bdrv_write+0xb0>
   17a97:	mov    ebx,0xfffffff3
   17a9c:	jmp    17a40 <bdrv_write+0xb0>
   17a9e:	mov    ebx,0xffffff85
   17aa3:	jmp    17a40 <bdrv_write+0xb0>
   17aa5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000017ab0 <bdrv_commit>:
   17ab0:	push   r15
   17ab2:	push   r14
   17ab4:	push   r13
   17ab6:	push   r12
   17ab8:	push   rbp
   17ab9:	push   rbx
   17aba:	sub    rsp,0x238
   17ac1:	mov    r15,QWORD PTR [rdi+0x38]
   17ac5:	mov    rax,QWORD PTR fs:0x28
   17ace:	mov    QWORD PTR [rsp+0x228],rax
   17ad6:	xor    eax,eax
   17ad8:	test   r15,r15
   17adb:	je     17c18 <bdrv_commit+0x168>
   17ae1:	mov    eax,DWORD PTR [rdi+0x8]
   17ae4:	mov    r12,rdi
   17ae7:	mov    DWORD PTR [rsp+0xc],eax
   17aeb:	test   eax,eax
   17aed:	jne    17c04 <bdrv_commit+0x154>
   17af3:	cmp    QWORD PTR [rdi+0x850],0x0
   17afb:	je     17c0e <bdrv_commit+0x15e>
   17b01:	mov    rax,QWORD PTR [r15+0xa8]
   17b08:	test   rax,rax
   17b0b:	je     17bf8 <bdrv_commit+0x148>
   17b11:	call   rax
   17b13:	sar    rax,0x9
   17b17:	mov    r14,rax
   17b1a:	test   rax,rax
   17b1d:	jle    17b53 <bdrv_commit+0xa3>
   17b1f:	lea    rax,[rsp+0x1c]
   17b24:	xor    ebx,ebx
   17b26:	lea    r13,[rsp+0x20]
   17b2b:	mov    QWORD PTR [rsp],rax
   17b2f:	mov    rcx,QWORD PTR [rsp]
   17b33:	mov    edx,0x10000
   17b38:	mov    rsi,rbx
   17b3b:	mov    rdi,r12
   17b3e:	call   QWORD PTR [r15+0x48]
   17b42:	test   eax,eax
   17b44:	jne    17b70 <bdrv_commit+0xc0>
   17b46:	movsxd rax,DWORD PTR [rsp+0x1c]
   17b4b:	add    rbx,rax
   17b4e:	cmp    rbx,r14
   17b51:	jl     17b2f <bdrv_commit+0x7f>
   17b53:	mov    rax,QWORD PTR [r15+0x58]
   17b57:	test   rax,rax
   17b5a:	je     17bc8 <bdrv_commit+0x118>
   17b5c:	mov    rdi,r12
   17b5f:	call   rax
   17b61:	mov    DWORD PTR [rsp+0xc],eax
   17b65:	jmp    17bc8 <bdrv_commit+0x118>
   17b67:	nop    WORD PTR [rax+rax*1+0x0]
   17b70:	mov    eax,DWORD PTR [rsp+0x1c]
   17b74:	test   eax,eax
   17b76:	jle    17b4e <bdrv_commit+0x9e>
   17b78:	xor    ebp,ebp
   17b7a:	jmp    17ba9 <bdrv_commit+0xf9>
   17b7c:	nop    DWORD PTR [rax+0x0]
   17b80:	mov    rdi,QWORD PTR [r12+0x850]
   17b88:	mov    ecx,0x1
   17b8d:	mov    rdx,r13
   17b90:	mov    rsi,rbx
   17b93:	call   17990 <bdrv_write>
   17b98:	test   eax,eax
   17b9a:	jne    17bc0 <bdrv_commit+0x110>
   17b9c:	add    rbx,0x1
   17ba0:	add    ebp,0x1
   17ba3:	cmp    DWORD PTR [rsp+0x1c],ebp
   17ba7:	jle    17b4e <bdrv_commit+0x9e>
   17ba9:	mov    ecx,0x1
   17bae:	mov    rdx,r13
   17bb1:	mov    rsi,rbx
   17bb4:	mov    rdi,r12
   17bb7:	call   17550 <bdrv_read>
   17bbc:	test   eax,eax
   17bbe:	je     17b80 <bdrv_commit+0xd0>
   17bc0:	mov    DWORD PTR [rsp+0xc],0xfffffffb
   17bc8:	mov    rdx,QWORD PTR [rsp+0x228]
   17bd0:	xor    rdx,QWORD PTR fs:0x28
   17bd9:	mov    eax,DWORD PTR [rsp+0xc]
   17bdd:	jne    17c22 <bdrv_commit+0x172>
   17bdf:	add    rsp,0x238
   17be6:	pop    rbx
   17be7:	pop    rbp
   17be8:	pop    r12
   17bea:	pop    r13
   17bec:	pop    r14
   17bee:	pop    r15
   17bf0:	ret    
   17bf1:	nop    DWORD PTR [rax+0x0]
   17bf8:	mov    rax,QWORD PTR [rdi]
   17bfb:	shl    rax,0x9
   17bff:	jmp    17b13 <bdrv_commit+0x63>
   17c04:	mov    DWORD PTR [rsp+0xc],0xfffffff3
   17c0c:	jmp    17bc8 <bdrv_commit+0x118>
   17c0e:	mov    DWORD PTR [rsp+0xc],0xffffffa1
   17c16:	jmp    17bc8 <bdrv_commit+0x118>
   17c18:	mov    DWORD PTR [rsp+0xc],0xffffff85
   17c20:	jmp    17bc8 <bdrv_commit+0x118>
   17c22:	call   3190 <__stack_chk_fail@plt>
   17c27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000017c30 <bdrv_pwrite_em>:
   17c30:	push   r15
   17c32:	mov    r15d,ecx
   17c35:	push   r14
   17c37:	mov    r14d,ecx
   17c3a:	push   r13
   17c3c:	mov    r13,rsi
   17c3f:	push   r12
   17c41:	mov    r12,rdx
   17c44:	push   rbp
   17c45:	push   rbx
   17c46:	mov    ebx,esi
   17c48:	neg    ebx
   17c4a:	and    ebx,0x1ff
   17c50:	sub    rsp,0x228
   17c57:	mov    QWORD PTR [rsp],rdi
   17c5b:	mov    rax,QWORD PTR fs:0x28
   17c64:	mov    QWORD PTR [rsp+0x218],rax
   17c6c:	xor    eax,eax
   17c6e:	cmp    ecx,ebx
   17c70:	cmovle ebx,ecx
   17c73:	sar    r13,0x9
   17c77:	test   ebx,ebx
   17c79:	jg     17d50 <bdrv_pwrite_em+0x120>
   17c7f:	mov    ebx,r14d
   17c82:	sar    ebx,0x9
   17c85:	test   ebx,ebx
   17c87:	jg     17cc0 <bdrv_pwrite_em+0x90>
   17c89:	test   r14d,r14d
   17c8c:	jg     17cf1 <bdrv_pwrite_em+0xc1>
   17c8e:	mov    eax,r15d
   17c91:	mov    rcx,QWORD PTR [rsp+0x218]
   17c99:	xor    rcx,QWORD PTR fs:0x28
   17ca2:	jne    17e2c <bdrv_pwrite_em+0x1fc>
   17ca8:	add    rsp,0x228
   17caf:	pop    rbx
   17cb0:	pop    rbp
   17cb1:	pop    r12
   17cb3:	pop    r13
   17cb5:	pop    r14
   17cb7:	pop    r15
   17cb9:	ret    
   17cba:	nop    WORD PTR [rax+rax*1+0x0]
   17cc0:	mov    rdi,QWORD PTR [rsp]
   17cc4:	mov    ecx,ebx
   17cc6:	mov    rdx,r12
   17cc9:	mov    rsi,r13
   17ccc:	call   17990 <bdrv_write>
   17cd1:	test   eax,eax
   17cd3:	js     17d40 <bdrv_pwrite_em+0x110>
   17cd5:	mov    eax,r14d
   17cd8:	movsxd rbx,ebx
   17cdb:	and    eax,0xfffffe00
   17ce0:	add    r13,rbx
   17ce3:	movsxd rdx,eax
   17ce6:	sub    r14d,eax
   17ce9:	add    r12,rdx
   17cec:	test   r14d,r14d
   17cef:	jle    17c8e <bdrv_pwrite_em+0x5e>
   17cf1:	mov    rbp,QWORD PTR [rsp]
   17cf5:	lea    rbx,[rsp+0x10]
   17cfa:	mov    ecx,0x1
   17cff:	mov    rsi,r13
   17d02:	mov    rdx,rbx
   17d05:	mov    rdi,rbp
   17d08:	call   17550 <bdrv_read>
   17d0d:	test   eax,eax
   17d0f:	js     17d40 <bdrv_pwrite_em+0x110>
   17d11:	movsxd rdx,r14d
   17d14:	mov    ecx,0x200
   17d19:	mov    rsi,r12
   17d1c:	mov    rdi,rbx
   17d1f:	call   3360 <__memcpy_chk@plt>
   17d24:	mov    ecx,0x1
   17d29:	mov    rdx,rbx
   17d2c:	mov    rsi,r13
   17d2f:	mov    rdi,rbp
   17d32:	call   17990 <bdrv_write>
   17d37:	test   eax,eax
   17d39:	jns    17c8e <bdrv_pwrite_em+0x5e>
   17d3f:	nop
   17d40:	mov    eax,0xfffffffb
   17d45:	jmp    17c91 <bdrv_pwrite_em+0x61>
   17d4a:	nop    WORD PTR [rax+rax*1+0x0]
   17d50:	lea    r14,[rsp+0x10]
   17d55:	mov    rbp,rsi
   17d58:	mov    ecx,0x1
   17d5d:	mov    rsi,r13
   17d60:	mov    rdx,r14
   17d63:	call   17550 <bdrv_read>
   17d68:	test   eax,eax
   17d6a:	js     17d40 <bdrv_pwrite_em+0x110>
   17d6c:	movsxd rax,ebx
   17d6f:	and    ebp,0x1ff
   17d75:	mov    QWORD PTR [rsp+0x8],rax
   17d7a:	add    rbp,r14
   17d7d:	cmp    ebx,0x8
   17d80:	jae    17db0 <bdrv_pwrite_em+0x180>
   17d82:	test   bl,0x4
   17d85:	jne    17e18 <bdrv_pwrite_em+0x1e8>
   17d8b:	test   ebx,ebx
   17d8d:	je     17ddf <bdrv_pwrite_em+0x1af>
   17d8f:	movzx  eax,BYTE PTR [r12]
   17d94:	mov    BYTE PTR [rbp+0x0],al
   17d97:	test   bl,0x2
   17d9a:	je     17ddf <bdrv_pwrite_em+0x1af>
   17d9c:	mov    eax,ebx
   17d9e:	movzx  edx,WORD PTR [r12+rax*1-0x2]
   17da4:	mov    WORD PTR [rbp+rax*1-0x2],dx
   17da9:	jmp    17ddf <bdrv_pwrite_em+0x1af>
   17dab:	nop    DWORD PTR [rax+rax*1+0x0]
   17db0:	mov    rax,QWORD PTR [r12]
   17db4:	lea    rdi,[rbp+0x8]
   17db8:	mov    rsi,r12
   17dbb:	and    rdi,0xfffffffffffffff8
   17dbf:	mov    QWORD PTR [rbp+0x0],rax
   17dc3:	mov    eax,ebx
   17dc5:	mov    rdx,QWORD PTR [r12+rax*1-0x8]
   17dca:	mov    QWORD PTR [rbp+rax*1-0x8],rdx
   17dcf:	sub    rbp,rdi
   17dd2:	sub    rsi,rbp
   17dd5:	add    ebp,ebx
   17dd7:	shr    ebp,0x3
   17dda:	mov    ecx,ebp
   17ddc:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   17ddf:	mov    rdi,QWORD PTR [rsp]
   17de3:	mov    ecx,0x1
   17de8:	mov    rdx,r14
   17deb:	mov    rsi,r13
   17dee:	call   17990 <bdrv_write>
   17df3:	test   eax,eax
   17df5:	js     17d40 <bdrv_pwrite_em+0x110>
   17dfb:	mov    r14d,r15d
   17dfe:	add    r13,0x1
   17e02:	add    r12,QWORD PTR [rsp+0x8]
   17e07:	sub    r14d,ebx
   17e0a:	jne    17c7f <bdrv_pwrite_em+0x4f>
   17e10:	jmp    17c8e <bdrv_pwrite_em+0x5e>
   17e15:	nop    DWORD PTR [rax]
   17e18:	mov    eax,DWORD PTR [r12]
   17e1c:	mov    DWORD PTR [rbp+0x0],eax
   17e1f:	mov    eax,ebx
   17e21:	mov    edx,DWORD PTR [r12+rax*1-0x4]
   17e26:	mov    DWORD PTR [rbp+rax*1-0x4],edx
   17e2a:	jmp    17ddf <bdrv_pwrite_em+0x1af>
   17e2c:	call   3190 <__stack_chk_fail@plt>
   17e31:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   17e3c:	nop    DWORD PTR [rax+0x0]

0000000000017e40 <bdrv_pread>:
   17e40:	push   r14
   17e42:	push   r13
   17e44:	push   r12
   17e46:	push   rbp
   17e47:	push   rbx
   17e48:	mov    r14,QWORD PTR [rdi+0x38]
   17e4c:	test   r14,r14
   17e4f:	je     17eae <bdrv_pread+0x6e>
   17e51:	mov    r13,rdx
   17e54:	movsxd rdx,ecx
   17e57:	mov    r12d,ecx
   17e5a:	mov    rbp,rsi
   17e5d:	mov    rbx,rdi
   17e60:	call   17140 <bdrv_check_byte_request>
   17e65:	test   eax,eax
   17e67:	jne    17ea0 <bdrv_pread+0x60>
   17e69:	mov    rax,QWORD PTR [r14+0x90]
   17e70:	mov    ecx,r12d
   17e73:	mov    rdx,r13
   17e76:	mov    rsi,rbp
   17e79:	mov    rdi,rbx
   17e7c:	test   rax,rax
   17e7f:	je     17e90 <bdrv_pread+0x50>
   17e81:	pop    rbx
   17e82:	pop    rbp
   17e83:	pop    r12
   17e85:	pop    r13
   17e87:	pop    r14
   17e89:	jmp    rax
   17e8b:	nop    DWORD PTR [rax+rax*1+0x0]
   17e90:	pop    rbx
   17e91:	pop    rbp
   17e92:	pop    r12
   17e94:	pop    r13
   17e96:	pop    r14
   17e98:	jmp    17660 <bdrv_pread_em>
   17e9d:	nop    DWORD PTR [rax]
   17ea0:	mov    eax,0xfffffffb
   17ea5:	pop    rbx
   17ea6:	pop    rbp
   17ea7:	pop    r12
   17ea9:	pop    r13
   17eab:	pop    r14
   17ead:	ret    
   17eae:	mov    eax,0xffffff85
   17eb3:	jmp    17ea5 <bdrv_pread+0x65>
   17eb5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000017ec0 <bdrv_open2>:
   17ec0:	push   r15
   17ec2:	mov    r15,rdi
   17ec5:	push   r14
   17ec7:	push   r13
   17ec9:	push   r12
   17ecb:	mov    r12d,edx
   17ece:	push   rbp
   17ecf:	mov    rbp,rsi
   17ed2:	push   rbx
   17ed3:	mov    rbx,rcx
   17ed6:	sub    rsp,0x28c8
   17edd:	mov    rax,QWORD PTR fs:0x28
   17ee6:	mov    QWORD PTR [rsp+0x28b8],rax
   17eee:	xor    eax,eax
   17ef0:	and    edx,0x8
   17ef3:	mov    DWORD PTR [rdi+0x8],0x0
   17efa:	mov    DWORD PTR [rdi+0x848],0x0
   17f04:	mov    QWORD PTR [rdi+0x14],0x0
   17f0c:	je     17ff3 <bdrv_open2+0x133>
   17f12:	lea    rdi,[rip+0x7729]        # 1f642 <desc_template.13939+0x382>
   17f19:	call   17330 <bdrv_new>
   17f1e:	xor    edx,edx
   17f20:	mov    rsi,rbp
   17f23:	mov    rdi,rax
   17f26:	mov    r14,rax
   17f29:	call   18440 <bdrv_open>
   17f2e:	mov    r13d,eax
   17f31:	test   eax,eax
   17f33:	js     182b0 <bdrv_open2+0x3f0>
   17f39:	mov    rdx,QWORD PTR [r14+0x38]
   17f3d:	test   rdx,rdx
   17f40:	je     1813d <bdrv_open2+0x27d>
   17f46:	mov    rax,QWORD PTR [rdx+0xa8]
   17f4d:	test   rax,rax
   17f50:	je     18370 <bdrv_open2+0x4b0>
   17f56:	mov    rdi,r14
   17f59:	call   rax
   17f5b:	mov    rdx,QWORD PTR [r14+0x38]
   17f5f:	sar    rax,0x9
   17f63:	mov    QWORD PTR [rsp],rax
   17f67:	test   rdx,rdx
   17f6a:	je     18148 <bdrv_open2+0x288>
   17f70:	cmp    QWORD PTR [rdx+0x88],0x0
   17f78:	mov    rdi,r14
   17f7b:	je     1814b <bdrv_open2+0x28b>
   17f81:	lea    r14,[rsp+0x8b0]
   17f89:	lea    r13,[rsp+0x18b0]
   17f91:	call   17470 <bdrv_delete>
   17f96:	mov    esi,0x1000
   17f9b:	mov    rdi,r14
   17f9e:	call   17410 <get_tmp_filename>
   17fa3:	mov    rcx,rbp
   17fa6:	mov    esi,0x1000
   17fab:	mov    rdi,r13
   17fae:	lea    rdx,[rip+0x4125]        # 1c0da <_IO_stdin_used+0xda>
   17fb5:	xor    eax,eax
   17fb7:	call   31f0 <snprintf@plt>
   17fbc:	mov    rax,QWORD PTR [rip+0xfdd5]        # 27d98 <bdrv_qcow2+0x38>
   17fc3:	test   rax,rax
   17fc6:	je     18398 <bdrv_open2+0x4d8>
   17fcc:	mov    rdx,r13
   17fcf:	xor    ecx,ecx
   17fd1:	mov    rsi,QWORD PTR [rsp]
   17fd5:	mov    rdi,r14
   17fd8:	call   rax
   17fda:	mov    r13d,eax
   17fdd:	test   eax,eax
   17fdf:	js     180c9 <bdrv_open2+0x209>
   17fe5:	mov    DWORD PTR [r15+0x848],0x1
   17ff0:	mov    rbp,r14
   17ff3:	lea    rdi,[r15+0x48]
   17ff7:	mov    rdx,rbp
   17ffa:	mov    esi,0x400
   17fff:	call   48a0 <pstrcpy>
   18004:	test   r12b,0x10
   18008:	jne    180f8 <bdrv_open2+0x238>
   1800e:	test   rbx,rbx
   18011:	je     18188 <bdrv_open2+0x2c8>
   18017:	mov    QWORD PTR [r15+0x38],rbx
   1801b:	movsxd rdi,DWORD PTR [rbx+0x8]
   1801f:	mov    r14d,r12d
   18022:	and    r14d,0xe3
   18029:	call   4d00 <qemu_mallocz>
   1802e:	mov    edx,r14d
   18031:	mov    rsi,rbp
   18034:	mov    rdi,r15
   18037:	mov    QWORD PTR [r15+0x40],rax
   1803b:	call   QWORD PTR [rbx+0x18]
   1803e:	mov    r13d,eax
   18041:	cmp    eax,0xfffffff3
   18044:	je     18288 <bdrv_open2+0x3c8>
   1804a:	cmp    eax,0xffffffff
   1804d:	je     18288 <bdrv_open2+0x3c8>
   18053:	test   r13d,r13d
   18056:	js     18338 <bdrv_open2+0x478>
   1805c:	cmp    QWORD PTR [rbx+0xa8],0x0
   18064:	je     1808f <bdrv_open2+0x1cf>
   18066:	mov    rax,QWORD PTR [r15+0x38]
   1806a:	test   rax,rax
   1806d:	je     183a3 <bdrv_open2+0x4e3>
   18073:	mov    rax,QWORD PTR [rax+0xa8]
   1807a:	test   rax,rax
   1807d:	je     18388 <bdrv_open2+0x4c8>
   18083:	mov    rdi,r15
   18086:	call   rax
   18088:	sar    rax,0x9
   1808c:	mov    QWORD PTR [r15],rax
   1808f:	mov    eax,DWORD PTR [r15+0x848]
   18096:	test   eax,eax
   18098:	jne    18328 <bdrv_open2+0x468>
   1809e:	cmp    BYTE PTR [r15+0x448],0x0
   180a6:	jne    182c0 <bdrv_open2+0x400>
   180ac:	mov    rax,QWORD PTR [r15+0x28]
   180b0:	xor    r13d,r13d
   180b3:	mov    DWORD PTR [r15+0x84c],0x1
   180be:	test   rax,rax
   180c1:	je     180c9 <bdrv_open2+0x209>
   180c3:	mov    rdi,QWORD PTR [r15+0x30]
   180c7:	call   rax
   180c9:	mov    rcx,QWORD PTR [rsp+0x28b8]
   180d1:	xor    rcx,QWORD PTR fs:0x28
   180da:	mov    eax,r13d
   180dd:	jne    183af <bdrv_open2+0x4ef>
   180e3:	add    rsp,0x28c8
   180ea:	pop    rbx
   180eb:	pop    rbp
   180ec:	pop    r12
   180ee:	pop    r13
   180f0:	pop    r14
   180f2:	pop    r15
   180f4:	ret    
   180f5:	nop    DWORD PTR [rax]
   180f8:	mov    rdi,rbp
   180fb:	mov    r14d,r12d
   180fe:	call   16fa0 <find_protocol>
   18103:	test   rax,rax
   18106:	mov    rbx,rax
   18109:	lea    rax,[rip+0x10290]        # 283a0 <bdrv_raw>
   18110:	cmove  rbx,rax
   18114:	and    r14d,0xffffffe7
   18118:	mov    QWORD PTR [r15+0x38],rbx
   1811c:	movsxd rdi,DWORD PTR [rbx+0x8]
   18120:	call   4d00 <qemu_mallocz>
   18125:	mov    edx,r14d
   18128:	mov    rsi,rbp
   1812b:	mov    rdi,r15
   1812e:	mov    QWORD PTR [r15+0x40],rax
   18132:	call   QWORD PTR [rbx+0x18]
   18135:	mov    r13d,eax
   18138:	jmp    18053 <bdrv_open2+0x193>
   1813d:	mov    QWORD PTR [rsp],0xffffffffffffffff
   18145:	nop    DWORD PTR [rax]
   18148:	mov    rdi,r14
   1814b:	lea    r14,[rsp+0x8b0]
   18153:	lea    r13,[rsp+0x18b0]
   1815b:	call   17470 <bdrv_delete>
   18160:	mov    rdi,r14
   18163:	mov    esi,0x1000
   18168:	call   17410 <get_tmp_filename>
   1816d:	mov    edx,0x1000
   18172:	mov    rsi,r13
   18175:	mov    rdi,rbp
   18178:	call   3270 <__realpath_chk@plt>
   1817d:	jmp    17fbc <bdrv_open2+0xfc>
   18182:	nop    WORD PTR [rax+rax*1+0x0]
   18188:	xor    edx,edx
   1818a:	lea    rsi,[rip+0x81fb]        # 2038c <__FUNCTION__.13813+0x54>
   18191:	mov    rdi,rbp
   18194:	call   4960 <strstart>
   18199:	lea    rbx,[rip+0x100c0]        # 28260 <bdrv_host_device>
   181a0:	mov    r13d,eax
   181a3:	test   eax,eax
   181a5:	jne    18017 <bdrv_open2+0x157>
   181ab:	lea    rdx,[rsp+0x20]
   181b0:	mov    rsi,rbp
   181b3:	mov    edi,0x1
   181b8:	call   3150 <__xstat64@plt>
   181bd:	test   eax,eax
   181bf:	js     181d5 <bdrv_open2+0x315>
   181c1:	mov    eax,DWORD PTR [rsp+0x38]
   181c5:	and    eax,0xb000
   181ca:	cmp    eax,0x2000
   181cf:	je     18017 <bdrv_open2+0x157>
   181d5:	mov    rdi,rbp
   181d8:	call   16fa0 <find_protocol>
   181dd:	mov    rbx,rax
   181e0:	test   rax,rax
   181e3:	jne    18017 <bdrv_open2+0x157>
   181e9:	xor    edx,edx
   181eb:	lea    rdi,[rsp+0x18]
   181f0:	mov    rsi,rbp
   181f3:	call   183c0 <bdrv_file_open>
   181f8:	test   eax,eax
   181fa:	js     18276 <bdrv_open2+0x3b6>
   181fc:	lea    rax,[rsp+0xb0]
   18204:	mov    rdi,QWORD PTR [rsp+0x18]
   18209:	xor    esi,esi
   1820b:	mov    ecx,0x800
   18210:	mov    rdx,rax
   18213:	mov    QWORD PTR [rsp+0x8],rax
   18218:	call   17e40 <bdrv_pread>
   1821d:	mov    rdi,QWORD PTR [rsp+0x18]
   18222:	mov    r14d,eax
   18225:	mov    DWORD PTR [rsp],eax
   18228:	call   17470 <bdrv_delete>
   1822d:	test   r14d,r14d
   18230:	js     18276 <bdrv_open2+0x3b6>
   18232:	mov    r14,QWORD PTR [rip+0x102f7]        # 28530 <first_drv>
   18239:	test   r14,r14
   1823c:	je     18276 <bdrv_open2+0x3b6>
   1823e:	xchg   ax,ax
   18240:	mov    rax,QWORD PTR [r14+0x10]
   18244:	test   rax,rax
   18247:	je     18261 <bdrv_open2+0x3a1>
   18249:	mov    rdx,rbp
   1824c:	mov    esi,DWORD PTR [rsp]
   1824f:	mov    rdi,QWORD PTR [rsp+0x8]
   18254:	call   rax
   18256:	cmp    eax,r13d
   18259:	jle    18261 <bdrv_open2+0x3a1>
   1825b:	mov    rbx,r14
   1825e:	mov    r13d,eax
   18261:	mov    r14,QWORD PTR [r14+0x138]
   18268:	test   r14,r14
   1826b:	jne    18240 <bdrv_open2+0x380>
   1826d:	test   rbx,rbx
   18270:	jne    18017 <bdrv_open2+0x157>
   18276:	mov    r13d,0xfffffffe
   1827c:	jmp    18351 <bdrv_open2+0x491>
   18281:	nop    DWORD PTR [rax+0x0]
   18288:	mov    edx,r12d
   1828b:	mov    rsi,rbp
   1828e:	mov    rdi,r15
   18291:	and    edx,0xe1
   18297:	call   QWORD PTR [rbx+0x18]
   1829a:	mov    DWORD PTR [r15+0x8],0x1
   182a2:	mov    r13d,eax
   182a5:	jmp    18053 <bdrv_open2+0x193>
   182aa:	nop    WORD PTR [rax+rax*1+0x0]
   182b0:	mov    rdi,r14
   182b3:	call   17470 <bdrv_delete>
   182b8:	jmp    180c9 <bdrv_open2+0x209>
   182bd:	nop    DWORD PTR [rax]
   182c0:	lea    rdi,[rip+0x737b]        # 1f642 <desc_template.13939+0x382>
   182c7:	lea    rbx,[rsp+0x18b0]
   182cf:	call   17330 <bdrv_new>
   182d4:	mov    rdx,rbp
   182d7:	mov    esi,0x1000
   182dc:	mov    rdi,rbx
   182df:	mov    QWORD PTR [r15+0x850],rax
   182e6:	lea    rcx,[r15+0x448]
   182ed:	call   17220 <path_combine>
   182f2:	mov    rdi,QWORD PTR [r15+0x850]
   182f9:	mov    edx,r14d
   182fc:	mov    rsi,rbx
   182ff:	lea    rcx,[rip+0x1009a]        # 283a0 <bdrv_raw>
   18306:	call   17ec0 <bdrv_open2>
   1830b:	mov    r13d,eax
   1830e:	test   eax,eax
   18310:	jns    180ac <bdrv_open2+0x1ec>
   18316:	mov    rdi,r15
   18319:	call   174e0 <bdrv_close>
   1831e:	jmp    180c9 <bdrv_open2+0x209>
   18323:	nop    DWORD PTR [rax+rax*1+0x0]
   18328:	mov    rdi,rbp
   1832b:	call   30c0 <unlink@plt>
   18330:	jmp    1809e <bdrv_open2+0x1de>
   18335:	nop    DWORD PTR [rax]
   18338:	mov    rdi,QWORD PTR [r15+0x40]
   1833c:	call   4ca0 <qemu_free>
   18341:	mov    QWORD PTR [r15+0x40],0x0
   18349:	mov    QWORD PTR [r15+0x38],0x0
   18351:	mov    edx,DWORD PTR [r15+0x848]
   18358:	test   edx,edx
   1835a:	je     180c9 <bdrv_open2+0x209>
   18360:	mov    rdi,rbp
   18363:	call   30c0 <unlink@plt>
   18368:	jmp    180c9 <bdrv_open2+0x209>
   1836d:	nop    DWORD PTR [rax]
   18370:	mov    r13,QWORD PTR [r14]
   18373:	shl    r13,0x9
   18377:	sar    r13,0x9
   1837b:	mov    QWORD PTR [rsp],r13
   1837f:	jmp    17f70 <bdrv_open2+0xb0>
   18384:	nop    DWORD PTR [rax+0x0]
   18388:	mov    rax,QWORD PTR [r15]
   1838b:	shl    rax,0x9
   1838f:	sar    rax,0x9
   18393:	jmp    1808c <bdrv_open2+0x1cc>
   18398:	mov    r13d,0xffffffa1
   1839e:	jmp    180c9 <bdrv_open2+0x209>
   183a3:	mov    rax,0xffffffffffffffff
   183aa:	jmp    1808c <bdrv_open2+0x1cc>
   183af:	call   3190 <__stack_chk_fail@plt>
   183b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   183bf:	nop

00000000000183c0 <bdrv_file_open>:
   183c0:	push   r13
   183c2:	mov    r13,rdi
   183c5:	lea    rdi,[rip+0x7276]        # 1f642 <desc_template.13939+0x382>
   183cc:	push   r12
   183ce:	mov    r12,rsi
   183d1:	push   rbp
   183d2:	push   rbx
   183d3:	mov    ebx,edx
   183d5:	or     ebx,0x10
   183d8:	sub    rsp,0x18
   183dc:	call   17330 <bdrv_new>
   183e1:	mov    edx,ebx
   183e3:	lea    rcx,[rip+0xffb6]        # 283a0 <bdrv_raw>
   183ea:	mov    rsi,r12
   183ed:	mov    rdi,rax
   183f0:	mov    rbp,rax
   183f3:	call   17ec0 <bdrv_open2>
   183f8:	test   eax,eax
   183fa:	js     18420 <bdrv_file_open+0x60>
   183fc:	mov    DWORD PTR [rbp+0x880],0x1
   18406:	xor    eax,eax
   18408:	mov    QWORD PTR [r13+0x0],rbp
   1840c:	add    rsp,0x18
   18410:	pop    rbx
   18411:	pop    rbp
   18412:	pop    r12
   18414:	pop    r13
   18416:	ret    
   18417:	nop    WORD PTR [rax+rax*1+0x0]
   18420:	mov    rdi,rbp
   18423:	mov    DWORD PTR [rsp+0xc],eax
   18427:	call   17470 <bdrv_delete>
   1842c:	mov    eax,DWORD PTR [rsp+0xc]
   18430:	add    rsp,0x18
   18434:	pop    rbx
   18435:	pop    rbp
   18436:	pop    r12
   18438:	pop    r13
   1843a:	ret    
   1843b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000018440 <bdrv_open>:
   18440:	xor    ecx,ecx
   18442:	jmp    17ec0 <bdrv_open2>
   18447:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018450 <bdrv_pwrite>:
   18450:	push   r14
   18452:	push   r13
   18454:	push   r12
   18456:	push   rbp
   18457:	push   rbx
   18458:	mov    r14,QWORD PTR [rdi+0x38]
   1845c:	test   r14,r14
   1845f:	je     184be <bdrv_pwrite+0x6e>
   18461:	mov    r13,rdx
   18464:	movsxd rdx,ecx
   18467:	mov    r12d,ecx
   1846a:	mov    rbp,rsi
   1846d:	mov    rbx,rdi
   18470:	call   17140 <bdrv_check_byte_request>
   18475:	test   eax,eax
   18477:	jne    184b0 <bdrv_pwrite+0x60>
   18479:	mov    rax,QWORD PTR [r14+0x98]
   18480:	mov    ecx,r12d
   18483:	mov    rdx,r13
   18486:	mov    rsi,rbp
   18489:	mov    rdi,rbx
   1848c:	test   rax,rax
   1848f:	je     184a0 <bdrv_pwrite+0x50>
   18491:	pop    rbx
   18492:	pop    rbp
   18493:	pop    r12
   18495:	pop    r13
   18497:	pop    r14
   18499:	jmp    rax
   1849b:	nop    DWORD PTR [rax+rax*1+0x0]
   184a0:	pop    rbx
   184a1:	pop    rbp
   184a2:	pop    r12
   184a4:	pop    r13
   184a6:	pop    r14
   184a8:	jmp    17c30 <bdrv_pwrite_em>
   184ad:	nop    DWORD PTR [rax]
   184b0:	mov    eax,0xfffffffb
   184b5:	pop    rbx
   184b6:	pop    rbp
   184b7:	pop    r12
   184b9:	pop    r13
   184bb:	pop    r14
   184bd:	ret    
   184be:	mov    eax,0xffffff85
   184c3:	jmp    184b5 <bdrv_pwrite+0x65>
   184c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000184d0 <bdrv_truncate>:
   184d0:	mov    rax,QWORD PTR [rdi+0x38]
   184d4:	test   rax,rax
   184d7:	je     184e7 <bdrv_truncate+0x17>
   184d9:	mov    rax,QWORD PTR [rax+0xa0]
   184e0:	test   rax,rax
   184e3:	je     184ed <bdrv_truncate+0x1d>
   184e5:	jmp    rax
   184e7:	mov    eax,0xffffff85
   184ec:	ret    
   184ed:	mov    eax,0xffffffa1
   184f2:	ret    
   184f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   184fe:	xchg   ax,ax

0000000000018500 <bdrv_getlength>:
   18500:	mov    rax,QWORD PTR [rdi+0x38]
   18504:	test   rax,rax
   18507:	je     18528 <bdrv_getlength+0x28>
   18509:	mov    rax,QWORD PTR [rax+0xa8]
   18510:	test   rax,rax
   18513:	je     18520 <bdrv_getlength+0x20>
   18515:	jmp    rax
   18517:	nop    WORD PTR [rax+rax*1+0x0]
   18520:	mov    rax,QWORD PTR [rdi]
   18523:	shl    rax,0x9
   18527:	ret    
   18528:	mov    rax,0xffffffffffffff85
   1852f:	ret    

0000000000018530 <bdrv_get_geometry>:
   18530:	mov    rax,QWORD PTR [rdi+0x38]
   18534:	push   rbx
   18535:	mov    rbx,rsi
   18538:	test   rax,rax
   1853b:	je     18560 <bdrv_get_geometry+0x30>
   1853d:	mov    rax,QWORD PTR [rax+0xa8]
   18544:	test   rax,rax
   18547:	je     18570 <bdrv_get_geometry+0x40>
   18549:	call   rax
   1854b:	test   rax,rax
   1854e:	js     18560 <bdrv_get_geometry+0x30>
   18550:	sar    rax,0x9
   18554:	mov    QWORD PTR [rbx],rax
   18557:	pop    rbx
   18558:	ret    
   18559:	nop    DWORD PTR [rax+0x0]
   18560:	xor    eax,eax
   18562:	mov    QWORD PTR [rbx],rax
   18565:	pop    rbx
   18566:	ret    
   18567:	nop    WORD PTR [rax+rax*1+0x0]
   18570:	mov    rax,QWORD PTR [rdi]
   18573:	shl    rax,0x9
   18577:	jmp    1854b <bdrv_get_geometry+0x1b>
   18579:	nop    DWORD PTR [rax+0x0]

0000000000018580 <bdrv_guess_geometry>:
   18580:	push   r15
   18582:	push   r14
   18584:	push   r13
   18586:	mov    r13,rdx
   18589:	push   r12
   1858b:	mov    r12,rsi
   1858e:	push   rbp
   1858f:	mov    rbp,rcx
   18592:	push   rbx
   18593:	mov    rbx,rdi
   18596:	sub    rsp,0x28
   1859a:	mov    rax,QWORD PTR fs:0x28
   185a3:	mov    QWORD PTR [rsp+0x18],rax
   185a8:	xor    eax,eax
   185aa:	mov    rax,QWORD PTR [rdi+0x38]
   185ae:	test   rax,rax
   185b1:	je     18628 <bdrv_guess_geometry+0xa8>
   185b3:	mov    rax,QWORD PTR [rax+0xa8]
   185ba:	test   rax,rax
   185bd:	je     18730 <bdrv_guess_geometry+0x1b0>
   185c3:	call   rax
   185c5:	test   rax,rax
   185c8:	js     18628 <bdrv_guess_geometry+0xa8>
   185ca:	sar    rax,0x9
   185ce:	mov    r14,rax
   185d1:	mov    ecx,DWORD PTR [rbx+0x884]
   185d7:	mov    edx,DWORD PTR [rbx+0x888]
   185dd:	mov    eax,DWORD PTR [rbx+0x88c]
   185e3:	mov    DWORD PTR [rsp+0xc],ecx
   185e7:	mov    DWORD PTR [rsp+0x10],edx
   185eb:	mov    DWORD PTR [rsp+0x14],eax
   185ef:	test   ecx,ecx
   185f1:	je     18630 <bdrv_guess_geometry+0xb0>
   185f3:	mov    DWORD PTR [r12],ecx
   185f7:	mov    DWORD PTR [r13+0x0],edx
   185fb:	mov    DWORD PTR [rbp+0x0],eax
   185fe:	mov    rax,QWORD PTR [rsp+0x18]
   18603:	xor    rax,QWORD PTR fs:0x28
   1860c:	jne    1877a <bdrv_guess_geometry+0x1fa>
   18612:	add    rsp,0x28
   18616:	pop    rbx
   18617:	pop    rbp
   18618:	pop    r12
   1861a:	pop    r13
   1861c:	pop    r14
   1861e:	pop    r15
   18620:	ret    
   18621:	nop    DWORD PTR [rax+0x0]
   18628:	xor    r14d,r14d
   1862b:	jmp    185d1 <bdrv_guess_geometry+0x51>
   1862d:	nop    DWORD PTR [rax]
   18630:	lea    rcx,[rsp+0x14]
   18635:	lea    rdx,[rsp+0x10]
   1863a:	mov    rdi,rbx
   1863d:	mov    r15d,DWORD PTR [rbx+0x890]
   18644:	lea    rsi,[rsp+0xc]
   18649:	call   17840 <guess_disk_lchs>
   1864e:	test   eax,eax
   18650:	je     186f0 <bdrv_guess_geometry+0x170>
   18656:	xor    ecx,ecx
   18658:	movabs rsi,0x820820820820821
   18662:	mov    rdx,r14
   18665:	shr    rdx,0x4
   18669:	mov    rax,rdx
   1866c:	mul    rsi
   1866f:	shr    rdx,1
   18672:	mov    eax,edx
   18674:	cmp    edx,0x3fff
   1867a:	jle    18740 <bdrv_guess_geometry+0x1c0>
   18680:	mov    DWORD PTR [rsp+0xc],0x3fff
   18688:	mov    eax,0x3fff
   1868d:	mov    DWORD PTR [r12],eax
   18691:	mov    eax,0x3f
   18696:	mov    DWORD PTR [r13+0x0],0x10
   1869e:	mov    DWORD PTR [rbp+0x0],0x3f
   186a5:	test   cl,cl
   186a7:	je     186d0 <bdrv_guess_geometry+0x150>
   186a9:	mov    eax,DWORD PTR [r12]
   186ad:	imul   eax,DWORD PTR [r13+0x0]
   186b2:	cmp    eax,0x20000
   186b7:	jg     18750 <bdrv_guess_geometry+0x1d0>
   186bd:	mov    DWORD PTR [rbx+0x890],0x3
   186c7:	mov    eax,DWORD PTR [rbp+0x0]
   186ca:	nop    WORD PTR [rax+rax*1+0x0]
   186d0:	mov    edx,DWORD PTR [r13+0x0]
   186d4:	mov    ecx,DWORD PTR [r12]
   186d8:	mov    DWORD PTR [rbx+0x88c],eax
   186de:	mov    DWORD PTR [rbx+0x884],ecx
   186e4:	mov    DWORD PTR [rbx+0x888],edx
   186ea:	jmp    185fe <bdrv_guess_geometry+0x7e>
   186ef:	nop
   186f0:	mov    eax,DWORD PTR [rsp+0x10]
   186f4:	test   r15d,r15d
   186f7:	sete   cl
   186fa:	cmp    eax,0x10
   186fd:	jg     18658 <bdrv_guess_geometry+0xd8>
   18703:	mov    edx,DWORD PTR [rsp+0xc]
   18707:	mov    DWORD PTR [r12],edx
   1870b:	mov    DWORD PTR [r13+0x0],eax
   1870f:	mov    eax,DWORD PTR [rsp+0x14]
   18713:	mov    DWORD PTR [rbp+0x0],eax
   18716:	test   r15d,r15d
   18719:	jne    186d0 <bdrv_guess_geometry+0x150>
   1871b:	mov    DWORD PTR [rbx+0x890],0x1
   18725:	mov    eax,DWORD PTR [rbp+0x0]
   18728:	jmp    186d0 <bdrv_guess_geometry+0x150>
   1872a:	nop    WORD PTR [rax+rax*1+0x0]
   18730:	mov    rax,QWORD PTR [rdi]
   18733:	shl    rax,0x9
   18737:	jmp    185c5 <bdrv_guess_geometry+0x45>
   1873c:	nop    DWORD PTR [rax+0x0]
   18740:	cmp    edx,0x1
   18743:	jle    18768 <bdrv_guess_geometry+0x1e8>
   18745:	mov    DWORD PTR [rsp+0xc],edx
   18749:	jmp    1868d <bdrv_guess_geometry+0x10d>
   1874e:	xchg   ax,ax
   18750:	mov    DWORD PTR [rbx+0x890],0x2
   1875a:	mov    eax,DWORD PTR [rbp+0x0]
   1875d:	jmp    186d0 <bdrv_guess_geometry+0x150>
   18762:	nop    WORD PTR [rax+rax*1+0x0]
   18768:	mov    DWORD PTR [rsp+0xc],0x2
   18770:	mov    eax,0x2
   18775:	jmp    1868d <bdrv_guess_geometry+0x10d>
   1877a:	call   3190 <__stack_chk_fail@plt>
   1877f:	nop

0000000000018780 <bdrv_set_geometry_hint>:
   18780:	mov    DWORD PTR [rdi+0x884],esi
   18786:	mov    DWORD PTR [rdi+0x888],edx
   1878c:	mov    DWORD PTR [rdi+0x88c],ecx
   18792:	ret    
   18793:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1879e:	xchg   ax,ax

00000000000187a0 <bdrv_set_type_hint>:
   187a0:	mov    DWORD PTR [rdi+0x894],esi
   187a6:	sub    esi,0x1
   187a9:	xor    eax,eax
   187ab:	cmp    esi,0x1
   187ae:	setbe  al
   187b1:	mov    DWORD PTR [rdi+0xc],eax
   187b4:	ret    
   187b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000187c0 <bdrv_set_translation_hint>:
   187c0:	mov    DWORD PTR [rdi+0x890],esi
   187c6:	ret    
   187c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000187d0 <bdrv_get_geometry_hint>:
   187d0:	mov    eax,DWORD PTR [rdi+0x884]
   187d6:	mov    DWORD PTR [rsi],eax
   187d8:	mov    eax,DWORD PTR [rdi+0x888]
   187de:	mov    DWORD PTR [rdx],eax
   187e0:	mov    eax,DWORD PTR [rdi+0x88c]
   187e6:	mov    DWORD PTR [rcx],eax
   187e8:	ret    
   187e9:	nop    DWORD PTR [rax+0x0]

00000000000187f0 <bdrv_get_type_hint>:
   187f0:	mov    eax,DWORD PTR [rdi+0x894]
   187f6:	ret    
   187f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018800 <bdrv_get_translation_hint>:
   18800:	mov    eax,DWORD PTR [rdi+0x890]
   18806:	ret    
   18807:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018810 <bdrv_is_removable>:
   18810:	mov    eax,DWORD PTR [rdi+0xc]
   18813:	ret    
   18814:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1881f:	nop

0000000000018820 <bdrv_is_read_only>:
   18820:	mov    eax,DWORD PTR [rdi+0x8]
   18823:	ret    
   18824:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1882f:	nop

0000000000018830 <bdrv_is_sg>:
   18830:	mov    eax,DWORD PTR [rdi+0x1c]
   18833:	ret    
   18834:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1883f:	nop

0000000000018840 <bdrv_set_change_cb>:
   18840:	mov    QWORD PTR [rdi+0x28],rsi
   18844:	mov    QWORD PTR [rdi+0x30],rdx
   18848:	ret    
   18849:	nop    DWORD PTR [rax+0x0]

0000000000018850 <bdrv_is_encrypted>:
   18850:	mov    rdx,QWORD PTR [rdi+0x850]
   18857:	test   rdx,rdx
   1885a:	je     18868 <bdrv_is_encrypted+0x18>
   1885c:	mov    edx,DWORD PTR [rdx+0x14]
   1885f:	mov    eax,0x1
   18864:	test   edx,edx
   18866:	jne    1886b <bdrv_is_encrypted+0x1b>
   18868:	mov    eax,DWORD PTR [rdi+0x14]
   1886b:	ret    
   1886c:	nop    DWORD PTR [rax+0x0]

0000000000018870 <bdrv_key_required>:
   18870:	mov    rdx,QWORD PTR [rdi+0x850]
   18877:	test   rdx,rdx
   1887a:	je     1888f <bdrv_key_required+0x1f>
   1887c:	mov    esi,DWORD PTR [rdx+0x14]
   1887f:	test   esi,esi
   18881:	je     1888f <bdrv_key_required+0x1f>
   18883:	mov    ecx,DWORD PTR [rdx+0x18]
   18886:	mov    eax,0x1
   1888b:	test   ecx,ecx
   1888d:	je     188a0 <bdrv_key_required+0x30>
   1888f:	mov    eax,DWORD PTR [rdi+0x14]
   18892:	test   eax,eax
   18894:	je     188a0 <bdrv_key_required+0x30>
   18896:	mov    edx,DWORD PTR [rdi+0x18]
   18899:	xor    eax,eax
   1889b:	test   edx,edx
   1889d:	sete   al
   188a0:	ret    
   188a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   188ac:	nop    DWORD PTR [rax+0x0]

00000000000188b0 <bdrv_set_key>:
   188b0:	push   rbp
   188b1:	mov    rbp,rsi
   188b4:	push   rbx
   188b5:	mov    rbx,rdi
   188b8:	sub    rsp,0x8
   188bc:	mov    rdi,QWORD PTR [rdi+0x850]
   188c3:	test   rdi,rdi
   188c6:	je     188cf <bdrv_set_key+0x1f>
   188c8:	mov    edx,DWORD PTR [rdi+0x14]
   188cb:	test   edx,edx
   188cd:	jne    18908 <bdrv_set_key+0x58>
   188cf:	mov    eax,DWORD PTR [rbx+0x14]
   188d2:	test   eax,eax
   188d4:	je     18920 <bdrv_set_key+0x70>
   188d6:	mov    rax,QWORD PTR [rbx+0x38]
   188da:	test   rax,rax
   188dd:	je     18920 <bdrv_set_key+0x70>
   188df:	mov    rax,QWORD PTR [rax+0x50]
   188e3:	test   rax,rax
   188e6:	je     18920 <bdrv_set_key+0x70>
   188e8:	mov    rsi,rbp
   188eb:	mov    rdi,rbx
   188ee:	call   rax
   188f0:	xor    edx,edx
   188f2:	test   eax,eax
   188f4:	sete   dl
   188f7:	mov    DWORD PTR [rbx+0x18],edx
   188fa:	add    rsp,0x8
   188fe:	pop    rbx
   188ff:	pop    rbp
   18900:	ret    
   18901:	nop    DWORD PTR [rax+0x0]
   18908:	call   188b0 <bdrv_set_key>
   1890d:	test   eax,eax
   1890f:	js     188fa <bdrv_set_key+0x4a>
   18911:	mov    eax,DWORD PTR [rbx+0x14]
   18914:	test   eax,eax
   18916:	jne    188d6 <bdrv_set_key+0x26>
   18918:	jmp    188fa <bdrv_set_key+0x4a>
   1891a:	nop    WORD PTR [rax+rax*1+0x0]
   18920:	mov    eax,0xffffffff
   18925:	jmp    188fa <bdrv_set_key+0x4a>
   18927:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018930 <bdrv_get_format>:
   18930:	mov    rax,QWORD PTR [rdi+0x38]
   18934:	mov    rcx,rsi
   18937:	test   rax,rax
   1893a:	je     18950 <bdrv_get_format+0x20>
   1893c:	movsxd rsi,edx
   1893f:	mov    rdx,QWORD PTR [rax]
   18942:	mov    rdi,rcx
   18945:	jmp    48a0 <pstrcpy>
   1894a:	nop    WORD PTR [rax+rax*1+0x0]
   18950:	mov    BYTE PTR [rsi],0x0
   18953:	ret    
   18954:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1895f:	nop

0000000000018960 <bdrv_iterate_format>:
   18960:	push   r12
   18962:	push   rbp
   18963:	push   rbx
   18964:	mov    rbx,QWORD PTR [rip+0xfbc5]        # 28530 <first_drv>
   1896b:	test   rbx,rbx
   1896e:	je     18995 <bdrv_iterate_format+0x35>
   18970:	mov    r12,rdi
   18973:	mov    rbp,rsi
   18976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18980:	mov    rsi,QWORD PTR [rbx]
   18983:	mov    rdi,rbp
   18986:	call   r12
   18989:	mov    rbx,QWORD PTR [rbx+0x138]
   18990:	test   rbx,rbx
   18993:	jne    18980 <bdrv_iterate_format+0x20>
   18995:	pop    rbx
   18996:	pop    rbp
   18997:	pop    r12
   18999:	ret    
   1899a:	nop    WORD PTR [rax+rax*1+0x0]

00000000000189a0 <bdrv_find>:
   189a0:	push   rbp
   189a1:	push   rbx
   189a2:	sub    rsp,0x8
   189a6:	mov    rbx,QWORD PTR [rip+0xfcab]        # 28658 <bdrv_first>
   189ad:	test   rbx,rbx
   189b0:	je     189df <bdrv_find+0x3f>
   189b2:	mov    rbp,rdi
   189b5:	jmp    189cc <bdrv_find+0x2c>
   189b7:	nop    WORD PTR [rax+rax*1+0x0]
   189c0:	mov    rbx,QWORD PTR [rbx+0x8b8]
   189c7:	test   rbx,rbx
   189ca:	je     189df <bdrv_find+0x3f>
   189cc:	lea    rsi,[rbx+0x898]
   189d3:	mov    rdi,rbp
   189d6:	call   3330 <strcmp@plt>
   189db:	test   eax,eax
   189dd:	jne    189c0 <bdrv_find+0x20>
   189df:	add    rsp,0x8
   189e3:	mov    rax,rbx
   189e6:	pop    rbx
   189e7:	pop    rbp
   189e8:	ret    
   189e9:	nop    DWORD PTR [rax+0x0]

00000000000189f0 <bdrv_iterate>:
   189f0:	push   r12
   189f2:	push   rbp
   189f3:	push   rbx
   189f4:	mov    rbx,QWORD PTR [rip+0xfc5d]        # 28658 <bdrv_first>
   189fb:	test   rbx,rbx
   189fe:	je     18a25 <bdrv_iterate+0x35>
   18a00:	mov    r12,rdi
   18a03:	mov    rbp,rsi
   18a06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18a10:	mov    rsi,rbx
   18a13:	mov    rdi,rbp
   18a16:	call   r12
   18a19:	mov    rbx,QWORD PTR [rbx+0x8b8]
   18a20:	test   rbx,rbx
   18a23:	jne    18a10 <bdrv_iterate+0x20>
   18a25:	pop    rbx
   18a26:	pop    rbp
   18a27:	pop    r12
   18a29:	ret    
   18a2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018a30 <bdrv_get_device_name>:
   18a30:	lea    rax,[rdi+0x898]
   18a37:	ret    
   18a38:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000018a40 <bdrv_flush>:
   18a40:	push   rbx
   18a41:	mov    rbx,rdi
   18a44:	jmp    18a6e <bdrv_flush+0x2e>
   18a46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18a50:	mov    rax,QWORD PTR [rax+0x40]
   18a54:	test   rax,rax
   18a57:	je     18a62 <bdrv_flush+0x22>
   18a59:	mov    rdi,rbx
   18a5c:	call   rax
   18a5e:	test   eax,eax
   18a60:	jne    18a7c <bdrv_flush+0x3c>
   18a62:	mov    rbx,QWORD PTR [rbx+0x850]
   18a69:	test   rbx,rbx
   18a6c:	je     18a80 <bdrv_flush+0x40>
   18a6e:	mov    rax,QWORD PTR [rbx+0x38]
   18a72:	test   rax,rax
   18a75:	jne    18a50 <bdrv_flush+0x10>
   18a77:	mov    eax,0xffffffea
   18a7c:	pop    rbx
   18a7d:	ret    
   18a7e:	xchg   ax,ax
   18a80:	xor    eax,eax
   18a82:	pop    rbx
   18a83:	ret    
   18a84:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18a8f:	nop

0000000000018a90 <bdrv_flush_all>:
   18a90:	push   r13
   18a92:	push   r12
   18a94:	xor    r12d,r12d
   18a97:	push   rbp
   18a98:	push   rbx
   18a99:	sub    rsp,0x8
   18a9d:	mov    rbp,QWORD PTR [rip+0xfbb4]        # 28658 <bdrv_first>
   18aa4:	test   rbp,rbp
   18aa7:	je     18aec <bdrv_flush_all+0x5c>
   18aa9:	mov    r13d,0xffffffea
   18aaf:	nop
   18ab0:	mov    rax,QWORD PTR [rbp+0x38]
   18ab4:	test   rax,rax
   18ab7:	je     18ae0 <bdrv_flush_all+0x50>
   18ab9:	mov    ecx,DWORD PTR [rbp+0x8]
   18abc:	test   ecx,ecx
   18abe:	jne    18ae0 <bdrv_flush_all+0x50>
   18ac0:	mov    edx,DWORD PTR [rbp+0xc]
   18ac3:	test   edx,edx
   18ac5:	je     18b04 <bdrv_flush_all+0x74>
   18ac7:	mov    rdx,QWORD PTR [rax+0xf0]
   18ace:	test   rdx,rdx
   18ad1:	je     18b04 <bdrv_flush_all+0x74>
   18ad3:	mov    rdi,rbp
   18ad6:	call   rdx
   18ad8:	test   eax,eax
   18ada:	jne    18b00 <bdrv_flush_all+0x70>
   18adc:	nop    DWORD PTR [rax+0x0]
   18ae0:	mov    rbp,QWORD PTR [rbp+0x8b8]
   18ae7:	test   rbp,rbp
   18aea:	jne    18ab0 <bdrv_flush_all+0x20>
   18aec:	add    rsp,0x8
   18af0:	mov    eax,r12d
   18af3:	pop    rbx
   18af4:	pop    rbp
   18af5:	pop    r12
   18af7:	pop    r13
   18af9:	ret    
   18afa:	nop    WORD PTR [rax+rax*1+0x0]
   18b00:	mov    rax,QWORD PTR [rbp+0x38]
   18b04:	mov    rbx,rbp
   18b07:	jmp    18b32 <bdrv_flush_all+0xa2>
   18b09:	nop    DWORD PTR [rax+0x0]
   18b10:	mov    rax,QWORD PTR [rax+0x40]
   18b14:	test   rax,rax
   18b17:	je     18b22 <bdrv_flush_all+0x92>
   18b19:	mov    rdi,rbx
   18b1c:	call   rax
   18b1e:	test   eax,eax
   18b20:	jne    18b40 <bdrv_flush_all+0xb0>
   18b22:	mov    rbx,QWORD PTR [rbx+0x850]
   18b29:	test   rbx,rbx
   18b2c:	je     18ae0 <bdrv_flush_all+0x50>
   18b2e:	mov    rax,QWORD PTR [rbx+0x38]
   18b32:	test   rax,rax
   18b35:	jne    18b10 <bdrv_flush_all+0x80>
   18b37:	mov    r12d,r13d
   18b3a:	jmp    18ae0 <bdrv_flush_all+0x50>
   18b3c:	nop    DWORD PTR [rax+0x0]
   18b40:	mov    r12d,eax
   18b43:	jmp    18ae0 <bdrv_flush_all+0x50>
   18b45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000018b50 <bdrv_is_allocated>:
   18b50:	mov    rax,QWORD PTR [rdi+0x38]
   18b54:	mov    rax,QWORD PTR [rax+0x48]
   18b58:	test   rax,rax
   18b5b:	je     18b60 <bdrv_is_allocated+0x10>
   18b5d:	jmp    rax
   18b5f:	nop
   18b60:	mov    rax,QWORD PTR [rdi]
   18b63:	cmp    rax,rsi
   18b66:	jg     18b78 <bdrv_is_allocated+0x28>
   18b68:	mov    DWORD PTR [rcx],0x0
   18b6e:	xor    eax,eax
   18b70:	ret    
   18b71:	nop    DWORD PTR [rax+0x0]
   18b78:	sub    rax,rsi
   18b7b:	movsxd rdx,edx
   18b7e:	cmp    rax,rdx
   18b81:	cmovle rdx,rax
   18b85:	mov    eax,0x1
   18b8a:	mov    DWORD PTR [rcx],edx
   18b8c:	ret    
   18b8d:	nop    DWORD PTR [rax]

0000000000018b90 <bdrv_info>:
   18b90:	push   rbx
   18b91:	mov    rbx,QWORD PTR [rip+0xfac0]        # 28658 <bdrv_first>
   18b98:	test   rbx,rbx
   18b9b:	jne    18c70 <bdrv_info+0xe0>
   18ba1:	jmp    18d40 <bdrv_info+0x1b0>
   18ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18bb0:	test   eax,eax
   18bb2:	je     18cf0 <bdrv_info+0x160>
   18bb8:	mov    esi,DWORD PTR [rbx+0xc]
   18bbb:	lea    rdi,[rip+0x77ea]        # 203ac <__FUNCTION__.13813+0x74>
   18bc2:	xor    eax,eax
   18bc4:	call   4440 <term_printf>
   18bc9:	mov    edx,DWORD PTR [rbx+0xc]
   18bcc:	test   edx,edx
   18bce:	jne    18cc0 <bdrv_info+0x130>
   18bd4:	cmp    QWORD PTR [rbx+0x38],0x0
   18bd9:	je     18cdc <bdrv_info+0x14c>
   18bdf:	xor    eax,eax
   18be1:	lea    rdi,[rip+0x77dd]        # 203c5 <__FUNCTION__.13813+0x8d>
   18be8:	call   4440 <term_printf>
   18bed:	lea    rdi,[rbx+0x48]
   18bf1:	call   4450 <term_print_filename>
   18bf6:	cmp    BYTE PTR [rbx+0x448],0x0
   18bfd:	jne    18d20 <bdrv_info+0x190>
   18c03:	mov    esi,DWORD PTR [rbx+0x8]
   18c06:	lea    rdi,[rip+0x77ce]        # 203db <__FUNCTION__.13813+0xa3>
   18c0d:	xor    eax,eax
   18c0f:	call   4440 <term_printf>
   18c14:	mov    rax,QWORD PTR [rbx+0x38]
   18c18:	lea    rdi,[rip+0x77c3]        # 203e2 <__FUNCTION__.13813+0xaa>
   18c1f:	mov    rsi,QWORD PTR [rax]
   18c22:	xor    eax,eax
   18c24:	call   4440 <term_printf>
   18c29:	mov    rax,QWORD PTR [rbx+0x850]
   18c30:	test   rax,rax
   18c33:	je     18c41 <bdrv_info+0xb1>
   18c35:	mov    eax,DWORD PTR [rax+0x14]
   18c38:	mov    esi,0x1
   18c3d:	test   eax,eax
   18c3f:	jne    18c44 <bdrv_info+0xb4>
   18c41:	mov    esi,DWORD PTR [rbx+0x14]
   18c44:	lea    rdi,[rip+0x779f]        # 203ea <__FUNCTION__.13813+0xb2>
   18c4b:	xor    eax,eax
   18c4d:	call   4440 <term_printf>
   18c52:	lea    rdi,[rip+0x69e8]        # 1f641 <desc_template.13939+0x381>
   18c59:	xor    eax,eax
   18c5b:	call   4440 <term_printf>
   18c60:	mov    rbx,QWORD PTR [rbx+0x8b8]
   18c67:	test   rbx,rbx
   18c6a:	je     18d40 <bdrv_info+0x1b0>
   18c70:	lea    rsi,[rbx+0x898]
   18c77:	lea    rdi,[rip+0x7719]        # 20397 <__FUNCTION__.13813+0x5f>
   18c7e:	xor    eax,eax
   18c80:	call   4440 <term_printf>
   18c85:	xor    eax,eax
   18c87:	lea    rdi,[rip+0x770d]        # 2039b <__FUNCTION__.13813+0x63>
   18c8e:	call   4440 <term_printf>
   18c93:	mov    eax,DWORD PTR [rbx+0x894]
   18c99:	cmp    eax,0x1
   18c9c:	je     18d08 <bdrv_info+0x178>
   18c9e:	cmp    eax,0x2
   18ca1:	jne    18bb0 <bdrv_info+0x20>
   18ca7:	lea    rdi,[rip+0x76f7]        # 203a5 <__FUNCTION__.13813+0x6d>
   18cae:	xor    eax,eax
   18cb0:	call   4440 <term_printf>
   18cb5:	jmp    18bb8 <bdrv_info+0x28>
   18cba:	nop    WORD PTR [rax+rax*1+0x0]
   18cc0:	mov    esi,DWORD PTR [rbx+0x10]
   18cc3:	xor    eax,eax
   18cc5:	lea    rdi,[rip+0x76ee]        # 203ba <__FUNCTION__.13813+0x82>
   18ccc:	call   4440 <term_printf>
   18cd1:	cmp    QWORD PTR [rbx+0x38],0x0
   18cd6:	jne    18bdf <bdrv_info+0x4f>
   18cdc:	lea    rdi,[rip+0x7715]        # 203f8 <__FUNCTION__.13813+0xc0>
   18ce3:	xor    eax,eax
   18ce5:	call   4440 <term_printf>
   18cea:	jmp    18c52 <bdrv_info+0xc2>
   18cef:	nop
   18cf0:	lea    rdi,[rip+0x76ab]        # 203a2 <__FUNCTION__.13813+0x6a>
   18cf7:	call   4440 <term_printf>
   18cfc:	jmp    18bb8 <bdrv_info+0x28>
   18d01:	nop    DWORD PTR [rax+0x0]
   18d08:	lea    rdi,[rip+0x7682]        # 20391 <__FUNCTION__.13813+0x59>
   18d0f:	xor    eax,eax
   18d11:	call   4440 <term_printf>
   18d16:	jmp    18bb8 <bdrv_info+0x28>
   18d1b:	nop    DWORD PTR [rax+rax*1+0x0]
   18d20:	lea    rdi,[rip+0x76a5]        # 203cc <__FUNCTION__.13813+0x94>
   18d27:	xor    eax,eax
   18d29:	call   4440 <term_printf>
   18d2e:	lea    rdi,[rbx+0x448]
   18d35:	call   4450 <term_print_filename>
   18d3a:	jmp    18c03 <bdrv_info+0x73>
   18d3f:	nop
   18d40:	pop    rbx
   18d41:	ret    
   18d42:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18d4d:	nop    DWORD PTR [rax]

0000000000018d50 <bdrv_info_stats>:
   18d50:	push   rbp
   18d51:	push   rbx
   18d52:	sub    rsp,0x8
   18d56:	mov    rbx,QWORD PTR [rip+0xf8fb]        # 28658 <bdrv_first>
   18d5d:	test   rbx,rbx
   18d60:	je     18da9 <bdrv_info_stats+0x59>
   18d62:	lea    rbp,[rip+0x771f]        # 20488 <__FUNCTION__.13813+0x150>
   18d69:	nop    DWORD PTR [rax+0x0]
   18d70:	mov    rcx,QWORD PTR [rbx+0x868]
   18d77:	mov    rdx,QWORD PTR [rbx+0x860]
   18d7e:	xor    eax,eax
   18d80:	lea    rsi,[rbx+0x898]
   18d87:	mov    r9,QWORD PTR [rbx+0x878]
   18d8e:	mov    r8,QWORD PTR [rbx+0x870]
   18d95:	mov    rdi,rbp
   18d98:	call   4440 <term_printf>
   18d9d:	mov    rbx,QWORD PTR [rbx+0x8b8]
   18da4:	test   rbx,rbx
   18da7:	jne    18d70 <bdrv_info_stats+0x20>
   18da9:	add    rsp,0x8
   18dad:	pop    rbx
   18dae:	pop    rbp
   18daf:	ret    

0000000000018db0 <bdrv_get_encrypted_filename>:
   18db0:	mov    rax,QWORD PTR [rdi+0x850]
   18db7:	test   rax,rax
   18dba:	je     18dc3 <bdrv_get_encrypted_filename+0x13>
   18dbc:	mov    ecx,DWORD PTR [rax+0x14]
   18dbf:	test   ecx,ecx
   18dc1:	jne    18dd8 <bdrv_get_encrypted_filename+0x28>
   18dc3:	mov    edx,DWORD PTR [rdi+0x14]
   18dc6:	xor    eax,eax
   18dc8:	test   edx,edx
   18dca:	je     18dd0 <bdrv_get_encrypted_filename+0x20>
   18dcc:	lea    rax,[rdi+0x48]
   18dd0:	ret    
   18dd1:	nop    DWORD PTR [rax+0x0]
   18dd8:	lea    rax,[rdi+0x448]
   18ddf:	ret    

0000000000018de0 <bdrv_get_backing_filename>:
   18de0:	cmp    QWORD PTR [rdi+0x850],0x0
   18de8:	mov    rax,rsi
   18deb:	movsxd rsi,edx
   18dee:	je     18e00 <bdrv_get_backing_filename+0x20>
   18df0:	lea    rdx,[rdi+0x448]
   18df7:	mov    rdi,rax
   18dfa:	jmp    48a0 <pstrcpy>
   18dff:	nop
   18e00:	lea    rdx,[rip+0x683b]        # 1f642 <desc_template.13939+0x382>
   18e07:	mov    rdi,rax
   18e0a:	jmp    48a0 <pstrcpy>
   18e0f:	nop

0000000000018e10 <bdrv_write_compressed>:
   18e10:	push   r15
   18e12:	push   r14
   18e14:	push   r13
   18e16:	push   r12
   18e18:	push   rbp
   18e19:	push   rbx
   18e1a:	sub    rsp,0x18
   18e1e:	mov    r14,QWORD PTR [rdi+0x38]
   18e22:	test   r14,r14
   18e25:	je     18ecb <bdrv_write_compressed+0xbb>
   18e2b:	mov    rax,rsi
   18e2e:	mov    r12,rsi
   18e31:	mov    r15d,ecx
   18e34:	mov    QWORD PTR [rsp+0x8],rdx
   18e39:	neg    rax
   18e3c:	shl    r12,0x9
   18e40:	test   rsi,rsi
   18e43:	mov    rbx,rsi
   18e46:	cmovs  r12,rax
   18e4a:	shl    r15d,0x9
   18e4e:	mov    r13d,ecx
   18e51:	mov    rbp,rdi
   18e54:	movsxd r15,r15d
   18e57:	mov    rdx,r15
   18e5a:	mov    rsi,r12
   18e5d:	call   17140 <bdrv_check_byte_request>
   18e62:	test   eax,eax
   18e64:	jne    18eb0 <bdrv_write_compressed+0xa0>
   18e66:	cmp    QWORD PTR [r14+0xb0],0x0
   18e6e:	je     18ec4 <bdrv_write_compressed+0xb4>
   18e70:	mov    rdx,r15
   18e73:	mov    rsi,r12
   18e76:	mov    rdi,rbp
   18e79:	call   17140 <bdrv_check_byte_request>
   18e7e:	test   eax,eax
   18e80:	jne    18eb0 <bdrv_write_compressed+0xa0>
   18e82:	mov    rax,QWORD PTR [r14+0xb0]
   18e89:	mov    ecx,r13d
   18e8c:	mov    rsi,rbx
   18e8f:	mov    rdi,rbp
   18e92:	mov    rdx,QWORD PTR [rsp+0x8]
   18e97:	add    rsp,0x18
   18e9b:	pop    rbx
   18e9c:	pop    rbp
   18e9d:	pop    r12
   18e9f:	pop    r13
   18ea1:	pop    r14
   18ea3:	pop    r15
   18ea5:	jmp    rax
   18ea7:	nop    WORD PTR [rax+rax*1+0x0]
   18eb0:	mov    eax,0xfffffffb
   18eb5:	add    rsp,0x18
   18eb9:	pop    rbx
   18eba:	pop    rbp
   18ebb:	pop    r12
   18ebd:	pop    r13
   18ebf:	pop    r14
   18ec1:	pop    r15
   18ec3:	ret    
   18ec4:	mov    eax,0xffffffa1
   18ec9:	jmp    18eb5 <bdrv_write_compressed+0xa5>
   18ecb:	mov    eax,0xffffff85
   18ed0:	jmp    18eb5 <bdrv_write_compressed+0xa5>
   18ed2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18edd:	nop    DWORD PTR [rax]

0000000000018ee0 <bdrv_get_info>:
   18ee0:	mov    rax,QWORD PTR [rdi+0x38]
   18ee4:	test   rax,rax
   18ee7:	je     18f06 <bdrv_get_info+0x26>
   18ee9:	cmp    QWORD PTR [rax+0xd8],0x0
   18ef1:	je     18f00 <bdrv_get_info+0x20>
   18ef3:	pxor   xmm0,xmm0
   18ef7:	movups XMMWORD PTR [rsi],xmm0
   18efa:	jmp    QWORD PTR [rax+0xd8]
   18f00:	mov    eax,0xffffffa1
   18f05:	ret    
   18f06:	mov    eax,0xffffff85
   18f0b:	ret    
   18f0c:	nop    DWORD PTR [rax+0x0]

0000000000018f10 <bdrv_put_buffer>:
   18f10:	mov    rax,QWORD PTR [rdi+0x38]
   18f14:	test   rax,rax
   18f17:	je     18f27 <bdrv_put_buffer+0x17>
   18f19:	mov    rax,QWORD PTR [rax+0xe0]
   18f20:	test   rax,rax
   18f23:	je     18f2d <bdrv_put_buffer+0x1d>
   18f25:	jmp    rax
   18f27:	mov    eax,0xffffff85
   18f2c:	ret    
   18f2d:	mov    eax,0xffffffa1
   18f32:	ret    
   18f33:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18f3e:	xchg   ax,ax

0000000000018f40 <bdrv_get_buffer>:
   18f40:	mov    rax,QWORD PTR [rdi+0x38]
   18f44:	test   rax,rax
   18f47:	je     18f57 <bdrv_get_buffer+0x17>
   18f49:	mov    rax,QWORD PTR [rax+0xe8]
   18f50:	test   rax,rax
   18f53:	je     18f5d <bdrv_get_buffer+0x1d>
   18f55:	jmp    rax
   18f57:	mov    eax,0xffffff85
   18f5c:	ret    
   18f5d:	mov    eax,0xffffffa1
   18f62:	ret    
   18f63:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18f6e:	xchg   ax,ax

0000000000018f70 <bdrv_snapshot_create>:
   18f70:	mov    rax,QWORD PTR [rdi+0x38]
   18f74:	test   rax,rax
   18f77:	je     18f87 <bdrv_snapshot_create+0x17>
   18f79:	mov    rax,QWORD PTR [rax+0xb8]
   18f80:	test   rax,rax
   18f83:	je     18f8d <bdrv_snapshot_create+0x1d>
   18f85:	jmp    rax
   18f87:	mov    eax,0xffffff85
   18f8c:	ret    
   18f8d:	mov    eax,0xffffffa1
   18f92:	ret    
   18f93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18f9e:	xchg   ax,ax

0000000000018fa0 <bdrv_snapshot_goto>:
   18fa0:	mov    rax,QWORD PTR [rdi+0x38]
   18fa4:	test   rax,rax
   18fa7:	je     18fb7 <bdrv_snapshot_goto+0x17>
   18fa9:	mov    rax,QWORD PTR [rax+0xc0]
   18fb0:	test   rax,rax
   18fb3:	je     18fbd <bdrv_snapshot_goto+0x1d>
   18fb5:	jmp    rax
   18fb7:	mov    eax,0xffffff85
   18fbc:	ret    
   18fbd:	mov    eax,0xffffffa1
   18fc2:	ret    
   18fc3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18fce:	xchg   ax,ax

0000000000018fd0 <bdrv_snapshot_delete>:
   18fd0:	mov    rax,QWORD PTR [rdi+0x38]
   18fd4:	test   rax,rax
   18fd7:	je     18fe7 <bdrv_snapshot_delete+0x17>
   18fd9:	mov    rax,QWORD PTR [rax+0xc8]
   18fe0:	test   rax,rax
   18fe3:	je     18fed <bdrv_snapshot_delete+0x1d>
   18fe5:	jmp    rax
   18fe7:	mov    eax,0xffffff85
   18fec:	ret    
   18fed:	mov    eax,0xffffffa1
   18ff2:	ret    
   18ff3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18ffe:	xchg   ax,ax

0000000000019000 <bdrv_snapshot_list>:
   19000:	mov    rax,QWORD PTR [rdi+0x38]
   19004:	test   rax,rax
   19007:	je     19017 <bdrv_snapshot_list+0x17>
   19009:	mov    rax,QWORD PTR [rax+0xd0]
   19010:	test   rax,rax
   19013:	je     1901d <bdrv_snapshot_list+0x1d>
   19015:	jmp    rax
   19017:	mov    eax,0xffffff85
   1901c:	ret    
   1901d:	mov    eax,0xffffffa1
   19022:	ret    
   19023:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1902e:	xchg   ax,ax

0000000000019030 <get_human_readable_size>:
   19030:	push   rbx
   19031:	movsxd rsi,esi
   19034:	mov    rbx,rdi
   19037:	cmp    rdx,0x3e7
   1903e:	jle    190d8 <get_human_readable_size+0xa8>
   19044:	cmp    rdx,0x27ff
   1904b:	jle    19170 <get_human_readable_size+0x140>
   19051:	cmp    rdx,0xf9fff
   19058:	jle    19180 <get_human_readable_size+0x150>
   1905e:	xor    edi,edi
   19060:	mov    ecx,0x400
   19065:	lea    rax,[rcx+rcx*4]
   19069:	mov    r8,rcx
   1906c:	add    edi,0x1
   1906f:	shl    rax,0xb
   19073:	shl    r8,0xa
   19077:	cmp    rdx,rax
   1907a:	jl     19100 <get_human_readable_size+0xd0>
   19080:	imul   rcx,rcx,0xfa000
   19087:	cmp    rdx,rcx
   1908a:	jl     19150 <get_human_readable_size+0x120>
   19090:	mov    rcx,r8
   19093:	cmp    edi,0x3
   19096:	jne    19065 <get_human_readable_size+0x35>
   19098:	sar    rcx,1
   1909b:	mov    edi,0x54
   190a0:	lea    rax,[rdx+rcx*1]
   190a4:	sub    rsp,0x8
   190a8:	mov    rcx,0xffffffffffffffff
   190af:	cqo    
   190b1:	push   rdi
   190b2:	mov    rdi,rbx
   190b5:	idiv   r8
   190b8:	mov    edx,0x1
   190bd:	lea    r8,[rip+0x7350]        # 20414 <__FUNCTION__.13813+0xdc>
   190c4:	mov    r9,rax
   190c7:	xor    eax,eax
   190c9:	call   3060 <__snprintf_chk@plt>
   190ce:	pop    rax
   190cf:	pop    rdx
   190d0:	mov    rax,rbx
   190d3:	pop    rbx
   190d4:	ret    
   190d5:	nop    DWORD PTR [rax]
   190d8:	mov    r9,rdx
   190db:	lea    r8,[rip+0x7326]        # 20408 <__FUNCTION__.13813+0xd0>
   190e2:	mov    edx,0x1
   190e7:	xor    eax,eax
   190e9:	mov    rcx,0xffffffffffffffff
   190f0:	call   3060 <__snprintf_chk@plt>
   190f5:	mov    rax,rbx
   190f8:	pop    rbx
   190f9:	ret    
   190fa:	nop    WORD PTR [rax+rax*1+0x0]
   19100:	pxor   xmm1,xmm1
   19104:	movsxd rdi,edi
   19107:	lea    rax,[rip+0x73bd]        # 204cb <suffixes.14512>
   1910e:	cvtsi2sd xmm1,r8
   19113:	movsx  r9d,BYTE PTR [rax+rdi*1]
   19118:	pxor   xmm0,xmm0
   1911c:	lea    r8,[rip+0x72e9]        # 2040c <__FUNCTION__.13813+0xd4>
   19123:	mov    rdi,rbx
   19126:	mov    eax,0x1
   1912b:	cvtsi2sd xmm0,rdx
   19130:	mov    rcx,0xffffffffffffffff
   19137:	mov    edx,0x1
   1913c:	divsd  xmm0,xmm1
   19140:	call   3060 <__snprintf_chk@plt>
   19145:	jmp    190d0 <get_human_readable_size+0xa0>
   19147:	nop    WORD PTR [rax+rax*1+0x0]
   19150:	movsxd rdi,edi
   19153:	lea    rax,[rip+0x7371]        # 204cb <suffixes.14512>
   1915a:	mov    rcx,r8
   1915d:	movsx  edi,BYTE PTR [rax+rdi*1]
   19161:	sar    rcx,1
   19164:	jmp    190a0 <get_human_readable_size+0x70>
   19169:	nop    DWORD PTR [rax+0x0]
   19170:	movsd  xmm1,QWORD PTR [rip+0x7358]        # 204d0 <suffixes.14512+0x5>
   19178:	mov    r9d,0x4b
   1917e:	jmp    19118 <get_human_readable_size+0xe8>
   19180:	mov    ecx,0x200
   19185:	mov    edi,0x4b
   1918a:	mov    r8d,0x400
   19190:	jmp    190a0 <get_human_readable_size+0x70>
   19195:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000191a0 <bdrv_snapshot_dump>:
   191a0:	push   r14
   191a2:	push   r13
   191a4:	push   r12
   191a6:	mov    r12,rdi
   191a9:	push   rbp
   191aa:	movsxd rbp,esi
   191ad:	push   rbx
   191ae:	sub    rsp,0x1e0
   191b5:	mov    rax,QWORD PTR fs:0x28
   191be:	mov    QWORD PTR [rsp+0x1d8],rax
   191c6:	xor    eax,eax
   191c8:	test   rdx,rdx
   191cb:	je     19378 <bdrv_snapshot_dump+0x1d8>
   191d1:	lea    r14,[rsp+0x10]
   191d6:	lea    rdi,[rsp+0x8]
   191db:	mov    rbx,rdx
   191de:	mov    eax,DWORD PTR [rdx+0x184]
   191e4:	mov    rsi,r14
   191e7:	lea    r13,[rsp+0xd0]
   191ef:	mov    QWORD PTR [rsp+0x8],rax
   191f4:	call   30e0 <localtime_r@plt>
   191f9:	mov    rcx,r14
   191fc:	mov    esi,0x80
   19201:	mov    rdi,r13
   19204:	lea    rdx,[rip+0x723f]        # 2044a <__FUNCTION__.13813+0x112>
   1920b:	lea    r14,[rsp+0x150]
   19213:	call   3510 <strftime@plt>
   19218:	mov    rcx,QWORD PTR [rbx+0x190]
   1921f:	sub    rsp,0x8
   19223:	movabs r9,0x44b82fa09b5a53
   1922d:	lea    r8,[rip+0x7228]        # 2045c <__FUNCTION__.13813+0x124>
   19234:	mov    rdx,rcx
   19237:	shr    rdx,0x9
   1923b:	mov    rax,rdx
   1923e:	mul    r9
   19241:	movabs r9,0x91a2b3c4d5e6f81
   1924b:	mov    rsi,rdx
   1924e:	shr    rdx,0xf
   19252:	mov    rax,rdx
   19255:	shr    rsi,0xb
   19259:	mul    r9
   1925c:	mov    rax,rcx
   1925f:	movabs rcx,0x20c49ba5e353f7cf
   19269:	shr    rdx,0x3
   1926d:	mov    r9,rdx
   19270:	movabs rdx,0x431bde82d7b634db
   1927a:	mul    rdx
   1927d:	mov    rdi,rdx
   19280:	shr    rdx,0x15
   19284:	mov    rax,rdx
   19287:	shr    rdi,0x12
   1928b:	mul    rcx
   1928e:	mov    rax,rsi
   19291:	shr    rdx,0x4
   19295:	imul   rcx,rdx,0x3e8
   1929c:	sub    rdi,rcx
   1929f:	push   rdi
   192a0:	movabs rdi,0x8888888888888889
   192aa:	mul    rdi
   192ad:	mov    rcx,rdx
   192b0:	shr    rcx,0x5
   192b4:	mov    rax,rcx
   192b7:	shl    rax,0x4
   192bb:	sub    rax,rcx
   192be:	shl    rax,0x2
   192c2:	sub    rsi,rax
   192c5:	mov    rax,rcx
   192c8:	mul    rdi
   192cb:	push   rsi
   192cc:	mov    rdi,r14
   192cf:	mov    esi,0x80
   192d4:	shr    rdx,0x5
   192d8:	mov    rax,rdx
   192db:	shl    rax,0x4
   192df:	sub    rax,rdx
   192e2:	mov    edx,0x1
   192e7:	shl    rax,0x2
   192eb:	sub    rcx,rax
   192ee:	xor    eax,eax
   192f0:	push   rcx
   192f1:	mov    ecx,0x80
   192f6:	call   3060 <__snprintf_chk@plt>
   192fb:	add    rsp,0x20
   192ff:	mov    edx,DWORD PTR [rbx+0x180]
   19305:	mov    esi,0x80
   1930a:	lea    rdi,[rsp+0x50]
   1930f:	call   19030 <get_human_readable_size>
   19314:	push   r14
   19316:	mov    r9,rbx
   19319:	push   r13
   1931b:	push   rax
   1931c:	lea    rax,[rbx+0x80]
   19323:	push   rax
   19324:	xor    eax,eax
   19326:	lea    r8,[rip+0x70ed]        # 2041a <__FUNCTION__.13813+0xe2>
   1932d:	mov    rsi,rbp
   19330:	mov    rdi,r12
   19333:	mov    rcx,0xffffffffffffffff
   1933a:	mov    edx,0x1
   1933f:	call   3060 <__snprintf_chk@plt>
   19344:	add    rsp,0x20
   19348:	mov    rax,r12
   1934b:	mov    rbx,QWORD PTR [rsp+0x1d8]
   19353:	xor    rbx,QWORD PTR fs:0x28
   1935c:	jne    193a1 <bdrv_snapshot_dump+0x201>
   19362:	add    rsp,0x1e0
   19369:	pop    rbx
   1936a:	pop    rbp
   1936b:	pop    r12
   1936d:	pop    r13
   1936f:	pop    r14
   19371:	ret    
   19372:	nop    WORD PTR [rax+rax*1+0x0]
   19378:	lea    rax,[rip+0x70b1]        # 20430 <__FUNCTION__.13813+0xf8>
   1937f:	lea    r9,[rip+0x5e04]        # 1f18a <Te0+0x40a>
   19386:	push   rax
   19387:	lea    rax,[rip+0x70ab]        # 20439 <__FUNCTION__.13813+0x101>
   1938e:	push   rax
   1938f:	lea    rax,[rip+0x70a8]        # 2043e <__FUNCTION__.13813+0x106>
   19396:	push   rax
   19397:	lea    rax,[rip+0x70a8]        # 20446 <__FUNCTION__.13813+0x10e>
   1939e:	push   rax
   1939f:	jmp    19324 <bdrv_snapshot_dump+0x184>
   193a1:	call   3190 <__stack_chk_fail@plt>
   193a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000193b0 <bdrv_aio_read>:
   193b0:	push   r15
   193b2:	push   r14
   193b4:	push   r13
   193b6:	push   r12
   193b8:	push   rbp
   193b9:	push   rbx
   193ba:	sub    rsp,0x18
   193be:	mov    r13,QWORD PTR [rdi+0x38]
   193c2:	test   r13,r13
   193c5:	je     19440 <bdrv_aio_read+0x90>
   193c7:	mov    rbp,rsi
   193ca:	mov    rax,rsi
   193cd:	mov    r15d,ecx
   193d0:	shl    rsi,0x9
   193d4:	neg    rax
   193d7:	test   rbp,rbp
   193da:	mov    QWORD PTR [rsp],rdx
   193de:	mov    r14,r8
   193e1:	cmovs  rsi,rax
   193e5:	shl    r15d,0x9
   193e9:	mov    QWORD PTR [rsp+0x8],r9
   193ee:	mov    r12d,ecx
   193f1:	movsxd rdx,r15d
   193f4:	mov    rbx,rdi
   193f7:	call   17140 <bdrv_check_byte_request>
   193fc:	test   eax,eax
   193fe:	jne    19440 <bdrv_aio_read+0x90>
   19400:	mov    r9,QWORD PTR [rsp+0x8]
   19405:	mov    r8,r14
   19408:	mov    ecx,r12d
   1940b:	mov    rdx,QWORD PTR [rsp]
   1940f:	mov    rsi,rbp
   19412:	mov    rdi,rbx
   19415:	call   QWORD PTR [r13+0x60]
   19419:	test   rax,rax
   1941c:	je     19430 <bdrv_aio_read+0x80>
   1941e:	mov    r15d,r15d
   19421:	add    QWORD PTR [rbx+0x870],0x1
   19429:	add    QWORD PTR [rbx+0x860],r15
   19430:	add    rsp,0x18
   19434:	pop    rbx
   19435:	pop    rbp
   19436:	pop    r12
   19438:	pop    r13
   1943a:	pop    r14
   1943c:	pop    r15
   1943e:	ret    
   1943f:	nop
   19440:	add    rsp,0x18
   19444:	xor    eax,eax
   19446:	pop    rbx
   19447:	pop    rbp
   19448:	pop    r12
   1944a:	pop    r13
   1944c:	pop    r14
   1944e:	pop    r15
   19450:	ret    
   19451:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1945c:	nop    DWORD PTR [rax+0x0]

0000000000019460 <bdrv_read_em>:
   19460:	sub    rsp,0x18
   19464:	lea    r8,[rip+0xffffffffffffdb25]        # 16f90 <bdrv_rw_em_cb>
   1946b:	mov    rax,QWORD PTR fs:0x28
   19474:	mov    QWORD PTR [rsp+0x8],rax
   19479:	xor    eax,eax
   1947b:	lea    r9,[rsp+0x4]
   19480:	mov    DWORD PTR [rsp+0x4],0x7fffffff
   19488:	call   193b0 <bdrv_aio_read>
   1948d:	test   rax,rax
   19490:	je     194c5 <bdrv_read_em+0x65>
   19492:	mov    eax,DWORD PTR [rsp+0x4]
   19496:	cmp    eax,0x7fffffff
   1949b:	jne    194b0 <bdrv_read_em+0x50>
   1949d:	nop    DWORD PTR [rax]
   194a0:	call   1a0f0 <qemu_aio_wait>
   194a5:	mov    eax,DWORD PTR [rsp+0x4]
   194a9:	cmp    eax,0x7fffffff
   194ae:	je     194a0 <bdrv_read_em+0x40>
   194b0:	mov    rdx,QWORD PTR [rsp+0x8]
   194b5:	xor    rdx,QWORD PTR fs:0x28
   194be:	jne    194cc <bdrv_read_em+0x6c>
   194c0:	add    rsp,0x18
   194c4:	ret    
   194c5:	mov    eax,0xffffffff
   194ca:	jmp    194b0 <bdrv_read_em+0x50>
   194cc:	call   3190 <__stack_chk_fail@plt>
   194d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   194dc:	nop    DWORD PTR [rax+0x0]

00000000000194e0 <bdrv_aio_write>:
   194e0:	push   r15
   194e2:	push   r14
   194e4:	push   r13
   194e6:	push   r12
   194e8:	push   rbp
   194e9:	push   rbx
   194ea:	sub    rsp,0x18
   194ee:	mov    r13,QWORD PTR [rdi+0x38]
   194f2:	test   r13,r13
   194f5:	je     19580 <bdrv_aio_write+0xa0>
   194fb:	mov    eax,DWORD PTR [rdi+0x8]
   194fe:	test   eax,eax
   19500:	jne    19580 <bdrv_aio_write+0xa0>
   19502:	mov    rbp,rsi
   19505:	mov    rax,rsi
   19508:	mov    r15d,ecx
   1950b:	shl    rsi,0x9
   1950f:	neg    rax
   19512:	test   rbp,rbp
   19515:	mov    QWORD PTR [rsp],rdx
   19519:	mov    r14,r8
   1951c:	cmovs  rsi,rax
   19520:	shl    r15d,0x9
   19524:	mov    QWORD PTR [rsp+0x8],r9
   19529:	mov    r12d,ecx
   1952c:	movsxd rdx,r15d
   1952f:	mov    rbx,rdi
   19532:	call   17140 <bdrv_check_byte_request>
   19537:	test   eax,eax
   19539:	jne    19580 <bdrv_aio_write+0xa0>
   1953b:	mov    r9,QWORD PTR [rsp+0x8]
   19540:	mov    r8,r14
   19543:	mov    ecx,r12d
   19546:	mov    rdx,QWORD PTR [rsp]
   1954a:	mov    rsi,rbp
   1954d:	mov    rdi,rbx
   19550:	call   QWORD PTR [r13+0x68]
   19554:	test   rax,rax
   19557:	je     1956b <bdrv_aio_write+0x8b>
   19559:	mov    r15d,r15d
   1955c:	add    QWORD PTR [rbx+0x878],0x1
   19564:	add    QWORD PTR [rbx+0x868],r15
   1956b:	add    rsp,0x18
   1956f:	pop    rbx
   19570:	pop    rbp
   19571:	pop    r12
   19573:	pop    r13
   19575:	pop    r14
   19577:	pop    r15
   19579:	ret    
   1957a:	nop    WORD PTR [rax+rax*1+0x0]
   19580:	add    rsp,0x18
   19584:	xor    eax,eax
   19586:	pop    rbx
   19587:	pop    rbp
   19588:	pop    r12
   1958a:	pop    r13
   1958c:	pop    r14
   1958e:	pop    r15
   19590:	ret    
   19591:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1959c:	nop    DWORD PTR [rax+0x0]

00000000000195a0 <bdrv_aio_rw_vector>:
   195a0:	push   r14
   195a2:	mov    r14d,ecx
   195a5:	push   r13
   195a7:	mov    r13,rsi
   195aa:	push   r12
   195ac:	push   rbp
   195ad:	mov    rbp,rdi
   195b0:	push   rbx
   195b1:	sub    rsp,0x20
   195b5:	mov    rbx,QWORD PTR [rip+0xef94]        # 28550 <vectored_aio_pool+0x10>
   195bc:	mov    r12d,DWORD PTR [rsp+0x50]
   195c1:	test   rbx,rbx
   195c4:	je     19670 <bdrv_aio_rw_vector+0xd0>
   195ca:	mov    rax,QWORD PTR [rbx+0x20]
   195ce:	mov    QWORD PTR [rip+0xef7b],rax        # 28550 <vectored_aio_pool+0x10>
   195d5:	mov    QWORD PTR [rbx+0x8],rbp
   195d9:	mov    esi,r14d
   195dc:	mov    edi,0x200
   195e1:	mov    QWORD PTR [rbx+0x10],r8
   195e5:	shl    esi,0x9
   195e8:	mov    QWORD PTR [rbx+0x18],r9
   195ec:	movsxd rsi,esi
   195ef:	mov    QWORD PTR [rbx+0x28],rdx
   195f3:	call   46f0 <qemu_memalign>
   195f8:	mov    DWORD PTR [rbx+0x38],r12d
   195fc:	mov    QWORD PTR [rbx+0x30],rax
   19600:	test   r12d,r12d
   19603:	jne    19640 <bdrv_aio_rw_vector+0xa0>
   19605:	mov    r9,rbx
   19608:	lea    r8,[rip+0xffffffffffffda71]        # 17080 <bdrv_aio_rw_vector_cb>
   1960f:	mov    ecx,r14d
   19612:	mov    rdx,rax
   19615:	mov    rsi,r13
   19618:	mov    rdi,rbp
   1961b:	call   193b0 <bdrv_aio_read>
   19620:	mov    QWORD PTR [rbx+0x40],rax
   19624:	test   rax,rax
   19627:	je     196b0 <bdrv_aio_rw_vector+0x110>
   1962d:	mov    rax,rbx
   19630:	add    rsp,0x20
   19634:	pop    rbx
   19635:	pop    rbp
   19636:	pop    r12
   19638:	pop    r13
   1963a:	pop    r14
   1963c:	ret    
   1963d:	nop    DWORD PTR [rax]
   19640:	mov    rdi,QWORD PTR [rbx+0x28]
   19644:	mov    rsi,rax
   19647:	call   4bc0 <qemu_iovec_to_buffer>
   1964c:	mov    rdx,QWORD PTR [rbx+0x30]
   19650:	mov    r9,rbx
   19653:	mov    ecx,r14d
   19656:	lea    r8,[rip+0xffffffffffffda23]        # 17080 <bdrv_aio_rw_vector_cb>
   1965d:	mov    rsi,r13
   19660:	mov    rdi,rbp
   19663:	call   194e0 <bdrv_aio_write>
   19668:	mov    QWORD PTR [rbx+0x40],rax
   1966c:	jmp    19624 <bdrv_aio_rw_vector+0x84>
   1966e:	xchg   ax,ax
   19670:	movsxd rdi,DWORD PTR [rip+0xeed1]        # 28548 <vectored_aio_pool+0x8>
   19677:	mov    QWORD PTR [rsp+0x18],r9
   1967c:	mov    QWORD PTR [rsp+0x10],r8
   19681:	mov    QWORD PTR [rsp+0x8],rdx
   19686:	call   4d00 <qemu_mallocz>
   1968b:	mov    r9,QWORD PTR [rsp+0x18]
   19690:	mov    r8,QWORD PTR [rsp+0x10]
   19695:	mov    rbx,rax
   19698:	lea    rax,[rip+0xeea1]        # 28540 <vectored_aio_pool>
   1969f:	mov    rdx,QWORD PTR [rsp+0x8]
   196a4:	mov    QWORD PTR [rbx],rax
   196a7:	jmp    195d5 <bdrv_aio_rw_vector+0x35>
   196ac:	nop    DWORD PTR [rax+0x0]
   196b0:	mov    rdi,QWORD PTR [rbx+0x30]
   196b4:	mov    QWORD PTR [rsp+0x8],rax
   196b9:	call   47a0 <qemu_vfree>
   196be:	mov    rdx,QWORD PTR [rbx]
   196c1:	mov    rax,QWORD PTR [rsp+0x8]
   196c6:	mov    rcx,QWORD PTR [rdx+0x10]
   196ca:	mov    QWORD PTR [rbx+0x20],rcx
   196ce:	mov    QWORD PTR [rdx+0x10],rbx
   196d2:	jmp    19630 <bdrv_aio_rw_vector+0x90>
   196d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000196e0 <bdrv_aio_readv>:
   196e0:	push   r15
   196e2:	mov    rax,rsi
   196e5:	mov    r15d,ecx
   196e8:	push   r14
   196ea:	neg    rax
   196ed:	mov    r14,rdi
   196f0:	push   r13
   196f2:	mov    r13,r9
   196f5:	push   r12
   196f7:	mov    r12,r8
   196fa:	push   rbp
   196fb:	mov    rbp,rdx
   196fe:	mov    edx,ecx
   19700:	push   rbx
   19701:	mov    rbx,rsi
   19704:	shl    rsi,0x9
   19708:	sub    rsp,0x8
   1970c:	test   rbx,rbx
   1970f:	cmovs  rsi,rax
   19713:	shl    edx,0x9
   19716:	movsxd rdx,edx
   19719:	call   17140 <bdrv_check_byte_request>
   1971e:	mov    edx,eax
   19720:	xor    eax,eax
   19722:	test   edx,edx
   19724:	jne    19745 <bdrv_aio_readv+0x65>
   19726:	sub    rsp,0x8
   1972a:	mov    ecx,r15d
   1972d:	mov    rdx,rbp
   19730:	mov    r9,r13
   19733:	push   0x0
   19735:	mov    r8,r12
   19738:	mov    rsi,rbx
   1973b:	mov    rdi,r14
   1973e:	call   195a0 <bdrv_aio_rw_vector>
   19743:	pop    rdx
   19744:	pop    rcx
   19745:	add    rsp,0x8
   19749:	pop    rbx
   1974a:	pop    rbp
   1974b:	pop    r12
   1974d:	pop    r13
   1974f:	pop    r14
   19751:	pop    r15
   19753:	ret    
   19754:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1975f:	nop

0000000000019760 <bdrv_aio_writev>:
   19760:	push   r15
   19762:	mov    rax,rsi
   19765:	mov    r15d,ecx
   19768:	push   r14
   1976a:	neg    rax
   1976d:	mov    r14,rdi
   19770:	push   r13
   19772:	mov    r13,r9
   19775:	push   r12
   19777:	mov    r12,r8
   1977a:	push   rbp
   1977b:	mov    rbp,rdx
   1977e:	mov    edx,ecx
   19780:	push   rbx
   19781:	mov    rbx,rsi
   19784:	shl    rsi,0x9
   19788:	sub    rsp,0x8
   1978c:	test   rbx,rbx
   1978f:	cmovs  rsi,rax
   19793:	shl    edx,0x9
   19796:	movsxd rdx,edx
   19799:	call   17140 <bdrv_check_byte_request>
   1979e:	mov    edx,eax
   197a0:	xor    eax,eax
   197a2:	test   edx,edx
   197a4:	jne    197c5 <bdrv_aio_writev+0x65>
   197a6:	sub    rsp,0x8
   197aa:	mov    ecx,r15d
   197ad:	mov    rdx,rbp
   197b0:	mov    r9,r13
   197b3:	push   0x1
   197b5:	mov    r8,r12
   197b8:	mov    rsi,rbx
   197bb:	mov    rdi,r14
   197be:	call   195a0 <bdrv_aio_rw_vector>
   197c3:	pop    rdx
   197c4:	pop    rcx
   197c5:	add    rsp,0x8
   197c9:	pop    rbx
   197ca:	pop    rbp
   197cb:	pop    r12
   197cd:	pop    r13
   197cf:	pop    r14
   197d1:	pop    r15
   197d3:	ret    
   197d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   197df:	nop

00000000000197e0 <bdrv_write_em>:
   197e0:	sub    rsp,0x18
   197e4:	lea    r8,[rip+0xffffffffffffd7a5]        # 16f90 <bdrv_rw_em_cb>
   197eb:	mov    rax,QWORD PTR fs:0x28
   197f4:	mov    QWORD PTR [rsp+0x8],rax
   197f9:	xor    eax,eax
   197fb:	lea    r9,[rsp+0x4]
   19800:	mov    DWORD PTR [rsp+0x4],0x7fffffff
   19808:	call   194e0 <bdrv_aio_write>
   1980d:	test   rax,rax
   19810:	je     19845 <bdrv_write_em+0x65>
   19812:	mov    eax,DWORD PTR [rsp+0x4]
   19816:	cmp    eax,0x7fffffff
   1981b:	jne    19830 <bdrv_write_em+0x50>
   1981d:	nop    DWORD PTR [rax]
   19820:	call   1a0f0 <qemu_aio_wait>
   19825:	mov    eax,DWORD PTR [rsp+0x4]
   19829:	cmp    eax,0x7fffffff
   1982e:	je     19820 <bdrv_write_em+0x40>
   19830:	mov    rdx,QWORD PTR [rsp+0x8]
   19835:	xor    rdx,QWORD PTR fs:0x28
   1983e:	jne    1984c <bdrv_write_em+0x6c>
   19840:	add    rsp,0x18
   19844:	ret    
   19845:	mov    eax,0xffffffff
   1984a:	jmp    19830 <bdrv_write_em+0x50>
   1984c:	call   3190 <__stack_chk_fail@plt>
   19851:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1985c:	nop    DWORD PTR [rax+0x0]

0000000000019860 <bdrv_aio_cancel>:
   19860:	mov    rax,QWORD PTR [rdi]
   19863:	jmp    QWORD PTR [rax]
   19865:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000019870 <bdrv_aio_flush>:
   19870:	mov    rax,QWORD PTR [rdi+0x38]
   19874:	test   rax,rax
   19877:	je     19880 <bdrv_aio_flush+0x10>
   19879:	jmp    QWORD PTR [rax+0x78]
   1987c:	nop    DWORD PTR [rax+0x0]
   19880:	xor    eax,eax
   19882:	ret    
   19883:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1988e:	xchg   ax,ax

0000000000019890 <bdrv_init>:
   19890:	lea    rax,[rip+0xffffffffffffd6e9]        # 16f80 <bdrv_aio_cancel_vector>
   19897:	lea    rdi,[rip+0xeb02]        # 283a0 <bdrv_raw>
   1989e:	mov    DWORD PTR [rip+0xeca0],0x48        # 28548 <vectored_aio_pool+0x8>
   198a8:	mov    QWORD PTR [rip+0xec91],rax        # 28540 <vectored_aio_pool>
   198af:	mov    QWORD PTR [rip+0xec96],0x0        # 28550 <vectored_aio_pool+0x10>
   198ba:	call   16ea0 <bdrv_register>
   198bf:	lea    rdi,[rip+0xe99a]        # 28260 <bdrv_host_device>
   198c6:	call   16ea0 <bdrv_register>
   198cb:	lea    rdi,[rip+0xd94e]        # 27220 <bdrv_cow>
   198d2:	call   16ea0 <bdrv_register>
   198d7:	lea    rdi,[rip+0xda82]        # 27360 <bdrv_qcow>
   198de:	call   16ea0 <bdrv_register>
   198e3:	lea    rdi,[rip+0xdbb6]        # 274a0 <bdrv_vmdk>
   198ea:	call   16ea0 <bdrv_register>
   198ef:	lea    rdi,[rip+0xdcea]        # 275e0 <bdrv_cloop>
   198f6:	call   16ea0 <bdrv_register>
   198fb:	lea    rdi,[rip+0xde1e]        # 27720 <bdrv_dmg>
   19902:	call   16ea0 <bdrv_register>
   19907:	lea    rdi,[rip+0xdf52]        # 27860 <bdrv_bochs>
   1990e:	call   16ea0 <bdrv_register>
   19913:	lea    rdi,[rip+0xe086]        # 279a0 <bdrv_vpc>
   1991a:	call   16ea0 <bdrv_register>
   1991f:	lea    rdi,[rip+0xe1ba]        # 27ae0 <bdrv_vvfat>
   19926:	call   16ea0 <bdrv_register>
   1992b:	lea    rdi,[rip+0xe42e]        # 27d60 <bdrv_qcow2>
   19932:	call   16ea0 <bdrv_register>
   19937:	lea    rdi,[rip+0xe562]        # 27ea0 <bdrv_parallels>
   1993e:	call   16ea0 <bdrv_register>
   19943:	lea    rdi,[rip+0xe696]        # 27fe0 <bdrv_nbd>
   1994a:	jmp    16ea0 <bdrv_register>
   1994f:	nop

0000000000019950 <aio_pool_init>:
   19950:	mov    DWORD PTR [rdi+0x8],esi
   19953:	mov    QWORD PTR [rdi],rdx
   19956:	mov    QWORD PTR [rdi+0x10],0x0
   1995e:	ret    
   1995f:	nop

0000000000019960 <qemu_aio_get_pool>:
   19960:	push   rbx
   19961:	mov    rbx,rdi
   19964:	sub    rsp,0x20
   19968:	mov    rax,QWORD PTR [rdi+0x10]
   1996c:	test   rax,rax
   1996f:	je     19990 <qemu_aio_get_pool+0x30>
   19971:	mov    rdi,QWORD PTR [rax+0x20]
   19975:	mov    QWORD PTR [rbx+0x10],rdi
   19979:	mov    QWORD PTR [rax+0x8],rsi
   1997d:	mov    QWORD PTR [rax+0x10],rdx
   19981:	mov    QWORD PTR [rax+0x18],rcx
   19985:	add    rsp,0x20
   19989:	pop    rbx
   1998a:	ret    
   1998b:	nop    DWORD PTR [rax+rax*1+0x0]
   19990:	movsxd rdi,DWORD PTR [rdi+0x8]
   19994:	mov    QWORD PTR [rsp+0x18],rcx
   19999:	mov    QWORD PTR [rsp+0x10],rdx
   1999e:	mov    QWORD PTR [rsp+0x8],rsi
   199a3:	call   4d00 <qemu_mallocz>
   199a8:	mov    rcx,QWORD PTR [rsp+0x18]
   199ad:	mov    rdx,QWORD PTR [rsp+0x10]
   199b2:	mov    QWORD PTR [rax],rbx
   199b5:	mov    rsi,QWORD PTR [rsp+0x8]
   199ba:	jmp    19979 <qemu_aio_get_pool+0x19>
   199bc:	nop    DWORD PTR [rax+0x0]

00000000000199c0 <qemu_aio_get>:
   199c0:	push   rbp
   199c1:	mov    rbp,rdi
   199c4:	push   rbx
   199c5:	sub    rsp,0x18
   199c9:	mov    rbx,QWORD PTR [rdi+0x38]
   199cd:	mov    rax,QWORD PTR [rbx+0x130]
   199d4:	test   rax,rax
   199d7:	je     19a00 <qemu_aio_get+0x40>
   199d9:	mov    rcx,QWORD PTR [rax+0x20]
   199dd:	mov    QWORD PTR [rbx+0x130],rcx
   199e4:	mov    QWORD PTR [rax+0x8],rbp
   199e8:	mov    QWORD PTR [rax+0x10],rsi
   199ec:	mov    QWORD PTR [rax+0x18],rdx
   199f0:	add    rsp,0x18
   199f4:	pop    rbx
   199f5:	pop    rbp
   199f6:	ret    
   199f7:	nop    WORD PTR [rax+rax*1+0x0]
   19a00:	movsxd rdi,DWORD PTR [rbx+0x128]
   19a07:	mov    QWORD PTR [rsp+0x8],rdx
   19a0c:	add    rbx,0x120
   19a13:	mov    QWORD PTR [rsp],rsi
   19a17:	call   4d00 <qemu_mallocz>
   19a1c:	mov    rdx,QWORD PTR [rsp+0x8]
   19a21:	mov    rsi,QWORD PTR [rsp]
   19a25:	mov    QWORD PTR [rax],rbx
   19a28:	jmp    199e4 <qemu_aio_get+0x24>
   19a2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000019a30 <bdrv_aio_flush_em>:
   19a30:	push   rbp
   19a31:	push   rbx
   19a32:	mov    rbx,rdi
   19a35:	sub    rsp,0x8
   19a39:	call   199c0 <qemu_aio_get>
   19a3e:	cmp    QWORD PTR [rax+0x28],0x0
   19a43:	mov    rbp,rax
   19a46:	jne    19a6e <bdrv_aio_flush_em+0x3e>
   19a48:	jmp    19aa0 <bdrv_aio_flush_em+0x70>
   19a4a:	nop    WORD PTR [rax+rax*1+0x0]
   19a50:	mov    rax,QWORD PTR [rax+0x40]
   19a54:	test   rax,rax
   19a57:	je     19a62 <bdrv_aio_flush_em+0x32>
   19a59:	mov    rdi,rbx
   19a5c:	call   rax
   19a5e:	test   eax,eax
   19a60:	jne    19a7c <bdrv_aio_flush_em+0x4c>
   19a62:	mov    rbx,QWORD PTR [rbx+0x850]
   19a69:	test   rbx,rbx
   19a6c:	je     19a98 <bdrv_aio_flush_em+0x68>
   19a6e:	mov    rax,QWORD PTR [rbx+0x38]
   19a72:	test   rax,rax
   19a75:	jne    19a50 <bdrv_aio_flush_em+0x20>
   19a77:	mov    eax,0xffffffea
   19a7c:	mov    DWORD PTR [rbp+0x30],eax
   19a7f:	mov    rdi,QWORD PTR [rbp+0x28]
   19a83:	call   44a0 <qemu_bh_schedule>
   19a88:	add    rsp,0x8
   19a8c:	mov    rax,rbp
   19a8f:	pop    rbx
   19a90:	pop    rbp
   19a91:	ret    
   19a92:	nop    WORD PTR [rax+rax*1+0x0]
   19a98:	xor    eax,eax
   19a9a:	jmp    19a7c <bdrv_aio_flush_em+0x4c>
   19a9c:	nop    DWORD PTR [rax+0x0]
   19aa0:	mov    rsi,rax
   19aa3:	lea    rdi,[rip+0xffffffffffffd636]        # 170e0 <bdrv_aio_bh_cb>
   19aaa:	call   4460 <qemu_bh_new>
   19aaf:	mov    QWORD PTR [rbp+0x28],rax
   19ab3:	jmp    19a6e <bdrv_aio_flush_em+0x3e>
   19ab5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000019ac0 <bdrv_aio_read_em>:
   19ac0:	push   r14
   19ac2:	mov    r14d,ecx
   19ac5:	push   r13
   19ac7:	mov    r13,rdx
   19aca:	mov    rdx,r9
   19acd:	push   r12
   19acf:	mov    r12,rsi
   19ad2:	mov    rsi,r8
   19ad5:	push   rbp
   19ad6:	mov    rbp,rdi
   19ad9:	push   rbx
   19ada:	call   199c0 <qemu_aio_get>
   19adf:	cmp    QWORD PTR [rax+0x28],0x0
   19ae4:	mov    rbx,rax
   19ae7:	je     19b18 <bdrv_aio_read_em+0x58>
   19ae9:	mov    ecx,r14d
   19aec:	mov    rdx,r13
   19aef:	mov    rsi,r12
   19af2:	mov    rdi,rbp
   19af5:	call   17550 <bdrv_read>
   19afa:	mov    rdi,QWORD PTR [rbx+0x28]
   19afe:	mov    DWORD PTR [rbx+0x30],eax
   19b01:	call   44a0 <qemu_bh_schedule>
   19b06:	mov    rax,rbx
   19b09:	pop    rbx
   19b0a:	pop    rbp
   19b0b:	pop    r12
   19b0d:	pop    r13
   19b0f:	pop    r14
   19b11:	ret    
   19b12:	nop    WORD PTR [rax+rax*1+0x0]
   19b18:	mov    rsi,rax
   19b1b:	lea    rdi,[rip+0xffffffffffffd5be]        # 170e0 <bdrv_aio_bh_cb>
   19b22:	call   4460 <qemu_bh_new>
   19b27:	mov    QWORD PTR [rbx+0x28],rax
   19b2b:	jmp    19ae9 <bdrv_aio_read_em+0x29>
   19b2d:	nop    DWORD PTR [rax]

0000000000019b30 <bdrv_aio_write_em>:
   19b30:	push   r14
   19b32:	mov    r14d,ecx
   19b35:	push   r13
   19b37:	mov    r13,rdx
   19b3a:	mov    rdx,r9
   19b3d:	push   r12
   19b3f:	mov    r12,rsi
   19b42:	mov    rsi,r8
   19b45:	push   rbp
   19b46:	mov    rbp,rdi
   19b49:	push   rbx
   19b4a:	call   199c0 <qemu_aio_get>
   19b4f:	cmp    QWORD PTR [rax+0x28],0x0
   19b54:	mov    rbx,rax
   19b57:	je     19b88 <bdrv_aio_write_em+0x58>
   19b59:	mov    ecx,r14d
   19b5c:	mov    rdx,r13
   19b5f:	mov    rsi,r12
   19b62:	mov    rdi,rbp
   19b65:	call   17990 <bdrv_write>
   19b6a:	mov    rdi,QWORD PTR [rbx+0x28]
   19b6e:	mov    DWORD PTR [rbx+0x30],eax
   19b71:	call   44a0 <qemu_bh_schedule>
   19b76:	mov    rax,rbx
   19b79:	pop    rbx
   19b7a:	pop    rbp
   19b7b:	pop    r12
   19b7d:	pop    r13
   19b7f:	pop    r14
   19b81:	ret    
   19b82:	nop    WORD PTR [rax+rax*1+0x0]
   19b88:	mov    rsi,rax
   19b8b:	lea    rdi,[rip+0xffffffffffffd54e]        # 170e0 <bdrv_aio_bh_cb>
   19b92:	call   4460 <qemu_bh_new>
   19b97:	mov    QWORD PTR [rbx+0x28],rax
   19b9b:	jmp    19b59 <bdrv_aio_write_em+0x29>
   19b9d:	nop    DWORD PTR [rax]

0000000000019ba0 <qemu_aio_release>:
   19ba0:	mov    rax,QWORD PTR [rdi]
   19ba3:	mov    rdx,QWORD PTR [rax+0x10]
   19ba7:	mov    QWORD PTR [rdi+0x20],rdx
   19bab:	mov    QWORD PTR [rax+0x10],rdi
   19baf:	ret    

0000000000019bb0 <bdrv_is_inserted>:
   19bb0:	mov    rax,QWORD PTR [rdi+0x38]
   19bb4:	test   rax,rax
   19bb7:	je     19bd0 <bdrv_is_inserted+0x20>
   19bb9:	mov    rax,QWORD PTR [rax+0xf0]
   19bc0:	test   rax,rax
   19bc3:	je     19bd8 <bdrv_is_inserted+0x28>
   19bc5:	jmp    rax
   19bc7:	nop    WORD PTR [rax+rax*1+0x0]
   19bd0:	xor    eax,eax
   19bd2:	ret    
   19bd3:	nop    DWORD PTR [rax+rax*1+0x0]
   19bd8:	mov    eax,0x1
   19bdd:	ret    
   19bde:	xchg   ax,ax

0000000000019be0 <bdrv_media_changed>:
   19be0:	mov    rax,QWORD PTR [rdi+0x38]
   19be4:	push   rbx
   19be5:	mov    rbx,rdi
   19be8:	test   rax,rax
   19beb:	je     19c00 <bdrv_media_changed+0x20>
   19bed:	mov    rax,QWORD PTR [rax+0xf8]
   19bf4:	test   rax,rax
   19bf7:	je     19c00 <bdrv_media_changed+0x20>
   19bf9:	call   rax
   19bfb:	cmp    eax,0xffffffa1
   19bfe:	jne    19c06 <bdrv_media_changed+0x26>
   19c00:	mov    eax,DWORD PTR [rbx+0x84c]
   19c06:	mov    DWORD PTR [rbx+0x84c],0x0
   19c10:	pop    rbx
   19c11:	ret    
   19c12:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19c1d:	nop    DWORD PTR [rax]

0000000000019c20 <bdrv_eject>:
   19c20:	push   rbp
   19c21:	mov    ebp,esi
   19c23:	push   rbx
   19c24:	mov    rbx,rdi
   19c27:	sub    rsp,0x8
   19c2b:	mov    rax,QWORD PTR [rdi+0x38]
   19c2f:	test   rax,rax
   19c32:	je     19c50 <bdrv_eject+0x30>
   19c34:	mov    rax,QWORD PTR [rax+0x100]
   19c3b:	test   rax,rax
   19c3e:	je     19c50 <bdrv_eject+0x30>
   19c40:	call   rax
   19c42:	cmp    eax,0xffffffa1
   19c45:	je     19c50 <bdrv_eject+0x30>
   19c47:	add    rsp,0x8
   19c4b:	pop    rbx
   19c4c:	pop    rbp
   19c4d:	ret    
   19c4e:	xchg   ax,ax
   19c50:	test   ebp,ebp
   19c52:	je     19c47 <bdrv_eject+0x27>
   19c54:	add    rsp,0x8
   19c58:	mov    rdi,rbx
   19c5b:	pop    rbx
   19c5c:	pop    rbp
   19c5d:	jmp    174e0 <bdrv_close>
   19c62:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19c6d:	nop    DWORD PTR [rax]

0000000000019c70 <bdrv_is_locked>:
   19c70:	mov    eax,DWORD PTR [rdi+0x10]
   19c73:	ret    
   19c74:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19c7f:	nop

0000000000019c80 <bdrv_set_locked>:
   19c80:	mov    rax,QWORD PTR [rdi+0x38]
   19c84:	mov    DWORD PTR [rdi+0x10],esi
   19c87:	test   rax,rax
   19c8a:	je     19ca0 <bdrv_set_locked+0x20>
   19c8c:	mov    rax,QWORD PTR [rax+0x108]
   19c93:	test   rax,rax
   19c96:	je     19ca0 <bdrv_set_locked+0x20>
   19c98:	jmp    rax
   19c9a:	nop    WORD PTR [rax+rax*1+0x0]
   19ca0:	ret    
   19ca1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19cac:	nop    DWORD PTR [rax+0x0]

0000000000019cb0 <bdrv_ioctl>:
   19cb0:	mov    rax,QWORD PTR [rdi+0x38]
   19cb4:	test   rax,rax
   19cb7:	je     19cd0 <bdrv_ioctl+0x20>
   19cb9:	mov    rax,QWORD PTR [rax+0x110]
   19cc0:	test   rax,rax
   19cc3:	je     19cd0 <bdrv_ioctl+0x20>
   19cc5:	jmp    rax
   19cc7:	nop    WORD PTR [rax+rax*1+0x0]
   19cd0:	mov    eax,0xffffffa1
   19cd5:	ret    
   19cd6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019ce0 <qemu_aio_wait.part.0>:
   19ce0:	push   r15
   19ce2:	push   r14
   19ce4:	push   r13
   19ce6:	push   r12
   19ce8:	mov    r12d,0x1
   19cee:	push   rbp
   19cef:	xor    ebp,ebp
   19cf1:	push   rbx
   19cf2:	sub    rsp,0x118
   19cf9:	mov    rax,QWORD PTR fs:0x28
   19d02:	mov    QWORD PTR [rsp+0x108],rax
   19d0a:	xor    eax,eax
   19d0c:	mov    r15,rsp
   19d0f:	lea    r14,[rsp+0x80]
   19d17:	nop    WORD PTR [rax+rax*1+0x0]
   19d20:	mov    DWORD PTR [rip+0xe82e],0x1        # 28558 <walking_handlers>
   19d2a:	mov    ecx,0x10
   19d2f:	mov    rdi,r15
   19d32:	mov    eax,ebp
   19d34:	cld    
   19d35:	rep stos QWORD PTR es:[rdi],rax
   19d38:	mov    ecx,0x10
   19d3d:	mov    rdi,r14
   19d40:	cld    
   19d41:	rep stos QWORD PTR es:[rdi],rax
   19d44:	mov    r13,QWORD PTR [rip+0xe815]        # 28560 <aio_handlers>
   19d4b:	test   r13,r13
   19d4e:	je     19f2d <qemu_aio_wait.part.0+0x24d>
   19d54:	mov    ebx,0xffffffff
   19d59:	nop    DWORD PTR [rax+0x0]
   19d60:	mov    rax,QWORD PTR [r13+0x18]
   19d64:	test   rax,rax
   19d67:	je     19d77 <qemu_aio_wait.part.0+0x97>
   19d69:	mov    rdi,QWORD PTR [r13+0x28]
   19d6d:	call   rax
   19d6f:	test   eax,eax
   19d71:	je     19dfe <qemu_aio_wait.part.0+0x11e>
   19d77:	mov    r8d,DWORD PTR [r13+0x20]
   19d7b:	test   r8d,r8d
   19d7e:	jne    19dfe <qemu_aio_wait.part.0+0x11e>
   19d80:	cmp    QWORD PTR [r13+0x8],0x0
   19d85:	je     19dc1 <qemu_aio_wait.part.0+0xe1>
   19d87:	movsxd rdi,DWORD PTR [r13+0x0]
   19d8b:	call   31e0 <__fdelt_chk@plt>
   19d90:	mov    ecx,DWORD PTR [r13+0x0]
   19d94:	mov    rdx,r12
   19d97:	mov    esi,ecx
   19d99:	sar    esi,0x1f
   19d9c:	shr    esi,0x1a
   19d9f:	add    ecx,esi
   19da1:	and    ecx,0x3f
   19da4:	sub    ecx,esi
   19da6:	shl    rdx,cl
   19da9:	or     QWORD PTR [rsp+rax*8],rdx
   19dad:	mov    eax,DWORD PTR [r13+0x0]
   19db1:	mov    edi,DWORD PTR [r13+0x20]
   19db5:	add    eax,0x1
   19db8:	cmp    ebx,eax
   19dba:	cmovl  ebx,eax
   19dbd:	test   edi,edi
   19dbf:	jne    19dfe <qemu_aio_wait.part.0+0x11e>
   19dc1:	cmp    QWORD PTR [r13+0x10],0x0
   19dc6:	je     19dfe <qemu_aio_wait.part.0+0x11e>
   19dc8:	movsxd rdi,DWORD PTR [r13+0x0]
   19dcc:	call   31e0 <__fdelt_chk@plt>
   19dd1:	mov    ecx,DWORD PTR [r13+0x0]
   19dd5:	mov    rdx,r12
   19dd8:	mov    esi,ecx
   19dda:	sar    esi,0x1f
   19ddd:	shr    esi,0x1a
   19de0:	add    ecx,esi
   19de2:	and    ecx,0x3f
   19de5:	sub    ecx,esi
   19de7:	shl    rdx,cl
   19dea:	or     QWORD PTR [rsp+rax*8+0x80],rdx
   19df2:	mov    eax,DWORD PTR [r13+0x0]
   19df6:	add    eax,0x1
   19df9:	cmp    ebx,eax
   19dfb:	cmovl  ebx,eax
   19dfe:	mov    r13,QWORD PTR [r13+0x30]
   19e02:	test   r13,r13
   19e05:	jne    19d60 <qemu_aio_wait.part.0+0x80>
   19e0b:	mov    DWORD PTR [rip+0xe747],ebp        # 28558 <walking_handlers>
   19e11:	cmp    ebx,0xffffffff
   19e14:	je     19f37 <qemu_aio_wait.part.0+0x257>
   19e1a:	xor    r8d,r8d
   19e1d:	xor    ecx,ecx
   19e1f:	mov    rdx,r14
   19e22:	mov    rsi,r15
   19e25:	mov    edi,ebx
   19e27:	call   33f0 <select@plt>
   19e2c:	cmp    eax,0xffffffff
   19e2f:	je     19f37 <qemu_aio_wait.part.0+0x257>
   19e35:	test   eax,eax
   19e37:	jle    19f60 <qemu_aio_wait.part.0+0x280>
   19e3d:	mov    rbx,QWORD PTR [rip+0xe71c]        # 28560 <aio_handlers>
   19e44:	mov    ebp,0x1
   19e49:	mov    DWORD PTR [rip+0xe705],0x1        # 28558 <walking_handlers>
   19e53:	test   rbx,rbx
   19e56:	jne    19ef3 <qemu_aio_wait.part.0+0x213>
   19e5c:	jmp    19f2d <qemu_aio_wait.part.0+0x24d>
   19e61:	nop    DWORD PTR [rax+0x0]
   19e68:	movsxd rdi,DWORD PTR [rbx]
   19e6b:	call   31e0 <__fdelt_chk@plt>
   19e70:	mov    edx,DWORD PTR [rbx]
   19e72:	mov    esi,edx
   19e74:	sar    esi,0x1f
   19e77:	shr    esi,0x1a
   19e7a:	lea    ecx,[rdx+rsi*1]
   19e7d:	mov    rdx,rbp
   19e80:	and    ecx,0x3f
   19e83:	sub    ecx,esi
   19e85:	shl    rdx,cl
   19e88:	test   QWORD PTR [rsp+rax*8],rdx
   19e8c:	je     19e9d <qemu_aio_wait.part.0+0x1bd>
   19e8e:	mov    rax,QWORD PTR [rbx+0x8]
   19e92:	test   rax,rax
   19e95:	je     19e9d <qemu_aio_wait.part.0+0x1bd>
   19e97:	mov    rdi,QWORD PTR [rbx+0x28]
   19e9b:	call   rax
   19e9d:	mov    ecx,DWORD PTR [rbx+0x20]
   19ea0:	test   ecx,ecx
   19ea2:	jne    19efe <qemu_aio_wait.part.0+0x21e>
   19ea4:	movsxd rdi,DWORD PTR [rbx]
   19ea7:	call   31e0 <__fdelt_chk@plt>
   19eac:	mov    edx,DWORD PTR [rbx]
   19eae:	mov    esi,edx
   19eb0:	sar    esi,0x1f
   19eb3:	shr    esi,0x1a
   19eb6:	lea    ecx,[rdx+rsi*1]
   19eb9:	mov    rdx,rbp
   19ebc:	and    ecx,0x3f
   19ebf:	sub    ecx,esi
   19ec1:	shl    rdx,cl
   19ec4:	test   QWORD PTR [rsp+rax*8+0x80],rdx
   19ecc:	je     19edd <qemu_aio_wait.part.0+0x1fd>
   19ece:	mov    rax,QWORD PTR [rbx+0x10]
   19ed2:	test   rax,rax
   19ed5:	je     19edd <qemu_aio_wait.part.0+0x1fd>
   19ed7:	mov    rdi,QWORD PTR [rbx+0x28]
   19edb:	call   rax
   19edd:	mov    r12,QWORD PTR [rbx+0x30]
   19ee1:	mov    edx,DWORD PTR [rbx+0x20]
   19ee4:	mov    rax,r12
   19ee7:	test   edx,edx
   19ee9:	jne    19f05 <qemu_aio_wait.part.0+0x225>
   19eeb:	mov    rbx,r12
   19eee:	test   r12,r12
   19ef1:	je     19f2d <qemu_aio_wait.part.0+0x24d>
   19ef3:	mov    esi,DWORD PTR [rbx+0x20]
   19ef6:	test   esi,esi
   19ef8:	je     19e68 <qemu_aio_wait.part.0+0x188>
   19efe:	mov    rax,QWORD PTR [rbx+0x30]
   19f02:	mov    r12,rax
   19f05:	mov    rdx,QWORD PTR [rbx+0x38]
   19f09:	test   rax,rax
   19f0c:	je     19f1a <qemu_aio_wait.part.0+0x23a>
   19f0e:	mov    QWORD PTR [rax+0x38],rdx
   19f12:	mov    rdx,QWORD PTR [rbx+0x38]
   19f16:	mov    rax,QWORD PTR [rbx+0x30]
   19f1a:	mov    QWORD PTR [rdx],rax
   19f1d:	mov    rdi,rbx
   19f20:	mov    rbx,r12
   19f23:	call   4ca0 <qemu_free>
   19f28:	test   r12,r12
   19f2b:	jne    19ef3 <qemu_aio_wait.part.0+0x213>
   19f2d:	mov    DWORD PTR [rip+0xe621],0x0        # 28558 <walking_handlers>
   19f37:	mov    rax,QWORD PTR [rsp+0x108]
   19f3f:	xor    rax,QWORD PTR fs:0x28
   19f48:	jne    19f68 <qemu_aio_wait.part.0+0x288>
   19f4a:	add    rsp,0x118
   19f51:	pop    rbx
   19f52:	pop    rbp
   19f53:	pop    r12
   19f55:	pop    r13
   19f57:	pop    r14
   19f59:	pop    r15
   19f5b:	ret    
   19f5c:	nop    DWORD PTR [rax+0x0]
   19f60:	je     19d20 <qemu_aio_wait.part.0+0x40>
   19f66:	jmp    19f37 <qemu_aio_wait.part.0+0x257>
   19f68:	call   3190 <__stack_chk_fail@plt>
   19f6d:	nop    DWORD PTR [rax]

0000000000019f70 <qemu_aio_set_fd_handler>:
   19f70:	push   r12
   19f72:	mov    r12,rdx
   19f75:	push   rbp
   19f76:	mov    rbp,rsi
   19f79:	push   rbx
   19f7a:	mov    ebx,edi
   19f7c:	sub    rsp,0x10
   19f80:	mov    rdi,QWORD PTR [rip+0xe5d9]        # 28560 <aio_handlers>
   19f87:	test   rdi,rdi
   19f8a:	jne    19f99 <qemu_aio_set_fd_handler+0x29>
   19f8c:	jmp    1a000 <qemu_aio_set_fd_handler+0x90>
   19f8e:	xchg   ax,ax
   19f90:	mov    rdi,QWORD PTR [rdi+0x30]
   19f94:	test   rdi,rdi
   19f97:	je     1a000 <qemu_aio_set_fd_handler+0x90>
   19f99:	cmp    ebx,DWORD PTR [rdi]
   19f9b:	jne    19f90 <qemu_aio_set_fd_handler+0x20>
   19f9d:	mov    rax,rbp
   19fa0:	or     rax,r12
   19fa3:	jne    1a053 <qemu_aio_set_fd_handler+0xe3>
   19fa9:	mov    eax,DWORD PTR [rip+0xe5a9]        # 28558 <walking_handlers>
   19faf:	test   eax,eax
   19fb1:	jne    1a070 <qemu_aio_set_fd_handler+0x100>
   19fb7:	mov    rax,QWORD PTR [rdi+0x30]
   19fbb:	mov    rcx,QWORD PTR [rdi+0x38]
   19fbf:	test   rax,rax
   19fc2:	je     19fd0 <qemu_aio_set_fd_handler+0x60>
   19fc4:	mov    QWORD PTR [rax+0x38],rcx
   19fc8:	mov    rcx,QWORD PTR [rdi+0x38]
   19fcc:	mov    rax,QWORD PTR [rdi+0x30]
   19fd0:	mov    QWORD PTR [rcx],rax
   19fd3:	mov    QWORD PTR [rsp],r8
   19fd7:	call   4ca0 <qemu_free>
   19fdc:	mov    r8,QWORD PTR [rsp]
   19fe0:	mov    rcx,r12
   19fe3:	mov    rdx,rbp
   19fe6:	mov    edi,ebx
   19fe8:	xor    esi,esi
   19fea:	call   44d0 <qemu_set_fd_handler2>
   19fef:	add    rsp,0x10
   19ff3:	xor    eax,eax
   19ff5:	pop    rbx
   19ff6:	pop    rbp
   19ff7:	pop    r12
   19ff9:	ret    
   19ffa:	nop    WORD PTR [rax+rax*1+0x0]
   1a000:	mov    rax,rbp
   1a003:	or     rax,r12
   1a006:	je     19fe0 <qemu_aio_set_fd_handler+0x70>
   1a008:	mov    edi,0x40
   1a00d:	mov    QWORD PTR [rsp+0x8],r8
   1a012:	mov    QWORD PTR [rsp],rcx
   1a016:	call   4d00 <qemu_mallocz>
   1a01b:	mov    rcx,QWORD PTR [rsp]
   1a01f:	mov    r8,QWORD PTR [rsp+0x8]
   1a024:	mov    rdi,rax
   1a027:	mov    DWORD PTR [rax],ebx
   1a029:	mov    rax,QWORD PTR [rip+0xe530]        # 28560 <aio_handlers>
   1a030:	test   rax,rax
   1a033:	mov    QWORD PTR [rdi+0x30],rax
   1a037:	je     1a041 <qemu_aio_set_fd_handler+0xd1>
   1a039:	lea    r9,[rdi+0x30]
   1a03d:	mov    QWORD PTR [rax+0x38],r9
   1a041:	lea    rax,[rip+0xe518]        # 28560 <aio_handlers>
   1a048:	mov    QWORD PTR [rip+0xe511],rdi        # 28560 <aio_handlers>
   1a04f:	mov    QWORD PTR [rdi+0x38],rax
   1a053:	mov    QWORD PTR [rdi+0x8],rbp
   1a057:	mov    QWORD PTR [rdi+0x10],r12
   1a05b:	mov    QWORD PTR [rdi+0x18],rcx
   1a05f:	mov    QWORD PTR [rdi+0x28],r8
   1a063:	jmp    19fe0 <qemu_aio_set_fd_handler+0x70>
   1a068:	nop    DWORD PTR [rax+rax*1+0x0]
   1a070:	mov    DWORD PTR [rdi+0x20],0x1
   1a077:	jmp    19fe0 <qemu_aio_set_fd_handler+0x70>
   1a07c:	nop    DWORD PTR [rax+0x0]

000000000001a080 <qemu_aio_flush>:
   1a080:	push   rbp
   1a081:	push   rbx
   1a082:	sub    rsp,0x8
   1a086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a090:	mov    rbx,QWORD PTR [rip+0xe4c9]        # 28560 <aio_handlers>
   1a097:	test   rbx,rbx
   1a09a:	je     1a0d0 <qemu_aio_flush+0x50>
   1a09c:	xor    ebp,ebp
   1a09e:	xchg   ax,ax
   1a0a0:	mov    rdi,QWORD PTR [rbx+0x28]
   1a0a4:	call   QWORD PTR [rbx+0x18]
   1a0a7:	mov    rbx,QWORD PTR [rbx+0x30]
   1a0ab:	or     ebp,eax
   1a0ad:	test   rbx,rbx
   1a0b0:	jne    1a0a0 <qemu_aio_flush+0x20>
   1a0b2:	call   4490 <qemu_bh_poll>
   1a0b7:	test   eax,eax
   1a0b9:	jne    1a0c0 <qemu_aio_flush+0x40>
   1a0bb:	call   19ce0 <qemu_aio_wait.part.0>
   1a0c0:	test   ebp,ebp
   1a0c2:	jg     1a090 <qemu_aio_flush+0x10>
   1a0c4:	add    rsp,0x8
   1a0c8:	pop    rbx
   1a0c9:	pop    rbp
   1a0ca:	ret    
   1a0cb:	nop    DWORD PTR [rax+rax*1+0x0]
   1a0d0:	call   4490 <qemu_bh_poll>
   1a0d5:	test   eax,eax
   1a0d7:	jne    1a0c4 <qemu_aio_flush+0x44>
   1a0d9:	add    rsp,0x8
   1a0dd:	pop    rbx
   1a0de:	pop    rbp
   1a0df:	jmp    19ce0 <qemu_aio_wait.part.0>
   1a0e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1a0ef:	nop

000000000001a0f0 <qemu_aio_wait>:
   1a0f0:	sub    rsp,0x8
   1a0f4:	call   4490 <qemu_bh_poll>
   1a0f9:	test   eax,eax
   1a0fb:	jne    1a110 <qemu_aio_wait+0x20>
   1a0fd:	add    rsp,0x8
   1a101:	jmp    19ce0 <qemu_aio_wait.part.0>
   1a106:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a110:	add    rsp,0x8
   1a114:	ret    
   1a115:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a11f:	nop

000000000001a120 <die2>:
   1a120:	push   rbx
   1a121:	mov    rbx,rsi
   1a124:	call   3660 <strerror@plt>
   1a129:	mov    rdi,QWORD PTR [rip+0xe3d0]        # 28500 <stderr@@GLIBC_2.2.5>
   1a130:	mov    rcx,rbx
   1a133:	lea    rdx,[rip+0x639e]        # 204d8 <suffixes.14512+0xd>
   1a13a:	mov    r8,rax
   1a13d:	mov    esi,0x1
   1a142:	xor    eax,eax
   1a144:	call   3630 <__fprintf_chk@plt>
   1a149:	call   30a0 <abort@plt>
   1a14e:	xchg   ax,ax

000000000001a150 <die>:
   1a150:	push   rbx
   1a151:	mov    rbx,rdi
   1a154:	call   30b0 <__errno_location@plt>
   1a159:	mov    rsi,rbx
   1a15c:	mov    edi,DWORD PTR [rax]
   1a15e:	call   1a120 <die2>
   1a163:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1a16e:	xchg   ax,ax

000000000001a170 <fsync_like_pwrite>:
   1a170:	sub    rsp,0x8
   1a174:	cmp    rdx,0x1
   1a178:	jne    1a196 <fsync_like_pwrite+0x26>
   1a17a:	test   rcx,rcx
   1a17d:	jne    1a1b5 <fsync_like_pwrite+0x45>
   1a17f:	call   3560 <fsync@plt>
   1a184:	cmp    eax,0x1
   1a187:	sbb    rax,rax
   1a18a:	add    rsp,0x8
   1a18e:	and    eax,0x2
   1a191:	sub    rax,0x1
   1a195:	ret    
   1a196:	lea    rcx,[rip+0x6443]        # 205e0 <__PRETTY_FUNCTION__.14120>
   1a19d:	mov    edx,0xcf
   1a1a2:	lea    rsi,[rip+0x633e]        # 204e7 <suffixes.14512+0x1c>
   1a1a9:	lea    rdi,[rip+0x634a]        # 204fa <suffixes.14512+0x2f>
   1a1b0:	call   3220 <__assert_fail@plt>
   1a1b5:	lea    rcx,[rip+0x6424]        # 205e0 <__PRETTY_FUNCTION__.14120>
   1a1bc:	mov    edx,0xd0
   1a1c1:	lea    rsi,[rip+0x631f]        # 204e7 <suffixes.14512+0x1c>
   1a1c8:	lea    rdi,[rip+0x63f2]        # 205c1 <suffixes.14512+0xf6>
   1a1cf:	call   3220 <__assert_fail@plt>
   1a1d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1a1df:	nop

000000000001a1e0 <mutex_unlock.constprop.4>:
   1a1e0:	sub    rsp,0x8
   1a1e4:	lea    rdi,[rip+0xe435]        # 28620 <lock>
   1a1eb:	call   3430 <pthread_mutex_unlock@plt>
   1a1f0:	test   eax,eax
   1a1f2:	jne    1a1f9 <mutex_unlock.constprop.4+0x19>
   1a1f4:	add    rsp,0x8
   1a1f8:	ret    
   1a1f9:	lea    rsi,[rip+0x6303]        # 20503 <suffixes.14512+0x38>
   1a200:	mov    edi,eax
   1a202:	call   1a120 <die2>
   1a207:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a210 <mutex_lock.constprop.5>:
   1a210:	sub    rsp,0x8
   1a214:	lea    rdi,[rip+0xe405]        # 28620 <lock>
   1a21b:	call   36b0 <pthread_mutex_lock@plt>
   1a220:	test   eax,eax
   1a222:	jne    1a229 <mutex_lock.constprop.5+0x19>
   1a224:	add    rsp,0x8
   1a228:	ret    
   1a229:	lea    rsi,[rip+0x62e8]        # 20518 <suffixes.14512+0x4d>
   1a230:	mov    edi,eax
   1a232:	call   1a120 <die2>
   1a237:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a240 <qemu_paio_submit>:
   1a240:	push   rbx
   1a241:	mov    rbx,rdi
   1a244:	mov    QWORD PTR [rdi+0x38],rsi
   1a248:	mov    QWORD PTR [rdi+0x40],0xffffffffffffff8d
   1a250:	mov    DWORD PTR [rdi+0x48],0x0
   1a257:	call   1a210 <mutex_lock.constprop.5>
   1a25c:	mov    eax,DWORD PTR [rip+0xe32e]        # 28590 <idle_threads>
   1a262:	test   eax,eax
   1a264:	jne    1a271 <qemu_paio_submit+0x31>
   1a266:	mov    eax,DWORD PTR [rip+0xe328]        # 28594 <cur_threads>
   1a26c:	cmp    eax,0x3f
   1a26f:	jle    1a2b0 <qemu_paio_submit+0x70>
   1a271:	mov    rax,QWORD PTR [rip+0xe310]        # 28588 <request_list+0x8>
   1a278:	mov    QWORD PTR [rbx+0x28],0x0
   1a280:	mov    QWORD PTR [rbx+0x30],rax
   1a284:	mov    QWORD PTR [rax],rbx
   1a287:	add    rbx,0x28
   1a28b:	mov    QWORD PTR [rip+0xe2f6],rbx        # 28588 <request_list+0x8>
   1a292:	call   1a1e0 <mutex_unlock.constprop.4>
   1a297:	lea    rdi,[rip+0xe342]        # 285e0 <cond>
   1a29e:	call   3300 <pthread_cond_signal@plt>
   1a2a3:	test   eax,eax
   1a2a5:	jne    1a2f1 <qemu_paio_submit+0xb1>
   1a2a7:	xor    eax,eax
   1a2a9:	pop    rbx
   1a2aa:	ret    
   1a2ab:	nop    DWORD PTR [rax+rax*1+0x0]
   1a2b0:	add    eax,0x1
   1a2b3:	xor    ecx,ecx
   1a2b5:	lea    rdx,[rip+0x44]        # 1a300 <aio_thread>
   1a2bc:	mov    DWORD PTR [rip+0xe2ca],0x1        # 28590 <idle_threads>
   1a2c6:	lea    rsi,[rip+0xe2d3]        # 285a0 <attr>
   1a2cd:	lea    rdi,[rip+0xe304]        # 285d8 <thread_id>
   1a2d4:	mov    DWORD PTR [rip+0xe2ba],eax        # 28594 <cur_threads>
   1a2da:	call   3090 <pthread_create@plt>
   1a2df:	test   eax,eax
   1a2e1:	je     1a271 <qemu_paio_submit+0x31>
   1a2e3:	lea    rsi,[rip+0x6241]        # 2052b <suffixes.14512+0x60>
   1a2ea:	mov    edi,eax
   1a2ec:	call   1a120 <die2>
   1a2f1:	lea    rsi,[rip+0x6242]        # 2053a <suffixes.14512+0x6f>
   1a2f8:	mov    edi,eax
   1a2fa:	call   1a120 <die2>
   1a2ff:	nop

000000000001a300 <aio_thread>:
   1a300:	push   r15
   1a302:	push   r14
   1a304:	push   r13
   1a306:	push   r12
   1a308:	push   rbp
   1a309:	push   rbx
   1a30a:	sub    rsp,0xb8
   1a311:	mov    rax,QWORD PTR fs:0x28
   1a31a:	mov    QWORD PTR [rsp+0xa8],rax
   1a322:	xor    eax,eax
   1a324:	lea    rbx,[rsp+0x20]
   1a329:	call   3140 <getpid@plt>
   1a32e:	mov    rdi,rbx
   1a331:	mov    r15d,eax
   1a334:	call   33a0 <sigfillset@plt>
   1a339:	test   eax,eax
   1a33b:	jne    1a4ec <aio_thread+0x1ec>
   1a341:	xor    edx,edx
   1a343:	xor    edi,edi
   1a345:	mov    rsi,rbx
   1a348:	call   3050 <sigprocmask@plt>
   1a34d:	test   eax,eax
   1a34f:	jne    1a4e0 <aio_thread+0x1e0>
   1a355:	mov    r14,rsp
   1a358:	lea    r12,[rip+0xe221]        # 28580 <request_list>
   1a35f:	lea    r13,[rsp+0x10]
   1a364:	nop    DWORD PTR [rax+0x0]
   1a368:	xor    esi,esi
   1a36a:	mov    rdi,r14
   1a36d:	call   3210 <gettimeofday@plt>
   1a372:	mov    rax,QWORD PTR [rsp]
   1a376:	mov    QWORD PTR [rsp+0x18],0x0
   1a37f:	add    rax,0xa
   1a383:	mov    QWORD PTR [rsp+0x10],rax
   1a388:	call   1a210 <mutex_lock.constprop.5>
   1a38d:	xor    eax,eax
   1a38f:	jmp    1a3ca <aio_thread+0xca>
   1a391:	nop    DWORD PTR [rax+0x0]
   1a398:	cmp    eax,0x6e
   1a39b:	je     1a498 <aio_thread+0x198>
   1a3a1:	mov    rdx,r13
   1a3a4:	lea    rsi,[rip+0xe275]        # 28620 <lock>
   1a3ab:	lea    rdi,[rip+0xe22e]        # 285e0 <cond>
   1a3b2:	call   3570 <pthread_cond_timedwait@plt>
   1a3b7:	test   eax,eax
   1a3b9:	setne  cl
   1a3bc:	cmp    eax,0x6e
   1a3bf:	setne  dl
   1a3c2:	test   cl,dl
   1a3c4:	jne    1a4d2 <aio_thread+0x1d2>
   1a3ca:	mov    rbx,QWORD PTR [r12]
   1a3ce:	test   rbx,rbx
   1a3d1:	je     1a398 <aio_thread+0x98>
   1a3d3:	mov    rax,QWORD PTR [rbx+0x28]
   1a3d7:	mov    rdx,QWORD PTR [rbx+0x30]
   1a3db:	test   rax,rax
   1a3de:	je     1a488 <aio_thread+0x188>
   1a3e4:	mov    QWORD PTR [rax+0x30],rdx
   1a3e8:	mov    rdx,QWORD PTR [rbx+0x30]
   1a3ec:	mov    rax,QWORD PTR [rbx+0x28]
   1a3f0:	mov    QWORD PTR [rdx],rax
   1a3f3:	xor    ebp,ebp
   1a3f5:	mov    DWORD PTR [rbx+0x48],0x1
   1a3fc:	sub    DWORD PTR [rip+0xe18d],0x1        # 28590 <idle_threads>
   1a403:	call   1a1e0 <mutex_unlock.constprop.4>
   1a408:	jmp    1a418 <aio_thread+0x118>
   1a40a:	nop    WORD PTR [rax+rax*1+0x0]
   1a410:	test   rax,rax
   1a413:	je     1a44e <aio_thread+0x14e>
   1a415:	add    rbp,rax
   1a418:	mov    rdx,QWORD PTR [rbx+0x10]
   1a41c:	cmp    rdx,rbp
   1a41f:	jbe    1a44e <aio_thread+0x14e>
   1a421:	mov    rcx,QWORD PTR [rbx+0x20]
   1a425:	mov    rsi,QWORD PTR [rbx+0x8]
   1a429:	sub    rdx,rbp
   1a42c:	mov    edi,DWORD PTR [rbx]
   1a42e:	add    rcx,rbp
   1a431:	add    rsi,rbp
   1a434:	call   QWORD PTR [rbx+0x38]
   1a437:	cmp    rax,0xffffffffffffffff
   1a43b:	jne    1a410 <aio_thread+0x110>
   1a43d:	call   30b0 <__errno_location@plt>
   1a442:	mov    eax,DWORD PTR [rax]
   1a444:	cmp    eax,0x4
   1a447:	je     1a418 <aio_thread+0x118>
   1a449:	neg    eax
   1a44b:	movsxd rbp,eax
   1a44e:	call   1a210 <mutex_lock.constprop.5>
   1a453:	mov    QWORD PTR [rbx+0x40],rbp
   1a457:	add    DWORD PTR [rip+0xe132],0x1        # 28590 <idle_threads>
   1a45e:	call   1a1e0 <mutex_unlock.constprop.4>
   1a463:	mov    esi,DWORD PTR [rbx+0x18]
   1a466:	mov    edi,r15d
   1a469:	call   33d0 <kill@plt>
   1a46e:	test   eax,eax
   1a470:	je     1a368 <aio_thread+0x68>
   1a476:	lea    rdi,[rip+0x60ff]        # 2057c <suffixes.14512+0xb1>
   1a47d:	call   1a150 <die>
   1a482:	nop    WORD PTR [rax+rax*1+0x0]
   1a488:	mov    QWORD PTR [rip+0xe0f9],rdx        # 28588 <request_list+0x8>
   1a48f:	jmp    1a3f0 <aio_thread+0xf0>
   1a494:	nop    DWORD PTR [rax+0x0]
   1a498:	sub    DWORD PTR [rip+0xe0f1],0x1        # 28590 <idle_threads>
   1a49f:	sub    DWORD PTR [rip+0xe0ee],0x1        # 28594 <cur_threads>
   1a4a6:	call   1a1e0 <mutex_unlock.constprop.4>
   1a4ab:	xor    eax,eax
   1a4ad:	mov    rdi,QWORD PTR [rsp+0xa8]
   1a4b5:	xor    rdi,QWORD PTR fs:0x28
   1a4be:	jne    1a4f8 <aio_thread+0x1f8>
   1a4c0:	add    rsp,0xb8
   1a4c7:	pop    rbx
   1a4c8:	pop    rbp
   1a4c9:	pop    r12
   1a4cb:	pop    r13
   1a4cd:	pop    r14
   1a4cf:	pop    r15
   1a4d1:	ret    
   1a4d2:	lea    rsi,[rip+0x608c]        # 20565 <suffixes.14512+0x9a>
   1a4d9:	mov    edi,eax
   1a4db:	call   1a120 <die2>
   1a4e0:	lea    rdi,[rip+0x6072]        # 20559 <suffixes.14512+0x8e>
   1a4e7:	call   1a150 <die>
   1a4ec:	lea    rdi,[rip+0x605b]        # 2054e <suffixes.14512+0x83>
   1a4f3:	call   1a150 <die>
   1a4f8:	call   3190 <__stack_chk_fail@plt>
   1a4fd:	nop    DWORD PTR [rax]

000000000001a500 <qemu_paio_init>:
   1a500:	sub    rsp,0x8
   1a504:	lea    rdi,[rip+0xe095]        # 285a0 <attr>
   1a50b:	call   32f0 <pthread_attr_init@plt>
   1a510:	test   eax,eax
   1a512:	jne    1a549 <qemu_paio_init+0x49>
   1a514:	mov    esi,0x1
   1a519:	lea    rdi,[rip+0xe080]        # 285a0 <attr>
   1a520:	call   3410 <pthread_attr_setdetachstate@plt>
   1a525:	test   eax,eax
   1a527:	jne    1a557 <qemu_paio_init+0x57>
   1a529:	lea    rax,[rip+0xe050]        # 28580 <request_list>
   1a530:	mov    QWORD PTR [rip+0xe045],0x0        # 28580 <request_list>
   1a53b:	mov    QWORD PTR [rip+0xe046],rax        # 28588 <request_list+0x8>
   1a542:	xor    eax,eax
   1a544:	add    rsp,0x8
   1a548:	ret    
   1a549:	lea    rsi,[rip+0x6038]        # 20588 <suffixes.14512+0xbd>
   1a550:	mov    edi,eax
   1a552:	call   1a120 <die2>
   1a557:	lea    rsi,[rip+0x603c]        # 2059a <suffixes.14512+0xcf>
   1a55e:	mov    edi,eax
   1a560:	call   1a120 <die2>
   1a565:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001a570 <qemu_paio_read>:
   1a570:	mov    rsi,QWORD PTR [rip+0xca71]        # 26fe8 <pread64@GLIBC_2.2.5>
   1a577:	jmp    1a240 <qemu_paio_submit>
   1a57c:	nop    DWORD PTR [rax+0x0]

000000000001a580 <qemu_paio_write>:
   1a580:	mov    rsi,QWORD PTR [rip+0xca59]        # 26fe0 <pwrite64@GLIBC_2.2.5>
   1a587:	jmp    1a240 <qemu_paio_submit>
   1a58c:	nop    DWORD PTR [rax+0x0]

000000000001a590 <qemu_paio_fsync>:
   1a590:	sub    rsp,0x8
   1a594:	cmp    QWORD PTR [rdi+0x20],0x0
   1a599:	jne    1a5ba <qemu_paio_fsync+0x2a>
   1a59b:	cmp    QWORD PTR [rdi+0x8],0x0
   1a5a0:	jne    1a5d9 <qemu_paio_fsync+0x49>
   1a5a2:	mov    QWORD PTR [rdi+0x10],0x1
   1a5aa:	lea    rsi,[rip+0xfffffffffffffbbf]        # 1a170 <fsync_like_pwrite>
   1a5b1:	add    rsp,0x8
   1a5b5:	jmp    1a240 <qemu_paio_submit>
   1a5ba:	lea    rcx,[rip+0x603f]        # 20600 <__PRETTY_FUNCTION__.14124>
   1a5c1:	mov    edx,0xd5
   1a5c6:	lea    rsi,[rip+0x5f1a]        # 204e7 <suffixes.14512+0x1c>
   1a5cd:	lea    rdi,[rip+0x5fe2]        # 205b6 <suffixes.14512+0xeb>
   1a5d4:	call   3220 <__assert_fail@plt>
   1a5d9:	lea    rcx,[rip+0x6020]        # 20600 <__PRETTY_FUNCTION__.14124>
   1a5e0:	mov    edx,0xd6
   1a5e5:	lea    rsi,[rip+0x5efb]        # 204e7 <suffixes.14512+0x1c>
   1a5ec:	lea    rdi,[rip+0x5fd8]        # 205cb <suffixes.14512+0x100>
   1a5f3:	call   3220 <__assert_fail@plt>
   1a5f8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a600 <qemu_paio_return>:
   1a600:	push   rbx
   1a601:	mov    rbx,rdi
   1a604:	call   1a210 <mutex_lock.constprop.5>
   1a609:	mov    rbx,QWORD PTR [rbx+0x40]
   1a60d:	call   1a1e0 <mutex_unlock.constprop.4>
   1a612:	mov    rax,rbx
   1a615:	pop    rbx
   1a616:	ret    
   1a617:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a620 <qemu_paio_error>:
   1a620:	push   rbx
   1a621:	mov    rbx,rdi
   1a624:	call   1a210 <mutex_lock.constprop.5>
   1a629:	mov    rbx,QWORD PTR [rbx+0x40]
   1a62d:	call   1a1e0 <mutex_unlock.constprop.4>
   1a632:	mov    eax,0x0
   1a637:	mov    rdx,rbx
   1a63a:	neg    rdx
   1a63d:	test   rbx,rbx
   1a640:	pop    rbx
   1a641:	cmovs  eax,edx
   1a644:	ret    
   1a645:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001a650 <qemu_paio_cancel>:
   1a650:	push   rbx
   1a651:	mov    rbx,rsi
   1a654:	call   1a210 <mutex_lock.constprop.5>
   1a659:	mov    eax,DWORD PTR [rbx+0x48]
   1a65c:	test   eax,eax
   1a65e:	jne    1a698 <qemu_paio_cancel+0x48>
   1a660:	mov    rax,QWORD PTR [rbx+0x28]
   1a664:	mov    rdx,QWORD PTR [rbx+0x30]
   1a668:	test   rax,rax
   1a66b:	je     1a6b0 <qemu_paio_cancel+0x60>
   1a66d:	mov    QWORD PTR [rax+0x30],rdx
   1a671:	mov    rdx,QWORD PTR [rbx+0x30]
   1a675:	mov    rax,QWORD PTR [rbx+0x28]
   1a679:	mov    QWORD PTR [rdx],rax
   1a67c:	mov    QWORD PTR [rbx+0x40],0xffffffffffffff83
   1a684:	mov    ebx,0x1
   1a689:	call   1a1e0 <mutex_unlock.constprop.4>
   1a68e:	mov    eax,ebx
   1a690:	pop    rbx
   1a691:	ret    
   1a692:	nop    WORD PTR [rax+rax*1+0x0]
   1a698:	cmp    QWORD PTR [rbx+0x40],0xffffffffffffff8d
   1a69d:	setne  bl
   1a6a0:	call   1a1e0 <mutex_unlock.constprop.4>
   1a6a5:	movzx  ebx,bl
   1a6a8:	add    ebx,0x2
   1a6ab:	mov    eax,ebx
   1a6ad:	pop    rbx
   1a6ae:	ret    
   1a6af:	nop
   1a6b0:	mov    QWORD PTR [rip+0xded1],rdx        # 28588 <request_list+0x8>
   1a6b7:	jmp    1a679 <qemu_paio_cancel+0x29>
   1a6b9:	nop    DWORD PTR [rax+0x0]

000000000001a6c0 <posix_aio_flush>:
   1a6c0:	xor    eax,eax
   1a6c2:	cmp    QWORD PTR [rdi+0x8],0x0
   1a6c7:	setne  al
   1a6ca:	ret    
   1a6cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a6d0 <fd_open>:
   1a6d0:	push   r12
   1a6d2:	xor    eax,eax
   1a6d4:	push   rbp
   1a6d5:	push   rbx
   1a6d6:	mov    rbx,QWORD PTR [rdi+0x40]
   1a6da:	cmp    DWORD PTR [rbx+0x4],0x2
   1a6de:	jne    1a72a <fd_open+0x5a>
   1a6e0:	mov    r12d,DWORD PTR [rbx]
   1a6e3:	mov    rbp,rdi
   1a6e6:	test   r12d,r12d
   1a6e9:	jns    1a730 <fd_open+0x60>
   1a6eb:	mov    edx,DWORD PTR [rbx+0x20]
   1a6ee:	test   edx,edx
   1a6f0:	jne    1a778 <fd_open+0xa8>
   1a6f6:	mov    esi,DWORD PTR [rbx+0xc]
   1a6f9:	lea    rdi,[rbp+0x48]
   1a6fd:	call   3440 <__open64_2@plt>
   1a702:	mov    DWORD PTR [rbx],eax
   1a704:	test   eax,eax
   1a706:	js     1a79b <fd_open+0xcb>
   1a70c:	test   r12d,r12d
   1a70f:	js     1a750 <fd_open+0x80>
   1a711:	mov    rdi,QWORD PTR [rip+0xdf38]        # 28650 <rt_clock>
   1a718:	call   44e0 <qemu_get_clock>
   1a71d:	mov    DWORD PTR [rbx+0x20],0x0
   1a724:	mov    QWORD PTR [rbx+0x10],rax
   1a728:	xor    eax,eax
   1a72a:	pop    rbx
   1a72b:	pop    rbp
   1a72c:	pop    r12
   1a72e:	ret    
   1a72f:	nop
   1a730:	mov    rdi,QWORD PTR [rip+0xdf19]        # 28650 <rt_clock>
   1a737:	call   44e0 <qemu_get_clock>
   1a73c:	sub    rax,QWORD PTR [rbx+0x10]
   1a740:	cmp    rax,0x3e7
   1a746:	jg     1a760 <fd_open+0x90>
   1a748:	mov    eax,DWORD PTR [rbx]
   1a74a:	test   eax,eax
   1a74c:	jns    1a711 <fd_open+0x41>
   1a74e:	jmp    1a6eb <fd_open+0x1b>
   1a750:	mov    DWORD PTR [rbx+0x24],0x1
   1a757:	jmp    1a711 <fd_open+0x41>
   1a759:	nop    DWORD PTR [rax+0x0]
   1a760:	mov    edi,DWORD PTR [rbx]
   1a762:	call   3260 <close@plt>
   1a767:	mov    DWORD PTR [rbx],0xffffffff
   1a76d:	jmp    1a6eb <fd_open+0x1b>
   1a772:	nop    WORD PTR [rax+rax*1+0x0]
   1a778:	mov    rdi,QWORD PTR [rip+0xded1]        # 28650 <rt_clock>
   1a77f:	call   44e0 <qemu_get_clock>
   1a784:	sub    rax,QWORD PTR [rbx+0x18]
   1a788:	cmp    rax,0x3e7
   1a78e:	jg     1a6f6 <fd_open+0x26>
   1a794:	mov    eax,0xfffffffb
   1a799:	jmp    1a72a <fd_open+0x5a>
   1a79b:	mov    rdi,QWORD PTR [rip+0xdeae]        # 28650 <rt_clock>
   1a7a2:	call   44e0 <qemu_get_clock>
   1a7a7:	mov    DWORD PTR [rbx+0x20],0x1
   1a7ae:	mov    QWORD PTR [rbx+0x18],rax
   1a7b2:	test   r12d,r12d
   1a7b5:	js     1a794 <fd_open+0xc4>
   1a7b7:	mov    DWORD PTR [rbx+0x24],0x1
   1a7be:	jmp    1a794 <fd_open+0xc4>

000000000001a7c0 <raw_getlength>:
   1a7c0:	push   rbx
   1a7c1:	mov    rax,QWORD PTR [rdi+0x40]
   1a7c5:	mov    ebx,DWORD PTR [rax]
   1a7c7:	call   1a6d0 <fd_open>
   1a7cc:	test   eax,eax
   1a7ce:	js     1a7e0 <raw_getlength+0x20>
   1a7d0:	mov    edi,ebx
   1a7d2:	mov    edx,0x2
   1a7d7:	xor    esi,esi
   1a7d9:	pop    rbx
   1a7da:	jmp    3620 <lseek64@plt>
   1a7df:	nop
   1a7e0:	cdqe   
   1a7e2:	pop    rbx
   1a7e3:	ret    
   1a7e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1a7ef:	nop

000000000001a7f0 <raw_media_changed>:
   1a7f0:	push   rbx
   1a7f1:	mov    rbx,QWORD PTR [rdi+0x40]
   1a7f5:	mov    eax,0xffffffa1
   1a7fa:	cmp    DWORD PTR [rbx+0x4],0x2
   1a7fe:	jne    1a80f <raw_media_changed+0x1f>
   1a800:	call   1a6d0 <fd_open>
   1a805:	mov    eax,DWORD PTR [rbx+0x24]
   1a808:	mov    DWORD PTR [rbx+0x24],0x0
   1a80f:	pop    rbx
   1a810:	ret    
   1a811:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1a81c:	nop    DWORD PTR [rax+0x0]

000000000001a820 <raw_create>:
   1a820:	test   ecx,ecx
   1a822:	jne    1a870 <raw_create+0x50>
   1a824:	test   rdx,rdx
   1a827:	jne    1a870 <raw_create+0x50>
   1a829:	push   rbp
   1a82a:	mov    edx,0x1a4
   1a82f:	xor    eax,eax
   1a831:	push   rbx
   1a832:	mov    rbx,rsi
   1a835:	mov    esi,0x241
   1a83a:	sub    rsp,0x8
   1a83e:	call   3500 <open64@plt>
   1a843:	mov    ebp,eax
   1a845:	test   eax,eax
   1a847:	js     1a880 <raw_create+0x60>
   1a849:	shl    rbx,0x9
   1a84d:	mov    edi,eax
   1a84f:	mov    rsi,rbx
   1a852:	call   34c0 <ftruncate64@plt>
   1a857:	mov    edi,ebp
   1a859:	call   3260 <close@plt>
   1a85e:	xor    eax,eax
   1a860:	add    rsp,0x8
   1a864:	pop    rbx
   1a865:	pop    rbp
   1a866:	ret    
   1a867:	nop    WORD PTR [rax+rax*1+0x0]
   1a870:	mov    eax,0xffffffa1
   1a875:	ret    
   1a876:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a880:	mov    eax,0xfffffffb
   1a885:	jmp    1a860 <raw_create+0x40>
   1a887:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a890 <raw_pread_aligned>:
   1a890:	push   r15
   1a892:	push   r14
   1a894:	mov    r14,rdx
   1a897:	push   r13
   1a899:	mov    r13,rsi
   1a89c:	push   r12
   1a89e:	mov    r12d,ecx
   1a8a1:	push   rbp
   1a8a2:	push   rbx
   1a8a3:	mov    rbx,rdi
   1a8a6:	sub    rsp,0x8
   1a8aa:	mov    rbp,QWORD PTR [rdi+0x40]
   1a8ae:	call   1a6d0 <fd_open>
   1a8b3:	test   eax,eax
   1a8b5:	js     1a8f5 <raw_pread_aligned+0x65>
   1a8b7:	mov    edi,DWORD PTR [rbp+0x0]
   1a8ba:	test   r13,r13
   1a8bd:	js     1a8d2 <raw_pread_aligned+0x42>
   1a8bf:	xor    edx,edx
   1a8c1:	mov    rsi,r13
   1a8c4:	call   3620 <lseek64@plt>
   1a8c9:	cmp    rax,0xffffffffffffffff
   1a8cd:	je     1a945 <raw_pread_aligned+0xb5>
   1a8cf:	mov    edi,DWORD PTR [rbp+0x0]
   1a8d2:	mov    DWORD PTR [rbp+0x8],0x0
   1a8d9:	movsxd r15,r12d
   1a8dc:	mov    rsi,r14
   1a8df:	mov    rdx,r15
   1a8e2:	call   4550 <qemu_read>
   1a8e7:	cmp    r12d,eax
   1a8ea:	je     1a8f5 <raw_pread_aligned+0x65>
   1a8ec:	cmp    DWORD PTR [rbx+0x894],0x1
   1a8f3:	je     1a908 <raw_pread_aligned+0x78>
   1a8f5:	add    rsp,0x8
   1a8f9:	pop    rbx
   1a8fa:	pop    rbp
   1a8fb:	pop    r12
   1a8fd:	pop    r13
   1a8ff:	pop    r14
   1a901:	pop    r15
   1a903:	ret    
   1a904:	nop    DWORD PTR [rax+0x0]
   1a908:	mov    edi,DWORD PTR [rbp+0x0]
   1a90b:	xor    edx,edx
   1a90d:	mov    rsi,r13
   1a910:	call   3620 <lseek64@plt>
   1a915:	mov    edi,DWORD PTR [rbp+0x0]
   1a918:	mov    rdx,r15
   1a91b:	mov    rsi,r14
   1a91e:	call   4550 <qemu_read>
   1a923:	cmp    r12d,eax
   1a926:	je     1a8f5 <raw_pread_aligned+0x65>
   1a928:	mov    edi,DWORD PTR [rbp+0x0]
   1a92b:	xor    edx,edx
   1a92d:	mov    rsi,r13
   1a930:	call   3620 <lseek64@plt>
   1a935:	mov    edi,DWORD PTR [rbp+0x0]
   1a938:	mov    rdx,r15
   1a93b:	mov    rsi,r14
   1a93e:	call   4550 <qemu_read>
   1a943:	jmp    1a8f5 <raw_pread_aligned+0x65>
   1a945:	add    DWORD PTR [rbp+0x8],0x1
   1a949:	jmp    1a8f5 <raw_pread_aligned+0x65>
   1a94b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a950 <raw_pread>:
   1a950:	push   r15
   1a952:	mov    r15d,ecx
   1a955:	push   r14
   1a957:	push   r13
   1a959:	push   r12
   1a95b:	push   rbp
   1a95c:	mov    rbp,rdx
   1a95f:	push   rbx
   1a960:	mov    rbx,rsi
   1a963:	sub    rsp,0x18
   1a967:	mov    r13,QWORD PTR [rdi+0x40]
   1a96b:	mov    QWORD PTR [rsp+0x8],rdi
   1a970:	mov    rdx,QWORD PTR [r13+0x28]
   1a974:	test   rdx,rdx
   1a977:	je     1ab98 <raw_pread+0x248>
   1a97d:	mov    r12,rsi
   1a980:	and    r12d,0x1ff
   1a987:	je     1aa18 <raw_pread+0xc8>
   1a98d:	lea    ecx,[rcx+r12*1+0x1ff]
   1a995:	mov    eax,0x4000
   1a99a:	movsxd r14,r12d
   1a99d:	and    ecx,0xfffffe00
   1a9a3:	cmp    ecx,0x4000
   1a9a9:	cmovg  ecx,eax
   1a9ac:	sub    rsi,r14
   1a9af:	call   1a890 <raw_pread_aligned>
   1a9b4:	test   eax,eax
   1a9b6:	js     1aa4a <raw_pread+0xfa>
   1a9bc:	mov    eax,0x200
   1a9c1:	mov    rsi,QWORD PTR [r13+0x28]
   1a9c5:	sub    eax,r12d
   1a9c8:	mov    r12d,eax
   1a9cb:	add    rsi,r14
   1a9ce:	cmp    r15d,eax
   1a9d1:	jge    1aa60 <raw_pread+0x110>
   1a9d7:	movsxd rax,r15d
   1a9da:	cmp    rax,0x8
   1a9de:	jae    1aba0 <raw_pread+0x250>
   1a9e4:	test   al,0x4
   1a9e6:	jne    1abdc <raw_pread+0x28c>
   1a9ec:	test   rax,rax
   1a9ef:	je     1abca <raw_pread+0x27a>
   1a9f5:	movzx  edx,BYTE PTR [rsi]
   1a9f8:	mov    BYTE PTR [rbp+0x0],dl
   1a9fb:	test   al,0x2
   1a9fd:	je     1abca <raw_pread+0x27a>
   1aa03:	movzx  edx,WORD PTR [rsi+rax*1-0x2]
   1aa08:	mov    WORD PTR [rbp+rax*1-0x2],dx
   1aa0d:	jmp    1abca <raw_pread+0x27a>
   1aa12:	nop    WORD PTR [rax+rax*1+0x0]
   1aa18:	mov    r12d,ecx
   1aa1b:	and    r12d,0x1ff
   1aa22:	jne    1aac8 <raw_pread+0x178>
   1aa28:	test   ebp,0x1ff
   1aa2e:	jne    1ab50 <raw_pread+0x200>
   1aa34:	mov    rdi,QWORD PTR [rsp+0x8]
   1aa39:	mov    ecx,r15d
   1aa3c:	mov    rdx,rbp
   1aa3f:	mov    rsi,rbx
   1aa42:	call   1a890 <raw_pread_aligned>
   1aa47:	add    eax,r12d
   1aa4a:	add    rsp,0x18
   1aa4e:	pop    rbx
   1aa4f:	pop    rbp
   1aa50:	pop    r12
   1aa52:	pop    r13
   1aa54:	pop    r14
   1aa56:	pop    r15
   1aa58:	ret    
   1aa59:	nop    DWORD PTR [rax+0x0]
   1aa60:	movsxd rdx,eax
   1aa63:	cmp    eax,0x8
   1aa66:	jb     1ab60 <raw_pread+0x210>
   1aa6c:	mov    rax,QWORD PTR [rsi]
   1aa6f:	lea    rdi,[rbp+0x8]
   1aa73:	and    rdi,0xfffffffffffffff8
   1aa77:	mov    QWORD PTR [rbp+0x0],rax
   1aa7b:	mov    eax,r12d
   1aa7e:	mov    rcx,QWORD PTR [rsi+rax*1-0x8]
   1aa83:	mov    QWORD PTR [rbp+rax*1-0x8],rcx
   1aa88:	mov    rax,rbp
   1aa8b:	sub    rax,rdi
   1aa8e:	lea    ecx,[r12+rax*1]
   1aa92:	sub    rsi,rax
   1aa95:	mov    eax,ecx
   1aa97:	shr    eax,0x3
   1aa9a:	mov    ecx,eax
   1aa9c:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1aa9f:	add    rbp,rdx
   1aaa2:	add    rbx,rdx
   1aaa5:	sub    r15d,r12d
   1aaa8:	je     1ab36 <raw_pread+0x1e6>
   1aaae:	test   r15d,0x1ff
   1aab5:	jne    1aad0 <raw_pread+0x180>
   1aab7:	test   ebp,0x1ff
   1aabd:	jne    1aad0 <raw_pread+0x180>
   1aabf:	jmp    1aa34 <raw_pread+0xe4>
   1aac4:	nop    DWORD PTR [rax+0x0]
   1aac8:	xor    r12d,r12d
   1aacb:	jmp    1aad4 <raw_pread+0x184>
   1aacd:	nop    DWORD PTR [rax]
   1aad0:	mov    rdx,QWORD PTR [r13+0x28]
   1aad4:	lea    ecx,[r15+0x1ff]
   1aadb:	mov    eax,0x4000
   1aae0:	mov    rdi,QWORD PTR [rsp+0x8]
   1aae5:	mov    rsi,rbx
   1aae8:	and    ecx,0xfffffe00
   1aaee:	cmp    ecx,0x4000
   1aaf4:	cmovg  ecx,eax
   1aaf7:	call   1a890 <raw_pread_aligned>
   1aafc:	test   eax,eax
   1aafe:	js     1aa4a <raw_pread+0xfa>
   1ab04:	cmp    eax,r15d
   1ab07:	mov    rsi,QWORD PTR [r13+0x28]
   1ab0b:	mov    rdi,rbp
   1ab0e:	cmovg  eax,r15d
   1ab12:	movsxd r9,eax
   1ab15:	mov    rdx,r9
   1ab18:	mov    r14,r9
   1ab1b:	mov    QWORD PTR [rsp],r9
   1ab1f:	call   33b0 <memcpy@plt>
   1ab24:	mov    r9,QWORD PTR [rsp]
   1ab28:	add    r12d,r14d
   1ab2b:	add    rbp,r9
   1ab2e:	add    rbx,r9
   1ab31:	sub    r15d,r14d
   1ab34:	jne    1aad0 <raw_pread+0x180>
   1ab36:	add    rsp,0x18
   1ab3a:	mov    eax,r12d
   1ab3d:	pop    rbx
   1ab3e:	pop    rbp
   1ab3f:	pop    r12
   1ab41:	pop    r13
   1ab43:	pop    r14
   1ab45:	pop    r15
   1ab47:	ret    
   1ab48:	nop    DWORD PTR [rax+rax*1+0x0]
   1ab50:	xor    eax,eax
   1ab52:	test   ecx,ecx
   1ab54:	jne    1aad4 <raw_pread+0x184>
   1ab5a:	jmp    1aa4a <raw_pread+0xfa>
   1ab5f:	nop
   1ab60:	test   al,0x4
   1ab62:	jne    1abeb <raw_pread+0x29b>
   1ab68:	test   eax,eax
   1ab6a:	je     1aa9f <raw_pread+0x14f>
   1ab70:	movzx  eax,BYTE PTR [rsi]
   1ab73:	mov    BYTE PTR [rbp+0x0],al
   1ab76:	test   r12b,0x2
   1ab7a:	je     1aa9f <raw_pread+0x14f>
   1ab80:	mov    eax,r12d
   1ab83:	movzx  ecx,WORD PTR [rsi+rax*1-0x2]
   1ab88:	mov    WORD PTR [rbp+rax*1-0x2],cx
   1ab8d:	jmp    1aa9f <raw_pread+0x14f>
   1ab92:	nop    WORD PTR [rax+rax*1+0x0]
   1ab98:	xor    r12d,r12d
   1ab9b:	jmp    1aa34 <raw_pread+0xe4>
   1aba0:	mov    rdx,QWORD PTR [rsi]
   1aba3:	lea    rdi,[rbp+0x8]
   1aba7:	and    rdi,0xfffffffffffffff8
   1abab:	mov    QWORD PTR [rbp+0x0],rdx
   1abaf:	mov    rdx,QWORD PTR [rsi+rax*1-0x8]
   1abb4:	mov    QWORD PTR [rbp+rax*1-0x8],rdx
   1abb9:	sub    rbp,rdi
   1abbc:	lea    rcx,[rax+rbp*1]
   1abc0:	sub    rsi,rbp
   1abc3:	shr    rcx,0x3
   1abc7:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1abca:	add    rsp,0x18
   1abce:	mov    eax,r15d
   1abd1:	pop    rbx
   1abd2:	pop    rbp
   1abd3:	pop    r12
   1abd5:	pop    r13
   1abd7:	pop    r14
   1abd9:	pop    r15
   1abdb:	ret    
   1abdc:	mov    edx,DWORD PTR [rsi]
   1abde:	mov    DWORD PTR [rbp+0x0],edx
   1abe1:	mov    edx,DWORD PTR [rsi+rax*1-0x4]
   1abe5:	mov    DWORD PTR [rbp+rax*1-0x4],edx
   1abe9:	jmp    1abca <raw_pread+0x27a>
   1abeb:	mov    eax,DWORD PTR [rsi]
   1abed:	mov    DWORD PTR [rbp+0x0],eax
   1abf0:	mov    eax,r12d
   1abf3:	mov    ecx,DWORD PTR [rsi+rax*1-0x4]
   1abf7:	mov    DWORD PTR [rbp+rax*1-0x4],ecx
   1abfb:	jmp    1aa9f <raw_pread+0x14f>

000000000001ac00 <raw_aio_setup>:
   1ac00:	push   r15
   1ac02:	mov    r15,r8
   1ac05:	push   r14
   1ac07:	push   r13
   1ac09:	mov    r13,rdx
   1ac0c:	push   r12
   1ac0e:	mov    r12d,ecx
   1ac11:	push   rbp
   1ac12:	mov    rbp,rsi
   1ac15:	push   rbx
   1ac16:	mov    rbx,rdi
   1ac19:	sub    rsp,0x18
   1ac1d:	mov    r14,QWORD PTR [rdi+0x40]
   1ac21:	mov    QWORD PTR [rsp+0x8],r9
   1ac26:	call   1a6d0 <fd_open>
   1ac2b:	mov    r9,QWORD PTR [rsp+0x8]
   1ac30:	test   eax,eax
   1ac32:	js     1aca0 <raw_aio_setup+0xa0>
   1ac34:	mov    rdx,r9
   1ac37:	mov    rsi,r15
   1ac3a:	mov    rdi,rbx
   1ac3d:	call   199c0 <qemu_aio_get>
   1ac42:	test   rax,rax
   1ac45:	je     1aca0 <raw_aio_setup+0xa0>
   1ac47:	mov    edx,DWORD PTR [r14]
   1ac4a:	mov    ecx,r12d
   1ac4d:	mov    DWORD PTR [rax+0x40],0xc
   1ac54:	neg    ecx
   1ac56:	mov    QWORD PTR [rax+0x30],r13
   1ac5a:	mov    DWORD PTR [rax+0x28],edx
   1ac5d:	mov    edx,r12d
   1ac60:	movsxd rcx,ecx
   1ac63:	shl    edx,0x9
   1ac66:	test   r12d,r12d
   1ac69:	movsxd rdx,edx
   1ac6c:	cmovs  rdx,rcx
   1ac70:	shl    rbp,0x9
   1ac74:	mov    QWORD PTR [rax+0x48],rbp
   1ac78:	mov    QWORD PTR [rax+0x38],rdx
   1ac7c:	mov    rdx,QWORD PTR [rip+0xd9c5]        # 28648 <posix_aio_state>
   1ac83:	mov    rcx,QWORD PTR [rdx+0x8]
   1ac87:	mov    QWORD PTR [rax+0x78],rcx
   1ac8b:	mov    QWORD PTR [rdx+0x8],rax
   1ac8f:	add    rsp,0x18
   1ac93:	pop    rbx
   1ac94:	pop    rbp
   1ac95:	pop    r12
   1ac97:	pop    r13
   1ac99:	pop    r14
   1ac9b:	pop    r15
   1ac9d:	ret    
   1ac9e:	xchg   ax,ax
   1aca0:	add    rsp,0x18
   1aca4:	xor    eax,eax
   1aca6:	pop    rbx
   1aca7:	pop    rbp
   1aca8:	pop    r12
   1acaa:	pop    r13
   1acac:	pop    r14
   1acae:	pop    r15
   1acb0:	ret    
   1acb1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1acbc:	nop    DWORD PTR [rax+0x0]

000000000001acc0 <raw_aio_em_cb>:
   1acc0:	push   rbx
   1acc1:	mov    rbx,rdi
   1acc4:	mov    esi,DWORD PTR [rdi+0x80]
   1acca:	mov    rdi,QWORD PTR [rdi+0x18]
   1acce:	call   QWORD PTR [rbx+0x10]
   1acd1:	mov    rdi,rbx
   1acd4:	pop    rbx
   1acd5:	jmp    19ba0 <qemu_aio_release>
   1acda:	nop    WORD PTR [rax+rax*1+0x0]

000000000001ace0 <raw_ioctl>:
   1ace0:	mov    rax,QWORD PTR [rdi+0x40]
   1ace4:	mov    edi,DWORD PTR [rax]
   1ace6:	xor    eax,eax
   1ace8:	jmp    3250 <ioctl@plt>
   1aced:	nop    DWORD PTR [rax]

000000000001acf0 <raw_set_locked>:
   1acf0:	mov    rcx,QWORD PTR [rdi+0x40]
   1acf4:	cmp    DWORD PTR [rcx+0x4],0x1
   1acf8:	jne    1ad18 <raw_set_locked+0x28>
   1acfa:	sub    rsp,0x8
   1acfe:	mov    edi,DWORD PTR [rcx]
   1ad00:	mov    edx,esi
   1ad02:	xor    eax,eax
   1ad04:	mov    esi,0x5329
   1ad09:	call   3250 <ioctl@plt>
   1ad0e:	xor    eax,eax
   1ad10:	add    rsp,0x8
   1ad14:	ret    
   1ad15:	nop    DWORD PTR [rax]
   1ad18:	mov    eax,0xffffffa1
   1ad1d:	ret    
   1ad1e:	xchg   ax,ax

000000000001ad20 <raw_close>:
   1ad20:	push   rbx
   1ad21:	mov    rbx,QWORD PTR [rdi+0x40]
   1ad25:	mov    edi,DWORD PTR [rbx]
   1ad27:	test   edi,edi
   1ad29:	jns    1ad30 <raw_close+0x10>
   1ad2b:	pop    rbx
   1ad2c:	ret    
   1ad2d:	nop    DWORD PTR [rax]
   1ad30:	xor    edx,edx
   1ad32:	mov    esi,0x1261
   1ad37:	xor    eax,eax
   1ad39:	call   3250 <ioctl@plt>
   1ad3e:	mov    edi,DWORD PTR [rbx]
   1ad40:	call   3260 <close@plt>
   1ad45:	mov    rdi,QWORD PTR [rbx+0x28]
   1ad49:	mov    DWORD PTR [rbx],0xffffffff
   1ad4f:	test   rdi,rdi
   1ad52:	je     1ad2b <raw_close+0xb>
   1ad54:	pop    rbx
   1ad55:	jmp    4ca0 <qemu_free>
   1ad5a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001ad60 <posix_aio_read>:
   1ad60:	push   r15
   1ad62:	push   r14
   1ad64:	mov    r14,rdi
   1ad67:	push   r13
   1ad69:	push   r12
   1ad6b:	push   rbp
   1ad6c:	push   rbx
   1ad6d:	sub    rsp,0x28
   1ad71:	mov    rax,QWORD PTR fs:0x28
   1ad7a:	mov    QWORD PTR [rsp+0x18],rax
   1ad7f:	xor    eax,eax
   1ad81:	mov    rbx,rsp
   1ad84:	mov    edi,DWORD PTR [r14]
   1ad87:	mov    edx,0x10
   1ad8c:	mov    rsi,rbx
   1ad8f:	call   32c0 <read@plt>
   1ad94:	cmp    rax,0xffffffffffffffff
   1ad98:	je     1ae40 <posix_aio_read+0xe0>
   1ad9e:	cmp    rax,0x10
   1ada2:	je     1ad84 <posix_aio_read+0x24>
   1ada4:	add    r14,0x8
   1ada8:	mov    r15d,0xffffffea
   1adae:	mov    r12,r14
   1adb1:	mov    rbx,QWORD PTR [r12]
   1adb5:	test   rbx,rbx
   1adb8:	je     1addf <posix_aio_read+0x7f>
   1adba:	lea    r13,[rbx+0x28]
   1adbe:	mov    rdi,r13
   1adc1:	call   1a620 <qemu_paio_error>
   1adc6:	mov    ebp,eax
   1adc8:	cmp    eax,0x7d
   1adcb:	je     1ae00 <posix_aio_read+0xa0>
   1adcd:	cmp    eax,0x73
   1add0:	jne    1ae18 <posix_aio_read+0xb8>
   1add2:	lea    r12,[rbx+0x78]
   1add6:	mov    rbx,QWORD PTR [r12]
   1adda:	test   rbx,rbx
   1addd:	jne    1adba <posix_aio_read+0x5a>
   1addf:	mov    rax,QWORD PTR [rsp+0x18]
   1ade4:	xor    rax,QWORD PTR fs:0x28
   1aded:	jne    1ae6c <posix_aio_read+0x10c>
   1adef:	add    rsp,0x28
   1adf3:	pop    rbx
   1adf4:	pop    rbp
   1adf5:	pop    r12
   1adf7:	pop    r13
   1adf9:	pop    r14
   1adfb:	pop    r15
   1adfd:	ret    
   1adfe:	xchg   ax,ax
   1ae00:	mov    rax,QWORD PTR [rbx+0x78]
   1ae04:	mov    rdi,rbx
   1ae07:	mov    QWORD PTR [r12],rax
   1ae0b:	call   19ba0 <qemu_aio_release>
   1ae10:	jmp    1adb1 <posix_aio_read+0x51>
   1ae12:	nop    WORD PTR [rax+rax*1+0x0]
   1ae18:	test   eax,eax
   1ae1a:	je     1ae58 <posix_aio_read+0xf8>
   1ae1c:	neg    ebp
   1ae1e:	mov    rax,QWORD PTR [rbx+0x78]
   1ae22:	mov    esi,ebp
   1ae24:	mov    QWORD PTR [r12],rax
   1ae28:	mov    rdi,QWORD PTR [rbx+0x18]
   1ae2c:	call   QWORD PTR [rbx+0x10]
   1ae2f:	mov    rdi,rbx
   1ae32:	call   19ba0 <qemu_aio_release>
   1ae37:	jmp    1adae <posix_aio_read+0x4e>
   1ae3c:	nop    DWORD PTR [rax+0x0]
   1ae40:	call   30b0 <__errno_location@plt>
   1ae45:	cmp    DWORD PTR [rax],0x4
   1ae48:	jne    1ada4 <posix_aio_read+0x44>
   1ae4e:	jmp    1ad84 <posix_aio_read+0x24>
   1ae53:	nop    DWORD PTR [rax+rax*1+0x0]
   1ae58:	mov    rdi,r13
   1ae5b:	call   1a600 <qemu_paio_return>
   1ae60:	cdqe   
   1ae62:	cmp    rax,QWORD PTR [rbx+0x38]
   1ae66:	cmovne ebp,r15d
   1ae6a:	jmp    1ae1e <posix_aio_read+0xbe>
   1ae6c:	call   3190 <__stack_chk_fail@plt>
   1ae71:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1ae7c:	nop    DWORD PTR [rax+0x0]

000000000001ae80 <aio_signal_handler>:
   1ae80:	sub    rsp,0x18
   1ae84:	mov    rax,QWORD PTR fs:0x28
   1ae8d:	mov    QWORD PTR [rsp+0x8],rax
   1ae92:	xor    eax,eax
   1ae94:	mov    rax,QWORD PTR [rip+0xd7ad]        # 28648 <posix_aio_state>
   1ae9b:	test   rax,rax
   1ae9e:	je     1aeb7 <aio_signal_handler+0x37>
   1aea0:	mov    edi,DWORD PTR [rax+0x4]
   1aea3:	lea    rsi,[rsp+0x7]
   1aea8:	mov    edx,0x1
   1aead:	mov    BYTE PTR [rsp+0x7],0x0
   1aeb2:	call   3130 <write@plt>
   1aeb7:	call   4430 <qemu_service_io>
   1aebc:	mov    rax,QWORD PTR [rsp+0x8]
   1aec1:	xor    rax,QWORD PTR fs:0x28
   1aeca:	jne    1aed1 <aio_signal_handler+0x51>
   1aecc:	add    rsp,0x18
   1aed0:	ret    
   1aed1:	call   3190 <__stack_chk_fail@plt>
   1aed6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001aee0 <raw_eject>:
   1aee0:	push   rbp
   1aee1:	push   rbx
   1aee2:	sub    rsp,0x8
   1aee6:	mov    rbx,QWORD PTR [rdi+0x40]
   1aeea:	mov    eax,DWORD PTR [rbx+0x4]
   1aeed:	cmp    eax,0x1
   1aef0:	je     1af38 <raw_eject+0x58>
   1aef2:	cmp    eax,0x2
   1aef5:	jne    1af28 <raw_eject+0x48>
   1aef7:	mov    rbp,rdi
   1aefa:	mov    edi,DWORD PTR [rbx]
   1aefc:	test   edi,edi
   1aefe:	jns    1af78 <raw_eject+0x98>
   1af00:	mov    esi,DWORD PTR [rbx+0xc]
   1af03:	lea    rdi,[rbp+0x48]
   1af07:	or     esi,0x800
   1af0d:	call   3440 <__open64_2@plt>
   1af12:	mov    ebx,eax
   1af14:	test   eax,eax
   1af16:	jns    1af90 <raw_eject+0xb0>
   1af18:	xor    eax,eax
   1af1a:	add    rsp,0x8
   1af1e:	pop    rbx
   1af1f:	pop    rbp
   1af20:	ret    
   1af21:	nop    DWORD PTR [rax+0x0]
   1af28:	mov    eax,0xffffffa1
   1af2d:	add    rsp,0x8
   1af31:	pop    rbx
   1af32:	pop    rbp
   1af33:	ret    
   1af34:	nop    DWORD PTR [rax+0x0]
   1af38:	mov    edi,DWORD PTR [rbx]
   1af3a:	xor    edx,edx
   1af3c:	test   esi,esi
   1af3e:	je     1af60 <raw_eject+0x80>
   1af40:	xor    eax,eax
   1af42:	mov    esi,0x5309
   1af47:	call   3250 <ioctl@plt>
   1af4c:	test   eax,eax
   1af4e:	jns    1af18 <raw_eject+0x38>
   1af50:	lea    rdi,[rip+0x56b9]        # 20610 <__PRETTY_FUNCTION__.14124+0x10>
   1af57:	call   3590 <perror@plt>
   1af5c:	xor    eax,eax
   1af5e:	jmp    1af2d <raw_eject+0x4d>
   1af60:	xor    eax,eax
   1af62:	mov    esi,0x5319
   1af67:	call   3250 <ioctl@plt>
   1af6c:	test   eax,eax
   1af6e:	js     1af50 <raw_eject+0x70>
   1af70:	xor    eax,eax
   1af72:	jmp    1af1a <raw_eject+0x3a>
   1af74:	nop    DWORD PTR [rax+0x0]
   1af78:	call   3260 <close@plt>
   1af7d:	mov    DWORD PTR [rbx],0xffffffff
   1af83:	jmp    1af00 <raw_eject+0x20>
   1af88:	nop    DWORD PTR [rax+rax*1+0x0]
   1af90:	xor    edx,edx
   1af92:	mov    edi,eax
   1af94:	mov    esi,0x25a
   1af99:	xor    eax,eax
   1af9b:	call   3250 <ioctl@plt>
   1afa0:	test   eax,eax
   1afa2:	js     1afb8 <raw_eject+0xd8>
   1afa4:	mov    edi,ebx
   1afa6:	call   3260 <close@plt>
   1afab:	xor    eax,eax
   1afad:	jmp    1af1a <raw_eject+0x3a>
   1afb2:	nop    WORD PTR [rax+rax*1+0x0]
   1afb8:	lea    rdi,[rip+0x565c]        # 2061b <__PRETTY_FUNCTION__.14124+0x1b>
   1afbf:	call   3590 <perror@plt>
   1afc4:	jmp    1afa4 <raw_eject+0xc4>
   1afc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001afd0 <raw_pwrite_aligned>:
   1afd0:	push   r13
   1afd2:	mov    r13,rsi
   1afd5:	push   r12
   1afd7:	mov    r12,rdx
   1afda:	push   rbp
   1afdb:	push   rbx
   1afdc:	mov    ebx,ecx
   1afde:	sub    rsp,0x8
   1afe2:	mov    rbp,QWORD PTR [rdi+0x40]
   1afe6:	call   1a6d0 <fd_open>
   1afeb:	test   eax,eax
   1afed:	js     1b030 <raw_pwrite_aligned+0x60>
   1afef:	mov    edi,DWORD PTR [rbp+0x0]
   1aff2:	test   r13,r13
   1aff5:	js     1b00a <raw_pwrite_aligned+0x3a>
   1aff7:	xor    edx,edx
   1aff9:	mov    rsi,r13
   1affc:	call   3620 <lseek64@plt>
   1b001:	cmp    rax,0xffffffffffffffff
   1b005:	je     1b046 <raw_pwrite_aligned+0x76>
   1b007:	mov    edi,DWORD PTR [rbp+0x0]
   1b00a:	mov    DWORD PTR [rbp+0x8],0x0
   1b011:	movsxd rdx,ebx
   1b014:	mov    rsi,r12
   1b017:	call   4620 <qemu_write>
   1b01c:	mov    edx,eax
   1b01e:	test   eax,eax
   1b020:	js     1b030 <raw_pwrite_aligned+0x60>
   1b022:	add    rsp,0x8
   1b026:	mov    eax,edx
   1b028:	pop    rbx
   1b029:	pop    rbp
   1b02a:	pop    r12
   1b02c:	pop    r13
   1b02e:	ret    
   1b02f:	nop
   1b030:	call   30b0 <__errno_location@plt>
   1b035:	mov    edx,DWORD PTR [rax]
   1b037:	add    rsp,0x8
   1b03b:	pop    rbx
   1b03c:	pop    rbp
   1b03d:	neg    edx
   1b03f:	pop    r12
   1b041:	pop    r13
   1b043:	mov    eax,edx
   1b045:	ret    
   1b046:	add    DWORD PTR [rbp+0x8],0x1
   1b04a:	mov    edx,0xfffffffb
   1b04f:	jmp    1b022 <raw_pwrite_aligned+0x52>
   1b051:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b05c:	nop    DWORD PTR [rax+0x0]

000000000001b060 <raw_pwrite>:
   1b060:	push   r15
   1b062:	mov    r15d,ecx
   1b065:	push   r14
   1b067:	mov    r14,rdx
   1b06a:	push   r13
   1b06c:	push   r12
   1b06e:	xor    r12d,r12d
   1b071:	push   rbp
   1b072:	mov    rbp,rsi
   1b075:	push   rbx
   1b076:	sub    rsp,0x28
   1b07a:	mov    r13,QWORD PTR [rdi+0x40]
   1b07e:	mov    QWORD PTR [rsp+0x8],rdi
   1b083:	mov    rdx,QWORD PTR [r13+0x28]
   1b087:	test   rdx,rdx
   1b08a:	je     1b135 <raw_pwrite+0xd5>
   1b090:	mov    r8,rsi
   1b093:	and    r8d,0x1ff
   1b09a:	jne    1b160 <raw_pwrite+0x100>
   1b0a0:	test   r15d,0x1ff
   1b0a7:	je     1b128 <raw_pwrite+0xc8>
   1b0a9:	mov    ecx,r15d
   1b0ac:	and    ecx,0xfffffe00
   1b0b2:	jne    1b0de <raw_pwrite+0x7e>
   1b0b4:	jmp    1b220 <raw_pwrite+0x1c0>
   1b0b9:	nop    DWORD PTR [rax+0x0]
   1b0c0:	sub    r15d,eax
   1b0c3:	movsxd rdx,eax
   1b0c6:	add    r12d,eax
   1b0c9:	mov    ecx,r15d
   1b0cc:	add    r14,rdx
   1b0cf:	add    rbp,rdx
   1b0d2:	and    ecx,0xfffffe00
   1b0d8:	je     1b220 <raw_pwrite+0x1c0>
   1b0de:	cmp    ecx,0x4000
   1b0e4:	mov    ebx,0x4000
   1b0e9:	mov    rdi,QWORD PTR [r13+0x28]
   1b0ed:	mov    rsi,r14
   1b0f0:	cmovle ebx,ecx
   1b0f3:	movsxd rdx,ebx
   1b0f6:	call   33b0 <memcpy@plt>
   1b0fb:	mov    rdx,QWORD PTR [r13+0x28]
   1b0ff:	mov    rdi,QWORD PTR [rsp+0x8]
   1b104:	mov    ecx,ebx
   1b106:	mov    rsi,rbp
   1b109:	call   1afd0 <raw_pwrite_aligned>
   1b10e:	test   eax,eax
   1b110:	jns    1b0c0 <raw_pwrite+0x60>
   1b112:	add    rsp,0x28
   1b116:	pop    rbx
   1b117:	pop    rbp
   1b118:	pop    r12
   1b11a:	pop    r13
   1b11c:	pop    r14
   1b11e:	pop    r15
   1b120:	ret    
   1b121:	nop    DWORD PTR [rax+0x0]
   1b128:	test   r14d,0x1ff
   1b12f:	jne    1b0a9 <raw_pwrite+0x49>
   1b135:	mov    rdi,QWORD PTR [rsp+0x8]
   1b13a:	mov    ecx,r15d
   1b13d:	mov    rdx,r14
   1b140:	mov    rsi,rbp
   1b143:	call   1afd0 <raw_pwrite_aligned>
   1b148:	add    rsp,0x28
   1b14c:	pop    rbx
   1b14d:	add    eax,r12d
   1b150:	pop    rbp
   1b151:	pop    r12
   1b153:	pop    r13
   1b155:	pop    r14
   1b157:	pop    r15
   1b159:	ret    
   1b15a:	nop    WORD PTR [rax+rax*1+0x0]
   1b160:	mov    r10,rsi
   1b163:	movsxd rbx,r8d
   1b166:	mov    ecx,0x200
   1b16b:	mov    QWORD PTR [rsp+0x18],r8
   1b170:	sub    r10,rbx
   1b173:	mov    rsi,r10
   1b176:	mov    QWORD PTR [rsp+0x10],r10
   1b17b:	call   1a890 <raw_pread_aligned>
   1b180:	test   eax,eax
   1b182:	js     1b112 <raw_pwrite+0xb2>
   1b184:	mov    r8,QWORD PTR [rsp+0x18]
   1b189:	mov    r12d,0x200
   1b18f:	mov    rdx,QWORD PTR [r13+0x28]
   1b193:	mov    r10,QWORD PTR [rsp+0x10]
   1b198:	sub    r12d,r8d
   1b19b:	cmp    r15d,r12d
   1b19e:	cmovle r12d,r15d
   1b1a2:	add    rbx,rdx
   1b1a5:	movsxd r8,r12d
   1b1a8:	cmp    r8,0x8
   1b1ac:	jb     1b2a8 <raw_pwrite+0x248>
   1b1b2:	mov    rax,QWORD PTR [r14]
   1b1b5:	lea    rdi,[rbx+0x8]
   1b1b9:	mov    rsi,r14
   1b1bc:	and    rdi,0xfffffffffffffff8
   1b1c0:	mov    QWORD PTR [rbx],rax
   1b1c3:	mov    rax,QWORD PTR [r14+r8*1-0x8]
   1b1c8:	mov    QWORD PTR [rbx+r8*1-0x8],rax
   1b1cd:	sub    rbx,rdi
   1b1d0:	lea    rcx,[rbx+r8*1]
   1b1d4:	sub    rsi,rbx
   1b1d7:	shr    rcx,0x3
   1b1db:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1b1de:	mov    rdx,QWORD PTR [r13+0x28]
   1b1e2:	mov    rdi,QWORD PTR [rsp+0x8]
   1b1e7:	mov    ecx,0x200
   1b1ec:	mov    rsi,r10
   1b1ef:	mov    QWORD PTR [rsp+0x10],r8
   1b1f4:	call   1afd0 <raw_pwrite_aligned>
   1b1f9:	test   eax,eax
   1b1fb:	js     1b112 <raw_pwrite+0xb2>
   1b201:	mov    eax,r12d
   1b204:	sub    r15d,r12d
   1b207:	je     1b112 <raw_pwrite+0xb2>
   1b20d:	mov    r8,QWORD PTR [rsp+0x10]
   1b212:	add    r14,r8
   1b215:	add    rbp,r8
   1b218:	jmp    1b0a0 <raw_pwrite+0x40>
   1b21d:	nop    DWORD PTR [rax]
   1b220:	mov    eax,r12d
   1b223:	test   r15d,r15d
   1b226:	je     1b112 <raw_pwrite+0xb2>
   1b22c:	mov    rdx,QWORD PTR [r13+0x28]
   1b230:	mov    rdi,QWORD PTR [rsp+0x8]
   1b235:	mov    ecx,0x200
   1b23a:	mov    rsi,rbp
   1b23d:	call   1a890 <raw_pread_aligned>
   1b242:	test   eax,eax
   1b244:	js     1b112 <raw_pwrite+0xb2>
   1b24a:	mov    rdx,QWORD PTR [r13+0x28]
   1b24e:	cmp    r15d,0x8
   1b252:	jae    1b2dc <raw_pwrite+0x27c>
   1b258:	test   r15b,0x4
   1b25c:	jne    1b328 <raw_pwrite+0x2c8>
   1b262:	test   r15d,r15d
   1b265:	je     1b27b <raw_pwrite+0x21b>
   1b267:	movzx  eax,BYTE PTR [r14]
   1b26b:	mov    BYTE PTR [rdx],al
   1b26d:	test   r15b,0x2
   1b271:	jne    1b342 <raw_pwrite+0x2e2>
   1b277:	mov    rdx,QWORD PTR [r13+0x28]
   1b27b:	mov    rdi,QWORD PTR [rsp+0x8]
   1b280:	mov    ecx,0x200
   1b285:	mov    rsi,rbp
   1b288:	call   1afd0 <raw_pwrite_aligned>
   1b28d:	test   eax,eax
   1b28f:	js     1b112 <raw_pwrite+0xb2>
   1b295:	cmp    eax,r15d
   1b298:	cmovg  eax,r15d
   1b29c:	add    eax,r12d
   1b29f:	jmp    1b112 <raw_pwrite+0xb2>
   1b2a4:	nop    DWORD PTR [rax+0x0]
   1b2a8:	test   r8b,0x4
   1b2ac:	jne    1b310 <raw_pwrite+0x2b0>
   1b2ae:	test   r8,r8
   1b2b1:	je     1b1e2 <raw_pwrite+0x182>
   1b2b7:	movzx  eax,BYTE PTR [r14]
   1b2bb:	mov    BYTE PTR [rbx],al
   1b2bd:	test   r8b,0x2
   1b2c1:	je     1b1de <raw_pwrite+0x17e>
   1b2c7:	movzx  eax,WORD PTR [r14+r8*1-0x2]
   1b2cd:	mov    WORD PTR [rbx+r8*1-0x2],ax
   1b2d3:	mov    rdx,QWORD PTR [r13+0x28]
   1b2d7:	jmp    1b1e2 <raw_pwrite+0x182>
   1b2dc:	mov    rax,QWORD PTR [r14]
   1b2df:	lea    rdi,[rdx+0x8]
   1b2e3:	mov    rsi,r14
   1b2e6:	and    rdi,0xfffffffffffffff8
   1b2ea:	mov    QWORD PTR [rdx],rax
   1b2ed:	mov    eax,r15d
   1b2f0:	mov    rcx,QWORD PTR [r14+rax*1-0x8]
   1b2f5:	mov    QWORD PTR [rdx+rax*1-0x8],rcx
   1b2fa:	sub    rdx,rdi
   1b2fd:	sub    rsi,rdx
   1b300:	add    edx,r15d
   1b303:	shr    edx,0x3
   1b306:	mov    ecx,edx
   1b308:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1b30b:	jmp    1b277 <raw_pwrite+0x217>
   1b310:	mov    eax,DWORD PTR [r14]
   1b313:	mov    DWORD PTR [rbx],eax
   1b315:	mov    eax,DWORD PTR [r14+r8*1-0x4]
   1b31a:	mov    DWORD PTR [rbx+r8*1-0x4],eax
   1b31f:	mov    rdx,QWORD PTR [r13+0x28]
   1b323:	jmp    1b1e2 <raw_pwrite+0x182>
   1b328:	mov    eax,DWORD PTR [r14]
   1b32b:	mov    DWORD PTR [rdx],eax
   1b32d:	mov    eax,r15d
   1b330:	mov    ecx,DWORD PTR [r14+rax*1-0x4]
   1b335:	mov    DWORD PTR [rdx+rax*1-0x4],ecx
   1b339:	mov    rdx,QWORD PTR [r13+0x28]
   1b33d:	jmp    1b27b <raw_pwrite+0x21b>
   1b342:	mov    eax,r15d
   1b345:	movzx  ecx,WORD PTR [r14+rax*1-0x2]
   1b34b:	mov    WORD PTR [rdx+rax*1-0x2],cx
   1b350:	mov    rdx,QWORD PTR [r13+0x28]
   1b354:	jmp    1b27b <raw_pwrite+0x21b>
   1b359:	nop    DWORD PTR [rax+0x0]

000000000001b360 <raw_aio_remove>:
   1b360:	mov    rax,QWORD PTR [rip+0xd2e1]        # 28648 <posix_aio_state>
   1b367:	mov    rdx,QWORD PTR [rax+0x8]
   1b36b:	test   rdx,rdx
   1b36e:	je     1b391 <raw_aio_remove+0x31>
   1b370:	cmp    rdx,rdi
   1b373:	jne    1b388 <raw_aio_remove+0x28>
   1b375:	jmp    1b3c0 <raw_aio_remove+0x60>
   1b377:	nop    WORD PTR [rax+rax*1+0x0]
   1b380:	cmp    rax,rdi
   1b383:	je     1b3b0 <raw_aio_remove+0x50>
   1b385:	mov    rdx,rax
   1b388:	mov    rax,QWORD PTR [rdx+0x78]
   1b38c:	test   rax,rax
   1b38f:	jne    1b380 <raw_aio_remove+0x20>
   1b391:	mov    rcx,QWORD PTR [rip+0xd168]        # 28500 <stderr@@GLIBC_2.2.5>
   1b398:	mov    edx,0x27
   1b39d:	mov    esi,0x1
   1b3a2:	lea    rdi,[rip+0x52bf]        # 20668 <__PRETTY_FUNCTION__.14124+0x68>
   1b3a9:	jmp    3610 <fwrite@plt>
   1b3ae:	xchg   ax,ax
   1b3b0:	add    rdx,0x78
   1b3b4:	mov    rax,QWORD PTR [rdi+0x78]
   1b3b8:	mov    QWORD PTR [rdx],rax
   1b3bb:	jmp    19ba0 <qemu_aio_release>
   1b3c0:	lea    rdx,[rax+0x8]
   1b3c4:	jmp    1b3b4 <raw_aio_remove+0x54>
   1b3c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b3d0 <raw_aio_flush>:
   1b3d0:	push   rbx
   1b3d1:	mov    r8,rsi
   1b3d4:	mov    r9,rdx
   1b3d7:	xor    ecx,ecx
   1b3d9:	xor    edx,edx
   1b3db:	xor    esi,esi
   1b3dd:	call   1ac00 <raw_aio_setup>
   1b3e2:	test   rax,rax
   1b3e5:	je     1b400 <raw_aio_flush+0x30>
   1b3e7:	lea    rdi,[rax+0x28]
   1b3eb:	mov    rbx,rax
   1b3ee:	call   1a590 <qemu_paio_fsync>
   1b3f3:	test   eax,eax
   1b3f5:	js     1b410 <raw_aio_flush+0x40>
   1b3f7:	mov    rax,rbx
   1b3fa:	pop    rbx
   1b3fb:	ret    
   1b3fc:	nop    DWORD PTR [rax+0x0]
   1b400:	xor    ebx,ebx
   1b402:	mov    rax,rbx
   1b405:	pop    rbx
   1b406:	ret    
   1b407:	nop    WORD PTR [rax+rax*1+0x0]
   1b410:	mov    rdi,rbx
   1b413:	xor    ebx,ebx
   1b415:	call   1b360 <raw_aio_remove>
   1b41a:	jmp    1b3f7 <raw_aio_flush+0x27>
   1b41c:	nop    DWORD PTR [rax+0x0]

000000000001b420 <raw_aio_cancel>:
   1b420:	push   rbp
   1b421:	mov    rbp,rdi
   1b424:	push   rbx
   1b425:	lea    rbx,[rdi+0x28]
   1b429:	mov    rsi,rbx
   1b42c:	sub    rsp,0x8
   1b430:	mov    edi,DWORD PTR [rdi+0x28]
   1b433:	call   1a650 <qemu_paio_cancel>
   1b438:	cmp    eax,0x2
   1b43b:	je     1b450 <raw_aio_cancel+0x30>
   1b43d:	add    rsp,0x8
   1b441:	mov    rdi,rbp
   1b444:	pop    rbx
   1b445:	pop    rbp
   1b446:	jmp    1b360 <raw_aio_remove>
   1b44b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b450:	mov    rdi,rbx
   1b453:	call   1a620 <qemu_paio_error>
   1b458:	cmp    eax,0x73
   1b45b:	jne    1b43d <raw_aio_cancel+0x1d>
   1b45d:	mov    rdi,rbx
   1b460:	call   1a620 <qemu_paio_error>
   1b465:	cmp    eax,0x73
   1b468:	je     1b450 <raw_aio_cancel+0x30>
   1b46a:	jmp    1b43d <raw_aio_cancel+0x1d>
   1b46c:	nop    DWORD PTR [rax+0x0]

000000000001b470 <raw_aio_write>:
   1b470:	push   r13
   1b472:	mov    r13,rsi
   1b475:	push   r12
   1b477:	mov    r12,rdx
   1b47a:	push   rbp
   1b47b:	mov    rbp,rdi
   1b47e:	push   rbx
   1b47f:	sub    rsp,0x18
   1b483:	mov    rax,QWORD PTR [rdi+0x40]
   1b487:	cmp    QWORD PTR [rax+0x28],0x0
   1b48c:	jne    1b4d0 <raw_aio_write+0x60>
   1b48e:	mov    rdx,r12
   1b491:	mov    rsi,r13
   1b494:	mov    rdi,rbp
   1b497:	call   1ac00 <raw_aio_setup>
   1b49c:	mov    rbx,rax
   1b49f:	test   rax,rax
   1b4a2:	je     1b4c0 <raw_aio_write+0x50>
   1b4a4:	lea    rdi,[rax+0x28]
   1b4a8:	call   1a580 <qemu_paio_write>
   1b4ad:	test   eax,eax
   1b4af:	js     1b528 <raw_aio_write+0xb8>
   1b4b1:	add    rsp,0x18
   1b4b5:	mov    rax,rbx
   1b4b8:	pop    rbx
   1b4b9:	pop    rbp
   1b4ba:	pop    r12
   1b4bc:	pop    r13
   1b4be:	ret    
   1b4bf:	nop
   1b4c0:	add    rsp,0x18
   1b4c4:	xor    ebx,ebx
   1b4c6:	mov    rax,rbx
   1b4c9:	pop    rbx
   1b4ca:	pop    rbp
   1b4cb:	pop    r12
   1b4cd:	pop    r13
   1b4cf:	ret    
   1b4d0:	test   edx,0x1ff
   1b4d6:	je     1b48e <raw_aio_write+0x1e>
   1b4d8:	mov    rdx,r9
   1b4db:	mov    rsi,r8
   1b4de:	mov    DWORD PTR [rsp+0xc],ecx
   1b4e2:	call   199c0 <qemu_aio_get>
   1b4e7:	mov    ecx,DWORD PTR [rsp+0xc]
   1b4eb:	mov    rsi,r13
   1b4ee:	mov    rdx,r12
   1b4f1:	shl    rsi,0x9
   1b4f5:	mov    rdi,rbp
   1b4f8:	mov    rbx,rax
   1b4fb:	shl    ecx,0x9
   1b4fe:	call   1b060 <raw_pwrite>
   1b503:	mov    rsi,rbx
   1b506:	lea    rdi,[rip+0xfffffffffffff7b3]        # 1acc0 <raw_aio_em_cb>
   1b50d:	mov    DWORD PTR [rbx+0x80],eax
   1b513:	call   4460 <qemu_bh_new>
   1b518:	mov    rdi,rax
   1b51b:	call   44a0 <qemu_bh_schedule>
   1b520:	jmp    1b4b1 <raw_aio_write+0x41>
   1b522:	nop    WORD PTR [rax+rax*1+0x0]
   1b528:	mov    rdi,rbx
   1b52b:	xor    ebx,ebx
   1b52d:	call   1b360 <raw_aio_remove>
   1b532:	jmp    1b4b1 <raw_aio_write+0x41>
   1b537:	nop    WORD PTR [rax+rax*1+0x0]

000000000001b540 <raw_aio_read>:
   1b540:	push   r13
   1b542:	mov    r13,rsi
   1b545:	push   r12
   1b547:	mov    r12,rdx
   1b54a:	push   rbp
   1b54b:	mov    rbp,rdi
   1b54e:	push   rbx
   1b54f:	sub    rsp,0x18
   1b553:	mov    rax,QWORD PTR [rdi+0x40]
   1b557:	cmp    QWORD PTR [rax+0x28],0x0
   1b55c:	jne    1b5a0 <raw_aio_read+0x60>
   1b55e:	mov    rdx,r12
   1b561:	mov    rsi,r13
   1b564:	mov    rdi,rbp
   1b567:	call   1ac00 <raw_aio_setup>
   1b56c:	mov    rbx,rax
   1b56f:	test   rax,rax
   1b572:	je     1b590 <raw_aio_read+0x50>
   1b574:	lea    rdi,[rax+0x28]
   1b578:	call   1a570 <qemu_paio_read>
   1b57d:	test   eax,eax
   1b57f:	js     1b5f8 <raw_aio_read+0xb8>
   1b581:	add    rsp,0x18
   1b585:	mov    rax,rbx
   1b588:	pop    rbx
   1b589:	pop    rbp
   1b58a:	pop    r12
   1b58c:	pop    r13
   1b58e:	ret    
   1b58f:	nop
   1b590:	add    rsp,0x18
   1b594:	xor    ebx,ebx
   1b596:	mov    rax,rbx
   1b599:	pop    rbx
   1b59a:	pop    rbp
   1b59b:	pop    r12
   1b59d:	pop    r13
   1b59f:	ret    
   1b5a0:	test   edx,0x1ff
   1b5a6:	je     1b55e <raw_aio_read+0x1e>
   1b5a8:	mov    rdx,r9
   1b5ab:	mov    rsi,r8
   1b5ae:	mov    DWORD PTR [rsp+0xc],ecx
   1b5b2:	call   199c0 <qemu_aio_get>
   1b5b7:	mov    ecx,DWORD PTR [rsp+0xc]
   1b5bb:	mov    rsi,r13
   1b5be:	mov    rdx,r12
   1b5c1:	shl    rsi,0x9
   1b5c5:	mov    rdi,rbp
   1b5c8:	mov    rbx,rax
   1b5cb:	shl    ecx,0x9
   1b5ce:	call   1a950 <raw_pread>
   1b5d3:	mov    rsi,rbx
   1b5d6:	lea    rdi,[rip+0xfffffffffffff6e3]        # 1acc0 <raw_aio_em_cb>
   1b5dd:	mov    DWORD PTR [rbx+0x80],eax
   1b5e3:	call   4460 <qemu_bh_new>
   1b5e8:	mov    rdi,rax
   1b5eb:	call   44a0 <qemu_bh_schedule>
   1b5f0:	jmp    1b581 <raw_aio_read+0x41>
   1b5f2:	nop    WORD PTR [rax+rax*1+0x0]
   1b5f8:	mov    rdi,rbx
   1b5fb:	xor    ebx,ebx
   1b5fd:	call   1b360 <raw_aio_remove>
   1b602:	jmp    1b581 <raw_aio_read+0x41>
   1b607:	nop    WORD PTR [rax+rax*1+0x0]

000000000001b610 <raw_flush>:
   1b610:	sub    rsp,0x8
   1b614:	mov    rax,QWORD PTR [rdi+0x40]
   1b618:	mov    edi,DWORD PTR [rax]
   1b61a:	call   3560 <fsync@plt>
   1b61f:	test   eax,eax
   1b621:	je     1b62a <raw_flush+0x1a>
   1b623:	call   30b0 <__errno_location@plt>
   1b628:	mov    eax,DWORD PTR [rax]
   1b62a:	add    rsp,0x8
   1b62e:	ret    
   1b62f:	nop

000000000001b630 <raw_is_inserted>:
   1b630:	sub    rsp,0x8
   1b634:	mov    rcx,QWORD PTR [rdi+0x40]
   1b638:	mov    eax,DWORD PTR [rcx+0x4]
   1b63b:	cmp    eax,0x1
   1b63e:	je     1b668 <raw_is_inserted+0x38>
   1b640:	cmp    eax,0x2
   1b643:	jne    1b658 <raw_is_inserted+0x28>
   1b645:	call   1a6d0 <fd_open>
   1b64a:	add    rsp,0x8
   1b64e:	not    eax
   1b650:	shr    eax,0x1f
   1b653:	ret    
   1b654:	nop    DWORD PTR [rax+0x0]
   1b658:	mov    eax,0x1
   1b65d:	add    rsp,0x8
   1b661:	ret    
   1b662:	nop    WORD PTR [rax+rax*1+0x0]
   1b668:	mov    edi,DWORD PTR [rcx]
   1b66a:	xor    eax,eax
   1b66c:	mov    edx,0x7fffffff
   1b671:	mov    esi,0x5326
   1b676:	call   3250 <ioctl@plt>
   1b67b:	cmp    eax,0x4
   1b67e:	sete   al
   1b681:	add    rsp,0x8
   1b685:	movzx  eax,al
   1b688:	ret    
   1b689:	nop    DWORD PTR [rax+0x0]

000000000001b690 <posix_aio_init.part.8>:
   1b690:	push   rbp
   1b691:	mov    edi,0x10
   1b696:	push   rbx
   1b697:	sub    rsp,0x148
   1b69e:	mov    rax,QWORD PTR fs:0x28
   1b6a7:	mov    QWORD PTR [rsp+0x138],rax
   1b6af:	xor    eax,eax
   1b6b1:	lea    rbp,[rsp+0x20]
   1b6b6:	call   4cb0 <qemu_malloc>
   1b6bb:	mov    rdi,rbp
   1b6be:	mov    rbx,rax
   1b6c1:	call   3370 <sigemptyset@plt>
   1b6c6:	mov    rdi,rbp
   1b6c9:	mov    esi,0xc
   1b6ce:	call   3680 <sigaddset@plt>
   1b6d3:	xor    edx,edx
   1b6d5:	mov    rsi,rbp
   1b6d8:	mov    edi,0x1
   1b6dd:	call   3050 <sigprocmask@plt>
   1b6e2:	lea    rbp,[rsp+0xa0]
   1b6ea:	lea    rdi,[rsp+0xa8]
   1b6f2:	call   33a0 <sigfillset@plt>
   1b6f7:	xor    edx,edx
   1b6f9:	mov    edi,0xc
   1b6fe:	mov    rsi,rbp
   1b701:	lea    rax,[rip+0xfffffffffffff778]        # 1ae80 <aio_signal_handler>
   1b708:	mov    DWORD PTR [rsp+0x128],0x0
   1b713:	mov    QWORD PTR [rsp+0xa0],rax
   1b71b:	call   3110 <sigaction@plt>
   1b720:	mov    QWORD PTR [rbx+0x8],0x0
   1b728:	lea    rdi,[rsp+0x18]
   1b72d:	call   3280 <pipe@plt>
   1b732:	cmp    eax,0xffffffff
   1b735:	je     1b7d0 <posix_aio_init.part.8+0x140>
   1b73b:	mov    edi,DWORD PTR [rsp+0x18]
   1b73f:	mov    edx,0x800
   1b744:	mov    esi,0x4
   1b749:	mov    DWORD PTR [rbx],edi
   1b74b:	mov    eax,DWORD PTR [rsp+0x1c]
   1b74f:	mov    DWORD PTR [rbx+0x4],eax
   1b752:	xor    eax,eax
   1b754:	call   3520 <fcntl64@plt>
   1b759:	mov    edi,DWORD PTR [rbx+0x4]
   1b75c:	mov    edx,0x800
   1b761:	xor    eax,eax
   1b763:	mov    esi,0x4
   1b768:	call   3520 <fcntl64@plt>
   1b76d:	mov    edi,DWORD PTR [rbx]
   1b76f:	mov    r8,rbx
   1b772:	xor    edx,edx
   1b774:	lea    rcx,[rip+0xffffffffffffef45]        # 1a6c0 <posix_aio_flush>
   1b77b:	lea    rsi,[rip+0xfffffffffffff5de]        # 1ad60 <posix_aio_read>
   1b782:	call   19f70 <qemu_aio_set_fd_handler>
   1b787:	lea    rdi,[rsp+0xc]
   1b78c:	movabs rax,0x4000000040
   1b796:	mov    DWORD PTR [rsp+0x14],0x0
   1b79e:	mov    QWORD PTR [rsp+0xc],rax
   1b7a3:	call   1a500 <qemu_paio_init>
   1b7a8:	mov    QWORD PTR [rip+0xce99],rbx        # 28648 <posix_aio_state>
   1b7af:	xor    eax,eax
   1b7b1:	mov    rcx,QWORD PTR [rsp+0x138]
   1b7b9:	xor    rcx,QWORD PTR fs:0x28
   1b7c2:	jne    1b800 <posix_aio_init.part.8+0x170>
   1b7c4:	add    rsp,0x148
   1b7cb:	pop    rbx
   1b7cc:	pop    rbp
   1b7cd:	ret    
   1b7ce:	xchg   ax,ax
   1b7d0:	mov    rcx,QWORD PTR [rip+0xcd29]        # 28500 <stderr@@GLIBC_2.2.5>
   1b7d7:	mov    edx,0x16
   1b7dc:	mov    esi,0x1
   1b7e1:	lea    rdi,[rip+0x4e3b]        # 20623 <__PRETTY_FUNCTION__.14124+0x23>
   1b7e8:	call   3610 <fwrite@plt>
   1b7ed:	mov    rdi,rbx
   1b7f0:	call   4ca0 <qemu_free>
   1b7f5:	call   30b0 <__errno_location@plt>
   1b7fa:	mov    eax,DWORD PTR [rax]
   1b7fc:	neg    eax
   1b7fe:	jmp    1b7b1 <posix_aio_init.part.8+0x121>
   1b800:	call   3190 <__stack_chk_fail@plt>
   1b805:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001b810 <raw_open>:
   1b810:	push   r13
   1b812:	mov    r13,rsi
   1b815:	push   r12
   1b817:	mov    r12,rdi
   1b81a:	push   rbp
   1b81b:	mov    ebp,edx
   1b81d:	push   rbx
   1b81e:	sub    rsp,0x8
   1b822:	cmp    QWORD PTR [rip+0xce1e],0x0        # 28648 <posix_aio_state>
   1b82a:	mov    rbx,QWORD PTR [rdi+0x40]
   1b82e:	je     1b920 <raw_open+0x110>
   1b834:	mov    esi,ebp
   1b836:	mov    DWORD PTR [rbx+0x8],0x0
   1b83d:	and    esi,0x3
   1b840:	cmp    esi,0x2
   1b843:	je     1b850 <raw_open+0x40>
   1b845:	mov    DWORD PTR [r12+0x8],0x1
   1b84e:	xor    esi,esi
   1b850:	mov    eax,esi
   1b852:	or     eax,0x240
   1b857:	test   bpl,0x4
   1b85b:	cmovne esi,eax
   1b85e:	test   bpl,0x20
   1b862:	je     1b8e8 <raw_open+0xd8>
   1b868:	mov    DWORD PTR [rbx+0x4],0x0
   1b86f:	or     esi,0x4000
   1b875:	mov    edx,0x1a4
   1b87a:	xor    eax,eax
   1b87c:	mov    rdi,r13
   1b87f:	call   3500 <open64@plt>
   1b884:	mov    ebp,eax
   1b886:	test   eax,eax
   1b888:	jns    1b8b0 <raw_open+0xa0>
   1b88a:	call   30b0 <__errno_location@plt>
   1b88f:	mov    eax,DWORD PTR [rax]
   1b891:	mov    ebx,eax
   1b893:	neg    ebx
   1b895:	cmp    eax,0x1e
   1b898:	mov    eax,0xfffffff3
   1b89d:	cmove  ebx,eax
   1b8a0:	add    rsp,0x8
   1b8a4:	mov    eax,ebx
   1b8a6:	pop    rbx
   1b8a7:	pop    rbp
   1b8a8:	pop    r12
   1b8aa:	pop    r13
   1b8ac:	ret    
   1b8ad:	nop    DWORD PTR [rax]
   1b8b0:	mov    DWORD PTR [rbx],eax
   1b8b2:	mov    esi,0x4000
   1b8b7:	mov    edi,0x200
   1b8bc:	mov    QWORD PTR [rbx+0x28],0x0
   1b8c4:	call   46f0 <qemu_memalign>
   1b8c9:	mov    QWORD PTR [rbx+0x28],rax
   1b8cd:	test   rax,rax
   1b8d0:	je     1b930 <raw_open+0x120>
   1b8d2:	xor    ebx,ebx
   1b8d4:	add    rsp,0x8
   1b8d8:	mov    eax,ebx
   1b8da:	pop    rbx
   1b8db:	pop    rbp
   1b8dc:	pop    r12
   1b8de:	pop    r13
   1b8e0:	ret    
   1b8e1:	nop    DWORD PTR [rax+0x0]
   1b8e8:	mov    eax,esi
   1b8ea:	mov    DWORD PTR [rbx+0x4],0x0
   1b8f1:	mov    edx,0x1a4
   1b8f6:	mov    rdi,r13
   1b8f9:	or     ah,0x10
   1b8fc:	and    ebp,0x40
   1b8ff:	cmove  esi,eax
   1b902:	xor    eax,eax
   1b904:	call   3500 <open64@plt>
   1b909:	test   eax,eax
   1b90b:	js     1b88a <raw_open+0x7a>
   1b911:	mov    DWORD PTR [rbx],eax
   1b913:	mov    QWORD PTR [rbx+0x28],0x0
   1b91b:	xor    ebx,ebx
   1b91d:	jmp    1b8d4 <raw_open+0xc4>
   1b91f:	nop
   1b920:	call   1b690 <posix_aio_init.part.8>
   1b925:	jmp    1b834 <raw_open+0x24>
   1b92a:	nop    WORD PTR [rax+rax*1+0x0]
   1b930:	call   30b0 <__errno_location@plt>
   1b935:	mov    edi,ebp
   1b937:	mov    ebx,DWORD PTR [rax]
   1b939:	neg    ebx
   1b93b:	call   3260 <close@plt>
   1b940:	jmp    1b8a0 <raw_open+0x90>
   1b945:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001b950 <hdev_open>:
   1b950:	cmp    QWORD PTR [rip+0xccf0],0x0        # 28648 <posix_aio_state>
   1b958:	push   r14
   1b95a:	mov    r14,rdi
   1b95d:	push   r13
   1b95f:	mov    r13,rsi
   1b962:	push   r12
   1b964:	mov    r12d,edx
   1b967:	push   rbp
   1b968:	push   rbx
   1b969:	mov    rbp,QWORD PTR [rdi+0x40]
   1b96d:	je     1ba28 <hdev_open+0xd8>
   1b973:	mov    ebx,r12d
   1b976:	and    ebx,0x3
   1b979:	cmp    ebx,0x2
   1b97c:	je     1b988 <hdev_open+0x38>
   1b97e:	mov    DWORD PTR [r14+0x8],0x1
   1b986:	xor    ebx,ebx
   1b988:	test   r12b,0x20
   1b98c:	je     1b9f0 <hdev_open+0xa0>
   1b98e:	or     bh,0x40
   1b991:	mov    DWORD PTR [rbp+0x4],0x0
   1b998:	xor    edx,edx
   1b99a:	lea    rsi,[rip+0x4c99]        # 2063a <__PRETTY_FUNCTION__.14124+0x3a>
   1b9a1:	mov    rdi,r13
   1b9a4:	call   4960 <strstart>
   1b9a9:	test   eax,eax
   1b9ab:	je     1ba00 <hdev_open+0xb0>
   1b9ad:	mov    DWORD PTR [rbp+0x4],0x1
   1b9b4:	or     bh,0x8
   1b9b7:	xor    eax,eax
   1b9b9:	mov    edx,0x1a4
   1b9be:	mov    esi,ebx
   1b9c0:	mov    rdi,r13
   1b9c3:	call   3500 <open64@plt>
   1b9c8:	test   eax,eax
   1b9ca:	js     1ba38 <hdev_open+0xe8>
   1b9cc:	xor    ebx,ebx
   1b9ce:	cmp    DWORD PTR [rbp+0x4],0x2
   1b9d2:	mov    DWORD PTR [rbp+0x0],eax
   1b9d5:	je     1ba60 <hdev_open+0x110>
   1b9db:	mov    eax,ebx
   1b9dd:	pop    rbx
   1b9de:	pop    rbp
   1b9df:	pop    r12
   1b9e1:	pop    r13
   1b9e3:	pop    r14
   1b9e5:	ret    
   1b9e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b9f0:	mov    eax,ebx
   1b9f2:	or     ah,0x10
   1b9f5:	and    r12d,0x40
   1b9f9:	cmove  ebx,eax
   1b9fc:	jmp    1b991 <hdev_open+0x41>
   1b9fe:	xchg   ax,ax
   1ba00:	xor    edx,edx
   1ba02:	lea    rsi,[rip+0x4c39]        # 20642 <__PRETTY_FUNCTION__.14124+0x42>
   1ba09:	mov    rdi,r13
   1ba0c:	call   4960 <strstart>
   1ba11:	test   eax,eax
   1ba13:	je     1ba80 <hdev_open+0x130>
   1ba15:	mov    DWORD PTR [rbp+0xc],ebx
   1ba18:	or     bh,0x8
   1ba1b:	mov    DWORD PTR [rbp+0x4],0x2
   1ba22:	jmp    1b9b7 <hdev_open+0x67>
   1ba24:	nop    DWORD PTR [rax+0x0]
   1ba28:	call   1b690 <posix_aio_init.part.8>
   1ba2d:	jmp    1b973 <hdev_open+0x23>
   1ba32:	nop    WORD PTR [rax+rax*1+0x0]
   1ba38:	call   30b0 <__errno_location@plt>
   1ba3d:	mov    eax,DWORD PTR [rax]
   1ba3f:	mov    ebx,eax
   1ba41:	neg    ebx
   1ba43:	cmp    eax,0x1e
   1ba46:	mov    eax,0xfffffff3
   1ba4b:	cmove  ebx,eax
   1ba4e:	mov    eax,ebx
   1ba50:	pop    rbx
   1ba51:	pop    rbp
   1ba52:	pop    r12
   1ba54:	pop    r13
   1ba56:	pop    r14
   1ba58:	ret    
   1ba59:	nop    DWORD PTR [rax+0x0]
   1ba60:	mov    edi,eax
   1ba62:	call   3260 <close@plt>
   1ba67:	mov    DWORD PTR [rbp+0x0],0xffffffff
   1ba6e:	mov    eax,ebx
   1ba70:	mov    DWORD PTR [rbp+0x24],0x1
   1ba77:	pop    rbx
   1ba78:	pop    rbp
   1ba79:	pop    r12
   1ba7b:	pop    r13
   1ba7d:	pop    r14
   1ba7f:	ret    
   1ba80:	xor    edx,edx
   1ba82:	lea    rsi,[rip+0x4bc1]        # 2064a <__PRETTY_FUNCTION__.14124+0x4a>
   1ba89:	mov    rdi,r13
   1ba8c:	call   4960 <strstart>
   1ba91:	test   eax,eax
   1ba93:	je     1b9b7 <hdev_open+0x67>
   1ba99:	mov    DWORD PTR [r14+0x1c],0x1
   1baa1:	jmp    1b9b7 <hdev_open+0x67>
   1baa6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001bab0 <raw_truncate>:
   1bab0:	push   rbx
   1bab1:	mov    rax,QWORD PTR [rdi+0x40]
   1bab5:	mov    ebx,DWORD PTR [rax+0x4]
   1bab8:	test   ebx,ebx
   1baba:	jne    1bae0 <raw_truncate+0x30>
   1babc:	mov    edi,DWORD PTR [rax]
   1babe:	call   34c0 <ftruncate64@plt>
   1bac3:	test   eax,eax
   1bac5:	js     1bad0 <raw_truncate+0x20>
   1bac7:	mov    eax,ebx
   1bac9:	pop    rbx
   1baca:	ret    
   1bacb:	nop    DWORD PTR [rax+rax*1+0x0]
   1bad0:	call   30b0 <__errno_location@plt>
   1bad5:	mov    ebx,DWORD PTR [rax]
   1bad7:	neg    ebx
   1bad9:	mov    eax,ebx
   1badb:	pop    rbx
   1badc:	ret    
   1badd:	nop    DWORD PTR [rax]
   1bae0:	mov    ebx,0xffffffa1
   1bae5:	jmp    1bac7 <raw_truncate+0x17>
   1bae7:	nop    WORD PTR [rax+rax*1+0x0]

000000000001baf0 <__libc_csu_init>:
   1baf0:	push   r15
   1baf2:	mov    r15,rdx
   1baf5:	push   r14
   1baf7:	mov    r14,rsi
   1bafa:	push   r13
   1bafc:	mov    r13d,edi
   1baff:	push   r12
   1bb01:	lea    r12,[rip+0xaf20]        # 26a28 <__frame_dummy_init_array_entry>
   1bb08:	push   rbp
   1bb09:	lea    rbp,[rip+0xaf20]        # 26a30 <__init_array_end>
   1bb10:	push   rbx
   1bb11:	sub    rbp,r12
   1bb14:	sub    rsp,0x8
   1bb18:	call   3000 <_init>
   1bb1d:	sar    rbp,0x3
   1bb21:	je     1bb3e <__libc_csu_init+0x4e>
   1bb23:	xor    ebx,ebx
   1bb25:	nop    DWORD PTR [rax]
   1bb28:	mov    rdx,r15
   1bb2b:	mov    rsi,r14
   1bb2e:	mov    edi,r13d
   1bb31:	call   QWORD PTR [r12+rbx*8]
   1bb35:	add    rbx,0x1
   1bb39:	cmp    rbp,rbx
   1bb3c:	jne    1bb28 <__libc_csu_init+0x38>
   1bb3e:	add    rsp,0x8
   1bb42:	pop    rbx
   1bb43:	pop    rbp
   1bb44:	pop    r12
   1bb46:	pop    r13
   1bb48:	pop    r14
   1bb4a:	pop    r15
   1bb4c:	ret    
   1bb4d:	nop    DWORD PTR [rax]

000000000001bb50 <__libc_csu_fini>:
   1bb50:	ret    

Disassembly of section .fini:

000000000001bb54 <_fini>:
   1bb54:	sub    rsp,0x8
   1bb58:	add    rsp,0x8
   1bb5c:	ret    
