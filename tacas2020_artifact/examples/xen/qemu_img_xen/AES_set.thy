(*
Copyright 2019

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*)
theory AES_set
  imports "../../../isabelle/VCG/HTriple"
begin

(* OLD, AES_set_encrypt_key doesn't regenerate with current code_abstraction *)

locale "qemu_img_xen" = execution_context + exec_code +
  fixes AES_set_encrypt_key_0x7cb7_retval\<^sub>v :: \<open>64 word\<close>
  assumes fetch:
    "fetch 0x7880 \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x7883 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 31897)), 6)"
    "fetch 0x7889 \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x788c \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 31897)), 6)"
    "fetch 0x7892 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rsi))), 2)"
    "fetch 0x7894 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 4294967231)), 3)"
    "fetch 0x7897 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 128)), 5)"
    "fetch 0x789c \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 31264)), 6)"
    "fetch 0x78a2 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 128)), 6)"
    "fetch 0x78a8 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 31296)), 6)"
    "fetch 0x78ae \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 240)))) (Immediate SixtyFour (ImmVal 10)), 10)"
    "fetch 0x78b8 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x78ba \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x78bc \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x78bd \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x78be \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_FromReg (General SixtyFour rdi))))), 3)"
    "fetch 0x78c1 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r8)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 1))))), 5)"
    "fetch 0x78c6 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x78c9 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r8)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x78cd \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x78d0 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r8)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 3))))), 5)"
    "fetch 0x78d5 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x78d8 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r8)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 2))))), 5)"
    "fetch 0x78dd \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r8)) (Immediate SixtyFour (ImmVal 8)), 4)"
    "fetch 0x78e1 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r8)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x78e4 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x78e7 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r9)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 4))))), 5)"
    "fetch 0x78ec \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 5))))), 4)"
    "fetch 0x78f0 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r9)) (Immediate SixtyFour (ImmVal 24)), 4)"
    "fetch 0x78f4 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x78f7 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x78fa \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 7))))), 4)"
    "fetch 0x78fe \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7901 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 6))))), 4)"
    "fetch 0x7905 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 8)), 3)"
    "fetch 0x7908 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x790b \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo r9))), 4)"
    "fetch 0x790f \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r10)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 8))))), 5)"
    "fetch 0x7914 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 9))))), 4)"
    "fetch 0x7918 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r10)) (Immediate SixtyFour (ImmVal 24)), 4)"
    "fetch 0x791c \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x791f \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r10)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7922 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 11))))), 4)"
    "fetch 0x7926 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r10)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7929 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 10))))), 4)"
    "fetch 0x792d \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 8)), 3)"
    "fetch 0x7930 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r10)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7933 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo r10))), 4)"
    "fetch 0x7937 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rcx)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 12))))), 4)"
    "fetch 0x793b \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 13))))), 4)"
    "fetch 0x793f \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x7942 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x7945 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7947 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 15))))), 4)"
    "fetch 0x794b \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x794d \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 14))))), 4)"
    "fetch 0x7951 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 8)), 3)"
    "fetch 0x7954 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7956 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 12)))) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7959 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 128)), 6)"
    "fetch 0x795f \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 31328)), 6)"
    "fetch 0x7965 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 16))))), 4)"
    "fetch 0x7969 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 17))))), 5)"
    "fetch 0x796e \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x7971 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7975 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7978 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 19))))), 5)"
    "fetch 0x797d \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7980 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 18))))), 5)"
    "fetch 0x7985 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 8)), 4)"
    "fetch 0x7989 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x798c \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 16)))) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x798f \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbx)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 20))))), 4)"
    "fetch 0x7993 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 21))))), 4)"
    "fetch 0x7997 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rbx)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x799a \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x799d \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x799f \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 23))))), 4)"
    "fetch 0x79a3 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x79a5 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 22))))), 4)"
    "fetch 0x79a9 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 8)), 3)"
    "fetch 0x79ac \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x79ae \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 20)))) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x79b1 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 192)), 6)"
    "fetch 0x79b7 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 31472)), 6)"
    "fetch 0x79bd \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 24))))), 4)"
    "fetch 0x79c1 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 25))))), 5)"
    "fetch 0x79c6 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x79c9 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x79cd \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x79d0 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 27))))), 5)"
    "fetch 0x79d5 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x79d8 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 26))))), 5)"
    "fetch 0x79dd \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 8)), 4)"
    "fetch 0x79e1 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x79e4 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 24)))) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x79e7 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbx)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 28))))), 4)"
    "fetch 0x79eb \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 29))))), 4)"
    "fetch 0x79ef \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rbx)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x79f2 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x79f5 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x79f7 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 31))))), 4)"
    "fetch 0x79fb \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x79fd \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 30))))), 4)"
    "fetch 0x7a01 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 8)), 3)"
    "fetch 0x7a04 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7a06 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 28)))) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x7a09 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 256)), 6)"
    "fetch 0x7a0f \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 31648)), 6)"
    "fetch 0x7a15 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x7a16 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7a18 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x7a19 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x7a1b \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x7a1d \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x7a1e \<equiv> (Binary (IS_8088 Xchg) (Reg (General Sixteen rax)) (Storage (Reg (General Sixteen rax))), 2)"
    "fetch 0x7a20 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 256)), 6)"
    "fetch 0x7a26 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 31903)), 6)"
    "fetch 0x7a2c \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 240)))) (Immediate SixtyFour (ImmVal 14)), 10)"
    "fetch 0x7a36 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 30904)), 5)"
    "fetch 0x7a3b \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 5)"
    "fetch 0x7a40 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 192)), 6)"
    "fetch 0x7a46 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 31276)), 2)"
    "fetch 0x7a48 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 240)))) (Immediate SixtyFour (ImmVal 12)), 10)"
    "fetch 0x7a52 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 30904)), 5)"
    "fetch 0x7a57 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 9)"
    "fetch 0x7a60 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 91389)))), 7)"
    "fetch 0x7a67 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7a6b \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 16777216)), 6)"
    "fetch 0x7a71 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rbx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 36)))), 4)"
    "fetch 0x7a75 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 96548)))), 7)"
    "fetch 0x7a7c \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 31371)), 2)"
    "fetch 0x7a7e \<equiv> (Binary (IS_8088 Xchg) (Reg (General Sixteen rax)) (Storage (Reg (General Sixteen rax))), 2)"
    "fetch 0x7a80 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdi))))), 3)"
    "fetch 0x7a83 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7a87 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdi)) (Immediate SixtyFour (ImmVal 4)), 4)"
    "fetch 0x7a8b \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Reg (General Eight rcx))), 3)"
    "fetch 0x7a8e \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x7a90 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rax))))))), 3)"
    "fetch 0x7a93 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x7a96 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7a9a \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 65280)), 5)"
    "fetch 0x7a9f \<equiv> (Binary (IS_8088 Or) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rbp))), 2)"
    "fetch 0x7aa1 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x7aa3 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x7aa6 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight rbp))), 4)"
    "fetch 0x7aaa \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 3)"
    "fetch 0x7aad \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 4278190080)), 6)"
    "fetch 0x7ab3 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rbp))), 2)"
    "fetch 0x7ab5 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General EightHigh rcx))), 3)"
    "fetch 0x7ab8 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 3)"
    "fetch 0x7abb \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 16711680)), 6)"
    "fetch 0x7ac1 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rbp))), 2)"
    "fetch 0x7ac3 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x7ac6 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7ac9 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7acc \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7acf \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7ad1 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r10)) (Storage (Reg (General ThirtyTwo r9))), 3)"
    "fetch 0x7ad4 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo r9))), 4)"
    "fetch 0x7ad8 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r10))), 3)"
    "fetch 0x7adb \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo r10))), 4)"
    "fetch 0x7adf \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 12)))) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7ae2 \<equiv> (Binary (IS_8088 Cmp) (Reg (General SixtyFour rbx)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x7ae5 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 31360)), 2)"
    "fetch 0x7ae7 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x7ae8 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7aea \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x7aeb \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x7aed \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x7aef \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x7af0 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 91241)))), 7)"
    "fetch 0x7af7 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 24)), 4)"
    "fetch 0x7afb \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 16777216)), 6)"
    "fetch 0x7b01 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r14)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 32)))), 4)"
    "fetch 0x7b05 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 96404)))), 7)"
    "fetch 0x7b0c \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 31524)), 2)"
    "fetch 0x7b0e \<equiv> (Binary (IS_8088 Xchg) (Reg (General Sixteen rax)) (Storage (Reg (General Sixteen rax))), 2)"
    "fetch 0x7b10 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8))))), 3)"
    "fetch 0x7b13 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 24)), 4)"
    "fetch 0x7b17 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x7b19 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7b1b \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7b1e \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x7b21 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdi))))), 3)"
    "fetch 0x7b24 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Reg (General Eight rbx))), 3)"
    "fetch 0x7b27 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x7b2a \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General EightHigh rbx))), 3)"
    "fetch 0x7b2d \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdi)) (Immediate SixtyFour (ImmVal 4)), 4)"
    "fetch 0x7b31 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rax))))))), 3)"
    "fetch 0x7b34 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 24)), 4)"
    "fetch 0x7b38 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r12)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r12))))))), 5)"
    "fetch 0x7b3d \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 65280)), 5)"
    "fetch 0x7b42 \<equiv> (Binary (IS_8088 Or) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x7b45 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x7b48 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7b4c \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r12)) (Storage (Reg (General Eight r12))), 4)"
    "fetch 0x7b50 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r12))))))), 4)"
    "fetch 0x7b54 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 4278190080)), 7)"
    "fetch 0x7b5b \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x7b5e \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7b62 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 16711680)), 7)"
    "fetch 0x7b69 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x7b6c \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x7b6f \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7b72 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7b75 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7b78 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7b7a \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r10)) (Storage (Reg (General ThirtyTwo r9))), 3)"
    "fetch 0x7b7d \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo r9))), 4)"
    "fetch 0x7b81 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r10))), 3)"
    "fetch 0x7b84 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo r10))), 4)"
    "fetch 0x7b88 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 12)))) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7b8b \<equiv> (Binary (IS_8088 Cmp) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x7b8e \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 31504)), 2)"
    "fetch 0x7b90 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x7b91 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7b93 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x7b94 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x7b96 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x7b98 \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x7b99 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 0))))), 7)"
    "fetch 0x7ba0 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 91065)))), 7)"
    "fetch 0x7ba7 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 32)), 4)"
    "fetch 0x7bab \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 16777216)), 6)"
    "fetch 0x7bb1 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r14)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 28)))), 4)"
    "fetch 0x7bb5 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 96228)))), 7)"
    "fetch 0x7bbc \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 31776)), 2)"
    "fetch 0x7bbe \<equiv> (Binary (IS_8088 Xchg) (Reg (General Sixteen rax)) (Storage (Reg (General Sixteen rax))), 2)"
    "fetch 0x7bc0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x7bc2 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General EightHigh rcx))), 3)"
    "fetch 0x7bc5 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r12)) (Storage (Reg (General Eight rcx))), 4)"
    "fetch 0x7bc9 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 32)), 4)"
    "fetch 0x7bcd \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x7bd0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7bd4 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r12)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r12))))))), 5)"
    "fetch 0x7bd9 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Reg (General Eight rax))), 3)"
    "fetch 0x7bdc \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rax))))))), 3)"
    "fetch 0x7bdf \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 65280)), 7)"
    "fetch 0x7be6 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 16711680)), 5)"
    "fetch 0x7beb \<equiv> (Binary (IS_8088 Or) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7bee \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7bf1 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 48))))), 3)"
    "fetch 0x7bf4 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 24)), 4)"
    "fetch 0x7bf8 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r11))))))), 4)"
    "fetch 0x7bfc \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r11)) (Immediate SixtyFour (ImmVal 4278190080)), 7)"
    "fetch 0x7c03 \<equiv> (Binary (IS_8088 Or) (Reg (General ThirtyTwo r11)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x7c06 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7c09 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 16)))) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7c0c \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 44))))), 3)"
    "fetch 0x7c0f \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 12)))) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7c12 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 40))))), 3)"
    "fetch 0x7c15 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7c17 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7c1a \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x7c1d \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdi))))), 3)"
    "fetch 0x7c20 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Reg (General Eight rbx))), 3)"
    "fetch 0x7c23 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x7c26 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General EightHigh rbx))), 3)"
    "fetch 0x7c29 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdi)) (Immediate SixtyFour (ImmVal 4)), 4)"
    "fetch 0x7c2d \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rax))))))), 3)"
    "fetch 0x7c30 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 24)), 4)"
    "fetch 0x7c34 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r12)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r12))))))), 5)"
    "fetch 0x7c39 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 65280)), 5)"
    "fetch 0x7c3e \<equiv> (Binary (IS_8088 Or) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x7c41 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x7c44 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7c48 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r12)) (Storage (Reg (General Eight r12))), 4)"
    "fetch 0x7c4c \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r12))))))), 4)"
    "fetch 0x7c50 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 4278190080)), 7)"
    "fetch 0x7c57 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x7c5a \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7c5e \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 16711680)), 7)"
    "fetch 0x7c65 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x7c68 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x7c6b \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7c6e \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7c71 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x7c74 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7c76 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r10)) (Storage (Reg (General ThirtyTwo r9))), 3)"
    "fetch 0x7c79 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo r9))), 4)"
    "fetch 0x7c7d \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r10))), 3)"
    "fetch 0x7c80 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo r10))), 4)"
    "fetch 0x7c84 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 12)))) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7c87 \<equiv> (Binary (IS_8088 Cmp) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x7c8a \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 31680)), 6)"
    "fetch 0x7c90 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x7c91 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7c93 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x7c94 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x7c96 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x7c98 \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x7c99 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 4294967295)), 5)"
    "fetch 0x7c9e \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x7c9f \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 4294967294)), 5)"
    "fetch 0x7ca4 \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x7cb0 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x7cb2 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x7cb5 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x7cb6 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x7cb7 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''AES_set_encrypt_key'')), 5)"
    "fetch 0x7cbc \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7cbe \<equiv> (Unary (IS_8088 Js) (Immediate SixtyFour (ImmVal 32401)), 6)"
    "fetch 0x7cc4 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r14)) (A_WordConstant 240))))), 7)"
    "fetch 0x7ccb \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x7cce \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo r9)) (Storage (Memory SixtyFour (A_Plus (A_Mult 4 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))), 8)"
    "fetch 0x7cd6 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo r9))), 3)"
    "fetch 0x7cd9 \<equiv> (Unary (IS_8088 Jle) (Immediate SixtyFour (ImmVal 32065)), 2)"
    "fetch 0x7cdb \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rax)) (Storage (Reg (General ThirtyTwo r9))), 3)"
    "fetch 0x7cde \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rcx)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x7ce1 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rsi)) (Storage (Reg (General ThirtyTwo rsi))), 2)"
    "fetch 0x7ce3 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour r14)) (A_Mult 4 (A_FromReg (General SixtyFour rax)))))), 4)"
    "fetch 0x7ce7 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 9)"
    "fetch 0x7cf0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rcx))))), 2)"
    "fetch 0x7cf2 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rax))))), 3)"
    "fetch 0x7cf5 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 4)), 3)"
    "fetch 0x7cf8 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rcx)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7cfc \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rax)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7d00 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 16)))) (Storage (Reg (General ThirtyTwo r8))), 4)"
    "fetch 0x7d04 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 20))))), 4)"
    "fetch 0x7d08 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 16)))) (Storage (Reg (General ThirtyTwo rdi))), 3)"
    "fetch 0x7d0b \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 12))))), 3)"
    "fetch 0x7d0e \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 12)))) (Storage (Reg (General ThirtyTwo r8))), 4)"
    "fetch 0x7d12 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 24))))), 4)"
    "fetch 0x7d16 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 20)))) (Storage (Reg (General ThirtyTwo rdi))), 3)"
    "fetch 0x7d19 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 8))))), 3)"
    "fetch 0x7d1c \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo r8))), 4)"
    "fetch 0x7d20 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 28))))), 4)"
    "fetch 0x7d24 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 24)))) (Storage (Reg (General ThirtyTwo rdi))), 3)"
    "fetch 0x7d27 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 4))))), 3)"
    "fetch 0x7d2a \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo r8))), 4)"
    "fetch 0x7d2e \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 28)))) (Storage (Reg (General ThirtyTwo rdi))), 3)"
    "fetch 0x7d31 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo r9))), 3)"
    "fetch 0x7d34 \<equiv> (Binary (IS_8088 Sub) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rsi))), 2)"
    "fetch 0x7d36 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rsi)) (Storage (Reg (General ThirtyTwo rdi))), 2)"
    "fetch 0x7d38 \<equiv> (Unary (IS_8088 Jl) (Immediate SixtyFour (ImmVal 31984)), 2)"
    "fetch 0x7d3a \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r14)) (A_WordConstant 240))))), 7)"
    "fetch 0x7d41 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 1)), 3)"
    "fetch 0x7d44 \<equiv> (Unary (IS_8088 Jle) (Immediate SixtyFour (ImmVal 32399)), 6)"
    "fetch 0x7d4a \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r10)) (Immediate SixtyFour (ImmVal 1)), 6)"
    "fetch 0x7d50 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r9)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 94793)))), 7)"
    "fetch 0x7d57 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 95810)))), 7)"
    "fetch 0x7d5e \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r8)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 91707)))), 7)"
    "fetch 0x7d65 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 93748)))), 7)"
    "fetch 0x7d6c \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 92717)))), 7)"
    "fetch 0x7d73 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 5)"
    "fetch 0x7d78 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 16)), 4)"
    "fetch 0x7d7c \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx))))), 3)"
    "fetch 0x7d7f \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo r10)) (Immediate SixtyFour (ImmVal 1)), 4)"
    "fetch 0x7d83 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7d86 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight r11))), 4)"
    "fetch 0x7d8a \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7d8d \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x7d90 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7d94 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General EightHigh rbx))), 3)"
    "fetch 0x7d97 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rcx)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7d9b \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r9)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7d9f \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r8)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7da3 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7da6 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x7da9 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbx))))))), 5)"
    "fetch 0x7dae \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight rbp))), 4)"
    "fetch 0x7db2 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7db6 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 3)"
    "fetch 0x7db9 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r11))))))), 4)"
    "fetch 0x7dbd \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4))))), 4)"
    "fetch 0x7dc1 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x7dc3 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7dc6 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight r11))), 4)"
    "fetch 0x7dca \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7dcd \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x7dd0 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7dd4 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General EightHigh rbx))), 3)"
    "fetch 0x7dd7 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rcx)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7ddb \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r9)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7ddf \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r8)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7de3 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7de6 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x7de9 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbx))))))), 5)"
    "fetch 0x7dee \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight rbp))), 4)"
    "fetch 0x7df2 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7df6 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 3)"
    "fetch 0x7df9 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r11))))))), 4)"
    "fetch 0x7dfd \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8))))), 4)"
    "fetch 0x7e01 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7e04 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7e07 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight r11))), 4)"
    "fetch 0x7e0b \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7e0e \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x7e11 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7e15 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General EightHigh rbx))), 3)"
    "fetch 0x7e18 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rcx)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7e1c \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r9)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7e20 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r8)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7e24 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7e27 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x7e2a \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbx))))))), 5)"
    "fetch 0x7e2f \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight rbp))), 4)"
    "fetch 0x7e33 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7e37 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 3)"
    "fetch 0x7e3a \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r11))))))), 4)"
    "fetch 0x7e3e \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r11)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 12))))), 4)"
    "fetch 0x7e42 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7e45 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7e48 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight r11))), 4)"
    "fetch 0x7e4c \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7e4f \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 24)), 3)"
    "fetch 0x7e52 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General EightHigh rbx))), 3)"
    "fetch 0x7e55 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rcx)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7e59 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7e5d \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r9)) (A_Mult 4 (A_FromReg (General SixtyFour rcx))))))), 4)"
    "fetch 0x7e61 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r8)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7e65 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo r11))), 3)"
    "fetch 0x7e68 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rbp)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x7e6b \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo r11)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbx))))))), 5)"
    "fetch 0x7e70 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General Eight rbp))), 4)"
    "fetch 0x7e74 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rbp)) (Storage (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 4)"
    "fetch 0x7e78 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_Mult 4 (A_FromReg (General SixtyFour rbp))))))), 3)"
    "fetch 0x7e7b \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsi)) (A_Mult 4 (A_FromReg (General SixtyFour r11))))))), 4)"
    "fetch 0x7e7f \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 12)))) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x7e82 \<equiv> (Binary (IS_8088 Cmp) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r14)) (A_WordConstant 240)))) (Storage (Reg (General ThirtyTwo r10))), 7)"
    "fetch 0x7e89 \<equiv> (Unary (IS_8088 Jg) (Immediate SixtyFour (ImmVal 32120)), 6)"
    "fetch 0x7e8f \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x7e91 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x7e92 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x7e93 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x7e95 \<equiv> (Nullary (IS_8088 Ret), 1)"
    and \<alpha>_def: \<open>\<alpha> = \<lparr>text_sections = [], data_sections = [], labels_to_offsets = [], binary_offset = 0\<rparr>\<close>
    and AES_set_encrypt_key\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''AES_set_encrypt_key'') = 0x7880\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>AES_set_encrypt_key_0x7cb7_retval \<equiv> AES_set_encrypt_key_0x7cb7_retval\<^sub>v\<close>

text \<open>
  Going with a binary offset of 0 for now to make things easier. (We do want to keep that field
  around, though, for future more generic usage.)
\<close>
lemma \<alpha>_boffset[simp]: \<open>binary_offset \<alpha> = 0\<close>
  unfolding \<alpha>_def
  by simp

named_theorems blocks and Ps and Qs

method step uses add del =
  subst exec_block.simps,
  rewrite_one_let',
  rewrite_one_let' add: fetch,
  rewrite_one_let',
  auto simp add: simp_rules Let'_def read_region'_def write_block'_def get'_def set'_def step_def exec_instr_def presimplify add simp del: del

method steps uses pre post regionset add del =
  auto simp: pred_logic pre regionset,
  (step add: add del: del)+,
  (auto simp add: eq_def)[1],
  auto simp: block_usage_def eq_def setcc_def cmovcc_def if'_then_else_def sub_sign_flag_def simp_rules Let'_def read_region'_def write_block'_def get'_def set'_def post regionset

(* ((simp add: assms pred_logic Ps Qs)+)? helps keep goals clean but causes issues when there are subcalls *)
method vcg_step uses assms =
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

text \<open>For @{const CASES}.\<close>
method vcg_step' uses assms =
  (rule htriples)+,
  simp,
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

method vcg_while for P :: state_pred uses assms =
  ((rule htriples)+)?,
  rule HTriple_weaken[where P=P],
  simp add: pred_logic Ps Qs assms,
  rule HTriple_while

method vcg uses acode assms =
  subst acode,
  (vcg_step assms: assms)+

end

locale "AES_set_encrypt_key" = "qemu_img_xen" +
  fixes RAX\<^sub>0\<^sub>v RBX\<^sub>0\<^sub>v RCX\<^sub>0\<^sub>v RDX\<^sub>0\<^sub>v RDI\<^sub>0\<^sub>v RSI\<^sub>0\<^sub>v RSP\<^sub>0\<^sub>v RBP\<^sub>0\<^sub>v R14\<^sub>0\<^sub>v R12\<^sub>0\<^sub>v R11\<^sub>0\<^sub>v R10\<^sub>0\<^sub>v R9\<^sub>0\<^sub>v R8\<^sub>0\<^sub>v ret_address\<^sub>v :: \<open>64 word\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>RAX\<^sub>0 \<equiv> RAX\<^sub>0\<^sub>v\<close>
definition \<open>RBX\<^sub>0 \<equiv> RBX\<^sub>0\<^sub>v\<close>
definition \<open>RCX\<^sub>0 \<equiv> RCX\<^sub>0\<^sub>v\<close>
definition \<open>RDX\<^sub>0 \<equiv> RDX\<^sub>0\<^sub>v\<close>
definition \<open>RDI\<^sub>0 \<equiv> RDI\<^sub>0\<^sub>v\<close>
definition \<open>RSI\<^sub>0 \<equiv> RSI\<^sub>0\<^sub>v\<close>
definition \<open>RSP\<^sub>0 \<equiv> RSP\<^sub>0\<^sub>v\<close>
definition \<open>RBP\<^sub>0 \<equiv> RBP\<^sub>0\<^sub>v\<close>
definition \<open>R14\<^sub>0 \<equiv> R14\<^sub>0\<^sub>v\<close>
definition \<open>R12\<^sub>0 \<equiv> R12\<^sub>0\<^sub>v\<close>
definition \<open>R11\<^sub>0 \<equiv> R11\<^sub>0\<^sub>v\<close>
definition \<open>R10\<^sub>0 \<equiv> R10\<^sub>0\<^sub>v\<close>
definition \<open>R9\<^sub>0 \<equiv> R9\<^sub>0\<^sub>v\<close>
definition \<open>R8\<^sub>0 \<equiv> R8\<^sub>0\<^sub>v\<close>
definition \<open>ret_address \<equiv> ret_address\<^sub>v\<close>

definition P_0x7880_0 :: state_pred where
  \<open>P_0x7880_0 \<sigma> \<equiv> RIP \<sigma> = 0x7880 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7880_0_def[Ps]

definition P_0x7880_0_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7880_0_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x7880_0_regions :: state_pred where
  \<open>P_0x7880_0_regions \<sigma> \<equiv> \<exists>regions. P_0x7880_0_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7883_0 :: state_pred where
  \<open>Q_0x7883_0 \<sigma> \<equiv> RIP \<sigma> = 0x7883 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x7883_0_def[Qs]

schematic_goal AES_set_encrypt_key_0_1_0x7880_0x7880_0[blocks]:
  assumes \<open>(P_0x7880_0 && P_0x7880_0_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7880 0 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7883_0 ?\<sigma> \<and> block_usage P_0x7880_0_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7880_0_def P_0x7880_0_regions_def post: Q_0x7883_0_def regionset: P_0x7880_0_regions_set_def)

definition P_0x7883_true_1 :: state_pred where
  \<open>P_0x7883_true_1 \<sigma> \<equiv> RIP \<sigma> = 0x7883 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7883_true_1_def[Ps]

definition P_0x7883_true_1_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7883_true_1_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x7883_true_1_regions :: state_pred where
  \<open>P_0x7883_true_1_regions \<sigma> \<equiv> \<exists>regions. P_0x7883_true_1_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_1 :: state_pred where
  \<open>Q_ret_address_1 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_1_def[Qs]

schematic_goal AES_set_encrypt_key_0_3_0x7883_0x7c9e_1[blocks]:
  assumes \<open>(P_0x7883_true_1 && P_0x7883_true_1_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x7c9e (Suc 0) \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_1 ?\<sigma> \<and> block_usage P_0x7883_true_1_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7883_true_1_def P_0x7883_true_1_regions_def post: Q_ret_address_1_def regionset: P_0x7883_true_1_regions_set_def)

definition P_0x7883_false_2 :: state_pred where
  \<open>P_0x7883_false_2 \<sigma> \<equiv> RIP \<sigma> = 0x7883 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7883_false_2_def[Ps]

definition P_0x7883_false_2_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7883_false_2_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x7883_false_2_regions :: state_pred where
  \<open>P_0x7883_false_2_regions \<sigma> \<equiv> \<exists>regions. P_0x7883_false_2_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x788c_2 :: state_pred where
  \<open>Q_0x788c_2 \<sigma> \<equiv> RIP \<sigma> = 0x788c \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x788c_2_def[Qs]

schematic_goal AES_set_encrypt_key_0_2_0x7883_0x7889_2[blocks]:
  assumes \<open>(P_0x7883_false_2 && P_0x7883_false_2_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x7889 2 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x788c_2 ?\<sigma> \<and> block_usage P_0x7883_false_2_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7883_false_2_def P_0x7883_false_2_regions_def post: Q_0x788c_2_def regionset: P_0x7883_false_2_regions_set_def)

definition P_0x788c_true_3 :: state_pred where
  \<open>P_0x788c_true_3 \<sigma> \<equiv> RIP \<sigma> = 0x788c \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x788c_true_3_def[Ps]

definition P_0x788c_true_3_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x788c_true_3_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x788c_true_3_regions :: state_pred where
  \<open>P_0x788c_true_3_regions \<sigma> \<equiv> \<exists>regions. P_0x788c_true_3_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_3 :: state_pred where
  \<open>Q_ret_address_3 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_3_def[Qs]

schematic_goal AES_set_encrypt_key_0_3_0x788c_0x7c9e_3[blocks]:
  assumes \<open>(P_0x788c_true_3 && P_0x788c_true_3_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x7c9e 3 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_3 ?\<sigma> \<and> block_usage P_0x788c_true_3_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x788c_true_3_def P_0x788c_true_3_regions_def post: Q_ret_address_3_def regionset: P_0x788c_true_3_regions_set_def)

definition P_0x788c_false_4 :: state_pred where
  \<open>P_0x788c_false_4 \<sigma> \<equiv> RIP \<sigma> = 0x788c \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x788c_false_4_def[Ps]

definition P_0x788c_false_4_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x788c_false_4_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x788c_false_4_regions :: state_pred where
  \<open>P_0x788c_false_4_regions \<sigma> \<equiv> \<exists>regions. P_0x788c_false_4_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x789c_4 :: state_pred where
  \<open>Q_0x789c_4 \<sigma> \<equiv> RIP \<sigma> = 0x789c \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x789c_4_def[Qs]

schematic_goal AES_set_encrypt_key_0_4_0x788c_0x7897_4[blocks]:
  assumes \<open>(P_0x788c_false_4 && P_0x788c_false_4_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x7897 4 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x789c_4 ?\<sigma> \<and> block_usage P_0x788c_false_4_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x788c_false_4_def P_0x788c_false_4_regions_def post: Q_0x789c_4_def regionset: P_0x788c_false_4_regions_set_def)

definition P_0x789c_true_5 :: state_pred where
  \<open>P_0x789c_true_5 \<sigma> \<equiv> RIP \<sigma> = 0x789c \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x789c_true_5_def[Ps]

definition P_0x789c_true_5_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x789c_true_5_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x789c_true_5_regions :: state_pred where
  \<open>P_0x789c_true_5_regions \<sigma> \<equiv> \<exists>regions. P_0x789c_true_5_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a26_5 :: state_pred where
  \<open>Q_0x7a26_5 \<sigma> \<equiv> RIP \<sigma> = 0x7a26 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x7a26_5_def[Qs]

schematic_goal AES_set_encrypt_key_0_2_0x789c_0x7a20_5[blocks]:
  assumes \<open>(P_0x789c_true_5 && P_0x789c_true_5_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x7a20 5 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a26_5 ?\<sigma> \<and> block_usage P_0x789c_true_5_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x789c_true_5_def P_0x789c_true_5_regions_def post: Q_0x7a26_5_def regionset: P_0x789c_true_5_regions_set_def)

definition P_0x7a26_true_6 :: state_pred where
  \<open>P_0x7a26_true_6 \<sigma> \<equiv> RIP \<sigma> = 0x7a26 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7a26_true_6_def[Ps]

definition P_0x7a26_true_6_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a26_true_6_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x7a26_true_6_regions :: state_pred where
  \<open>P_0x7a26_true_6_regions \<sigma> \<equiv> \<exists>regions. P_0x7a26_true_6_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_6 :: state_pred where
  \<open>Q_ret_address_6 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_6_def[Qs]

schematic_goal AES_set_encrypt_key_0_3_0x7a26_0x7ca4_6[blocks]:
  assumes \<open>(P_0x7a26_true_6 && P_0x7a26_true_6_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x7ca4 6 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_6 ?\<sigma> \<and> block_usage P_0x7a26_true_6_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a26_true_6_def P_0x7a26_true_6_regions_def post: Q_ret_address_6_def regionset: P_0x7a26_true_6_regions_set_def)

definition P_0x7a26_false_7 :: state_pred where
  \<open>P_0x7a26_false_7 \<sigma> \<equiv> RIP \<sigma> = 0x7a26 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7a26_false_7_def[Ps]

definition P_0x7a26_false_7_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a26_false_7_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4)
  }\<close>

definition P_0x7a26_false_7_regions :: state_pred where
  \<open>P_0x7a26_false_7_regions \<sigma> \<equiv> \<exists>regions. P_0x7a26_false_7_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x78b8_7 :: state_pred where
  \<open>Q_0x78b8_7 \<sigma> \<equiv> RIP \<sigma> = 0x78b8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe\<close>
declare Q_0x78b8_7_def[Qs]

schematic_goal AES_set_encrypt_key_0_3_0x7a26_0x7a36_7[blocks]:
  assumes \<open>(P_0x7a26_false_7 && P_0x7a26_false_7_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x7a36 7 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x78b8_7 ?\<sigma> \<and> block_usage P_0x7a26_false_7_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a26_false_7_def P_0x7a26_false_7_regions_def post: Q_0x78b8_7_def regionset: P_0x7a26_false_7_regions_set_def)

definition P_0x78b8_8 :: state_pred where
  \<open>P_0x78b8_8 \<sigma> \<equiv> RIP \<sigma> = 0x78b8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe\<close>
declare P_0x78b8_8_def[Ps]

definition P_0x78b8_8_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x78b8_8_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x78b8_8_regions :: state_pred where
  \<open>P_0x78b8_8_regions \<sigma> \<equiv> \<exists>regions. P_0x78b8_8_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x795f_8 :: state_pred where
  \<open>Q_0x795f_8 \<sigma> \<equiv> RIP \<sigma> = 0x795f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x795f_8_def[Qs]

schematic_goal AES_set_encrypt_key_0_49_0x78b8_0x7959_8[blocks]:
  assumes \<open>(P_0x78b8_8 && P_0x78b8_8_regions) \<sigma>\<close>
  shows \<open>exec_block 49 0x7959 8 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x795f_8 ?\<sigma> \<and> block_usage P_0x78b8_8_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x78b8_8_def P_0x78b8_8_regions_def post: Q_0x795f_8_def regionset: P_0x78b8_8_regions_set_def)

definition P_0x795f_true_9 :: state_pred where
  \<open>P_0x795f_true_9 \<sigma> \<equiv> RIP \<sigma> = 0x795f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x795f_true_9_def[Ps]

definition P_0x795f_true_9_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x795f_true_9_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x795f_true_9_regions :: state_pred where
  \<open>P_0x795f_true_9_regions \<sigma> \<equiv> \<exists>regions. P_0x795f_true_9_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a8b_9 :: state_pred where
  \<open>Q_0x7a8b_9 \<sigma> \<equiv> RIP \<sigma> = 0x7a8b \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7a8b_9_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x795f_0x7a7c_9[blocks]:
  assumes \<open>(P_0x795f_true_9 && P_0x795f_true_9_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7a7c 9 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a8b_9 ?\<sigma> \<and> block_usage P_0x795f_true_9_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x795f_true_9_def P_0x795f_true_9_regions_def post: Q_0x7a8b_9_def regionset: P_0x795f_true_9_regions_set_def)

definition P_0x7a8b_10 :: state_pred where
  \<open>P_0x7a8b_10 \<sigma> \<equiv> RIP \<sigma> = 0x7a8b \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7a8b_10_def[Ps]

definition P_0x7a8b_10_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a8b_10_regions_set \<sigma> \<equiv> {
    (0, RDX \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x4), 4),
    (5, ((RDX \<sigma>::64 word) + 0x8), 4),
    (6, ((RDX \<sigma>::64 word) + 0xc), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (30, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (31, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (32, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7a8b_10_regions :: state_pred where
  \<open>P_0x7a8b_10_regions \<sigma> \<equiv> \<exists>regions. P_0x7a8b_10_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7ae5_10 :: state_pred where
  \<open>Q_0x7ae5_10 \<sigma> \<equiv> RIP \<sigma> = 0x7ae5 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7ae5_10_def[Qs]

schematic_goal AES_set_encrypt_key_0_28_0x7a8b_0x7ae2_10[blocks]:
  assumes \<open>(P_0x7a8b_10 && P_0x7a8b_10_regions) \<sigma>\<close>
  shows \<open>exec_block 28 0x7ae2 10 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7ae5_10 ?\<sigma> \<and> block_usage P_0x7a8b_10_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a8b_10_def P_0x7a8b_10_regions_def post: Q_0x7ae5_10_def regionset: P_0x7a8b_10_regions_set_def)

definition P_0x7ae5_true_11 :: state_pred where
  \<open>P_0x7ae5_true_11 \<sigma> \<equiv> RIP \<sigma> = 0x7ae5 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7ae5_true_11_def[Ps]

definition P_0x7ae5_true_11_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7ae5_true_11_regions_set \<sigma> \<equiv> {
    (0, RDI \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (19, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (20, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (21, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (22, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (26, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7ae5_true_11_regions :: state_pred where
  \<open>P_0x7ae5_true_11_regions \<sigma> \<equiv> \<exists>regions. P_0x7ae5_true_11_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a8b_11 :: state_pred where
  \<open>Q_0x7a8b_11 \<sigma> \<equiv> RIP \<sigma> = 0x7a8b \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7a8b_11_def[Qs]

schematic_goal AES_set_encrypt_key_0_4_0x7ae5_0x7a87_11[blocks]:
  assumes \<open>(P_0x7ae5_true_11 && P_0x7ae5_true_11_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x7a87 11 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a8b_11 ?\<sigma> \<and> block_usage P_0x7ae5_true_11_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7ae5_true_11_def P_0x7ae5_true_11_regions_def post: Q_0x7a8b_11_def regionset: P_0x7ae5_true_11_regions_set_def)

definition P_0x7ae5_false_12 :: state_pred where
  \<open>P_0x7ae5_false_12 \<sigma> \<equiv> RIP \<sigma> = 0x7ae5 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7ae5_false_12_def[Ps]

definition P_0x7ae5_false_12_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7ae5_false_12_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7ae5_false_12_regions :: state_pred where
  \<open>P_0x7ae5_false_12_regions \<sigma> \<equiv> \<exists>regions. P_0x7ae5_false_12_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7ae7_12 :: state_pred where
  \<open>Q_0x7ae7_12 \<sigma> \<equiv> RIP \<sigma> = 0x7ae7 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7ae7_12_def[Qs]

schematic_goal AES_set_encrypt_key_0_1_0x7ae5_0x7ae5_12[blocks]:
  assumes \<open>(P_0x7ae5_false_12 && P_0x7ae5_false_12_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7ae5 12 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7ae7_12 ?\<sigma> \<and> block_usage P_0x7ae5_false_12_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7ae5_false_12_def P_0x7ae5_false_12_regions_def post: Q_0x7ae7_12_def regionset: P_0x7ae5_false_12_regions_set_def)

definition P_0x7ae7_13 :: state_pred where
  \<open>P_0x7ae7_13 \<sigma> \<equiv> RIP \<sigma> = 0x7ae7 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7ae7_13_def[Ps]

definition P_0x7ae7_13_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7ae7_13_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7ae7_13_regions :: state_pred where
  \<open>P_0x7ae7_13_regions \<sigma> \<equiv> \<exists>regions. P_0x7ae7_13_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_13 :: state_pred where
  \<open>Q_ret_address_13 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_13_def[Qs]

schematic_goal AES_set_encrypt_key_0_6_0x7ae7_0x7aef_13[blocks]:
  assumes \<open>(P_0x7ae7_13 && P_0x7ae7_13_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x7aef 13 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_13 ?\<sigma> \<and> block_usage P_0x7ae7_13_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7ae7_13_def P_0x7ae7_13_regions_def post: Q_ret_address_13_def regionset: P_0x7ae7_13_regions_set_def)

definition P_0x795f_false_14 :: state_pred where
  \<open>P_0x795f_false_14 \<sigma> \<equiv> RIP \<sigma> = 0x795f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x795f_false_14_def[Ps]

definition P_0x795f_false_14_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x795f_false_14_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (30, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (31, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (32, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (34, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (35, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x795f_false_14_regions :: state_pred where
  \<open>P_0x795f_false_14_regions \<sigma> \<equiv> \<exists>regions. P_0x795f_false_14_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x79b7_14 :: state_pred where
  \<open>Q_0x79b7_14 \<sigma> \<equiv> RIP \<sigma> = 0x79b7 \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x79b7_14_def[Qs]

schematic_goal AES_set_encrypt_key_0_24_0x795f_0x79b1_14[blocks]:
  assumes \<open>(P_0x795f_false_14 && P_0x795f_false_14_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 24 0x79b1 14 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x79b7_14 ?\<sigma> \<and> block_usage P_0x795f_false_14_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x795f_false_14_def P_0x795f_false_14_regions_def post: Q_0x79b7_14_def regionset: P_0x795f_false_14_regions_set_def)

definition P_0x79b7_true_15 :: state_pred where
  \<open>P_0x79b7_true_15 \<sigma> \<equiv> RIP \<sigma> = 0x79b7 \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x79b7_true_15_def[Ps]

definition P_0x79b7_true_15_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x79b7_true_15_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (30, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (31, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (32, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (34, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (35, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x79b7_true_15_regions :: state_pred where
  \<open>P_0x79b7_true_15_regions \<sigma> \<equiv> \<exists>regions. P_0x79b7_true_15_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b24_15 :: state_pred where
  \<open>Q_0x7b24_15 \<sigma> \<equiv> RIP \<sigma> = 0x7b24 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b24_15_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x79b7_0x7b0c_15[blocks]:
  assumes \<open>(P_0x79b7_true_15 && P_0x79b7_true_15_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7b0c 15 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b24_15 ?\<sigma> \<and> block_usage P_0x79b7_true_15_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x79b7_true_15_def P_0x79b7_true_15_regions_def post: Q_0x7b24_15_def regionset: P_0x79b7_true_15_regions_set_def)

definition P_0x7b24_16 :: state_pred where
  \<open>P_0x7b24_16 \<sigma> \<equiv> RIP \<sigma> = 0x7b24 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b24_16_def[Ps]

definition P_0x7b24_16_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b24_16_regions_set \<sigma> \<equiv> {
    (0, RDX \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x4), 4),
    (5, ((RDX \<sigma>::64 word) + 0x8), 4),
    (6, ((RDX \<sigma>::64 word) + 0xc), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (40, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (41, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b24_16_regions :: state_pred where
  \<open>P_0x7b24_16_regions \<sigma> \<equiv> \<exists>regions. P_0x7b24_16_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b8e_16 :: state_pred where
  \<open>Q_0x7b8e_16 \<sigma> \<equiv> RIP \<sigma> = 0x7b8e \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df80 \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b8e_16_def[Qs]

schematic_goal AES_set_encrypt_key_0_29_0x7b24_0x7b8b_16[blocks]:
  assumes \<open>(P_0x7b24_16 && P_0x7b24_16_regions) \<sigma>\<close>
  shows \<open>exec_block 29 0x7b8b 16 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b8e_16 ?\<sigma> \<and> block_usage P_0x7b24_16_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b24_16_def P_0x7b24_16_regions_def post: Q_0x7b8e_16_def regionset: P_0x7b24_16_regions_set_def)

definition P_0x7b8e_true_17 :: state_pred where
  \<open>P_0x7b8e_true_17 \<sigma> \<equiv> RIP \<sigma> = 0x7b8e \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df80 \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b8e_true_17_def[Ps]

definition P_0x7b8e_true_17_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b8e_true_17_regions_set \<sigma> \<equiv> {
    (0, RDI \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x10), 4),
    (5, ((RDX \<sigma>::64 word) + 0x14), 4),
    (6, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (33, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (34, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (35, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (36, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (38, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (39, ((RDX \<sigma>::64 word) - 0x8), 4),
    (40, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (41, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b8e_true_17_regions :: state_pred where
  \<open>P_0x7b8e_true_17_regions \<sigma> \<equiv> \<exists>regions. P_0x7b8e_true_17_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b24_17 :: state_pred where
  \<open>Q_0x7b24_17 \<sigma> \<equiv> RIP \<sigma> = 0x7b24 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b24_17_def[Qs]

schematic_goal AES_set_encrypt_key_0_8_0x7b8e_0x7b21_17[blocks]:
  assumes \<open>(P_0x7b8e_true_17 && P_0x7b8e_true_17_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x7b21 17 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b24_17 ?\<sigma> \<and> block_usage P_0x7b8e_true_17_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b8e_true_17_def P_0x7b8e_true_17_regions_def post: Q_0x7b24_17_def regionset: P_0x7b8e_true_17_regions_set_def)

definition P_0x7b8e_false_18 :: state_pred where
  \<open>P_0x7b8e_false_18 \<sigma> \<equiv> RIP \<sigma> = 0x7b8e \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df80 \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b8e_false_18_def[Ps]

definition P_0x7b8e_false_18_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b8e_false_18_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (4, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (5, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (6, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (30, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (31, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (32, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (33, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (34, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (35, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (36, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (37, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (38, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (39, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b8e_false_18_regions :: state_pred where
  \<open>P_0x7b8e_false_18_regions \<sigma> \<equiv> \<exists>regions. P_0x7b8e_false_18_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b90_18 :: state_pred where
  \<open>Q_0x7b90_18 \<sigma> \<equiv> RIP \<sigma> = 0x7b90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b90_18_def[Qs]

schematic_goal AES_set_encrypt_key_0_1_0x7b8e_0x7b8e_18[blocks]:
  assumes \<open>(P_0x7b8e_false_18 && P_0x7b8e_false_18_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7b8e 18 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b90_18 ?\<sigma> \<and> block_usage P_0x7b8e_false_18_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b8e_false_18_def P_0x7b8e_false_18_regions_def post: Q_0x7b90_18_def regionset: P_0x7b8e_false_18_regions_set_def)

definition P_0x7b90_19 :: state_pred where
  \<open>P_0x7b90_19 \<sigma> \<equiv> RIP \<sigma> = 0x7b90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b90_19_def[Ps]

definition P_0x7b90_19_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b90_19_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (30, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (31, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (32, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (34, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (35, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b90_19_regions :: state_pred where
  \<open>P_0x7b90_19_regions \<sigma> \<equiv> \<exists>regions. P_0x7b90_19_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_19 :: state_pred where
  \<open>Q_ret_address_19 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_19_def[Qs]

schematic_goal AES_set_encrypt_key_0_6_0x7b90_0x7b98_19[blocks]:
  assumes \<open>(P_0x7b90_19 && P_0x7b90_19_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x7b98 19 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_19 ?\<sigma> \<and> block_usage P_0x7b90_19_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b90_19_def P_0x7b90_19_regions_def post: Q_ret_address_19_def regionset: P_0x7b90_19_regions_set_def)

definition P_0x79b7_false_20 :: state_pred where
  \<open>P_0x79b7_false_20 \<sigma> \<equiv> RIP \<sigma> = 0x79b7 \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x79b7_false_20_def[Ps]

definition P_0x79b7_false_20_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x79b7_false_20_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (42, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (45, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x79b7_false_20_regions :: state_pred where
  \<open>P_0x79b7_false_20_regions \<sigma> \<equiv> \<exists>regions. P_0x79b7_false_20_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a0f_20 :: state_pred where
  \<open>Q_0x7a0f_20 \<sigma> \<equiv> RIP \<sigma> = 0x7a0f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7a0f_20_def[Qs]

schematic_goal AES_set_encrypt_key_0_24_0x79b7_0x7a09_20[blocks]:
  assumes \<open>(P_0x79b7_false_20 && P_0x79b7_false_20_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 24 0x7a09 20 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a0f_20 ?\<sigma> \<and> block_usage P_0x79b7_false_20_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x79b7_false_20_def P_0x79b7_false_20_regions_def post: Q_0x7a0f_20_def regionset: P_0x79b7_false_20_regions_set_def)

definition P_0x7a0f_true_21 :: state_pred where
  \<open>P_0x7a0f_true_21 \<sigma> \<equiv> RIP \<sigma> = 0x7a0f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7a0f_true_21_def[Ps]

definition P_0x7a0f_true_21_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a0f_true_21_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (42, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (45, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7a0f_true_21_regions :: state_pred where
  \<open>P_0x7a0f_true_21_regions \<sigma> \<equiv> \<exists>regions. P_0x7a0f_true_21_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c20_21 :: state_pred where
  \<open>Q_0x7c20_21 \<sigma> \<equiv> RIP \<sigma> = 0x7c20 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c20_21_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x7a0f_0x7bbc_21[blocks]:
  assumes \<open>(P_0x7a0f_true_21 && P_0x7a0f_true_21_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7bbc 21 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c20_21 ?\<sigma> \<and> block_usage P_0x7a0f_true_21_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a0f_true_21_def P_0x7a0f_true_21_regions_def post: Q_0x7c20_21_def regionset: P_0x7a0f_true_21_regions_set_def)

definition P_0x7c20_22 :: state_pred where
  \<open>P_0x7c20_22 \<sigma> \<equiv> RIP \<sigma> = 0x7c20 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c20_22_def[Ps]

definition P_0x7c20_22_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c20_22_regions_set \<sigma> \<equiv> {
    (0, RDX \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x4), 4),
    (5, ((RDX \<sigma>::64 word) + 0x8), 4),
    (6, ((RDX \<sigma>::64 word) + 0xc), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (34, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (35, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (36, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (37, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (38, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (39, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (40, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (41, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (42, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (43, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (44, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (45, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (46, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (47, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (48, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (49, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (50, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (51, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (52, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (53, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c20_22_regions :: state_pred where
  \<open>P_0x7c20_22_regions \<sigma> \<equiv> \<exists>regions. P_0x7c20_22_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c8a_22 :: state_pred where
  \<open>Q_0x7c8a_22 \<sigma> \<equiv> RIP \<sigma> = 0x7c8a \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df7c \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c8a_22_def[Qs]

schematic_goal AES_set_encrypt_key_0_29_0x7c20_0x7c87_22[blocks]:
  assumes \<open>(P_0x7c20_22 && P_0x7c20_22_regions) \<sigma>\<close>
  shows \<open>exec_block 29 0x7c87 22 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c8a_22 ?\<sigma> \<and> block_usage P_0x7c20_22_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c20_22_def P_0x7c20_22_regions_def post: Q_0x7c8a_22_def regionset: P_0x7c20_22_regions_set_def)

definition P_0x7c8a_true_23 :: state_pred where
  \<open>P_0x7c8a_true_23 \<sigma> \<equiv> RIP \<sigma> = 0x7c8a \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df7c \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c8a_true_23_def[Ps]

definition P_0x7c8a_true_23_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c8a_true_23_regions_set \<sigma> \<equiv> {
    (0, RDI \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x10), 4),
    (5, ((RDX \<sigma>::64 word) + 0x14), 4),
    (6, ((RDX \<sigma>::64 word) + 0x18), 4),
    (7, ((RDX \<sigma>::64 word) + 0x1c), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (11, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (12, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (13, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (14, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), 4),
    (15, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (34, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (35, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (36, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (37, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (38, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (39, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (40, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (41, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (42, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (43, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (44, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (45, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (46, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (47, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (48, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (49, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (50, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (51, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (52, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (53, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (54, ((RDX \<sigma>::64 word) - 0x8), 4),
    (55, ((RDX \<sigma>::64 word) - 0xc), 4),
    (56, ((RDX \<sigma>::64 word) - 0x10), 4),
    (57, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (58, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (59, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (60, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c8a_true_23_regions :: state_pred where
  \<open>P_0x7c8a_true_23_regions \<sigma> \<equiv> \<exists>regions. P_0x7c8a_true_23_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c20_23 :: state_pred where
  \<open>Q_0x7c20_23 \<sigma> \<equiv> RIP \<sigma> = 0x7c20 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c20_23_def[Qs]

schematic_goal AES_set_encrypt_key_0_28_0x7c8a_0x7c1d_23[blocks]:
  assumes \<open>(P_0x7c8a_true_23 && P_0x7c8a_true_23_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 28 0x7c1d 23 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c20_23 ?\<sigma> \<and> block_usage P_0x7c8a_true_23_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c8a_true_23_def P_0x7c8a_true_23_regions_def post: Q_0x7c20_23_def regionset: P_0x7c8a_true_23_regions_set_def)

definition P_0x7c8a_false_24 :: state_pred where
  \<open>P_0x7c8a_false_24 \<sigma> \<equiv> RIP \<sigma> = 0x7c8a \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df7c \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c8a_false_24_def[Ps]

definition P_0x7c8a_false_24_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c8a_false_24_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (4, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (5, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (6, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (34, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (35, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (36, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (37, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (38, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (40, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (41, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (42, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (43, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (44, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (45, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (46, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (47, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (48, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (49, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c8a_false_24_regions :: state_pred where
  \<open>P_0x7c8a_false_24_regions \<sigma> \<equiv> \<exists>regions. P_0x7c8a_false_24_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c90_24 :: state_pred where
  \<open>Q_0x7c90_24 \<sigma> \<equiv> RIP \<sigma> = 0x7c90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c90_24_def[Qs]

schematic_goal AES_set_encrypt_key_0_1_0x7c8a_0x7c8a_24[blocks]:
  assumes \<open>(P_0x7c8a_false_24 && P_0x7c8a_false_24_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7c8a 24 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c90_24 ?\<sigma> \<and> block_usage P_0x7c8a_false_24_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c8a_false_24_def P_0x7c8a_false_24_regions_def post: Q_0x7c90_24_def regionset: P_0x7c8a_false_24_regions_set_def)

definition P_0x7c90_25 :: state_pred where
  \<open>P_0x7c90_25 \<sigma> \<equiv> RIP \<sigma> = 0x7c90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c90_25_def[Ps]

definition P_0x7c90_25_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c90_25_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (42, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (45, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c90_25_regions :: state_pred where
  \<open>P_0x7c90_25_regions \<sigma> \<equiv> \<exists>regions. P_0x7c90_25_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_25 :: state_pred where
  \<open>Q_ret_address_25 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_25_def[Qs]

schematic_goal AES_set_encrypt_key_0_6_0x7c90_0x7c98_25[blocks]:
  assumes \<open>(P_0x7c90_25 && P_0x7c90_25_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x7c98 25 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_25 ?\<sigma> \<and> block_usage P_0x7c90_25_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c90_25_def P_0x7c90_25_regions_def post: Q_ret_address_25_def regionset: P_0x7c90_25_regions_set_def)

definition P_0x7a0f_false_26 :: state_pred where
  \<open>P_0x7a0f_false_26 \<sigma> \<equiv> RIP \<sigma> = 0x7a0f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = 0xe \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7a0f_false_26_def[Ps]

definition P_0x7a0f_false_26_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a0f_false_26_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (42, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (45, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7a0f_false_26_regions :: state_pred where
  \<open>P_0x7a0f_false_26_regions \<sigma> \<equiv> \<exists>regions. P_0x7a0f_false_26_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_26 :: state_pred where
  \<open>Q_ret_address_26 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_26_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x7a0f_0x7a1d_26[blocks]:
  assumes \<open>(P_0x7a0f_false_26 && P_0x7a0f_false_26_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7a1d 26 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_26 ?\<sigma> \<and> block_usage P_0x7a0f_false_26_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a0f_false_26_def P_0x7a0f_false_26_regions_def post: Q_ret_address_26_def regionset: P_0x7a0f_false_26_regions_set_def)

definition P_0x789c_false_27 :: state_pred where
  \<open>P_0x789c_false_27 \<sigma> \<equiv> RIP \<sigma> = 0x789c \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x789c_false_27_def[Ps]

definition P_0x789c_false_27_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x789c_false_27_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x789c_false_27_regions :: state_pred where
  \<open>P_0x789c_false_27_regions \<sigma> \<equiv> \<exists>regions. P_0x789c_false_27_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x78a8_27 :: state_pred where
  \<open>Q_0x78a8_27 \<sigma> \<equiv> RIP \<sigma> = 0x78a8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x78a8_27_def[Qs]

schematic_goal AES_set_encrypt_key_0_2_0x789c_0x78a2_27[blocks]:
  assumes \<open>(P_0x789c_false_27 && P_0x789c_false_27_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x78a2 27 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x78a8_27 ?\<sigma> \<and> block_usage P_0x789c_false_27_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x789c_false_27_def P_0x789c_false_27_regions_def post: Q_0x78a8_27_def regionset: P_0x789c_false_27_regions_set_def)

definition P_0x78a8_true_28 :: state_pred where
  \<open>P_0x78a8_true_28 \<sigma> \<equiv> RIP \<sigma> = 0x78a8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x78a8_true_28_def[Ps]

definition P_0x78a8_true_28_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x78a8_true_28_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8)
  }\<close>

definition P_0x78a8_true_28_regions :: state_pred where
  \<open>P_0x78a8_true_28_regions \<sigma> \<equiv> \<exists>regions. P_0x78a8_true_28_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a46_28 :: state_pred where
  \<open>Q_0x7a46_28 \<sigma> \<equiv> RIP \<sigma> = 0x7a46 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x7a46_28_def[Qs]

schematic_goal AES_set_encrypt_key_0_2_0x78a8_0x7a40_28[blocks]:
  assumes \<open>(P_0x78a8_true_28 && P_0x78a8_true_28_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x7a40 28 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a46_28 ?\<sigma> \<and> block_usage P_0x78a8_true_28_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x78a8_true_28_def P_0x78a8_true_28_regions_def post: Q_0x7a46_28_def regionset: P_0x78a8_true_28_regions_set_def)

definition P_0x7a46_true_29 :: state_pred where
  \<open>P_0x7a46_true_29 \<sigma> \<equiv> RIP \<sigma> = 0x7a46 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7a46_true_29_def[Ps]

definition P_0x7a46_true_29_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a46_true_29_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4)
  }\<close>

definition P_0x7a46_true_29_regions :: state_pred where
  \<open>P_0x7a46_true_29_regions \<sigma> \<equiv> \<exists>regions. P_0x7a46_true_29_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x78b8_29 :: state_pred where
  \<open>Q_0x78b8_29 \<sigma> \<equiv> RIP \<sigma> = 0x78b8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x78b8_29_def[Qs]

schematic_goal AES_set_encrypt_key_0_3_0x7a46_0x7a36_29[blocks]:
  assumes \<open>(P_0x7a46_true_29 && P_0x7a46_true_29_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x7a36 29 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x78b8_29 ?\<sigma> \<and> block_usage P_0x7a46_true_29_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a46_true_29_def P_0x7a46_true_29_regions_def post: Q_0x78b8_29_def regionset: P_0x7a46_true_29_regions_set_def)

definition P_0x7a46_false_30 :: state_pred where
  \<open>P_0x7a46_false_30 \<sigma> \<equiv> RIP \<sigma> = 0x7a46 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7a46_false_30_def[Ps]

definition P_0x7a46_false_30_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a46_false_30_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4)
  }\<close>

definition P_0x7a46_false_30_regions :: state_pred where
  \<open>P_0x7a46_false_30_regions \<sigma> \<equiv> \<exists>regions. P_0x7a46_false_30_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x78b8_30 :: state_pred where
  \<open>Q_0x78b8_30 \<sigma> \<equiv> RIP \<sigma> = 0x78b8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x78b8_30_def[Qs]

schematic_goal AES_set_encrypt_key_0_3_0x7a46_0x7a52_30[blocks]:
  assumes \<open>(P_0x7a46_false_30 && P_0x7a46_false_30_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x7a52 30 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x78b8_30 ?\<sigma> \<and> block_usage P_0x7a46_false_30_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a46_false_30_def P_0x7a46_false_30_regions_def post: Q_0x78b8_30_def regionset: P_0x7a46_false_30_regions_set_def)

definition P_0x78a8_false_31 :: state_pred where
  \<open>P_0x78a8_false_31 \<sigma> \<equiv> RIP \<sigma> = 0x78a8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x78a8_false_31_def[Ps]

definition P_0x78a8_false_31_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x78a8_false_31_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4)
  }\<close>

definition P_0x78a8_false_31_regions :: state_pred where
  \<open>P_0x78a8_false_31_regions \<sigma> \<equiv> \<exists>regions. P_0x78a8_false_31_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x78b8_31 :: state_pred where
  \<open>Q_0x78b8_31 \<sigma> \<equiv> RIP \<sigma> = 0x78b8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_0x78b8_31_def[Qs]

schematic_goal AES_set_encrypt_key_0_2_0x78a8_0x78ae_31[blocks]:
  assumes \<open>(P_0x78a8_false_31 && P_0x78a8_false_31_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x78ae 31 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x78b8_31 ?\<sigma> \<and> block_usage P_0x78a8_false_31_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x78a8_false_31_def P_0x78a8_false_31_regions_def post: Q_0x78b8_31_def regionset: P_0x78a8_false_31_regions_set_def)

definition P_0x78b8_32 :: state_pred where
  \<open>P_0x78b8_32 \<sigma> \<equiv> RIP \<sigma> = 0x78b8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0xffffffbf)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x78b8_32_def[Ps]

definition P_0x78b8_32_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x78b8_32_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x78b8_32_regions :: state_pred where
  \<open>P_0x78b8_32_regions \<sigma> \<equiv> \<exists>regions. P_0x78b8_32_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x795f_32 :: state_pred where
  \<open>Q_0x795f_32 \<sigma> \<equiv> RIP \<sigma> = 0x795f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x795f_32_def[Qs]

schematic_goal AES_set_encrypt_key_0_49_0x78b8_0x7959_32[blocks]:
  assumes \<open>(P_0x78b8_32 && P_0x78b8_32_regions) \<sigma>\<close>
  shows \<open>exec_block 49 0x7959 32 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x795f_32 ?\<sigma> \<and> block_usage P_0x78b8_32_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x78b8_32_def P_0x78b8_32_regions_def post: Q_0x795f_32_def regionset: P_0x78b8_32_regions_set_def)

definition P_0x795f_true_33 :: state_pred where
  \<open>P_0x795f_true_33 \<sigma> \<equiv> RIP \<sigma> = 0x795f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x795f_true_33_def[Ps]

definition P_0x795f_true_33_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x795f_true_33_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x795f_true_33_regions :: state_pred where
  \<open>P_0x795f_true_33_regions \<sigma> \<equiv> \<exists>regions. P_0x795f_true_33_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a8b_33 :: state_pred where
  \<open>Q_0x7a8b_33 \<sigma> \<equiv> RIP \<sigma> = 0x7a8b \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7a8b_33_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x795f_0x7a7c_33[blocks]:
  assumes \<open>(P_0x795f_true_33 && P_0x795f_true_33_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7a7c 33 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a8b_33 ?\<sigma> \<and> block_usage P_0x795f_true_33_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x795f_true_33_def P_0x795f_true_33_regions_def post: Q_0x7a8b_33_def regionset: P_0x795f_true_33_regions_set_def)

definition P_0x7a8b_34 :: state_pred where
  \<open>P_0x7a8b_34 \<sigma> \<equiv> RIP \<sigma> = 0x7a8b \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7a8b_34_def[Ps]

definition P_0x7a8b_34_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a8b_34_regions_set \<sigma> \<equiv> {
    (0, RDX \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x4), 4),
    (5, ((RDX \<sigma>::64 word) + 0x8), 4),
    (6, ((RDX \<sigma>::64 word) + 0xc), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (30, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (31, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (32, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7a8b_34_regions :: state_pred where
  \<open>P_0x7a8b_34_regions \<sigma> \<equiv> \<exists>regions. P_0x7a8b_34_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7ae5_34 :: state_pred where
  \<open>Q_0x7ae5_34 \<sigma> \<equiv> RIP \<sigma> = 0x7ae5 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7ae5_34_def[Qs]

schematic_goal AES_set_encrypt_key_0_28_0x7a8b_0x7ae2_34[blocks]:
  assumes \<open>(P_0x7a8b_34 && P_0x7a8b_34_regions) \<sigma>\<close>
  shows \<open>exec_block 28 0x7ae2 34 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7ae5_34 ?\<sigma> \<and> block_usage P_0x7a8b_34_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a8b_34_def P_0x7a8b_34_regions_def post: Q_0x7ae5_34_def regionset: P_0x7a8b_34_regions_set_def)

definition P_0x7ae5_true_35 :: state_pred where
  \<open>P_0x7ae5_true_35 \<sigma> \<equiv> RIP \<sigma> = 0x7ae5 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7ae5_true_35_def[Ps]

definition P_0x7ae5_true_35_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7ae5_true_35_regions_set \<sigma> \<equiv> {
    (0, RDI \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (19, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (20, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (21, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7ae5_true_35_regions :: state_pred where
  \<open>P_0x7ae5_true_35_regions \<sigma> \<equiv> \<exists>regions. P_0x7ae5_true_35_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a8b_35 :: state_pred where
  \<open>Q_0x7a8b_35 \<sigma> \<equiv> RIP \<sigma> = 0x7a8b \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7a8b_35_def[Qs]

schematic_goal AES_set_encrypt_key_0_4_0x7ae5_0x7a87_35[blocks]:
  assumes \<open>(P_0x7ae5_true_35 && P_0x7ae5_true_35_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x7a87 35 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a8b_35 ?\<sigma> \<and> block_usage P_0x7ae5_true_35_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7ae5_true_35_def P_0x7ae5_true_35_regions_def post: Q_0x7a8b_35_def regionset: P_0x7ae5_true_35_regions_set_def)

definition P_0x7ae5_false_36 :: state_pred where
  \<open>P_0x7ae5_false_36 \<sigma> \<equiv> RIP \<sigma> = 0x7ae5 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7ae5_false_36_def[Ps]

definition P_0x7ae5_false_36_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7ae5_false_36_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7ae5_false_36_regions :: state_pred where
  \<open>P_0x7ae5_false_36_regions \<sigma> \<equiv> \<exists>regions. P_0x7ae5_false_36_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7ae7_36 :: state_pred where
  \<open>Q_0x7ae7_36 \<sigma> \<equiv> RIP \<sigma> = 0x7ae7 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7ae7_36_def[Qs]

schematic_goal AES_set_encrypt_key_0_1_0x7ae5_0x7ae5_36[blocks]:
  assumes \<open>(P_0x7ae5_false_36 && P_0x7ae5_false_36_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7ae5 36 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7ae7_36 ?\<sigma> \<and> block_usage P_0x7ae5_false_36_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7ae5_false_36_def P_0x7ae5_false_36_regions_def post: Q_0x7ae7_36_def regionset: P_0x7ae5_false_36_regions_set_def)

definition P_0x7ae7_37 :: state_pred where
  \<open>P_0x7ae7_37 \<sigma> \<equiv> RIP \<sigma> = 0x7ae7 \<and> RBX \<sigma> = 0x1df88 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7ae7_37_def[Ps]

definition P_0x7ae7_37_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7ae7_37_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (19, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (20, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7ae7_37_regions :: state_pred where
  \<open>P_0x7ae7_37_regions \<sigma> \<equiv> \<exists>regions. P_0x7ae7_37_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_37 :: state_pred where
  \<open>Q_ret_address_37 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_37_def[Qs]

schematic_goal AES_set_encrypt_key_0_6_0x7ae7_0x7aef_37[blocks]:
  assumes \<open>(P_0x7ae7_37 && P_0x7ae7_37_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x7aef 37 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_37 ?\<sigma> \<and> block_usage P_0x7ae7_37_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7ae7_37_def P_0x7ae7_37_regions_def post: Q_ret_address_37_def regionset: P_0x7ae7_37_regions_set_def)

definition P_0x795f_false_38 :: state_pred where
  \<open>P_0x795f_false_38 \<sigma> \<equiv> RIP \<sigma> = 0x795f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x795f_false_38_def[Ps]

definition P_0x795f_false_38_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x795f_false_38_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (30, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (31, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (32, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (34, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x795f_false_38_regions :: state_pred where
  \<open>P_0x795f_false_38_regions \<sigma> \<equiv> \<exists>regions. P_0x795f_false_38_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x79b7_38 :: state_pred where
  \<open>Q_0x79b7_38 \<sigma> \<equiv> RIP \<sigma> = 0x79b7 \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x79b7_38_def[Qs]

schematic_goal AES_set_encrypt_key_0_24_0x795f_0x79b1_38[blocks]:
  assumes \<open>(P_0x795f_false_38 && P_0x795f_false_38_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 24 0x79b1 38 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x79b7_38 ?\<sigma> \<and> block_usage P_0x795f_false_38_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x795f_false_38_def P_0x795f_false_38_regions_def post: Q_0x79b7_38_def regionset: P_0x795f_false_38_regions_set_def)

definition P_0x79b7_true_39 :: state_pred where
  \<open>P_0x79b7_true_39 \<sigma> \<equiv> RIP \<sigma> = 0x79b7 \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x79b7_true_39_def[Ps]

definition P_0x79b7_true_39_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x79b7_true_39_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (30, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (31, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (32, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (34, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x79b7_true_39_regions :: state_pred where
  \<open>P_0x79b7_true_39_regions \<sigma> \<equiv> \<exists>regions. P_0x79b7_true_39_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b24_39 :: state_pred where
  \<open>Q_0x7b24_39 \<sigma> \<equiv> RIP \<sigma> = 0x7b24 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b24_39_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x79b7_0x7b0c_39[blocks]:
  assumes \<open>(P_0x79b7_true_39 && P_0x79b7_true_39_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7b0c 39 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b24_39 ?\<sigma> \<and> block_usage P_0x79b7_true_39_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x79b7_true_39_def P_0x79b7_true_39_regions_def post: Q_0x7b24_39_def regionset: P_0x79b7_true_39_regions_set_def)

definition P_0x7b24_40 :: state_pred where
  \<open>P_0x7b24_40 \<sigma> \<equiv> RIP \<sigma> = 0x7b24 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b24_40_def[Ps]

definition P_0x7b24_40_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b24_40_regions_set \<sigma> \<equiv> {
    (0, RDX \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x4), 4),
    (5, ((RDX \<sigma>::64 word) + 0x8), 4),
    (6, ((RDX \<sigma>::64 word) + 0xc), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (40, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (41, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b24_40_regions :: state_pred where
  \<open>P_0x7b24_40_regions \<sigma> \<equiv> \<exists>regions. P_0x7b24_40_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b8e_40 :: state_pred where
  \<open>Q_0x7b8e_40 \<sigma> \<equiv> RIP \<sigma> = 0x7b8e \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df80 \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b8e_40_def[Qs]

schematic_goal AES_set_encrypt_key_0_29_0x7b24_0x7b8b_40[blocks]:
  assumes \<open>(P_0x7b24_40 && P_0x7b24_40_regions) \<sigma>\<close>
  shows \<open>exec_block 29 0x7b8b 40 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b8e_40 ?\<sigma> \<and> block_usage P_0x7b24_40_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b24_40_def P_0x7b24_40_regions_def post: Q_0x7b8e_40_def regionset: P_0x7b24_40_regions_set_def)

definition P_0x7b8e_true_41 :: state_pred where
  \<open>P_0x7b8e_true_41 \<sigma> \<equiv> RIP \<sigma> = 0x7b8e \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df80 \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b8e_true_41_def[Ps]

definition P_0x7b8e_true_41_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b8e_true_41_regions_set \<sigma> \<equiv> {
    (0, RDI \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x10), 4),
    (5, ((RDX \<sigma>::64 word) + 0x14), 4),
    (6, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (33, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (34, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (35, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (36, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (38, ((RDX \<sigma>::64 word) - 0x8), 4),
    (39, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (40, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (41, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b8e_true_41_regions :: state_pred where
  \<open>P_0x7b8e_true_41_regions \<sigma> \<equiv> \<exists>regions. P_0x7b8e_true_41_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b24_41 :: state_pred where
  \<open>Q_0x7b24_41 \<sigma> \<equiv> RIP \<sigma> = 0x7b24 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b24_41_def[Qs]

schematic_goal AES_set_encrypt_key_0_8_0x7b8e_0x7b21_41[blocks]:
  assumes \<open>(P_0x7b8e_true_41 && P_0x7b8e_true_41_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x7b21 41 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b24_41 ?\<sigma> \<and> block_usage P_0x7b8e_true_41_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b8e_true_41_def P_0x7b8e_true_41_regions_def post: Q_0x7b24_41_def regionset: P_0x7b8e_true_41_regions_set_def)

definition P_0x7b8e_false_42 :: state_pred where
  \<open>P_0x7b8e_false_42 \<sigma> \<equiv> RIP \<sigma> = 0x7b8e \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df80 \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b8e_false_42_def[Ps]

definition P_0x7b8e_false_42_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b8e_false_42_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (4, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (5, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (6, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (30, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (31, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (32, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (33, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (34, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (35, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (36, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (37, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (38, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b8e_false_42_regions :: state_pred where
  \<open>P_0x7b8e_false_42_regions \<sigma> \<equiv> \<exists>regions. P_0x7b8e_false_42_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7b90_42 :: state_pred where
  \<open>Q_0x7b90_42 \<sigma> \<equiv> RIP \<sigma> = 0x7b90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7b90_42_def[Qs]

schematic_goal AES_set_encrypt_key_0_1_0x7b8e_0x7b8e_42[blocks]:
  assumes \<open>(P_0x7b8e_false_42 && P_0x7b8e_false_42_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7b8e 42 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7b90_42 ?\<sigma> \<and> block_usage P_0x7b8e_false_42_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b8e_false_42_def P_0x7b8e_false_42_regions_def post: Q_0x7b90_42_def regionset: P_0x7b8e_false_42_regions_set_def)

definition P_0x7b90_43 :: state_pred where
  \<open>P_0x7b90_43 \<sigma> \<equiv> RIP \<sigma> = 0x7b90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df80 \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7b90_43_def[Ps]

definition P_0x7b90_43_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7b90_43_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (27, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (28, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (29, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (30, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (31, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (32, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (34, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7b90_43_regions :: state_pred where
  \<open>P_0x7b90_43_regions \<sigma> \<equiv> \<exists>regions. P_0x7b90_43_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_43 :: state_pred where
  \<open>Q_ret_address_43 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_43_def[Qs]

schematic_goal AES_set_encrypt_key_0_6_0x7b90_0x7b98_43[blocks]:
  assumes \<open>(P_0x7b90_43 && P_0x7b90_43_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x7b98 43 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_43 ?\<sigma> \<and> block_usage P_0x7b90_43_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7b90_43_def P_0x7b90_43_regions_def post: Q_ret_address_43_def regionset: P_0x7b90_43_regions_set_def)

definition P_0x79b7_false_44 :: state_pred where
  \<open>P_0x79b7_false_44 \<sigma> \<equiv> RIP \<sigma> = 0x79b7 \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x79b7_false_44_def[Ps]

definition P_0x79b7_false_44_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x79b7_false_44_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x79b7_false_44_regions :: state_pred where
  \<open>P_0x79b7_false_44_regions \<sigma> \<equiv> \<exists>regions. P_0x79b7_false_44_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7a0f_44 :: state_pred where
  \<open>Q_0x7a0f_44 \<sigma> \<equiv> RIP \<sigma> = 0x7a0f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7a0f_44_def[Qs]

schematic_goal AES_set_encrypt_key_0_24_0x79b7_0x7a09_44[blocks]:
  assumes \<open>(P_0x79b7_false_44 && P_0x79b7_false_44_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 24 0x7a09 44 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7a0f_44 ?\<sigma> \<and> block_usage P_0x79b7_false_44_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x79b7_false_44_def P_0x79b7_false_44_regions_def post: Q_0x7a0f_44_def regionset: P_0x79b7_false_44_regions_set_def)

definition P_0x7a0f_true_45 :: state_pred where
  \<open>P_0x7a0f_true_45 \<sigma> \<equiv> RIP \<sigma> = 0x7a0f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7a0f_true_45_def[Ps]

definition P_0x7a0f_true_45_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a0f_true_45_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7a0f_true_45_regions :: state_pred where
  \<open>P_0x7a0f_true_45_regions \<sigma> \<equiv> \<exists>regions. P_0x7a0f_true_45_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c20_45 :: state_pred where
  \<open>Q_0x7c20_45 \<sigma> \<equiv> RIP \<sigma> = 0x7c20 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c20_45_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x7a0f_0x7bbc_45[blocks]:
  assumes \<open>(P_0x7a0f_true_45 && P_0x7a0f_true_45_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7bbc 45 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c20_45 ?\<sigma> \<and> block_usage P_0x7a0f_true_45_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a0f_true_45_def P_0x7a0f_true_45_regions_def post: Q_0x7c20_45_def regionset: P_0x7a0f_true_45_regions_set_def)

definition P_0x7c20_46 :: state_pred where
  \<open>P_0x7c20_46 \<sigma> \<equiv> RIP \<sigma> = 0x7c20 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c20_46_def[Ps]

definition P_0x7c20_46_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c20_46_regions_set \<sigma> \<equiv> {
    (0, RDX \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x4), 4),
    (5, ((RDX \<sigma>::64 word) + 0x8), 4),
    (6, ((RDX \<sigma>::64 word) + 0xc), 4),
    (7, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (34, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (35, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (36, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (37, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (38, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (39, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (40, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (41, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (42, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (43, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (44, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (45, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (46, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (47, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (48, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (49, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (50, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (51, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (52, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c20_46_regions :: state_pred where
  \<open>P_0x7c20_46_regions \<sigma> \<equiv> \<exists>regions. P_0x7c20_46_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c8a_46 :: state_pred where
  \<open>Q_0x7c8a_46 \<sigma> \<equiv> RIP \<sigma> = 0x7c8a \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df7c \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c8a_46_def[Qs]

schematic_goal AES_set_encrypt_key_0_29_0x7c20_0x7c87_46[blocks]:
  assumes \<open>(P_0x7c20_46 && P_0x7c20_46_regions) \<sigma>\<close>
  shows \<open>exec_block 29 0x7c87 46 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c8a_46 ?\<sigma> \<and> block_usage P_0x7c20_46_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c20_46_def P_0x7c20_46_regions_def post: Q_0x7c8a_46_def regionset: P_0x7c20_46_regions_set_def)

definition P_0x7c8a_true_47 :: state_pred where
  \<open>P_0x7c8a_true_47 \<sigma> \<equiv> RIP \<sigma> = 0x7c8a \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df7c \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c8a_true_47_def[Ps]

definition P_0x7c8a_true_47_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c8a_true_47_regions_set \<sigma> \<equiv> {
    (0, RDI \<sigma>, 4),
    (1, RDI\<^sub>0, Suc 0),
    (2, RDX\<^sub>0, 4),
    (3, RSP\<^sub>0, 8),
    (4, ((RDX \<sigma>::64 word) + 0x10), 4),
    (5, ((RDX \<sigma>::64 word) + 0x14), 4),
    (6, ((RDX \<sigma>::64 word) + 0x18), 4),
    (7, ((RDX \<sigma>::64 word) + 0x1c), 4),
    (8, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (9, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (10, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (11, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (12, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RCX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (13, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (14, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RCX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), 4),
    (15, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (34, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (35, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (36, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (37, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (38, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (39, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (40, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (41, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (42, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (43, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (44, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (45, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (46, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (47, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (48, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (49, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (50, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (51, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (52, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (53, ((RDX \<sigma>::64 word) - 0x8), 4),
    (54, ((RDX \<sigma>::64 word) - 0xc), 4),
    (55, ((RDX \<sigma>::64 word) - 0x10), 4),
    (56, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (57, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (58, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (59, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c8a_true_47_regions :: state_pred where
  \<open>P_0x7c8a_true_47_regions \<sigma> \<equiv> \<exists>regions. P_0x7c8a_true_47_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c20_47 :: state_pred where
  \<open>Q_0x7c20_47 \<sigma> \<equiv> RIP \<sigma> = 0x7c20 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c20_47_def[Qs]

schematic_goal AES_set_encrypt_key_0_28_0x7c8a_0x7c1d_47[blocks]:
  assumes \<open>(P_0x7c8a_true_47 && P_0x7c8a_true_47_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 28 0x7c1d 47 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c20_47 ?\<sigma> \<and> block_usage P_0x7c8a_true_47_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c8a_true_47_def P_0x7c8a_true_47_regions_def post: Q_0x7c20_47_def regionset: P_0x7c8a_true_47_regions_set_def)

definition P_0x7c8a_false_48 :: state_pred where
  \<open>P_0x7c8a_false_48 \<sigma> \<equiv> RIP \<sigma> = 0x7c8a \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = ucast ((\<langle>15,8\<rangle>RBX \<sigma>::8 word)) \<and> R14 \<sigma> = 0x1df7c \<and> R12 \<sigma> = ucast ((((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)::32 word) AND 0xff0000)) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c8a_false_48_def[Ps]

definition P_0x7c8a_false_48_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c8a_false_48_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (4, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (5, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>RBX \<sigma>::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), 4),
    (6, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<langle>31,0\<rangle>RBX \<sigma>::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (34, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (35, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (36, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (37, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (38, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (40, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (41, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (42, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (43, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (44, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (45, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (46, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (47, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (48, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c8a_false_48_regions :: state_pred where
  \<open>P_0x7c8a_false_48_regions \<sigma> \<equiv> \<exists>regions. P_0x7c8a_false_48_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7c90_48 :: state_pred where
  \<open>Q_0x7c90_48 \<sigma> \<equiv> RIP \<sigma> = 0x7c90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7c90_48_def[Qs]

schematic_goal AES_set_encrypt_key_0_1_0x7c8a_0x7c8a_48[blocks]:
  assumes \<open>(P_0x7c8a_false_48 && P_0x7c8a_false_48_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7c8a 48 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7c90_48 ?\<sigma> \<and> block_usage P_0x7c8a_false_48_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c8a_false_48_def P_0x7c8a_false_48_regions_def post: Q_0x7c90_48_def regionset: P_0x7c8a_false_48_regions_set_def)

definition P_0x7c90_49 :: state_pred where
  \<open>P_0x7c90_49 \<sigma> \<equiv> RIP \<sigma> = 0x7c90 \<and> RSI \<sigma> = 0x1f3a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> R14 \<sigma> = 0x1df7c \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7c90_49_def[Ps]

definition P_0x7c90_49_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7c90_49_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7c90_49_regions :: state_pred where
  \<open>P_0x7c90_49_regions \<sigma> \<equiv> \<exists>regions. P_0x7c90_49_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_49 :: state_pred where
  \<open>Q_ret_address_49 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_49_def[Qs]

schematic_goal AES_set_encrypt_key_0_6_0x7c90_0x7c98_49[blocks]:
  assumes \<open>(P_0x7c90_49 && P_0x7c90_49_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x7c98 49 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_49 ?\<sigma> \<and> block_usage P_0x7c90_49_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7c90_49_def P_0x7c90_49_regions_def post: Q_ret_address_49_def regionset: P_0x7c90_49_regions_set_def)

definition P_0x7a0f_false_50 :: state_pred where
  \<open>P_0x7a0f_false_50 \<sigma> \<equiv> RIP \<sigma> = 0x7a0f \<and> RAX \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> RBX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RCX \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R11 \<sigma> = ucast (((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8)) \<and> R10 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R9 \<sigma> = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> R8 \<sigma> = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,4]::32 word) = ucast (((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)::32 word)::32 word))::32 word) << 8)::32 word) XOR ((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[RDI\<^sub>0,1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)::32 word)))) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x2),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x3),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x4),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x4),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x5),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x7),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x6),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x8),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x9),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xb),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xa),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xc),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xd),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xf),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0xe),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x10),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x11),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x13),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x12),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x14),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x14),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x15),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x17),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x16),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x18),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x18),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x19),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1b),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1a),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x1c),4]::32 word) = ucast (((((((((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1c),1]::8 word)::32 word)::32 word))::32 word) << 24)::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1d),1]::8 word)::32 word)::32 word))::32 word) << 16))::32 word) XOR (\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1f),1]::8 word)::32 word))::32 word) XOR ((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x1e),1]::8 word)::32 word)::32 word))::32 word) << 8))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7a0f_false_50_def[Ps]

definition P_0x7a0f_false_50_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7a0f_false_50_regions_set \<sigma> \<equiv> {
    (0, RDI\<^sub>0, Suc 0),
    (1, RDX\<^sub>0, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RDI\<^sub>0::64 word) + 0x1), Suc 0),
    (4, ((RDI\<^sub>0::64 word) + 0x2), Suc 0),
    (5, ((RDI\<^sub>0::64 word) + 0x3), Suc 0),
    (6, ((RDI\<^sub>0::64 word) + 0x4), Suc 0),
    (7, ((RDI\<^sub>0::64 word) + 0x5), Suc 0),
    (8, ((RDI\<^sub>0::64 word) + 0x6), Suc 0),
    (9, ((RDI\<^sub>0::64 word) + 0x7), Suc 0),
    (10, ((RDI\<^sub>0::64 word) + 0x8), Suc 0),
    (11, ((RDI\<^sub>0::64 word) + 0x9), Suc 0),
    (12, ((RDI\<^sub>0::64 word) + 0xa), Suc 0),
    (13, ((RDI\<^sub>0::64 word) + 0xb), Suc 0),
    (14, ((RDI\<^sub>0::64 word) + 0xc), Suc 0),
    (15, ((RDI\<^sub>0::64 word) + 0xd), Suc 0),
    (16, ((RDI\<^sub>0::64 word) + 0xe), Suc 0),
    (17, ((RDI\<^sub>0::64 word) + 0xf), Suc 0),
    (18, ((RDI\<^sub>0::64 word) + 0x10), Suc 0),
    (19, ((RDI\<^sub>0::64 word) + 0x11), Suc 0),
    (20, ((RDI\<^sub>0::64 word) + 0x12), Suc 0),
    (21, ((RDI\<^sub>0::64 word) + 0x13), Suc 0),
    (22, ((RDI\<^sub>0::64 word) + 0x14), Suc 0),
    (23, ((RDI\<^sub>0::64 word) + 0x15), Suc 0),
    (24, ((RDI\<^sub>0::64 word) + 0x16), Suc 0),
    (25, ((RDI\<^sub>0::64 word) + 0x17), Suc 0),
    (26, ((RDI\<^sub>0::64 word) + 0x18), Suc 0),
    (27, ((RDI\<^sub>0::64 word) + 0x19), Suc 0),
    (28, ((RDI\<^sub>0::64 word) + 0x1a), Suc 0),
    (29, ((RDI\<^sub>0::64 word) + 0x1b), Suc 0),
    (30, ((RDI\<^sub>0::64 word) + 0x1c), Suc 0),
    (31, ((RDI\<^sub>0::64 word) + 0x1d), Suc 0),
    (32, ((RDI\<^sub>0::64 word) + 0x1e), Suc 0),
    (33, ((RDI\<^sub>0::64 word) + 0x1f), Suc 0),
    (34, ((RDX\<^sub>0::64 word) + 0x4), 4),
    (35, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (36, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (37, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (38, ((RDX\<^sub>0::64 word) + 0x14), 4),
    (39, ((RDX\<^sub>0::64 word) + 0x18), 4),
    (40, ((RDX\<^sub>0::64 word) + 0x1c), 4),
    (41, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (42, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (43, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (44, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7a0f_false_50_regions :: state_pred where
  \<open>P_0x7a0f_false_50_regions \<sigma> \<equiv> \<exists>regions. P_0x7a0f_false_50_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_50 :: state_pred where
  \<open>Q_ret_address_50 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare Q_ret_address_50_def[Qs]

schematic_goal AES_set_encrypt_key_0_7_0x7a0f_0x7a1d_50[blocks]:
  assumes \<open>(P_0x7a0f_false_50 && P_0x7a0f_false_50_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x7a1d 50 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_50 ?\<sigma> \<and> block_usage P_0x7a0f_false_50_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7a0f_false_50_def P_0x7a0f_false_50_regions_def post: Q_ret_address_50_def regionset: P_0x7a0f_false_50_regions_set_def)

definition AES_set_encrypt_key_acode :: ACode where
  \<open>AES_set_encrypt_key_acode =
    Block (Suc 0) 0x7880 0;
    IF ZF THEN
      Block 3 0x7c9e (Suc 0)
    ELSE
      Block 2 0x7889 2;
      IF ZF THEN
        Block 3 0x7c9e 3
      ELSE
        Block 4 0x7897 4;
        IF !ZF THEN
          Block 2 0x7a20 5;
          IF !ZF THEN
            Block 3 0x7ca4 6
          ELSE
            Block 3 0x7a36 7;
            Block 49 0x7959 8;
            IF ZF THEN
              Block 7 0x7a7c 9;
              WHILE P_0x7a8b_10 DO
                Block 28 0x7ae2 10;
                IF !ZF THEN
                  Block 4 0x7a87 11
                ELSE
                  Block (Suc 0) 0x7ae5 12
                FI
              OD;
              Block 6 0x7aef 13
            ELSE
              Block 24 0x79b1 14;
              IF ZF THEN
                Block 7 0x7b0c 15;
                WHILE P_0x7b24_16 DO
                  Block 29 0x7b8b 16;
                  IF !ZF THEN
                    Block 8 0x7b21 17
                  ELSE
                    Block (Suc 0) 0x7b8e 18
                  FI
                OD;
                Block 6 0x7b98 19
              ELSE
                Block 24 0x7a09 20;
                IF ZF THEN
                  Block 7 0x7bbc 21;
                  WHILE P_0x7c20_22 DO
                    Block 29 0x7c87 22;
                    IF !ZF THEN
                      Block 28 0x7c1d 23
                    ELSE
                      Block (Suc 0) 0x7c8a 24
                    FI
                  OD;
                  Block 6 0x7c98 25
                ELSE
                  Block 7 0x7a1d 26
                FI
              FI
            FI
          FI
        ELSE
          Block 2 0x78a2 27;
          IF !ZF THEN
            Block 2 0x7a40 28;
            IF !ZF THEN
              Block 3 0x7a36 29
            ELSE
              Block 3 0x7a52 30
            FI
          ELSE
            Block 2 0x78ae 31
          FI;
          Block 49 0x7959 32;
          IF ZF THEN
            Block 7 0x7a7c 33;
            WHILE P_0x7a8b_34 DO
              Block 28 0x7ae2 34;
              IF !ZF THEN
                Block 4 0x7a87 35
              ELSE
                Block (Suc 0) 0x7ae5 36
              FI
            OD;
            Block 6 0x7aef 37
          ELSE
            Block 24 0x79b1 38;
            IF ZF THEN
              Block 7 0x7b0c 39;
              WHILE P_0x7b24_40 DO
                Block 29 0x7b8b 40;
                IF !ZF THEN
                  Block 8 0x7b21 41
                ELSE
                  Block (Suc 0) 0x7b8e 42
                FI
              OD;
              Block 6 0x7b98 43
            ELSE
              Block 24 0x7a09 44;
              IF ZF THEN
                Block 7 0x7bbc 45;
                WHILE P_0x7c20_46 DO
                  Block 29 0x7c87 46;
                  IF !ZF THEN
                    Block 28 0x7c1d 47
                  ELSE
                    Block (Suc 0) 0x7c8a 48
                  FI
                OD;
                Block 6 0x7c98 49
              ELSE
                Block 7 0x7a1d 50
              FI
            FI
          FI
        FI
      FI
    FI
  \<close>

schematic_goal "AES_set_encrypt_key":
  assumes
    \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7883 \<longrightarrow> P_0x7883_true_1_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7883 \<longrightarrow> P_0x7883_false_2_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x788c \<longrightarrow> P_0x788c_true_3_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x788c \<longrightarrow> P_0x788c_false_4_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x789c \<longrightarrow> P_0x789c_true_5_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a26 \<longrightarrow> P_0x7a26_true_6_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a26 \<longrightarrow> P_0x7a26_false_7_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x78b8 \<longrightarrow> P_0x78b8_8_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x795f \<longrightarrow> P_0x795f_true_9_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a8b \<longrightarrow> P_0x7a8b_10_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7ae5 \<longrightarrow> P_0x7ae5_true_11_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7ae5 \<longrightarrow> P_0x7ae5_false_12_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7ae7 \<longrightarrow> P_0x7ae7_13_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x795f \<longrightarrow> P_0x795f_false_14_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x79b7 \<longrightarrow> P_0x79b7_true_15_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b24 \<longrightarrow> P_0x7b24_16_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b8e \<longrightarrow> P_0x7b8e_true_17_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b8e \<longrightarrow> P_0x7b8e_false_18_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b90 \<longrightarrow> P_0x7b90_19_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x79b7 \<longrightarrow> P_0x79b7_false_20_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a0f \<longrightarrow> P_0x7a0f_true_21_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c20 \<longrightarrow> P_0x7c20_22_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c8a \<longrightarrow> P_0x7c8a_true_23_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c8a \<longrightarrow> P_0x7c8a_false_24_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c90 \<longrightarrow> P_0x7c90_25_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a0f \<longrightarrow> P_0x7a0f_false_26_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x789c \<longrightarrow> P_0x789c_false_27_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x78a8 \<longrightarrow> P_0x78a8_true_28_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a46 \<longrightarrow> P_0x7a46_true_29_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a46 \<longrightarrow> P_0x7a46_false_30_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x78a8 \<longrightarrow> P_0x78a8_false_31_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x78b8 \<longrightarrow> P_0x78b8_32_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x795f \<longrightarrow> P_0x795f_true_33_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a8b \<longrightarrow> P_0x7a8b_34_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7ae5 \<longrightarrow> P_0x7ae5_true_35_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7ae5 \<longrightarrow> P_0x7ae5_false_36_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7ae7 \<longrightarrow> P_0x7ae7_37_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x795f \<longrightarrow> P_0x795f_false_38_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x79b7 \<longrightarrow> P_0x79b7_true_39_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b24 \<longrightarrow> P_0x7b24_40_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b8e \<longrightarrow> P_0x7b8e_true_41_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b8e \<longrightarrow> P_0x7b8e_false_42_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7b90 \<longrightarrow> P_0x7b90_43_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x79b7 \<longrightarrow> P_0x79b7_false_44_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a0f \<longrightarrow> P_0x7a0f_true_45_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c20 \<longrightarrow> P_0x7c20_46_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c8a \<longrightarrow> P_0x7c8a_true_47_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c8a \<longrightarrow> P_0x7c8a_false_48_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7c90 \<longrightarrow> P_0x7c90_49_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7a0f \<longrightarrow> P_0x7a0f_false_50_regions \<sigma>\<close>
  shows \<open>{{?P}} AES_set_encrypt_key_acode {{?Q;?M}}\<close>
  apply (vcg acode: AES_set_encrypt_key_acode_def assms: assms)
                     apply (vcg_while \<open>P_0x7a8b_10 || P_0x7ae7_13\<close> assms: assms)
                      apply (vcg_step assms: assms)+
                      apply (simp add: pred_logic Ps Qs)
                      apply (vcg_step assms: assms)
                      apply (simp add: assms)
                      apply simp+
                   apply (vcg_step assms: assms)+
                      apply (vcg_while \<open>P_0x7b24_16 || P_0x7b90_19\<close> assms: assms)
                      apply (vcg_step assms: assms)+
                      apply (simp add: pred_logic Ps Qs)
                      apply (vcg_step assms: assms)
                      apply (simp add: assms)
                      apply simp+
                      apply (vcg_step assms: assms)+
                      apply (vcg_while \<open>P_0x7c20_22 || P_0x7c90_25\<close> assms: assms)
                      apply (vcg_step assms: assms)+
                      apply (simp add: pred_logic Ps Qs)
                      apply (vcg_step assms: assms)
                      apply (simp add: assms)
                      apply simp+
                      apply (vcg_step assms: assms)+
                  apply (vcg_while \<open>P_0x7a8b_34 || P_0x7ae7_37\<close> assms: assms)
                     apply (vcg_step assms: assms)+
                    apply (simp add: pred_logic Ps Qs)
                   apply (vcg_step assms: assms)
                    apply (simp add: assms)
                   apply simp+
                apply (vcg_step assms: assms)+
                     apply (vcg_while \<open>P_0x7b24_40 || P_0x7b90_43\<close> assms: assms)
                      apply (vcg_step assms: assms)+
                      apply (simp add: pred_logic Ps Qs)
                      apply (vcg_step assms: assms)
                      apply (simp add: assms)
                      apply simp+
                   apply (vcg_step assms: assms)+
                      apply (vcg_while \<open>P_0x7c20_46 || P_0x7c90_49\<close> assms: assms)
                      apply (vcg_step assms: assms)+
                      apply (simp add: pred_logic Ps Qs)
                      apply (vcg_step assms: assms)
                      apply (simp add: assms)
                      apply simp+
                      apply (vcg_step assms: assms)+
  done

end

locale "AES_set_decrypt_key" = "qemu_img_xen" +
  fixes RAX\<^sub>0\<^sub>v RBX\<^sub>0\<^sub>v RCX\<^sub>0\<^sub>v RDX\<^sub>0\<^sub>v RDI\<^sub>0\<^sub>v RSI\<^sub>0\<^sub>v RSP\<^sub>0\<^sub>v RBP\<^sub>0\<^sub>v R14\<^sub>0\<^sub>v R11\<^sub>0\<^sub>v R10\<^sub>0\<^sub>v R9\<^sub>0\<^sub>v R8\<^sub>0\<^sub>v ret_address\<^sub>v :: \<open>64 word\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>RAX\<^sub>0 \<equiv> RAX\<^sub>0\<^sub>v\<close>
definition \<open>RBX\<^sub>0 \<equiv> RBX\<^sub>0\<^sub>v\<close>
definition \<open>RCX\<^sub>0 \<equiv> RCX\<^sub>0\<^sub>v\<close>
definition \<open>RDX\<^sub>0 \<equiv> RDX\<^sub>0\<^sub>v\<close>
definition \<open>RDI\<^sub>0 \<equiv> RDI\<^sub>0\<^sub>v\<close>
definition \<open>RSI\<^sub>0 \<equiv> RSI\<^sub>0\<^sub>v\<close>
definition \<open>RSP\<^sub>0 \<equiv> RSP\<^sub>0\<^sub>v\<close>
definition \<open>RBP\<^sub>0 \<equiv> RBP\<^sub>0\<^sub>v\<close>
definition \<open>R14\<^sub>0 \<equiv> R14\<^sub>0\<^sub>v\<close>
definition \<open>R11\<^sub>0 \<equiv> R11\<^sub>0\<^sub>v\<close>
definition \<open>R10\<^sub>0 \<equiv> R10\<^sub>0\<^sub>v\<close>
definition \<open>R9\<^sub>0 \<equiv> R9\<^sub>0\<^sub>v\<close>
definition \<open>R8\<^sub>0 \<equiv> R8\<^sub>0\<^sub>v\<close>
definition \<open>ret_address \<equiv> ret_address\<^sub>v\<close>

definition P_0x7cb0_0 :: state_pred where
  \<open>P_0x7cb0_0 \<sigma> \<equiv> RIP \<sigma> = 0x7cb0 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x7cb0_0_def[Ps]

definition P_0x7cb0_0_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cb0_0_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x18), 8)
  }\<close>

definition P_0x7cb0_0_regions :: state_pred where
  \<open>P_0x7cb0_0_regions \<sigma> \<equiv> \<exists>regions. P_0x7cb0_0_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7cb7_0 :: state_pred where
  \<open>Q_0x7cb7_0 \<sigma> \<equiv> RIP \<sigma> = 0x7cb7 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0\<close>
declare Q_0x7cb7_0_def[Qs]

schematic_goal AES_set_decrypt_key_0_4_0x7cb0_0x7cb6_0[blocks]:
  assumes \<open>(P_0x7cb0_0 && P_0x7cb0_0_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x7cb6 0 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7cb7_0 ?\<sigma> \<and> block_usage P_0x7cb0_0_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cb0_0_def P_0x7cb0_0_regions_def post: Q_0x7cb7_0_def regionset: P_0x7cb0_0_regions_set_def)

definition P_0x7cb7_1 :: state_pred where
  \<open>P_0x7cb7_1 \<sigma> \<equiv> RIP \<sigma> = 0x7cb7 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0\<close>
declare P_0x7cb7_1_def[Ps]

definition P_0x7cb7_1_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cb7_1_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7cb7_1_regions :: state_pred where
  \<open>P_0x7cb7_1_regions \<sigma> \<equiv> \<exists>regions. P_0x7cb7_1_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7880_0x7cb7_1 :: state_pred where
  \<open>Q_0x7880_0x7cb7_1 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x20) \<and> RIP \<sigma> = 0x7880 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7880_0x7cb7_1_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7cb7_0x7cb7_1[blocks]:
  assumes \<open>(P_0x7cb7_1 && P_0x7cb7_1_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7cb7 (Suc 0) \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7880_0x7cb7_1 ?\<sigma> \<and> block_usage P_0x7cb7_1_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cb7_1_def P_0x7cb7_1_regions_def post: Q_0x7880_0x7cb7_1_def regionset: P_0x7cb7_1_regions_set_def)

definition P_0x7cbc_2 :: state_pred where
  \<open>P_0x7cbc_2 \<sigma> \<equiv> RIP \<sigma> = 0x7cbc \<and> RAX \<sigma> = AES_set_encrypt_key_0x7cb7_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7cbc_2_def[Ps]

definition P_0x7cbc_2_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cbc_2_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7cbc_2_regions :: state_pred where
  \<open>P_0x7cbc_2_regions \<sigma> \<equiv> \<exists>regions. P_0x7cbc_2_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7cbe_2 :: state_pred where
  \<open>Q_0x7cbe_2 \<sigma> \<equiv> RIP \<sigma> = 0x7cbe \<and> RAX \<sigma> = AES_set_encrypt_key_0x7cb7_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7cbe_2_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7cbc_0x7cbc_2[blocks]:
  assumes \<open>(P_0x7cbc_2 && P_0x7cbc_2_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7cbc 2 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7cbe_2 ?\<sigma> \<and> block_usage P_0x7cbc_2_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cbc_2_def P_0x7cbc_2_regions_def post: Q_0x7cbe_2_def regionset: P_0x7cbc_2_regions_set_def)

definition P_0x7cbe_true_3 :: state_pred where
  \<open>P_0x7cbe_true_3 \<sigma> \<equiv> RIP \<sigma> = 0x7cbe \<and> RAX \<sigma> = AES_set_encrypt_key_0x7cb7_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7cbe_true_3_def[Ps]

definition P_0x7cbe_true_3_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cbe_true_3_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7cbe_true_3_regions :: state_pred where
  \<open>P_0x7cbe_true_3_regions \<sigma> \<equiv> \<exists>regions. P_0x7cbe_true_3_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7e91_3 :: state_pred where
  \<open>Q_0x7e91_3 \<sigma> \<equiv> RIP \<sigma> = 0x7e91 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7e91_3_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7cbe_0x7cbe_3[blocks]:
  assumes \<open>(P_0x7cbe_true_3 && P_0x7cbe_true_3_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7cbe 3 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7e91_3 ?\<sigma> \<and> block_usage P_0x7cbe_true_3_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cbe_true_3_def P_0x7cbe_true_3_regions_def post: Q_0x7e91_3_def regionset: P_0x7cbe_true_3_regions_set_def)

definition P_0x7cbe_false_4 :: state_pred where
  \<open>P_0x7cbe_false_4 \<sigma> \<equiv> RIP \<sigma> = 0x7cbe \<and> RAX \<sigma> = AES_set_encrypt_key_0x7cb7_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7cbe_false_4_def[Ps]

definition P_0x7cbe_false_4_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cbe_false_4_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7cbe_false_4_regions :: state_pred where
  \<open>P_0x7cbe_false_4_regions \<sigma> \<equiv> \<exists>regions. P_0x7cbe_false_4_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7cd9_4 :: state_pred where
  \<open>Q_0x7cd9_4 \<sigma> \<equiv> RIP \<sigma> = 0x7cd9 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7cd9_4_def[Qs]

schematic_goal AES_set_decrypt_key_0_5_0x7cbe_0x7cd6_4[blocks]:
  assumes \<open>(P_0x7cbe_false_4 && P_0x7cbe_false_4_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x7cd6 4 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7cd9_4 ?\<sigma> \<and> block_usage P_0x7cbe_false_4_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cbe_false_4_def P_0x7cbe_false_4_regions_def post: Q_0x7cd9_4_def regionset: P_0x7cbe_false_4_regions_set_def)

definition P_0x7cd9_true_5 :: state_pred where
  \<open>P_0x7cd9_true_5 \<sigma> \<equiv> RIP \<sigma> = 0x7cd9 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7cd9_true_5_def[Ps]

definition P_0x7cd9_true_5_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cd9_true_5_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7cd9_true_5_regions :: state_pred where
  \<open>P_0x7cd9_true_5_regions \<sigma> \<equiv> \<exists>regions. P_0x7cd9_true_5_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7d41_5 :: state_pred where
  \<open>Q_0x7d41_5 \<sigma> \<equiv> RIP \<sigma> = 0x7d41 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7d41_5_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7cd9_0x7cd9_5[blocks]:
  assumes \<open>(P_0x7cd9_true_5 && P_0x7cd9_true_5_regions && jle) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7cd9 5 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7d41_5 ?\<sigma> \<and> block_usage P_0x7cd9_true_5_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cd9_true_5_def P_0x7cd9_true_5_regions_def post: Q_0x7d41_5_def regionset: P_0x7cd9_true_5_regions_set_def)

definition P_0x7cd9_false_6 :: state_pred where
  \<open>P_0x7cd9_false_6 \<sigma> \<equiv> RIP \<sigma> = 0x7cd9 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7cd9_false_6_def[Ps]

definition P_0x7cd9_false_6_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cd9_false_6_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7cd9_false_6_regions :: state_pred where
  \<open>P_0x7cd9_false_6_regions \<sigma> \<equiv> \<exists>regions. P_0x7cd9_false_6_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7cf0_6 :: state_pred where
  \<open>Q_0x7cf0_6 \<sigma> \<equiv> RIP \<sigma> = 0x7cf0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7cf0_6_def[Qs]

schematic_goal AES_set_decrypt_key_0_6_0x7cd9_0x7ce7_6[blocks]:
  assumes \<open>(P_0x7cd9_false_6 && P_0x7cd9_false_6_regions && ! jle) \<sigma>\<close>
  shows \<open>exec_block 6 0x7ce7 6 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7cf0_6 ?\<sigma> \<and> block_usage P_0x7cd9_false_6_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cd9_false_6_def P_0x7cd9_false_6_regions_def post: Q_0x7cf0_6_def regionset: P_0x7cd9_false_6_regions_set_def)

definition P_0x7cf0_7 :: state_pred where
  \<open>P_0x7cf0_7 \<sigma> \<equiv> RIP \<sigma> = 0x7cf0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7cf0_7_def[Ps]

definition P_0x7cf0_7_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7cf0_7_regions_set \<sigma> \<equiv> {
    (0, RAX \<sigma>, 4),
    (1, RCX \<sigma>, 4),
    (2, RSP\<^sub>0, 8),
    (3, ((RAX \<sigma>::64 word) + 0x4), 4),
    (4, ((RAX \<sigma>::64 word) + 0x8), 4),
    (5, ((RAX \<sigma>::64 word) + 0xc), 4),
    (6, ((RCX \<sigma>::64 word) + 0x4), 4),
    (7, ((RCX \<sigma>::64 word) + 0x8), 4),
    (8, ((RCX \<sigma>::64 word) + 0xc), 4),
    (9, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7cf0_7_regions :: state_pred where
  \<open>P_0x7cf0_7_regions \<sigma> \<equiv> \<exists>regions. P_0x7cf0_7_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7d38_7 :: state_pred where
  \<open>Q_0x7d38_7 \<sigma> \<equiv> RIP \<sigma> = 0x7d38 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7d38_7_def[Qs]

schematic_goal AES_set_decrypt_key_0_22_0x7cf0_0x7d36_7[blocks]:
  assumes \<open>(P_0x7cf0_7 && P_0x7cf0_7_regions) \<sigma>\<close>
  shows \<open>exec_block 22 0x7d36 7 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7d38_7 ?\<sigma> \<and> block_usage P_0x7cf0_7_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7cf0_7_def P_0x7cf0_7_regions_def post: Q_0x7d38_7_def regionset: P_0x7cf0_7_regions_set_def)

definition P_0x7d38_true_8 :: state_pred where
  \<open>P_0x7d38_true_8 \<sigma> \<equiv> RIP \<sigma> = 0x7d38 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7d38_true_8_def[Ps]

definition P_0x7d38_true_8_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7d38_true_8_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7d38_true_8_regions :: state_pred where
  \<open>P_0x7d38_true_8_regions \<sigma> \<equiv> \<exists>regions. P_0x7d38_true_8_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7cf0_8 :: state_pred where
  \<open>Q_0x7cf0_8 \<sigma> \<equiv> RIP \<sigma> = 0x7cf0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7cf0_8_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7d38_0x7d38_8[blocks]:
  assumes \<open>(P_0x7d38_true_8 && P_0x7d38_true_8_regions && jl) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7d38 8 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7cf0_8 ?\<sigma> \<and> block_usage P_0x7d38_true_8_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7d38_true_8_def P_0x7d38_true_8_regions_def post: Q_0x7cf0_8_def regionset: P_0x7d38_true_8_regions_set_def)

definition P_0x7d38_false_9 :: state_pred where
  \<open>P_0x7d38_false_9 \<sigma> \<equiv> RIP \<sigma> = 0x7d38 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7d38_false_9_def[Ps]

definition P_0x7d38_false_9_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7d38_false_9_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7d38_false_9_regions :: state_pred where
  \<open>P_0x7d38_false_9_regions \<sigma> \<equiv> \<exists>regions. P_0x7d38_false_9_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7d3a_9 :: state_pred where
  \<open>Q_0x7d3a_9 \<sigma> \<equiv> RIP \<sigma> = 0x7d3a \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7d3a_9_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7d38_0x7d38_9[blocks]:
  assumes \<open>(P_0x7d38_false_9 && P_0x7d38_false_9_regions && ! jl) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7d38 9 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7d3a_9 ?\<sigma> \<and> block_usage P_0x7d38_false_9_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7d38_false_9_def P_0x7d38_false_9_regions_def post: Q_0x7d3a_9_def regionset: P_0x7d38_false_9_regions_set_def)

definition P_0x7d3a_10 :: state_pred where
  \<open>P_0x7d3a_10 \<sigma> \<equiv> RIP \<sigma> = 0x7d3a \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7d3a_10_def[Ps]

definition P_0x7d3a_10_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7d3a_10_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7d3a_10_regions :: state_pred where
  \<open>P_0x7d3a_10_regions \<sigma> \<equiv> \<exists>regions. P_0x7d3a_10_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7d41_10 :: state_pred where
  \<open>Q_0x7d41_10 \<sigma> \<equiv> RIP \<sigma> = 0x7d41 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7d41_10_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7d3a_0x7d3a_10[blocks]:
  assumes \<open>(P_0x7d3a_10 && P_0x7d3a_10_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7d3a 10 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7d41_10 ?\<sigma> \<and> block_usage P_0x7d3a_10_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7d3a_10_def P_0x7d3a_10_regions_def post: Q_0x7d41_10_def regionset: P_0x7d3a_10_regions_set_def)

definition P_0x7d41_11 :: state_pred where
  \<open>P_0x7d41_11 \<sigma> \<equiv> RIP \<sigma> = 0x7d41 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7d41_11_def[Ps]

definition P_0x7d41_11_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7d41_11_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7d41_11_regions :: state_pred where
  \<open>P_0x7d41_11_regions \<sigma> \<equiv> \<exists>regions. P_0x7d41_11_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7d44_11 :: state_pred where
  \<open>Q_0x7d44_11 \<sigma> \<equiv> RIP \<sigma> = 0x7d44 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7d44_11_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7d41_0x7d41_11[blocks]:
  assumes \<open>(P_0x7d41_11 && P_0x7d41_11_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7d41 11 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7d44_11 ?\<sigma> \<and> block_usage P_0x7d41_11_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7d41_11_def P_0x7d41_11_regions_def post: Q_0x7d44_11_def regionset: P_0x7d41_11_regions_set_def)

definition P_0x7d44_true_12 :: state_pred where
  \<open>P_0x7d44_true_12 \<sigma> \<equiv> RIP \<sigma> = 0x7d44 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7d44_true_12_def[Ps]

definition P_0x7d44_true_12_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7d44_true_12_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7d44_true_12_regions :: state_pred where
  \<open>P_0x7d44_true_12_regions \<sigma> \<equiv> \<exists>regions. P_0x7d44_true_12_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7e8f_12 :: state_pred where
  \<open>Q_0x7e8f_12 \<sigma> \<equiv> RIP \<sigma> = 0x7e8f \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7e8f_12_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7d44_0x7d44_12[blocks]:
  assumes \<open>(P_0x7d44_true_12 && P_0x7d44_true_12_regions && jle) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7d44 12 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7e8f_12 ?\<sigma> \<and> block_usage P_0x7d44_true_12_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7d44_true_12_def P_0x7d44_true_12_regions_def post: Q_0x7e8f_12_def regionset: P_0x7d44_true_12_regions_set_def)

definition P_0x7d44_false_13 :: state_pred where
  \<open>P_0x7d44_false_13 \<sigma> \<equiv> RIP \<sigma> = 0x7d44 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R11 \<sigma> = R11\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)::64 word)::64 word) * 0x4)::32 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7d44_false_13_def[Ps]

definition P_0x7d44_false_13_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7d44_false_13_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7d44_false_13_regions :: state_pred where
  \<open>P_0x7d44_false_13_regions \<sigma> \<equiv> \<exists>regions. P_0x7d44_false_13_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7d78_13 :: state_pred where
  \<open>Q_0x7d78_13 \<sigma> \<equiv> RIP \<sigma> = 0x7d78 \<and> RAX \<sigma> = 0x1f3a0 \<and> RDI \<sigma> = 0x1eba0 \<and> RSI \<sigma> = 0x1e7a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = 0x1efa0 \<and> R8 \<sigma> = 0x1e3a0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7d78_13_def[Qs]

schematic_goal AES_set_decrypt_key_0_8_0x7d44_0x7d73_13[blocks]:
  assumes \<open>(P_0x7d44_false_13 && P_0x7d44_false_13_regions && ! jle) \<sigma>\<close>
  shows \<open>exec_block 8 0x7d73 13 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7d78_13 ?\<sigma> \<and> block_usage P_0x7d44_false_13_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7d44_false_13_def P_0x7d44_false_13_regions_def post: Q_0x7d78_13_def regionset: P_0x7d44_false_13_regions_set_def)

definition P_0x7d78_14 :: state_pred where
  \<open>P_0x7d78_14 \<sigma> \<equiv> RIP \<sigma> = 0x7d78 \<and> RAX \<sigma> = 0x1f3a0 \<and> RDI \<sigma> = 0x1eba0 \<and> RSI \<sigma> = 0x1e7a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = 0x1efa0 \<and> R8 \<sigma> = 0x1e3a0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7d78_14_def[Ps]

definition P_0x7d78_14_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7d78_14_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX \<sigma>::64 word) + 0x10), 4),
    (2, ((RDX \<sigma>::64 word) + 0x14), 4),
    (3, ((RDX \<sigma>::64 word) + 0x18), 4),
    (4, ((RDX \<sigma>::64 word) + 0x1c), 4),
    (5, ((0x1e3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x10),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (6, ((0x1e3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x14),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (7, ((0x1e3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x18),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (8, ((0x1e3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x1c),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (9, ((0x1e7a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x10),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (10, ((0x1eba0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x10),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (11, ((0x1eba0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x14),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (12, ((0x1eba0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x18),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (13, ((0x1eba0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x1c),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (14, ((0x1efa0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x10),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (15, ((0x1efa0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x14),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (16, ((0x1efa0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x18),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (17, ((0x1efa0::64 word) + (\<langle>63,0\<rangle>(((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x1c),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)),1]::8 word)::64 word)::64 word) * 0x4)::64 word)), 4),
    (18, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x10),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (19, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x14),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (20, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x18),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (21, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x1c),4]::32 word) >> 16)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (22, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x10),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (23, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x14),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (24, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x18),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (25, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>7,0\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x1c),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (26, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>15,8\<rangle>(\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x1c),4]::32 word)::8 word)::8 word))::64 word) * (0x4::64 word))::64 word)), Suc 0),
    (27, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x10),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (28, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x14),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (29, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x18),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (30, ((0x1f3a0::64 word) + (\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((\<sigma> \<turnstile> *[((RDX \<sigma>::64 word) + 0x1c),4]::32 word) >> 24)::64 word)::64 word) * 0x4)::64 word)), Suc 0),
    (31, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (32, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (33, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (34, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (35, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7d78_14_regions :: state_pred where
  \<open>P_0x7d78_14_regions \<sigma> \<equiv> \<exists>regions. P_0x7d78_14_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7e89_14 :: state_pred where
  \<open>Q_0x7e89_14 \<sigma> \<equiv> RIP \<sigma> = 0x7e89 \<and> RAX \<sigma> = 0x1f3a0 \<and> RDI \<sigma> = 0x1eba0 \<and> RSI \<sigma> = 0x1e7a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = 0x1efa0 \<and> R8 \<sigma> = 0x1e3a0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7e89_14_def[Qs]

schematic_goal AES_set_decrypt_key_0_75_0x7d78_0x7e82_14[blocks]:
  assumes \<open>(P_0x7d78_14 && P_0x7d78_14_regions) \<sigma>\<close>
  shows \<open>exec_block 75 0x7e82 14 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7e89_14 ?\<sigma> \<and> block_usage P_0x7d78_14_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  apply (insert assms)
  apply (auto simp: pred_logic P_0x7d78_14_def P_0x7d78_14_regions_def P_0x7d78_14_regions_set_def)
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply step
    apply (auto simp: block_usage_def eq_def setcc_def cmovcc_def if'_then_else_def sub_sign_flag_def simp_rules Let'_def read_region'_def write_block'_def get'_def set'_def Q_0x7e89_14_def P_0x7d78_14_regions_set_def)
  done
  by (steps pre: P_0x7d78_14_def P_0x7d78_14_regions_def post: Q_0x7e89_14_def regionset: P_0x7d78_14_regions_set_def)

definition P_0x7e89_true_15 :: state_pred where
  \<open>P_0x7e89_true_15 \<sigma> \<equiv> RIP \<sigma> = 0x7e89 \<and> RAX \<sigma> = 0x1f3a0 \<and> RDI \<sigma> = 0x1eba0 \<and> RSI \<sigma> = 0x1e7a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = 0x1efa0 \<and> R8 \<sigma> = 0x1e3a0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7e89_true_15_def[Ps]

definition P_0x7e89_true_15_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7e89_true_15_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7e89_true_15_regions :: state_pred where
  \<open>P_0x7e89_true_15_regions \<sigma> \<equiv> \<exists>regions. P_0x7e89_true_15_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7d78_15 :: state_pred where
  \<open>Q_0x7d78_15 \<sigma> \<equiv> RIP \<sigma> = 0x7d78 \<and> RAX \<sigma> = 0x1f3a0 \<and> RDI \<sigma> = 0x1eba0 \<and> RSI \<sigma> = 0x1e7a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = 0x1efa0 \<and> R8 \<sigma> = 0x1e3a0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7d78_15_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7e89_0x7e89_15[blocks]:
  assumes \<open>(P_0x7e89_true_15 && P_0x7e89_true_15_regions && jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7e89 15 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7d78_15 ?\<sigma> \<and> block_usage P_0x7e89_true_15_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7e89_true_15_def P_0x7e89_true_15_regions_def post: Q_0x7d78_15_def regionset: P_0x7e89_true_15_regions_set_def)

definition P_0x7e89_false_16 :: state_pred where
  \<open>P_0x7e89_false_16 \<sigma> \<equiv> RIP \<sigma> = 0x7e89 \<and> RAX \<sigma> = 0x1f3a0 \<and> RDI \<sigma> = 0x1eba0 \<and> RSI \<sigma> = 0x1e7a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = 0x1efa0 \<and> R8 \<sigma> = 0x1e3a0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7e89_false_16_def[Ps]

definition P_0x7e89_false_16_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7e89_false_16_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7e89_false_16_regions :: state_pred where
  \<open>P_0x7e89_false_16_regions \<sigma> \<equiv> \<exists>regions. P_0x7e89_false_16_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7e8f_16 :: state_pred where
  \<open>Q_0x7e8f_16 \<sigma> \<equiv> RIP \<sigma> = 0x7e8f \<and> RAX \<sigma> = 0x1f3a0 \<and> RDI \<sigma> = 0x1eba0 \<and> RSI \<sigma> = 0x1e7a0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = 0x1efa0 \<and> R8 \<sigma> = 0x1e3a0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7e8f_16_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7e89_0x7e89_16[blocks]:
  assumes \<open>(P_0x7e89_false_16 && P_0x7e89_false_16_regions && ! jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7e89 16 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7e8f_16 ?\<sigma> \<and> block_usage P_0x7e89_false_16_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7e89_false_16_def P_0x7e89_false_16_regions_def post: Q_0x7e8f_16_def regionset: P_0x7e89_false_16_regions_set_def)

definition P_0x7e8f_17 :: state_pred where
  \<open>P_0x7e8f_17 \<sigma> \<equiv> RIP \<sigma> = 0x7e8f \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xf0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7e8f_17_def[Ps]

definition P_0x7e8f_17_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7e8f_17_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDX\<^sub>0::64 word) + 0xf0), 4),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7e8f_17_regions :: state_pred where
  \<open>P_0x7e8f_17_regions \<sigma> \<equiv> \<exists>regions. P_0x7e8f_17_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x7e91_17 :: state_pred where
  \<open>Q_0x7e91_17 \<sigma> \<equiv> RIP \<sigma> = 0x7e91 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_0x7e91_17_def[Qs]

schematic_goal AES_set_decrypt_key_0_1_0x7e8f_0x7e8f_17[blocks]:
  assumes \<open>(P_0x7e8f_17 && P_0x7e8f_17_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x7e8f 17 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x7e91_17 ?\<sigma> \<and> block_usage P_0x7e8f_17_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7e8f_17_def P_0x7e8f_17_regions_def post: Q_0x7e91_17_def regionset: P_0x7e8f_17_regions_set_def)

definition P_0x7e91_18 :: state_pred where
  \<open>P_0x7e91_18 \<sigma> \<equiv> RIP \<sigma> = 0x7e91 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x18) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare P_0x7e91_18_def[Ps]

definition P_0x7e91_18_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x7e91_18_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x20), 8)
  }\<close>

definition P_0x7e91_18_regions :: state_pred where
  \<open>P_0x7e91_18_regions \<sigma> \<equiv> \<exists>regions. P_0x7e91_18_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_18 :: state_pred where
  \<open>Q_ret_address_18 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = 0x7cbc\<close>
declare Q_ret_address_18_def[Qs]

schematic_goal AES_set_decrypt_key_0_4_0x7e91_0x7e95_18[blocks]:
  assumes \<open>(P_0x7e91_18 && P_0x7e91_18_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x7e95 18 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_18 ?\<sigma> \<and> block_usage P_0x7e91_18_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x7e91_18_def P_0x7e91_18_regions_def post: Q_ret_address_18_def regionset: P_0x7e91_18_regions_set_def)

interpretation AES_set_encrypt_key_0x7cb7_1: AES_set_encrypt_key _ _ _ _ _ _ _ _ _ _ \<open>RAX\<^sub>0\<close> \<open>RBX\<^sub>0\<close> \<open>RCX\<^sub>0\<close> \<open>RDX\<^sub>0\<close> \<open>RDI\<^sub>0\<close> \<open>RSI\<^sub>0\<close> \<open>((RSP\<^sub>0::64 word) - 0x18)\<close> \<open>RBP\<^sub>0\<close> \<open>RDX\<^sub>0\<close> \<open>R11\<^sub>0\<close> \<open>R10\<^sub>0\<close> \<open>R9\<^sub>0\<close> \<open>R8\<^sub>0\<close> \<open>0x7cb7\<close>
  by unfold_locales

definition AES_set_decrypt_key_acode :: ACode where
  \<open>AES_set_decrypt_key_acode =
    Block 4 0x7cb6 0;
    Block (Suc 0) 0x7cb7 (Suc 0);
    CALL AES_set_encrypt_key_0x7cb7_1.AES_set_encrypt_key_acode;
    Block (Suc 0) 0x7cbc 2;
    IF SF THEN
      Block (Suc 0) 0x7cbe 3
    ELSE
      Block 5 0x7cd6 4;
      IF jle THEN
        Block (Suc 0) 0x7cd9 5
      ELSE
        Block 6 0x7ce7 6;
        WHILE P_0x7cf0_7 DO
          Block 22 0x7d36 7;
          IF jl THEN
            Block (Suc 0) 0x7d38 8
          ELSE
            Block (Suc 0) 0x7d38 9
          FI
        OD;
        Block (Suc 0) 0x7d3a 10
      FI;
      Block (Suc 0) 0x7d41 11;
      IF jle THEN
        Block (Suc 0) 0x7d44 12
      ELSE
        Block 8 0x7d73 13;
        WHILE P_0x7d78_14 DO
          Block 75 0x7e82 14;
          IF jg THEN
            Block (Suc 0) 0x7e89 15
          ELSE
            Block (Suc 0) 0x7e89 16
          FI
        OD
      FI;
      Block (Suc 0) 0x7e8f 17
    FI;
    Block 4 0x7e95 18
  \<close>

method vcg_while' for P :: state_pred uses assms =
  ((rule htriples)+)?,
  rule HTriple_weaken[where P=P],
  simp add: pred_logic Ps Qs assms,
  rule HTriple_while,
  (vcg_step assms: assms)+,
  (simp add: pred_logic Ps Qs)+,
  (vcg_step assms: assms)+,
  (simp add: assms)+

schematic_goal "AES_set_decrypt_key":
  assumes
    \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7cb7 \<longrightarrow> P_0x7cb7_1_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7cbc \<longrightarrow> P_0x7cbc_2_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7cbe \<longrightarrow> P_0x7cbe_true_3_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7cbe \<longrightarrow> P_0x7cbe_false_4_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7cd9 \<longrightarrow> P_0x7cd9_true_5_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7cd9 \<longrightarrow> P_0x7cd9_false_6_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7cf0 \<longrightarrow> P_0x7cf0_7_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7d38 \<longrightarrow> P_0x7d38_true_8_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7d38 \<longrightarrow> P_0x7d38_false_9_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7d3a \<longrightarrow> P_0x7d3a_10_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7d41 \<longrightarrow> P_0x7d41_11_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7d44 \<longrightarrow> P_0x7d44_true_12_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7d44 \<longrightarrow> P_0x7d44_false_13_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7d78 \<longrightarrow> P_0x7d78_14_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7e89 \<longrightarrow> P_0x7e89_true_15_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7e89 \<longrightarrow> P_0x7e89_false_16_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7e8f \<longrightarrow> P_0x7e8f_17_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7e91 \<longrightarrow> P_0x7e91_18_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x7880 \<longrightarrow> AES_set_encrypt_key_0x7cb7.P_0x7880_0_regions \<sigma>\<close>
    and [blocks]: \<open>{{Q_0x7880_0x7cb7_1}} \<box>AES_set_encrypt_key_0x7cb7_1.AES_set_encrypt_key_acode {{P_0x7cbc_2;M_0x7cb7}}\<close>
  shows \<open>{{?P}} AES_set_decrypt_key_acode {{?Q;?M}}\<close>
  apply (vcg acode: AES_set_decrypt_key_acode_def assms: assms)
  apply (vcg_while' \<open>P_0x7cf0_7 || P_0x7d3a_10\<close> assms: assms)
  apply (vcg_step assms: assms)
  apply (vcg_while' \<open>P_0x7d78_14 || P_0x7e8f_17\<close> assms: assms)
  apply (vcg_step assms: assms)
  done

end

end
