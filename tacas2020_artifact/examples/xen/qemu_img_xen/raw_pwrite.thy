(*
Copyright 2019

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*)
theory raw_pwrite
  imports "../../../isabelle/VCG/HTriple"
begin

locale "qemu_img_xen" = execution_context + exec_code +
  fixes memcpy_0x1bdb6_retval\<^sub>v raw_pwrite_aligned_0x1bdc9_retval\<^sub>v raw_pwrite_aligned_0x1be03_retval\<^sub>v raw_pread_aligned_0x1be3b_retval\<^sub>v rep_movs_ESRDI_DSRSI_0x1be9b_retval\<^sub>v raw_pwrite_aligned_0x1beb4_retval\<^sub>v raw_pread_aligned_0x1befd_retval\<^sub>v raw_pwrite_aligned_0x1bf48_retval\<^sub>v rep_movs_ESRDI_DSRSI_0x1bfc8_retval\<^sub>v memcpy_addr raw_pread_aligned_addr raw_pwrite_aligned_addr rep_movs_ESRDI_DSRSI_addr :: \<open>64 word\<close>
    and memcpy_acode raw_pread_aligned_acode raw_pwrite_aligned_acode rep_movs_ESRDI_DSRSI_acode :: ACode
  assumes fetch:
    "fetch 0x1bd20 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x1bd22 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x1bd25 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x1bd27 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x1bd2a \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x1bd2c \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x1bd2e \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1bd31 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x1bd32 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rbp)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x1bd35 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x1bd36 \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 40)), 4)"
    "fetch 0x1bd3a \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r13)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 64))))), 4)"
    "fetch 0x1bd3e \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8)))) (Storage (Reg (General SixtyFour rdi))), 5)"
    "fetch 0x1bd43 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bd47 \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x1bd4a \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114165)), 6)"
    "fetch 0x1bd50 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r8)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x1bd53 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r8)) (Immediate SixtyFour (ImmVal 511)), 7)"
    "fetch 0x1bd5a \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 114208)), 6)"
    "fetch 0x1bd60 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r15)) (Immediate SixtyFour (ImmVal 511)), 7)"
    "fetch 0x1bd67 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114152)), 2)"
    "fetch 0x1bd69 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bd6c \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 4294966784)), 6)"
    "fetch 0x1bd72 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 114078)), 2)"
    "fetch 0x1bd74 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114400)), 5)"
    "fetch 0x1bd79 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 0))))), 7)"
    "fetch 0x1bd80 \<equiv> (Binary (IS_8088 Sub) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x1bd83 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rdx)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x1bd86 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x1bd89 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bd8c \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x1bd8f \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rbp)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x1bd92 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 4294966784)), 6)"
    "fetch 0x1bd98 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114400)), 6)"
    "fetch 0x1bd9e \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 16384)), 6)"
    "fetch 0x1bda4 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbx)) (Immediate SixtyFour (ImmVal 16384)), 5)"
    "fetch 0x1bda9 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bdad \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x1bdb0 \<equiv> (Binary (IS_PentiumPro Cmovle) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x1bdb3 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rdx)) (Storage (Reg (General ThirtyTwo rbx))), 3)"
    "fetch 0x1bdb6 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''memcpy'')), 5)"
    "fetch 0x1bdbb \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bdbf \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 5)"
    "fetch 0x1bdc4 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x1bdc6 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour rbp))), 3)"
    "fetch 0x1bdc9 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''raw_pwrite_aligned'')), 5)"
    "fetch 0x1bdce \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x1bdd0 \<equiv> (Unary (IS_8088 Jns) (Immediate SixtyFour (ImmVal 114048)), 2)"
    "fetch 0x1bdd2 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 40)), 4)"
    "fetch 0x1bdd6 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x1bdd7 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x1bdd8 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x1bdda \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x1bddc \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x1bdde \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x1bde0 \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x1bde1 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 0))))), 7)"
    "fetch 0x1bde8 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r14)) (Immediate SixtyFour (ImmVal 511)), 7)"
    "fetch 0x1bdef \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 114025)), 6)"
    "fetch 0x1bdf5 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 5)"
    "fetch 0x1bdfa \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bdfd \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x1be00 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour rbp))), 3)"
    "fetch 0x1be03 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''raw_pwrite_aligned'')), 5)"
    "fetch 0x1be08 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 40)), 4)"
    "fetch 0x1be0c \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x1be0d \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1be10 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x1be11 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x1be13 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x1be15 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x1be17 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x1be19 \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x1be1a \<equiv> (Unary (IS_8088 Nop) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 6)"
    "fetch 0x1be20 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r10)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x1be23 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rbx)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x1be26 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 512)), 5)"
    "fetch 0x1be2b \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))) (Storage (Reg (General SixtyFour r8))), 5)"
    "fetch 0x1be30 \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour r10)) (Storage (Reg (General SixtyFour rbx))), 3)"
    "fetch 0x1be33 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r10))), 3)"
    "fetch 0x1be36 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 16)))) (Storage (Reg (General SixtyFour r10))), 5)"
    "fetch 0x1be3b \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''raw_pread_aligned'')), 5)"
    "fetch 0x1be40 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x1be42 \<equiv> (Unary (IS_8088 Js) (Immediate SixtyFour (ImmVal 114130)), 2)"
    "fetch 0x1be44 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r8)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24))))), 5)"
    "fetch 0x1be49 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 512)), 6)"
    "fetch 0x1be4f \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1be53 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r10)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 16))))), 5)"
    "fetch 0x1be58 \<equiv> (Binary (IS_8088 Sub) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x1be5b \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1be5e \<equiv> (Binary (IS_PentiumPro Cmovle) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo r15))), 4)"
    "fetch 0x1be62 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rbx)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x1be65 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour r8)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1be68 \<equiv> (Binary (IS_8088 Cmp) (Reg (General SixtyFour r8)) (Immediate SixtyFour (ImmVal 8)), 4)"
    "fetch 0x1be6c \<equiv> (Unary (IS_8088 Jb) (Immediate SixtyFour (ImmVal 114536)), 6)"
    "fetch 0x1be72 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour r14))))), 3)"
    "fetch 0x1be75 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rbx)) (A_WordConstant 8)))), 4)"
    "fetch 0x1be79 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x1be7c \<equiv> (Binary (IS_8088 And) (Reg (General SixtyFour rdi)) (Immediate SixtyFour (ImmVal 18446744073709551608)), 4)"
    "fetch 0x1be80 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour rbx)))) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x1be83 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r14)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour r8))) (A_WordConstant 8)))))), 5)"
    "fetch 0x1be88 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rbx)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour r8))) (A_WordConstant 8))))) (Storage (Reg (General SixtyFour rax))), 5)"
    "fetch 0x1be8d \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rbx)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x1be90 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rbx)) (A_Mult 1 (A_FromReg (General SixtyFour r8)))))), 4)"
    "fetch 0x1be94 \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour rbx))), 3)"
    "fetch 0x1be97 \<equiv> (Binary (IS_8088 Shr) (Reg (General SixtyFour rcx)) (Immediate SixtyFour (ImmVal 3)), 4)"
    "fetch 0x1be9b \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''rep_movs_ESRDI_DSRSI'')), 3)"
    "fetch 0x1be9e \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bea2 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 5)"
    "fetch 0x1bea7 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 512)), 5)"
    "fetch 0x1beac \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r10))), 3)"
    "fetch 0x1beaf \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 16)))) (Storage (Reg (General SixtyFour r8))), 5)"
    "fetch 0x1beb4 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''raw_pwrite_aligned'')), 5)"
    "fetch 0x1beb9 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x1bebb \<equiv> (Unary (IS_8088 Js) (Immediate SixtyFour (ImmVal 114130)), 6)"
    "fetch 0x1bec1 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1bec4 \<equiv> (Binary (IS_8088 Sub) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1bec7 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114130)), 6)"
    "fetch 0x1becd \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r8)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 16))))), 5)"
    "fetch 0x1bed2 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour r8))), 3)"
    "fetch 0x1bed5 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rbp)) (Storage (Reg (General SixtyFour r8))), 3)"
    "fetch 0x1bed8 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114016)), 5)"
    "fetch 0x1bedd \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rax))))), 3)"
    "fetch 0x1bee0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1bee3 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bee6 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114130)), 6)"
    "fetch 0x1beec \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bef0 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 5)"
    "fetch 0x1bef5 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 512)), 5)"
    "fetch 0x1befa \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour rbp))), 3)"
    "fetch 0x1befd \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''raw_pread_aligned'')), 5)"
    "fetch 0x1bf02 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x1bf04 \<equiv> (Unary (IS_8088 Js) (Immediate SixtyFour (ImmVal 114130)), 6)"
    "fetch 0x1bf0a \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bf0e \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo r15)) (Immediate SixtyFour (ImmVal 8)), 4)"
    "fetch 0x1bf12 \<equiv> (Unary (IS_8088 Jae) (Immediate SixtyFour (ImmVal 114588)), 6)"
    "fetch 0x1bf18 \<equiv> (Binary (IS_8088 Test) (Reg (General Eight r15)) (Immediate SixtyFour (ImmVal 4)), 4)"
    "fetch 0x1bf1c \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 114664)), 6)"
    "fetch 0x1bf22 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bf25 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114491)), 2)"
    "fetch 0x1bf27 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_FromReg (General SixtyFour r14))))), 4)"
    "fetch 0x1bf2b \<equiv> (Binary (IS_8088 Mov) (Memory Eight (A_SizeDirective 8 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General Eight rax))), 2)"
    "fetch 0x1bf2d \<equiv> (Binary (IS_8088 Test) (Reg (General Eight r15)) (Immediate SixtyFour (ImmVal 2)), 4)"
    "fetch 0x1bf31 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 114690)), 6)"
    "fetch 0x1bf37 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bf3b \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 5)"
    "fetch 0x1bf40 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 512)), 5)"
    "fetch 0x1bf45 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour rbp))), 3)"
    "fetch 0x1bf48 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''raw_pwrite_aligned'')), 5)"
    "fetch 0x1bf4d \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x1bf4f \<equiv> (Unary (IS_8088 Js) (Immediate SixtyFour (ImmVal 114130)), 6)"
    "fetch 0x1bf55 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bf58 \<equiv> (Binary (IS_PentiumPro Cmovg) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r15))), 4)"
    "fetch 0x1bf5c \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x1bf5f \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114130)), 5)"
    "fetch 0x1bf64 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 0))))), 4)"
    "fetch 0x1bf68 \<equiv> (Binary (IS_8088 Test) (Reg (General Eight r8)) (Immediate SixtyFour (ImmVal 4)), 4)"
    "fetch 0x1bf6c \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 114640)), 2)"
    "fetch 0x1bf6e \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour r8)) (Storage (Reg (General SixtyFour r8))), 3)"
    "fetch 0x1bf71 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114338)), 6)"
    "fetch 0x1bf77 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Eight (A_SizeDirective 8 (A_FromReg (General SixtyFour r14))))), 4)"
    "fetch 0x1bf7b \<equiv> (Binary (IS_8088 Mov) (Memory Eight (A_SizeDirective 8 (A_FromReg (General SixtyFour rbx)))) (Storage (Reg (General Eight rax))), 2)"
    "fetch 0x1bf7d \<equiv> (Binary (IS_8088 Test) (Reg (General Eight r8)) (Immediate SixtyFour (ImmVal 2)), 4)"
    "fetch 0x1bf81 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 114334)), 6)"
    "fetch 0x1bf87 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rax)) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour r14)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour r8))) (A_WordConstant 2)))))), 6)"
    "fetch 0x1bf8d \<equiv> (Binary (IS_8088 Mov) (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour rbx)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour r8))) (A_WordConstant 2))))) (Storage (Reg (General Sixteen rax))), 6)"
    "fetch 0x1bf93 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bf97 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114338)), 5)"
    "fetch 0x1bf9c \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour r14))))), 3)"
    "fetch 0x1bf9f \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 8)))), 4)"
    "fetch 0x1bfa3 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x1bfa6 \<equiv> (Binary (IS_8088 And) (Reg (General SixtyFour rdi)) (Immediate SixtyFour (ImmVal 18446744073709551608)), 4)"
    "fetch 0x1bfaa \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x1bfad \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bfb0 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r14)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 8)))))), 5)"
    "fetch 0x1bfb5 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 8))))) (Storage (Reg (General SixtyFour rcx))), 5)"
    "fetch 0x1bfba \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x1bfbd \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x1bfc0 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rdx)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bfc3 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 3)), 3)"
    "fetch 0x1bfc6 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x1bfc8 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''rep_movs_ESRDI_DSRSI'')), 3)"
    "fetch 0x1bfcb \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114487)), 5)"
    "fetch 0x1bfd0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour r14))))), 3)"
    "fetch 0x1bfd3 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rbx)))) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x1bfd5 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r14)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour r8))) (A_WordConstant 4)))))), 5)"
    "fetch 0x1bfda \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rbx)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour r8))) (A_WordConstant 4))))) (Storage (Reg (General ThirtyTwo rax))), 5)"
    "fetch 0x1bfdf \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bfe3 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114338)), 5)"
    "fetch 0x1bfe8 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour r14))))), 3)"
    "fetch 0x1bfeb \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx)))) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x1bfed \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1bff0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r14)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 4)))))), 5)"
    "fetch 0x1bff5 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 4))))) (Storage (Reg (General ThirtyTwo rcx))), 4)"
    "fetch 0x1bff9 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1bffd \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114491)), 5)"
    "fetch 0x1c002 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1c005 \<equiv> (Binary (IS_80386 Movzx) (Reg (General ThirtyTwo rcx)) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour r14)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 2)))))), 6)"
    "fetch 0x1c00b \<equiv> (Binary (IS_8088 Mov) (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_Minus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 2))))) (Storage (Reg (General Sixteen rcx))), 5)"
    "fetch 0x1c010 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 40))))), 4)"
    "fetch 0x1c014 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 114491)), 5)"
    and \<alpha>_def: \<open>\<alpha> = \<lparr>text_sections = [], data_sections = [], labels_to_offsets = [], binary_offset = 0\<rparr>\<close>
    and memcpy\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''memcpy'') = memcpy_addr\<close>
    and raw_pread_aligned\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''raw_pread_aligned'') = raw_pread_aligned_addr\<close>
    and raw_pwrite_aligned\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''raw_pwrite_aligned'') = raw_pwrite_aligned_addr\<close>
    and rep_movs_ESRDI_DSRSI\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''rep_movs_ESRDI_DSRSI'') = rep_movs_ESRDI_DSRSI_addr\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>memcpy_0x1bdb6_retval \<equiv> memcpy_0x1bdb6_retval\<^sub>v\<close>
definition \<open>raw_pwrite_aligned_0x1bdc9_retval \<equiv> raw_pwrite_aligned_0x1bdc9_retval\<^sub>v\<close>
definition \<open>raw_pwrite_aligned_0x1be03_retval \<equiv> raw_pwrite_aligned_0x1be03_retval\<^sub>v\<close>
definition \<open>raw_pread_aligned_0x1be3b_retval \<equiv> raw_pread_aligned_0x1be3b_retval\<^sub>v\<close>
definition \<open>rep_movs_ESRDI_DSRSI_0x1be9b_retval \<equiv> rep_movs_ESRDI_DSRSI_0x1be9b_retval\<^sub>v\<close>
definition \<open>raw_pwrite_aligned_0x1beb4_retval \<equiv> raw_pwrite_aligned_0x1beb4_retval\<^sub>v\<close>
definition \<open>raw_pread_aligned_0x1befd_retval \<equiv> raw_pread_aligned_0x1befd_retval\<^sub>v\<close>
definition \<open>raw_pwrite_aligned_0x1bf48_retval \<equiv> raw_pwrite_aligned_0x1bf48_retval\<^sub>v\<close>
definition \<open>rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<equiv> rep_movs_ESRDI_DSRSI_0x1bfc8_retval\<^sub>v\<close>

text \<open>
  Going with a binary offset of 0 for now to make things easier. (We do want to keep that field
  around, though, for future more generic usage.)
\<close>
lemma \<alpha>_boffset[simp]: \<open>binary_offset \<alpha> = 0\<close>
  unfolding \<alpha>_def
  by simp

named_theorems blocks and Ps and Qs

method step uses add del =
  subst exec_block.simps,
  rewrite_one_let',
  rewrite_one_let' add: fetch,
  rewrite_one_let',
  auto simp add: simp_rules Let'_def read_region'_def write_block'_def get'_def set'_def step_def exec_instr_def presimplify add numeral_2_eq_2[symmetric] simp del: del

method steps uses pre post regionset add del =
  auto simp: pred_logic pre regionset,
  (step add: add del: del)+,
  (auto simp add: eq_def)[1],
  auto simp: block_usage_def eq_def setcc_def cmovcc_def if'_then_else_def sub_sign_flag_def simp_rules numeral_2_eq_2[symmetric] Let'_def read_region'_def write_block'_def get'_def set'_def post regionset

(* ((simp add: assms pred_logic Ps Qs)+)? helps keep goals clean but causes issues when there are subcalls *)
method vcg_step uses assms =
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

text \<open>For @{const CASES}.\<close>
method vcg_step' uses assms =
  (rule htriples)+,
  simp,
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

text \<open>
  Sometimes needs to be moved down (close to the abstract code) to avoid TERM exceptions,
  haven't figured out the cause.
  Also haven't settled on a proper setup for the ending methods,
  there are troubles when nested loops and such are involved.
\<close>
method vcg_while for P :: state_pred uses assms =
  ((rule htriples)+)?,
  rule HTriple_weaken[where P=P],
  simp add: pred_logic Ps Qs assms,
  rule HTriple_while,
  (vcg_step assms: assms)+,
  (simp add: pred_logic Ps Qs)+,
  (
    (vcg_step' assms: assms | vcg_step assms: assms)+,
    ((simp add: assms)+)?
  )?

method vcg uses acode assms =
  subst acode,
  (vcg_step assms: assms)+

end

locale "raw_pwrite" = "qemu_img_xen" +
  fixes RAX\<^sub>0\<^sub>v RBX\<^sub>0\<^sub>v RCX\<^sub>0\<^sub>v RDX\<^sub>0\<^sub>v RDI\<^sub>0\<^sub>v RSI\<^sub>0\<^sub>v RSP\<^sub>0\<^sub>v RBP\<^sub>0\<^sub>v R15\<^sub>0\<^sub>v R14\<^sub>0\<^sub>v R13\<^sub>0\<^sub>v R12\<^sub>0\<^sub>v R10\<^sub>0\<^sub>v R8\<^sub>0\<^sub>v ret_address\<^sub>v :: \<open>64 word\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>RAX\<^sub>0 \<equiv> RAX\<^sub>0\<^sub>v\<close>
definition \<open>RBX\<^sub>0 \<equiv> RBX\<^sub>0\<^sub>v\<close>
definition \<open>RCX\<^sub>0 \<equiv> RCX\<^sub>0\<^sub>v\<close>
definition \<open>RDX\<^sub>0 \<equiv> RDX\<^sub>0\<^sub>v\<close>
definition \<open>RDI\<^sub>0 \<equiv> RDI\<^sub>0\<^sub>v\<close>
definition \<open>RSI\<^sub>0 \<equiv> RSI\<^sub>0\<^sub>v\<close>
definition \<open>RSP\<^sub>0 \<equiv> RSP\<^sub>0\<^sub>v\<close>
definition \<open>RBP\<^sub>0 \<equiv> RBP\<^sub>0\<^sub>v\<close>
definition \<open>R15\<^sub>0 \<equiv> R15\<^sub>0\<^sub>v\<close>
definition \<open>R14\<^sub>0 \<equiv> R14\<^sub>0\<^sub>v\<close>
definition \<open>R13\<^sub>0 \<equiv> R13\<^sub>0\<^sub>v\<close>
definition \<open>R12\<^sub>0 \<equiv> R12\<^sub>0\<^sub>v\<close>
definition \<open>R10\<^sub>0 \<equiv> R10\<^sub>0\<^sub>v\<close>
definition \<open>R8\<^sub>0 \<equiv> R8\<^sub>0\<^sub>v\<close>
definition \<open>ret_address \<equiv> ret_address\<^sub>v\<close>

definition P_0x1bd20_0 :: state_pred where
  \<open>P_0x1bd20_0 \<sigma> \<equiv> RIP \<sigma> = 0x1bd20 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x1bd20_0_def[Ps]

definition P_0x1bd20_0_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd20_0_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd20_0_regions :: state_pred where
  \<open>P_0x1bd20_0_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd20_0_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd4a_0 :: state_pred where
  \<open>Q_0x1bd4a_0 \<sigma> \<equiv> RIP \<sigma> = 0x1bd4a \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd4a_0_def[Qs]

schematic_goal raw_pwrite_0_15_0x1bd20_0x1bd47_0[blocks]:
  assumes \<open>(P_0x1bd20_0 && P_0x1bd20_0_regions) \<sigma>\<close>
  shows \<open>exec_block 15 0x1bd47 0 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd4a_0 ?\<sigma> \<and> block_usage P_0x1bd20_0_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd20_0_def P_0x1bd20_0_regions_def post: Q_0x1bd4a_0_def regionset: P_0x1bd20_0_regions_set_def)

definition P_0x1bd4a_true_1 :: state_pred where
  \<open>P_0x1bd4a_true_1 \<sigma> \<equiv> RIP \<sigma> = 0x1bd4a \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd4a_true_1_def[Ps]

definition P_0x1bd4a_true_1_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd4a_true_1_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd4a_true_1_regions :: state_pred where
  \<open>P_0x1bd4a_true_1_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd4a_true_1_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1be03_1 :: state_pred where
  \<open>Q_0x1be03_1 \<sigma> \<equiv> RIP \<sigma> = 0x1be03 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1be03_1_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bd4a_0x1be00_1[blocks]:
  assumes \<open>(P_0x1bd4a_true_1 && P_0x1bd4a_true_1_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1be00 (Suc 0) \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1be03_1 ?\<sigma> \<and> block_usage P_0x1bd4a_true_1_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd4a_true_1_def P_0x1bd4a_true_1_regions_def post: Q_0x1be03_1_def regionset: P_0x1bd4a_true_1_regions_set_def)

definition P_0x1be03_2 :: state_pred where
  \<open>P_0x1be03_2 \<sigma> \<equiv> RIP \<sigma> = 0x1be03 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1be03_2_def[Ps]

definition P_0x1be03_2_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be03_2_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be03_2_regions :: state_pred where
  \<open>P_0x1be03_2_regions \<sigma> \<equiv> \<exists>regions. P_0x1be03_2_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1be03_2 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1be03_2 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be08\<close>
declare Q_raw_pwrite_aligned_addr_0x1be03_2_def[Qs]

schematic_goal raw_pwrite_0_1_0x1be03_0x1be03_2[blocks]:
  assumes \<open>(P_0x1be03_2 && P_0x1be03_2_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1be03 2 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1be03_2 ?\<sigma> \<and> block_usage P_0x1be03_2_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be03_2_def P_0x1be03_2_regions_def post: Q_raw_pwrite_aligned_addr_0x1be03_2_def regionset: P_0x1be03_2_regions_set_def)

definition P_0x1be08_3 :: state_pred where
  \<open>P_0x1be08_3 \<sigma> \<equiv> RIP \<sigma> = 0x1be08 \<and> RAX \<sigma> = raw_pwrite_aligned_0x1be03_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be08\<close>
declare P_0x1be08_3_def[Ps]

definition P_0x1be08_3_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be08_3_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be08_3_regions :: state_pred where
  \<open>P_0x1be08_3_regions \<sigma> \<equiv> \<exists>regions. P_0x1be08_3_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_3 :: state_pred where
  \<open>Q_ret_address_3 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_3_def[Qs]

schematic_goal raw_pwrite_0_9_0x1be08_0x1be19_3[blocks]:
  assumes \<open>(P_0x1be08_3 && P_0x1be08_3_regions) \<sigma>\<close>
  shows \<open>exec_block 9 0x1be19 3 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_3 ?\<sigma> \<and> block_usage P_0x1be08_3_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be08_3_def P_0x1be08_3_regions_def post: Q_ret_address_3_def regionset: P_0x1be08_3_regions_set_def)

definition P_0x1bd4a_false_4 :: state_pred where
  \<open>P_0x1bd4a_false_4 \<sigma> \<equiv> RIP \<sigma> = 0x1bd4a \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd4a_false_4_def[Ps]

definition P_0x1bd4a_false_4_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd4a_false_4_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd4a_false_4_regions :: state_pred where
  \<open>P_0x1bd4a_false_4_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd4a_false_4_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd5a_4 :: state_pred where
  \<open>Q_0x1bd5a_4 \<sigma> \<equiv> RIP \<sigma> = 0x1bd5a \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd5a_4_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bd4a_0x1bd53_4[blocks]:
  assumes \<open>(P_0x1bd4a_false_4 && P_0x1bd4a_false_4_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bd53 4 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd5a_4 ?\<sigma> \<and> block_usage P_0x1bd4a_false_4_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd4a_false_4_def P_0x1bd4a_false_4_regions_def post: Q_0x1bd5a_4_def regionset: P_0x1bd4a_false_4_regions_set_def)

definition P_0x1bd5a_true_5 :: state_pred where
  \<open>P_0x1bd5a_true_5 \<sigma> \<equiv> RIP \<sigma> = 0x1bd5a \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd5a_true_5_def[Ps]

definition P_0x1bd5a_true_5_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd5a_true_5_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd5a_true_5_regions :: state_pred where
  \<open>P_0x1bd5a_true_5_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd5a_true_5_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1be3b_5 :: state_pred where
  \<open>Q_0x1be3b_5 \<sigma> \<equiv> RIP \<sigma> = 0x1be3b \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1be3b_5_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bd5a_0x1be36_5[blocks]:
  assumes \<open>(P_0x1bd5a_true_5 && P_0x1bd5a_true_5_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1be36 5 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1be3b_5 ?\<sigma> \<and> block_usage P_0x1bd5a_true_5_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd5a_true_5_def P_0x1bd5a_true_5_regions_def post: Q_0x1be3b_5_def regionset: P_0x1bd5a_true_5_regions_set_def)

definition P_0x1be3b_6 :: state_pred where
  \<open>P_0x1be3b_6 \<sigma> \<equiv> RIP \<sigma> = 0x1be3b \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1be3b_6_def[Ps]

definition P_0x1be3b_6_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be3b_6_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be3b_6_regions :: state_pred where
  \<open>P_0x1be3b_6_regions \<sigma> \<equiv> \<exists>regions. P_0x1be3b_6_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1be3b_6 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1be3b_6 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare Q_raw_pread_aligned_addr_0x1be3b_6_def[Qs]

schematic_goal raw_pwrite_0_1_0x1be3b_0x1be3b_6[blocks]:
  assumes \<open>(P_0x1be3b_6 && P_0x1be3b_6_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1be3b 6 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1be3b_6 ?\<sigma> \<and> block_usage P_0x1be3b_6_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be3b_6_def P_0x1be3b_6_regions_def post: Q_raw_pread_aligned_addr_0x1be3b_6_def regionset: P_0x1be3b_6_regions_set_def)

definition P_0x1be40_7 :: state_pred where
  \<open>P_0x1be40_7 \<sigma> \<equiv> RIP \<sigma> = 0x1be40 \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1be40_7_def[Ps]

definition P_0x1be40_7_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be40_7_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be40_7_regions :: state_pred where
  \<open>P_0x1be40_7_regions \<sigma> \<equiv> \<exists>regions. P_0x1be40_7_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1be42_7 :: state_pred where
  \<open>Q_0x1be42_7 \<sigma> \<equiv> RIP \<sigma> = 0x1be42 \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare Q_0x1be42_7_def[Qs]

schematic_goal raw_pwrite_0_1_0x1be40_0x1be40_7[blocks]:
  assumes \<open>(P_0x1be40_7 && P_0x1be40_7_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1be40 7 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1be42_7 ?\<sigma> \<and> block_usage P_0x1be40_7_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be40_7_def P_0x1be40_7_regions_def post: Q_0x1be42_7_def regionset: P_0x1be40_7_regions_set_def)

definition P_0x1be42_true_8 :: state_pred where
  \<open>P_0x1be42_true_8 \<sigma> \<equiv> RIP \<sigma> = 0x1be42 \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1be42_true_8_def[Ps]

definition P_0x1be42_true_8_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be42_true_8_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be42_true_8_regions :: state_pred where
  \<open>P_0x1be42_true_8_regions \<sigma> \<equiv> \<exists>regions. P_0x1be42_true_8_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_8 :: state_pred where
  \<open>Q_ret_address_8 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_8_def[Qs]

schematic_goal raw_pwrite_0_9_0x1be42_0x1bde0_8[blocks]:
  assumes \<open>(P_0x1be42_true_8 && P_0x1be42_true_8_regions && SF) \<sigma>\<close>
  shows \<open>exec_block 9 0x1bde0 8 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_8 ?\<sigma> \<and> block_usage P_0x1be42_true_8_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be42_true_8_def P_0x1be42_true_8_regions_def post: Q_ret_address_8_def regionset: P_0x1be42_true_8_regions_set_def)

definition P_0x1be42_false_9 :: state_pred where
  \<open>P_0x1be42_false_9 \<sigma> \<equiv> RIP \<sigma> = 0x1be42 \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1be42_false_9_def[Ps]

definition P_0x1be42_false_9_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be42_false_9_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be42_false_9_regions :: state_pred where
  \<open>P_0x1be42_false_9_regions \<sigma> \<equiv> \<exists>regions. P_0x1be42_false_9_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1be6c_9 :: state_pred where
  \<open>Q_0x1be6c_9 \<sigma> \<equiv> RIP \<sigma> = 0x1be6c \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare Q_0x1be6c_9_def[Qs]

schematic_goal raw_pwrite_0_11_0x1be42_0x1be68_9[blocks]:
  assumes \<open>(P_0x1be42_false_9 && P_0x1be42_false_9_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 11 0x1be68 9 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1be6c_9 ?\<sigma> \<and> block_usage P_0x1be42_false_9_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be42_false_9_def P_0x1be42_false_9_regions_def post: Q_0x1be6c_9_def regionset: P_0x1be42_false_9_regions_set_def)

definition P_0x1be6c_true_10 :: state_pred where
  \<open>P_0x1be6c_true_10 \<sigma> \<equiv> RIP \<sigma> = 0x1be6c \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1be6c_true_10_def[Ps]

definition P_0x1be6c_true_10_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be6c_true_10_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be6c_true_10_regions :: state_pred where
  \<open>P_0x1be6c_true_10_regions \<sigma> \<equiv> \<exists>regions. P_0x1be6c_true_10_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf6c_10 :: state_pred where
  \<open>Q_0x1bf6c_10 \<sigma> \<equiv> RIP \<sigma> = 0x1bf6c \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare Q_0x1bf6c_10_def[Qs]

schematic_goal raw_pwrite_0_2_0x1be6c_0x1bf68_10[blocks]:
  assumes \<open>(P_0x1be6c_true_10 && P_0x1be6c_true_10_regions && CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf68 10 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf6c_10 ?\<sigma> \<and> block_usage P_0x1be6c_true_10_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be6c_true_10_def P_0x1be6c_true_10_regions_def post: Q_0x1bf6c_10_def regionset: P_0x1be6c_true_10_regions_set_def)

definition P_0x1bf6c_true_11 :: state_pred where
  \<open>P_0x1bf6c_true_11 \<sigma> \<equiv> RIP \<sigma> = 0x1bf6c \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1bf6c_true_11_def[Ps]

definition P_0x1bf6c_true_11_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf6c_true_11_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)), 4),
    (4, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x4), 4),
    (16, (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x4), 4)
  }\<close>

definition P_0x1bf6c_true_11_regions :: state_pred where
  \<open>P_0x1bf6c_true_11_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf6c_true_11_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bea2_11 :: state_pred where
  \<open>Q_0x1bea2_11 \<sigma> \<equiv> RIP \<sigma> = 0x1bea2 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bea2_11_def[Qs]

schematic_goal raw_pwrite_0_7_0x1bf6c_0x1bfe3_11[blocks]:
  assumes \<open>(P_0x1bf6c_true_11 && P_0x1bf6c_true_11_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x1bfe3 11 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bea2_11 ?\<sigma> \<and> block_usage P_0x1bf6c_true_11_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf6c_true_11_def P_0x1bf6c_true_11_regions_def post: Q_0x1bea2_11_def regionset: P_0x1bf6c_true_11_regions_set_def)

definition P_0x1bf6c_false_12 :: state_pred where
  \<open>P_0x1bf6c_false_12 \<sigma> \<equiv> RIP \<sigma> = 0x1bf6c \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1bf6c_false_12_def[Ps]

definition P_0x1bf6c_false_12_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf6c_false_12_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf6c_false_12_regions :: state_pred where
  \<open>P_0x1bf6c_false_12_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf6c_false_12_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf71_12 :: state_pred where
  \<open>Q_0x1bf71_12 \<sigma> \<equiv> RIP \<sigma> = 0x1bf71 \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare Q_0x1bf71_12_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf6c_0x1bf6e_12[blocks]:
  assumes \<open>(P_0x1bf6c_false_12 && P_0x1bf6c_false_12_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf6e 12 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf71_12 ?\<sigma> \<and> block_usage P_0x1bf6c_false_12_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf6c_false_12_def P_0x1bf6c_false_12_regions_def post: Q_0x1bf71_12_def regionset: P_0x1bf6c_false_12_regions_set_def)

definition P_0x1bf71_true_13 :: state_pred where
  \<open>P_0x1bf71_true_13 \<sigma> \<equiv> RIP \<sigma> = 0x1bf71 \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1bf71_true_13_def[Ps]

definition P_0x1bf71_true_13_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf71_true_13_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf71_true_13_regions :: state_pred where
  \<open>P_0x1bf71_true_13_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf71_true_13_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bea2_13 :: state_pred where
  \<open>Q_0x1bea2_13 \<sigma> \<equiv> RIP \<sigma> = 0x1bea2 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bea2_13_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf71_0x1bf71_13[blocks]:
  assumes \<open>(P_0x1bf71_true_13 && P_0x1bf71_true_13_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf71 13 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bea2_13 ?\<sigma> \<and> block_usage P_0x1bf71_true_13_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf71_true_13_def P_0x1bf71_true_13_regions_def post: Q_0x1bea2_13_def regionset: P_0x1bf71_true_13_regions_set_def)

definition P_0x1bf71_false_14 :: state_pred where
  \<open>P_0x1bf71_false_14 \<sigma> \<equiv> RIP \<sigma> = 0x1bf71 \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1bf71_false_14_def[Ps]

definition P_0x1bf71_false_14_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf71_false_14_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)), Suc 0),
    (4, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf71_false_14_regions :: state_pred where
  \<open>P_0x1bf71_false_14_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf71_false_14_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf81_14 :: state_pred where
  \<open>Q_0x1bf81_14 \<sigma> \<equiv> RIP \<sigma> = 0x1bf81 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare Q_0x1bf81_14_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf71_0x1bf7d_14[blocks]:
  assumes \<open>(P_0x1bf71_false_14 && P_0x1bf71_false_14_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf7d 14 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf81_14 ?\<sigma> \<and> block_usage P_0x1bf71_false_14_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf71_false_14_def P_0x1bf71_false_14_regions_def post: Q_0x1bf81_14_def regionset: P_0x1bf71_false_14_regions_set_def)

definition P_0x1bf81_true_15 :: state_pred where
  \<open>P_0x1bf81_true_15 \<sigma> \<equiv> RIP \<sigma> = 0x1bf81 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1bf81_true_15_def[Ps]

definition P_0x1bf81_true_15_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf81_true_15_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)), Suc 0),
    (4, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf81_true_15_regions :: state_pred where
  \<open>P_0x1bf81_true_15_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf81_true_15_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bea2_15 :: state_pred where
  \<open>Q_0x1bea2_15 \<sigma> \<equiv> RIP \<sigma> = 0x1bea2 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bea2_15_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf81_0x1be9e_15[blocks]:
  assumes \<open>(P_0x1bf81_true_15 && P_0x1bf81_true_15_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1be9e 15 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bea2_15 ?\<sigma> \<and> block_usage P_0x1bf81_true_15_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf81_true_15_def P_0x1bf81_true_15_regions_def post: Q_0x1bea2_15_def regionset: P_0x1bf81_true_15_regions_set_def)

definition P_0x1bf81_false_16 :: state_pred where
  \<open>P_0x1bf81_false_16 \<sigma> \<equiv> RIP \<sigma> = 0x1bf81 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1bf81_false_16_def[Ps]

definition P_0x1bf81_false_16_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf81_false_16_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)), Suc 0),
    (4, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x2), 2),
    (16, (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x2), 2)
  }\<close>

definition P_0x1bf81_false_16_regions :: state_pred where
  \<open>P_0x1bf81_false_16_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf81_false_16_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bea2_16 :: state_pred where
  \<open>Q_0x1bea2_16 \<sigma> \<equiv> RIP \<sigma> = 0x1bea2 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bea2_16_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf81_0x1bf97_16[blocks]:
  assumes \<open>(P_0x1bf81_false_16 && P_0x1bf81_false_16_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf97 16 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bea2_16 ?\<sigma> \<and> block_usage P_0x1bf81_false_16_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf81_false_16_def P_0x1bf81_false_16_regions_def post: Q_0x1bea2_16_def regionset: P_0x1bf81_false_16_regions_set_def)

definition P_0x1be6c_false_17 :: state_pred where
  \<open>P_0x1be6c_false_17 \<sigma> \<equiv> RIP \<sigma> = 0x1be6c \<and> RAX \<sigma> = raw_pread_aligned_0x1be3b_retval \<and> RBX \<sigma> = (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40\<close>
declare P_0x1be6c_false_17_def[Ps]

definition P_0x1be6c_false_17_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be6c_false_17_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)), 8),
    (4, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8), 8),
    (16, (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8), 8)
  }\<close>

definition P_0x1be6c_false_17_regions :: state_pred where
  \<open>P_0x1be6c_false_17_regions \<sigma> \<equiv> \<exists>regions. P_0x1be6c_false_17_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1be9b_17 :: state_pred where
  \<open>Q_0x1be9b_17 \<sigma> \<equiv> RIP \<sigma> = 0x1be9b \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) \<and> RBX \<sigma> = (((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RCX \<sigma> = ((ucast (((((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word))::64 word) >> 3) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)))::64 word) + (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40 \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word)\<close>
declare Q_0x1be9b_17_def[Qs]

schematic_goal raw_pwrite_0_12_0x1be6c_0x1be97_17[blocks]:
  assumes \<open>(P_0x1be6c_false_17 && P_0x1be6c_false_17_regions && ! CF) \<sigma>\<close>
  shows \<open>exec_block 12 0x1be97 17 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1be9b_17 ?\<sigma> \<and> block_usage P_0x1be6c_false_17_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be6c_false_17_def P_0x1be6c_false_17_regions_def post: Q_0x1be9b_17_def regionset: P_0x1be6c_false_17_regions_set_def)

definition P_0x1be9b_18 :: state_pred where
  \<open>P_0x1be9b_18 \<sigma> \<equiv> RIP \<sigma> = 0x1be9b \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) \<and> RBX \<sigma> = (((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RCX \<sigma> = ((ucast (((((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word))::64 word) >> 3) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)))::64 word) + (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be40 \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word)\<close>
declare P_0x1be9b_18_def[Ps]

definition P_0x1be9b_18_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be9b_18_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)), 8),
    (4, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8), 8),
    (16, (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8), 8)
  }\<close>

definition P_0x1be9b_18_regions :: state_pred where
  \<open>P_0x1be9b_18_regions \<sigma> \<equiv> \<exists>regions. P_0x1be9b_18_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1be9b_18 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1be9b_18 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) \<and> RBX \<sigma> = (((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RCX \<sigma> = ((ucast (((((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word))::64 word) >> 3) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)))::64 word) + (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be9e \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1be9b_18_def[Qs]

schematic_goal raw_pwrite_0_1_0x1be9b_0x1be9b_18[blocks]:
  assumes \<open>(P_0x1be9b_18 && P_0x1be9b_18_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1be9b 18 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1be9b_18 ?\<sigma> \<and> block_usage P_0x1be9b_18_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be9b_18_def P_0x1be9b_18_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1be9b_18_def regionset: P_0x1be9b_18_regions_set_def)

definition P_0x1be9e_19 :: state_pred where
  \<open>P_0x1be9e_19 \<sigma> \<equiv> RIP \<sigma> = 0x1be9e \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1be9b_retval \<and> RBX \<sigma> = (((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RCX \<sigma> = ((ucast (((((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) - (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word))::64 word) >> 3) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)))::64 word) + (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be9e \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8),8]::64 word)\<close>
declare P_0x1be9e_19_def[Ps]

definition P_0x1be9e_19_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be9e_19_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)), 8),
    (4, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8), 8),
    (16, (((((((sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)::64 word) + (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (\<langle>63,0\<rangle>(((sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)::64 word) * 0x1)::64 word))::64 word) - 0x8), 8)
  }\<close>

definition P_0x1be9e_19_regions :: state_pred where
  \<open>P_0x1be9e_19_regions \<sigma> \<equiv> \<exists>regions. P_0x1be9e_19_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bea2_19 :: state_pred where
  \<open>Q_0x1bea2_19 \<sigma> \<equiv> RIP \<sigma> = 0x1bea2 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bea2_19_def[Qs]

schematic_goal raw_pwrite_0_1_0x1be9e_0x1be9e_19[blocks]:
  assumes \<open>(P_0x1be9e_19 && P_0x1be9e_19_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1be9e 19 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bea2_19 ?\<sigma> \<and> block_usage P_0x1be9e_19_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be9e_19_def P_0x1be9e_19_regions_def post: Q_0x1bea2_19_def regionset: P_0x1be9e_19_regions_set_def)

definition P_0x1bea2_20 :: state_pred where
  \<open>P_0x1bea2_20 \<sigma> \<equiv> RIP \<sigma> = 0x1bea2 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bea2_20_def[Ps]

definition P_0x1bea2_20_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bea2_20_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bea2_20_regions :: state_pred where
  \<open>P_0x1bea2_20_regions \<sigma> \<equiv> \<exists>regions. P_0x1bea2_20_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1beb4_20 :: state_pred where
  \<open>Q_0x1beb4_20 \<sigma> \<equiv> RIP \<sigma> = 0x1beb4 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1beb4_20_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bea2_0x1beaf_20[blocks]:
  assumes \<open>(P_0x1bea2_20 && P_0x1bea2_20_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1beaf 20 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1beb4_20 ?\<sigma> \<and> block_usage P_0x1bea2_20_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bea2_20_def P_0x1bea2_20_regions_def post: Q_0x1beb4_20_def regionset: P_0x1bea2_20_regions_set_def)

definition P_0x1beb4_21 :: state_pred where
  \<open>P_0x1beb4_21 \<sigma> \<equiv> RIP \<sigma> = 0x1beb4 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1beb4_21_def[Ps]

definition P_0x1beb4_21_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1beb4_21_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1beb4_21_regions :: state_pred where
  \<open>P_0x1beb4_21_regions \<sigma> \<equiv> \<exists>regions. P_0x1beb4_21_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1beb4_21 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1beb4_21 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_raw_pwrite_aligned_addr_0x1beb4_21_def[Qs]

schematic_goal raw_pwrite_0_1_0x1beb4_0x1beb4_21[blocks]:
  assumes \<open>(P_0x1beb4_21 && P_0x1beb4_21_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1beb4 21 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1beb4_21 ?\<sigma> \<and> block_usage P_0x1beb4_21_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1beb4_21_def P_0x1beb4_21_regions_def post: Q_raw_pwrite_aligned_addr_0x1beb4_21_def regionset: P_0x1beb4_21_regions_set_def)

definition P_0x1beb9_22 :: state_pred where
  \<open>P_0x1beb9_22 \<sigma> \<equiv> RIP \<sigma> = 0x1beb9 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1beb9_22_def[Ps]

definition P_0x1beb9_22_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1beb9_22_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1beb9_22_regions :: state_pred where
  \<open>P_0x1beb9_22_regions \<sigma> \<equiv> \<exists>regions. P_0x1beb9_22_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bebb_22 :: state_pred where
  \<open>Q_0x1bebb_22 \<sigma> \<equiv> RIP \<sigma> = 0x1bebb \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bebb_22_def[Qs]

schematic_goal raw_pwrite_0_1_0x1beb9_0x1beb9_22[blocks]:
  assumes \<open>(P_0x1beb9_22 && P_0x1beb9_22_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1beb9 22 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bebb_22 ?\<sigma> \<and> block_usage P_0x1beb9_22_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1beb9_22_def P_0x1beb9_22_regions_def post: Q_0x1bebb_22_def regionset: P_0x1beb9_22_regions_set_def)

definition P_0x1bebb_true_23 :: state_pred where
  \<open>P_0x1bebb_true_23 \<sigma> \<equiv> RIP \<sigma> = 0x1bebb \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bebb_true_23_def[Ps]

definition P_0x1bebb_true_23_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bebb_true_23_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bebb_true_23_regions :: state_pred where
  \<open>P_0x1bebb_true_23_regions \<sigma> \<equiv> \<exists>regions. P_0x1bebb_true_23_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_23 :: state_pred where
  \<open>Q_ret_address_23 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_23_def[Qs]

schematic_goal raw_pwrite_0_9_0x1bebb_0x1bde0_23[blocks]:
  assumes \<open>(P_0x1bebb_true_23 && P_0x1bebb_true_23_regions && SF) \<sigma>\<close>
  shows \<open>exec_block 9 0x1bde0 23 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_23 ?\<sigma> \<and> block_usage P_0x1bebb_true_23_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bebb_true_23_def P_0x1bebb_true_23_regions_def post: Q_ret_address_23_def regionset: P_0x1bebb_true_23_regions_set_def)

definition P_0x1bebb_false_24 :: state_pred where
  \<open>P_0x1bebb_false_24 \<sigma> \<equiv> RIP \<sigma> = 0x1bebb \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bebb_false_24_def[Ps]

definition P_0x1bebb_false_24_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bebb_false_24_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bebb_false_24_regions :: state_pred where
  \<open>P_0x1bebb_false_24_regions \<sigma> \<equiv> \<exists>regions. P_0x1bebb_false_24_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bec7_24 :: state_pred where
  \<open>Q_0x1bec7_24 \<sigma> \<equiv> RIP \<sigma> = 0x1bec7 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bec7_24_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bebb_0x1bec4_24[blocks]:
  assumes \<open>(P_0x1bebb_false_24 && P_0x1bebb_false_24_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bec4 24 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bec7_24 ?\<sigma> \<and> block_usage P_0x1bebb_false_24_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bebb_false_24_def P_0x1bebb_false_24_regions_def post: Q_0x1bec7_24_def regionset: P_0x1bebb_false_24_regions_set_def)

definition P_0x1bec7_true_25 :: state_pred where
  \<open>P_0x1bec7_true_25 \<sigma> \<equiv> RIP \<sigma> = 0x1bec7 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bec7_true_25_def[Ps]

definition P_0x1bec7_true_25_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bec7_true_25_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bec7_true_25_regions :: state_pred where
  \<open>P_0x1bec7_true_25_regions \<sigma> \<equiv> \<exists>regions. P_0x1bec7_true_25_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_25 :: state_pred where
  \<open>Q_ret_address_25 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_25_def[Qs]

schematic_goal raw_pwrite_0_9_0x1bec7_0x1bde0_25[blocks]:
  assumes \<open>(P_0x1bec7_true_25 && P_0x1bec7_true_25_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 9 0x1bde0 25 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_25 ?\<sigma> \<and> block_usage P_0x1bec7_true_25_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bec7_true_25_def P_0x1bec7_true_25_regions_def post: Q_ret_address_25_def regionset: P_0x1bec7_true_25_regions_set_def)

definition P_0x1bec7_false_26 :: state_pred where
  \<open>P_0x1bec7_false_26 \<sigma> \<equiv> RIP \<sigma> = 0x1bec7 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bec7_false_26_def[Ps]

definition P_0x1bec7_false_26_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bec7_false_26_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bec7_false_26_regions :: state_pred where
  \<open>P_0x1bec7_false_26_regions \<sigma> \<equiv> \<exists>regions. P_0x1bec7_false_26_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd60_26 :: state_pred where
  \<open>Q_0x1bd60_26 \<sigma> \<equiv> RIP \<sigma> = 0x1bd60 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bd60_26_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bec7_0x1bed8_26[blocks]:
  assumes \<open>(P_0x1bec7_false_26 && P_0x1bec7_false_26_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bed8 26 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd60_26 ?\<sigma> \<and> block_usage P_0x1bec7_false_26_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bec7_false_26_def P_0x1bec7_false_26_regions_def post: Q_0x1bd60_26_def regionset: P_0x1bec7_false_26_regions_set_def)

definition P_0x1bd60_27 :: state_pred where
  \<open>P_0x1bd60_27 \<sigma> \<equiv> RIP \<sigma> = 0x1bd60 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bd60_27_def[Ps]

definition P_0x1bd60_27_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd60_27_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bd60_27_regions :: state_pred where
  \<open>P_0x1bd60_27_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd60_27_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd67_27 :: state_pred where
  \<open>Q_0x1bd67_27 \<sigma> \<equiv> RIP \<sigma> = 0x1bd67 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bd67_27_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd60_0x1bd60_27[blocks]:
  assumes \<open>(P_0x1bd60_27 && P_0x1bd60_27_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd60 27 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd67_27 ?\<sigma> \<and> block_usage P_0x1bd60_27_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd60_27_def P_0x1bd60_27_regions_def post: Q_0x1bd67_27_def regionset: P_0x1bd60_27_regions_set_def)

definition P_0x1bd67_true_28 :: state_pred where
  \<open>P_0x1bd67_true_28 \<sigma> \<equiv> RIP \<sigma> = 0x1bd67 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bd67_true_28_def[Ps]

definition P_0x1bd67_true_28_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd67_true_28_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bd67_true_28_regions :: state_pred where
  \<open>P_0x1bd67_true_28_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd67_true_28_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdef_28 :: state_pred where
  \<open>Q_0x1bdef_28 \<sigma> \<equiv> RIP \<sigma> = 0x1bdef \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bdef_28_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bd67_0x1bde8_28[blocks]:
  assumes \<open>(P_0x1bd67_true_28 && P_0x1bd67_true_28_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bde8 28 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdef_28 ?\<sigma> \<and> block_usage P_0x1bd67_true_28_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd67_true_28_def P_0x1bd67_true_28_regions_def post: Q_0x1bdef_28_def regionset: P_0x1bd67_true_28_regions_set_def)

definition P_0x1bdef_true_29 :: state_pred where
  \<open>P_0x1bdef_true_29 \<sigma> \<equiv> RIP \<sigma> = 0x1bdef \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bdef_true_29_def[Ps]

definition P_0x1bdef_true_29_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdef_true_29_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdef_true_29_regions :: state_pred where
  \<open>P_0x1bdef_true_29_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdef_true_29_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd72_29 :: state_pred where
  \<open>Q_0x1bd72_29 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bd72_29_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bdef_0x1bd6c_29[blocks]:
  assumes \<open>(P_0x1bdef_true_29 && P_0x1bdef_true_29_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bd6c 29 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd72_29 ?\<sigma> \<and> block_usage P_0x1bdef_true_29_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdef_true_29_def P_0x1bdef_true_29_regions_def post: Q_0x1bd72_29_def regionset: P_0x1bdef_true_29_regions_set_def)

definition P_0x1bd72_true_30 :: state_pred where
  \<open>P_0x1bd72_true_30 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bd72_true_30_def[Ps]

definition P_0x1bd72_true_30_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_true_30_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bd72_true_30_regions :: state_pred where
  \<open>P_0x1bd72_true_30_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_true_30_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_30 :: state_pred where
  \<open>Q_0x1bd9e_30 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_30_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd72_0x1bd72_30[blocks]:
  assumes \<open>(P_0x1bd72_true_30 && P_0x1bd72_true_30_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd72 30 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_30 ?\<sigma> \<and> block_usage P_0x1bd72_true_30_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_true_30_def P_0x1bd72_true_30_regions_def post: Q_0x1bd9e_30_def regionset: P_0x1bd72_true_30_regions_set_def)

definition P_0x1bd9e_31 :: state_pred where
  \<open>P_0x1bd9e_31 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd9e_31_def[Ps]

definition P_0x1bd9e_31_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd9e_31_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd9e_31_regions :: state_pred where
  \<open>P_0x1bd9e_31_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd9e_31_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdb6_31 :: state_pred where
  \<open>Q_0x1bdb6_31 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdb6_31_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bd9e_0x1bdb3_31[blocks]:
  assumes \<open>(P_0x1bd9e_31 && P_0x1bd9e_31_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x1bdb3 31 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdb6_31 ?\<sigma> \<and> block_usage P_0x1bd9e_31_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd9e_31_def P_0x1bd9e_31_regions_def post: Q_0x1bdb6_31_def regionset: P_0x1bd9e_31_regions_set_def)

definition P_0x1bdb6_32 :: state_pred where
  \<open>P_0x1bdb6_32 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdb6_32_def[Ps]

definition P_0x1bdb6_32_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdb6_32_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdb6_32_regions :: state_pred where
  \<open>P_0x1bdb6_32_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdb6_32_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_memcpy_addr_0x1bdb6_32 :: state_pred where
  \<open>Q_memcpy_addr_0x1bdb6_32 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = memcpy_addr \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_memcpy_addr_0x1bdb6_32_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdb6_0x1bdb6_32[blocks]:
  assumes \<open>(P_0x1bdb6_32 && P_0x1bdb6_32_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdb6 32 \<sigma> \<triangleq> ?\<sigma> \<and> Q_memcpy_addr_0x1bdb6_32 ?\<sigma> \<and> block_usage P_0x1bdb6_32_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdb6_32_def P_0x1bdb6_32_regions_def post: Q_memcpy_addr_0x1bdb6_32_def regionset: P_0x1bdb6_32_regions_set_def)

definition P_0x1bdbb_33 :: state_pred where
  \<open>P_0x1bdbb_33 \<sigma> \<equiv> RIP \<sigma> = 0x1bdbb \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdbb_33_def[Ps]

definition P_0x1bdbb_33_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdbb_33_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdbb_33_regions :: state_pred where
  \<open>P_0x1bdbb_33_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdbb_33_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdc9_33 :: state_pred where
  \<open>Q_0x1bdc9_33 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_0x1bdc9_33_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bdbb_0x1bdc6_33[blocks]:
  assumes \<open>(P_0x1bdbb_33 && P_0x1bdbb_33_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bdc6 33 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdc9_33 ?\<sigma> \<and> block_usage P_0x1bdbb_33_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdbb_33_def P_0x1bdbb_33_regions_def post: Q_0x1bdc9_33_def regionset: P_0x1bdbb_33_regions_set_def)

definition P_0x1bdc9_34 :: state_pred where
  \<open>P_0x1bdc9_34 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdc9_34_def[Ps]

definition P_0x1bdc9_34_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdc9_34_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdc9_34_regions :: state_pred where
  \<open>P_0x1bdc9_34_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdc9_34_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bdc9_34 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bdc9_34 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_raw_pwrite_aligned_addr_0x1bdc9_34_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdc9_0x1bdc9_34[blocks]:
  assumes \<open>(P_0x1bdc9_34 && P_0x1bdc9_34_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdc9 34 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bdc9_34 ?\<sigma> \<and> block_usage P_0x1bdc9_34_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdc9_34_def P_0x1bdc9_34_regions_def post: Q_raw_pwrite_aligned_addr_0x1bdc9_34_def regionset: P_0x1bdc9_34_regions_set_def)

definition P_0x1bdce_35 :: state_pred where
  \<open>P_0x1bdce_35 \<sigma> \<equiv> RIP \<sigma> = 0x1bdce \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdce_35_def[Ps]

definition P_0x1bdce_35_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdce_35_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdce_35_regions :: state_pred where
  \<open>P_0x1bdce_35_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdce_35_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd0_35 :: state_pred where
  \<open>Q_0x1bdd0_35 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_0x1bdd0_35_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdce_0x1bdce_35[blocks]:
  assumes \<open>(P_0x1bdce_35 && P_0x1bdce_35_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdce 35 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd0_35 ?\<sigma> \<and> block_usage P_0x1bdce_35_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdce_35_def P_0x1bdce_35_regions_def post: Q_0x1bdd0_35_def regionset: P_0x1bdce_35_regions_set_def)

definition P_0x1bdd0_true_36 :: state_pred where
  \<open>P_0x1bdd0_true_36 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_true_36_def[Ps]

definition P_0x1bdd0_true_36_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_true_36_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_true_36_regions :: state_pred where
  \<open>P_0x1bdd0_true_36_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_true_36_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd98_36 :: state_pred where
  \<open>Q_0x1bd98_36 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd98_36_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd0_0x1bd92_36[blocks]:
  assumes \<open>(P_0x1bdd0_true_36 && P_0x1bdd0_true_36_regions && !SF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bd92 36 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd98_36 ?\<sigma> \<and> block_usage P_0x1bdd0_true_36_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_true_36_def P_0x1bdd0_true_36_regions_def post: Q_0x1bd98_36_def regionset: P_0x1bdd0_true_36_regions_set_def)

definition P_0x1bd98_true_37 :: state_pred where
  \<open>P_0x1bd98_true_37 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_true_37_def[Ps]

definition P_0x1bd98_true_37_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_true_37_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_true_37_regions :: state_pred where
  \<open>P_0x1bd98_true_37_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_true_37_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_37 :: state_pred where
  \<open>Q_0x1bee0_37 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee0_37_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_37[blocks]:
  assumes \<open>(P_0x1bd98_true_37 && P_0x1bd98_true_37_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 37 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_37 ?\<sigma> \<and> block_usage P_0x1bd98_true_37_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_true_37_def P_0x1bd98_true_37_regions_def post: Q_0x1bee0_37_def regionset: P_0x1bd98_true_37_regions_set_def)

definition P_0x1bd98_false_38 :: state_pred where
  \<open>P_0x1bd98_false_38 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_false_38_def[Ps]

definition P_0x1bd98_false_38_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_false_38_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_false_38_regions :: state_pred where
  \<open>P_0x1bd98_false_38_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_false_38_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_38 :: state_pred where
  \<open>Q_0x1bd9e_38 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_38_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_38[blocks]:
  assumes \<open>(P_0x1bd98_false_38 && P_0x1bd98_false_38_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 38 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_38 ?\<sigma> \<and> block_usage P_0x1bd98_false_38_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_false_38_def P_0x1bd98_false_38_regions_def post: Q_0x1bd9e_38_def regionset: P_0x1bd98_false_38_regions_set_def)

definition P_0x1bdd0_false_39 :: state_pred where
  \<open>P_0x1bdd0_false_39 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_false_39_def[Ps]

definition P_0x1bdd0_false_39_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_false_39_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_false_39_regions :: state_pred where
  \<open>P_0x1bdd0_false_39_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_false_39_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_39 :: state_pred where
  \<open>Q_0x1bdd2_39 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_39_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdd0_0x1bdd0_39[blocks]:
  assumes \<open>(P_0x1bdd0_false_39 && P_0x1bdd0_false_39_regions && ! !SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdd0 39 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_39 ?\<sigma> \<and> block_usage P_0x1bdd0_false_39_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_false_39_def P_0x1bdd0_false_39_regions_def post: Q_0x1bdd2_39_def regionset: P_0x1bdd0_false_39_regions_set_def)

definition P_0x1bee0_40 :: state_pred where
  \<open>P_0x1bee0_40 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee0_40_def[Ps]

definition P_0x1bee0_40_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_40_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee0_40_regions :: state_pred where
  \<open>P_0x1bee0_40_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_40_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_40 :: state_pred where
  \<open>Q_0x1bee6_40 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee6_40_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_40[blocks]:
  assumes \<open>(P_0x1bee0_40 && P_0x1bee0_40_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 40 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_40 ?\<sigma> \<and> block_usage P_0x1bee0_40_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_40_def P_0x1bee0_40_regions_def post: Q_0x1bee6_40_def regionset: P_0x1bee0_40_regions_set_def)

definition P_0x1bee6_true_41 :: state_pred where
  \<open>P_0x1bee6_true_41 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_true_41_def[Ps]

definition P_0x1bee6_true_41_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_41_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_true_41_regions :: state_pred where
  \<open>P_0x1bee6_true_41_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_41_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_41 :: state_pred where
  \<open>Q_0x1bdd2_41 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_41_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_41[blocks]:
  assumes \<open>(P_0x1bee6_true_41 && P_0x1bee6_true_41_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 41 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_41 ?\<sigma> \<and> block_usage P_0x1bee6_true_41_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_41_def P_0x1bee6_true_41_regions_def post: Q_0x1bdd2_41_def regionset: P_0x1bee6_true_41_regions_set_def)

definition P_0x1bee6_false_42 :: state_pred where
  \<open>P_0x1bee6_false_42 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_false_42_def[Ps]

definition P_0x1bee6_false_42_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_42_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_false_42_regions :: state_pred where
  \<open>P_0x1bee6_false_42_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_42_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_42 :: state_pred where
  \<open>Q_0x1befd_42 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1befd_42_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_42[blocks]:
  assumes \<open>(P_0x1bee6_false_42 && P_0x1bee6_false_42_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 42 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_42 ?\<sigma> \<and> block_usage P_0x1bee6_false_42_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_42_def P_0x1bee6_false_42_regions_def post: Q_0x1befd_42_def regionset: P_0x1bee6_false_42_regions_set_def)

definition P_0x1befd_43 :: state_pred where
  \<open>P_0x1befd_43 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1befd_43_def[Ps]

definition P_0x1befd_43_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_43_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_43_regions :: state_pred where
  \<open>P_0x1befd_43_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_43_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_43 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_43 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_43_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_43[blocks]:
  assumes \<open>(P_0x1befd_43 && P_0x1befd_43_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 43 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_43 ?\<sigma> \<and> block_usage P_0x1befd_43_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_43_def P_0x1befd_43_regions_def post: Q_raw_pread_aligned_addr_0x1befd_43_def regionset: P_0x1befd_43_regions_set_def)

definition P_0x1bf02_44 :: state_pred where
  \<open>P_0x1bf02_44 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_44_def[Ps]

definition P_0x1bf02_44_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_44_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_44_regions :: state_pred where
  \<open>P_0x1bf02_44_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_44_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_44 :: state_pred where
  \<open>Q_0x1bf04_44 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_44_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_44[blocks]:
  assumes \<open>(P_0x1bf02_44 && P_0x1bf02_44_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 44 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_44 ?\<sigma> \<and> block_usage P_0x1bf02_44_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_44_def P_0x1bf02_44_regions_def post: Q_0x1bf04_44_def regionset: P_0x1bf02_44_regions_set_def)

definition P_0x1bf04_true_45 :: state_pred where
  \<open>P_0x1bf04_true_45 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_45_def[Ps]

definition P_0x1bf04_true_45_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_45_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_45_regions :: state_pred where
  \<open>P_0x1bf04_true_45_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_45_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_45 :: state_pred where
  \<open>Q_0x1bdd2_45 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_45_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_45[blocks]:
  assumes \<open>(P_0x1bf04_true_45 && P_0x1bf04_true_45_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 45 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_45 ?\<sigma> \<and> block_usage P_0x1bf04_true_45_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_45_def P_0x1bf04_true_45_regions_def post: Q_0x1bdd2_45_def regionset: P_0x1bf04_true_45_regions_set_def)

definition P_0x1bf04_false_46 :: state_pred where
  \<open>P_0x1bf04_false_46 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_46_def[Ps]

definition P_0x1bf04_false_46_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_46_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_46_regions :: state_pred where
  \<open>P_0x1bf04_false_46_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_46_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_46 :: state_pred where
  \<open>Q_0x1bf12_46 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_46_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_46[blocks]:
  assumes \<open>(P_0x1bf04_false_46 && P_0x1bf04_false_46_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 46 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_46 ?\<sigma> \<and> block_usage P_0x1bf04_false_46_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_46_def P_0x1bf04_false_46_regions_def post: Q_0x1bf12_46_def regionset: P_0x1bf04_false_46_regions_set_def)

definition P_0x1bf12_true_47 :: state_pred where
  \<open>P_0x1bf12_true_47 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_47_def[Ps]

definition P_0x1bf12_true_47_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_47_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_47_regions :: state_pred where
  \<open>P_0x1bf12_true_47_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_47_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_47 :: state_pred where
  \<open>Q_0x1bfc8_47 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bfc8_47_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_47[blocks]:
  assumes \<open>(P_0x1bf12_true_47 && P_0x1bf12_true_47_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 47 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_47 ?\<sigma> \<and> block_usage P_0x1bf12_true_47_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_47_def P_0x1bf12_true_47_regions_def post: Q_0x1bfc8_47_def regionset: P_0x1bf12_true_47_regions_set_def)

definition P_0x1bfc8_48 :: state_pred where
  \<open>P_0x1bfc8_48 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfc8_48_def[Ps]

definition P_0x1bfc8_48_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_48_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_48_regions :: state_pred where
  \<open>P_0x1bfc8_48_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_48_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_48 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_48 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_48_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_48[blocks]:
  assumes \<open>(P_0x1bfc8_48 && P_0x1bfc8_48_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 48 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_48 ?\<sigma> \<and> block_usage P_0x1bfc8_48_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_48_def P_0x1bfc8_48_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_48_def regionset: P_0x1bfc8_48_regions_set_def)

definition P_0x1bfcb_49 :: state_pred where
  \<open>P_0x1bfcb_49 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfcb_49_def[Ps]

definition P_0x1bfcb_49_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_49_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_49_regions :: state_pred where
  \<open>P_0x1bfcb_49_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_49_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_49 :: state_pred where
  \<open>Q_0x1bf37_49 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bf37_49_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_49[blocks]:
  assumes \<open>(P_0x1bfcb_49 && P_0x1bfcb_49_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 49 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_49 ?\<sigma> \<and> block_usage P_0x1bfcb_49_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_49_def P_0x1bfcb_49_regions_def post: Q_0x1bf37_49_def regionset: P_0x1bfcb_49_regions_set_def)

definition P_0x1bf37_50 :: state_pred where
  \<open>P_0x1bf37_50 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bf37_50_def[Ps]

definition P_0x1bf37_50_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_50_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_50_regions :: state_pred where
  \<open>P_0x1bf37_50_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_50_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_50 :: state_pred where
  \<open>Q_0x1bf3b_50 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_50_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_50[blocks]:
  assumes \<open>(P_0x1bf37_50 && P_0x1bf37_50_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 50 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_50 ?\<sigma> \<and> block_usage P_0x1bf37_50_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_50_def P_0x1bf37_50_regions_def post: Q_0x1bf3b_50_def regionset: P_0x1bf37_50_regions_set_def)

definition P_0x1bf12_false_51 :: state_pred where
  \<open>P_0x1bf12_false_51 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_51_def[Ps]

definition P_0x1bf12_false_51_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_51_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_51_regions :: state_pred where
  \<open>P_0x1bf12_false_51_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_51_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_51 :: state_pred where
  \<open>Q_0x1bf1c_51 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_51_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_51[blocks]:
  assumes \<open>(P_0x1bf12_false_51 && P_0x1bf12_false_51_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 51 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_51 ?\<sigma> \<and> block_usage P_0x1bf12_false_51_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_51_def P_0x1bf12_false_51_regions_def post: Q_0x1bf1c_51_def regionset: P_0x1bf12_false_51_regions_set_def)

definition P_0x1bf1c_true_52 :: state_pred where
  \<open>P_0x1bf1c_true_52 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_52_def[Ps]

definition P_0x1bf1c_true_52_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_52_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_52_regions :: state_pred where
  \<open>P_0x1bf1c_true_52_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_52_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_52 :: state_pred where
  \<open>Q_0x1bf3b_52 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_52_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_52[blocks]:
  assumes \<open>(P_0x1bf1c_true_52 && P_0x1bf1c_true_52_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 52 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_52 ?\<sigma> \<and> block_usage P_0x1bf1c_true_52_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_52_def P_0x1bf1c_true_52_regions_def post: Q_0x1bf3b_52_def regionset: P_0x1bf1c_true_52_regions_set_def)

definition P_0x1bf1c_false_53 :: state_pred where
  \<open>P_0x1bf1c_false_53 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_53_def[Ps]

definition P_0x1bf1c_false_53_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_53_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_53_regions :: state_pred where
  \<open>P_0x1bf1c_false_53_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_53_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_53 :: state_pred where
  \<open>Q_0x1bf25_53 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_53_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_53[blocks]:
  assumes \<open>(P_0x1bf1c_false_53 && P_0x1bf1c_false_53_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 53 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_53 ?\<sigma> \<and> block_usage P_0x1bf1c_false_53_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_53_def P_0x1bf1c_false_53_regions_def post: Q_0x1bf25_53_def regionset: P_0x1bf1c_false_53_regions_set_def)

definition P_0x1bf25_true_54 :: state_pred where
  \<open>P_0x1bf25_true_54 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_54_def[Ps]

definition P_0x1bf25_true_54_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_54_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_54_regions :: state_pred where
  \<open>P_0x1bf25_true_54_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_54_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_54 :: state_pred where
  \<open>Q_0x1bf3b_54 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_54_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_54[blocks]:
  assumes \<open>(P_0x1bf25_true_54 && P_0x1bf25_true_54_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 54 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_54 ?\<sigma> \<and> block_usage P_0x1bf25_true_54_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_54_def P_0x1bf25_true_54_regions_def post: Q_0x1bf3b_54_def regionset: P_0x1bf25_true_54_regions_set_def)

definition P_0x1bf25_false_55 :: state_pred where
  \<open>P_0x1bf25_false_55 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_55_def[Ps]

definition P_0x1bf25_false_55_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_55_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_55_regions :: state_pred where
  \<open>P_0x1bf25_false_55_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_55_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_55 :: state_pred where
  \<open>Q_0x1bf31_55 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare Q_0x1bf31_55_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_55[blocks]:
  assumes \<open>(P_0x1bf25_false_55 && P_0x1bf25_false_55_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 55 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_55 ?\<sigma> \<and> block_usage P_0x1bf25_false_55_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_55_def P_0x1bf25_false_55_regions_def post: Q_0x1bf31_55_def regionset: P_0x1bf25_false_55_regions_set_def)

definition P_0x1bf31_true_56 :: state_pred where
  \<open>P_0x1bf31_true_56 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_true_56_def[Ps]

definition P_0x1bf31_true_56_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_56_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_56_regions :: state_pred where
  \<open>P_0x1bf31_true_56_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_56_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_56 :: state_pred where
  \<open>Q_0x1bf3b_56 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_56_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_56[blocks]:
  assumes \<open>(P_0x1bf31_true_56 && P_0x1bf31_true_56_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 56 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_56 ?\<sigma> \<and> block_usage P_0x1bf31_true_56_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_56_def P_0x1bf31_true_56_regions_def post: Q_0x1bf3b_56_def regionset: P_0x1bf31_true_56_regions_set_def)

definition P_0x1bf31_false_57 :: state_pred where
  \<open>P_0x1bf31_false_57 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_false_57_def[Ps]

definition P_0x1bf31_false_57_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_57_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_57_regions :: state_pred where
  \<open>P_0x1bf31_false_57_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_57_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_57 :: state_pred where
  \<open>Q_0x1bf3b_57 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_57_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_57[blocks]:
  assumes \<open>(P_0x1bf31_false_57 && P_0x1bf31_false_57_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 57 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_57 ?\<sigma> \<and> block_usage P_0x1bf31_false_57_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_57_def P_0x1bf31_false_57_regions_def post: Q_0x1bf3b_57_def regionset: P_0x1bf31_false_57_regions_set_def)

definition P_0x1bf3b_58 :: state_pred where
  \<open>P_0x1bf3b_58 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_58_def[Ps]

definition P_0x1bf3b_58_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_58_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_58_regions :: state_pred where
  \<open>P_0x1bf3b_58_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_58_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_58 :: state_pred where
  \<open>Q_0x1bf48_58 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_58_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_58[blocks]:
  assumes \<open>(P_0x1bf3b_58 && P_0x1bf3b_58_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 58 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_58 ?\<sigma> \<and> block_usage P_0x1bf3b_58_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_58_def P_0x1bf3b_58_regions_def post: Q_0x1bf48_58_def regionset: P_0x1bf3b_58_regions_set_def)

definition P_0x1bf48_59 :: state_pred where
  \<open>P_0x1bf48_59 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_59_def[Ps]

definition P_0x1bf48_59_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_59_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_59_regions :: state_pred where
  \<open>P_0x1bf48_59_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_59_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_59 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_59 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_59_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_59[blocks]:
  assumes \<open>(P_0x1bf48_59 && P_0x1bf48_59_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 59 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_59 ?\<sigma> \<and> block_usage P_0x1bf48_59_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_59_def P_0x1bf48_59_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_59_def regionset: P_0x1bf48_59_regions_set_def)

definition P_0x1bf4d_60 :: state_pred where
  \<open>P_0x1bf4d_60 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_60_def[Ps]

definition P_0x1bf4d_60_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_60_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_60_regions :: state_pred where
  \<open>P_0x1bf4d_60_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_60_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_60 :: state_pred where
  \<open>Q_0x1bf4f_60 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_60_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_60[blocks]:
  assumes \<open>(P_0x1bf4d_60 && P_0x1bf4d_60_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 60 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_60 ?\<sigma> \<and> block_usage P_0x1bf4d_60_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_60_def P_0x1bf4d_60_regions_def post: Q_0x1bf4f_60_def regionset: P_0x1bf4d_60_regions_set_def)

definition P_0x1bf4f_true_61 :: state_pred where
  \<open>P_0x1bf4f_true_61 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_61_def[Ps]

definition P_0x1bf4f_true_61_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_61_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_61_regions :: state_pred where
  \<open>P_0x1bf4f_true_61_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_61_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_61 :: state_pred where
  \<open>Q_0x1bdd2_61 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_61_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_61[blocks]:
  assumes \<open>(P_0x1bf4f_true_61 && P_0x1bf4f_true_61_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 61 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_61 ?\<sigma> \<and> block_usage P_0x1bf4f_true_61_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_61_def P_0x1bf4f_true_61_regions_def post: Q_0x1bdd2_61_def regionset: P_0x1bf4f_true_61_regions_set_def)

definition P_0x1bf4f_false_62 :: state_pred where
  \<open>P_0x1bf4f_false_62 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_62_def[Ps]

definition P_0x1bf4f_false_62_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_62_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_62_regions :: state_pred where
  \<open>P_0x1bf4f_false_62_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_62_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_62 :: state_pred where
  \<open>Q_0x1bdd2_62 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_62_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_62[blocks]:
  assumes \<open>(P_0x1bf4f_false_62 && P_0x1bf4f_false_62_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 62 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_62 ?\<sigma> \<and> block_usage P_0x1bf4f_false_62_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_62_def P_0x1bf4f_false_62_regions_def post: Q_0x1bdd2_62_def regionset: P_0x1bf4f_false_62_regions_set_def)

definition P_0x1bd72_false_63 :: state_pred where
  \<open>P_0x1bd72_false_63 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bd72_false_63_def[Ps]

definition P_0x1bd72_false_63_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_false_63_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bd72_false_63_regions :: state_pred where
  \<open>P_0x1bd72_false_63_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_false_63_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_63 :: state_pred where
  \<open>Q_0x1bee0_63 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bee0_63_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bd72_0x1bd74_63[blocks]:
  assumes \<open>(P_0x1bd72_false_63 && P_0x1bd72_false_63_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bd74 63 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_63 ?\<sigma> \<and> block_usage P_0x1bd72_false_63_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_false_63_def P_0x1bd72_false_63_regions_def post: Q_0x1bee0_63_def regionset: P_0x1bd72_false_63_regions_set_def)

definition P_0x1bee0_64 :: state_pred where
  \<open>P_0x1bee0_64 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bee0_64_def[Ps]

definition P_0x1bee0_64_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_64_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bee0_64_regions :: state_pred where
  \<open>P_0x1bee0_64_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_64_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_64 :: state_pred where
  \<open>Q_0x1bee6_64 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bee6_64_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_64[blocks]:
  assumes \<open>(P_0x1bee0_64 && P_0x1bee0_64_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 64 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_64 ?\<sigma> \<and> block_usage P_0x1bee0_64_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_64_def P_0x1bee0_64_regions_def post: Q_0x1bee6_64_def regionset: P_0x1bee0_64_regions_set_def)

definition P_0x1bee6_true_65 :: state_pred where
  \<open>P_0x1bee6_true_65 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bee6_true_65_def[Ps]

definition P_0x1bee6_true_65_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_65_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bee6_true_65_regions :: state_pred where
  \<open>P_0x1bee6_true_65_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_65_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_65 :: state_pred where
  \<open>Q_0x1bdd2_65 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_65_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_65[blocks]:
  assumes \<open>(P_0x1bee6_true_65 && P_0x1bee6_true_65_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 65 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_65 ?\<sigma> \<and> block_usage P_0x1bee6_true_65_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_65_def P_0x1bee6_true_65_regions_def post: Q_0x1bdd2_65_def regionset: P_0x1bee6_true_65_regions_set_def)

definition P_0x1bee6_false_66 :: state_pred where
  \<open>P_0x1bee6_false_66 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bee6_false_66_def[Ps]

definition P_0x1bee6_false_66_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_66_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bee6_false_66_regions :: state_pred where
  \<open>P_0x1bee6_false_66_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_66_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_66 :: state_pred where
  \<open>Q_0x1befd_66 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1befd_66_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_66[blocks]:
  assumes \<open>(P_0x1bee6_false_66 && P_0x1bee6_false_66_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 66 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_66 ?\<sigma> \<and> block_usage P_0x1bee6_false_66_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_66_def P_0x1bee6_false_66_regions_def post: Q_0x1befd_66_def regionset: P_0x1bee6_false_66_regions_set_def)

definition P_0x1befd_67 :: state_pred where
  \<open>P_0x1befd_67 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1befd_67_def[Ps]

definition P_0x1befd_67_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_67_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_67_regions :: state_pred where
  \<open>P_0x1befd_67_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_67_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_67 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_67 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_67_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_67[blocks]:
  assumes \<open>(P_0x1befd_67 && P_0x1befd_67_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 67 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_67 ?\<sigma> \<and> block_usage P_0x1befd_67_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_67_def P_0x1befd_67_regions_def post: Q_raw_pread_aligned_addr_0x1befd_67_def regionset: P_0x1befd_67_regions_set_def)

definition P_0x1bf02_68 :: state_pred where
  \<open>P_0x1bf02_68 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_68_def[Ps]

definition P_0x1bf02_68_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_68_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_68_regions :: state_pred where
  \<open>P_0x1bf02_68_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_68_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_68 :: state_pred where
  \<open>Q_0x1bf04_68 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_68_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_68[blocks]:
  assumes \<open>(P_0x1bf02_68 && P_0x1bf02_68_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 68 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_68 ?\<sigma> \<and> block_usage P_0x1bf02_68_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_68_def P_0x1bf02_68_regions_def post: Q_0x1bf04_68_def regionset: P_0x1bf02_68_regions_set_def)

definition P_0x1bf04_true_69 :: state_pred where
  \<open>P_0x1bf04_true_69 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_69_def[Ps]

definition P_0x1bf04_true_69_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_69_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_69_regions :: state_pred where
  \<open>P_0x1bf04_true_69_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_69_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_69 :: state_pred where
  \<open>Q_0x1bdd2_69 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_69_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_69[blocks]:
  assumes \<open>(P_0x1bf04_true_69 && P_0x1bf04_true_69_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 69 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_69 ?\<sigma> \<and> block_usage P_0x1bf04_true_69_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_69_def P_0x1bf04_true_69_regions_def post: Q_0x1bdd2_69_def regionset: P_0x1bf04_true_69_regions_set_def)

definition P_0x1bf04_false_70 :: state_pred where
  \<open>P_0x1bf04_false_70 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_70_def[Ps]

definition P_0x1bf04_false_70_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_70_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_70_regions :: state_pred where
  \<open>P_0x1bf04_false_70_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_70_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_70 :: state_pred where
  \<open>Q_0x1bf12_70 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_70_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_70[blocks]:
  assumes \<open>(P_0x1bf04_false_70 && P_0x1bf04_false_70_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 70 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_70 ?\<sigma> \<and> block_usage P_0x1bf04_false_70_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_70_def P_0x1bf04_false_70_regions_def post: Q_0x1bf12_70_def regionset: P_0x1bf04_false_70_regions_set_def)

definition P_0x1bf12_true_71 :: state_pred where
  \<open>P_0x1bf12_true_71 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_71_def[Ps]

definition P_0x1bf12_true_71_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_71_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_71_regions :: state_pred where
  \<open>P_0x1bf12_true_71_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_71_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_71 :: state_pred where
  \<open>Q_0x1bfc8_71 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare Q_0x1bfc8_71_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_71[blocks]:
  assumes \<open>(P_0x1bf12_true_71 && P_0x1bf12_true_71_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 71 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_71 ?\<sigma> \<and> block_usage P_0x1bf12_true_71_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_71_def P_0x1bf12_true_71_regions_def post: Q_0x1bfc8_71_def regionset: P_0x1bf12_true_71_regions_set_def)

definition P_0x1bfc8_72 :: state_pred where
  \<open>P_0x1bfc8_72 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare P_0x1bfc8_72_def[Ps]

definition P_0x1bfc8_72_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_72_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_72_regions :: state_pred where
  \<open>P_0x1bfc8_72_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_72_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_72 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_72 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_72_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_72[blocks]:
  assumes \<open>(P_0x1bfc8_72 && P_0x1bfc8_72_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 72 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_72 ?\<sigma> \<and> block_usage P_0x1bfc8_72_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_72_def P_0x1bfc8_72_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_72_def regionset: P_0x1bfc8_72_regions_set_def)

definition P_0x1bfcb_73 :: state_pred where
  \<open>P_0x1bfcb_73 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare P_0x1bfcb_73_def[Ps]

definition P_0x1bfcb_73_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_73_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_73_regions :: state_pred where
  \<open>P_0x1bfcb_73_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_73_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_73 :: state_pred where
  \<open>Q_0x1bf37_73 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare Q_0x1bf37_73_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_73[blocks]:
  assumes \<open>(P_0x1bfcb_73 && P_0x1bfcb_73_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 73 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_73 ?\<sigma> \<and> block_usage P_0x1bfcb_73_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_73_def P_0x1bfcb_73_regions_def post: Q_0x1bf37_73_def regionset: P_0x1bfcb_73_regions_set_def)

definition P_0x1bf37_74 :: state_pred where
  \<open>P_0x1bf37_74 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare P_0x1bf37_74_def[Ps]

definition P_0x1bf37_74_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_74_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_74_regions :: state_pred where
  \<open>P_0x1bf37_74_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_74_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_74 :: state_pred where
  \<open>Q_0x1bf3b_74 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_74_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_74[blocks]:
  assumes \<open>(P_0x1bf37_74 && P_0x1bf37_74_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 74 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_74 ?\<sigma> \<and> block_usage P_0x1bf37_74_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_74_def P_0x1bf37_74_regions_def post: Q_0x1bf3b_74_def regionset: P_0x1bf37_74_regions_set_def)

definition P_0x1bf12_false_75 :: state_pred where
  \<open>P_0x1bf12_false_75 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_75_def[Ps]

definition P_0x1bf12_false_75_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_75_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_75_regions :: state_pred where
  \<open>P_0x1bf12_false_75_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_75_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_75 :: state_pred where
  \<open>Q_0x1bf1c_75 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_75_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_75[blocks]:
  assumes \<open>(P_0x1bf12_false_75 && P_0x1bf12_false_75_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 75 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_75 ?\<sigma> \<and> block_usage P_0x1bf12_false_75_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_75_def P_0x1bf12_false_75_regions_def post: Q_0x1bf1c_75_def regionset: P_0x1bf12_false_75_regions_set_def)

definition P_0x1bf1c_true_76 :: state_pred where
  \<open>P_0x1bf1c_true_76 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_76_def[Ps]

definition P_0x1bf1c_true_76_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_76_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 4),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_76_regions :: state_pred where
  \<open>P_0x1bf1c_true_76_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_76_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_76 :: state_pred where
  \<open>Q_0x1bf3b_76 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_76_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_76[blocks]:
  assumes \<open>(P_0x1bf1c_true_76 && P_0x1bf1c_true_76_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 76 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_76 ?\<sigma> \<and> block_usage P_0x1bf1c_true_76_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_76_def P_0x1bf1c_true_76_regions_def post: Q_0x1bf3b_76_def regionset: P_0x1bf1c_true_76_regions_set_def)

definition P_0x1bf1c_false_77 :: state_pred where
  \<open>P_0x1bf1c_false_77 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_77_def[Ps]

definition P_0x1bf1c_false_77_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_77_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_77_regions :: state_pred where
  \<open>P_0x1bf1c_false_77_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_77_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_77 :: state_pred where
  \<open>Q_0x1bf25_77 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_77_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_77[blocks]:
  assumes \<open>(P_0x1bf1c_false_77 && P_0x1bf1c_false_77_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 77 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_77 ?\<sigma> \<and> block_usage P_0x1bf1c_false_77_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_77_def P_0x1bf1c_false_77_regions_def post: Q_0x1bf25_77_def regionset: P_0x1bf1c_false_77_regions_set_def)

definition P_0x1bf25_true_78 :: state_pred where
  \<open>P_0x1bf25_true_78 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_78_def[Ps]

definition P_0x1bf25_true_78_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_78_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_78_regions :: state_pred where
  \<open>P_0x1bf25_true_78_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_78_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_78 :: state_pred where
  \<open>Q_0x1bf3b_78 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_78_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_78[blocks]:
  assumes \<open>(P_0x1bf25_true_78 && P_0x1bf25_true_78_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 78 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_78 ?\<sigma> \<and> block_usage P_0x1bf25_true_78_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_78_def P_0x1bf25_true_78_regions_def post: Q_0x1bf3b_78_def regionset: P_0x1bf25_true_78_regions_set_def)

definition P_0x1bf25_false_79 :: state_pred where
  \<open>P_0x1bf25_false_79 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_79_def[Ps]

definition P_0x1bf25_false_79_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_79_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), Suc 0),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_79_regions :: state_pred where
  \<open>P_0x1bf25_false_79_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_79_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_79 :: state_pred where
  \<open>Q_0x1bf31_79 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word))\<close>
declare Q_0x1bf31_79_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_79[blocks]:
  assumes \<open>(P_0x1bf25_false_79 && P_0x1bf25_false_79_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 79 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_79 ?\<sigma> \<and> block_usage P_0x1bf25_false_79_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_79_def P_0x1bf25_false_79_regions_def post: Q_0x1bf31_79_def regionset: P_0x1bf25_false_79_regions_set_def)

definition P_0x1bf31_true_80 :: state_pred where
  \<open>P_0x1bf31_true_80 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word))\<close>
declare P_0x1bf31_true_80_def[Ps]

definition P_0x1bf31_true_80_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_80_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), Suc 0),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_80_regions :: state_pred where
  \<open>P_0x1bf31_true_80_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_80_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_80 :: state_pred where
  \<open>Q_0x1bf3b_80 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_80_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_80[blocks]:
  assumes \<open>(P_0x1bf31_true_80 && P_0x1bf31_true_80_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 80 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_80 ?\<sigma> \<and> block_usage P_0x1bf31_true_80_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_80_def P_0x1bf31_true_80_regions_def post: Q_0x1bf3b_80_def regionset: P_0x1bf31_true_80_regions_set_def)

definition P_0x1bf31_false_81 :: state_pred where
  \<open>P_0x1bf31_false_81 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word))\<close>
declare P_0x1bf31_false_81_def[Ps]

definition P_0x1bf31_false_81_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_81_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), Suc 0),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_81_regions :: state_pred where
  \<open>P_0x1bf31_false_81_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_81_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_81 :: state_pred where
  \<open>Q_0x1bf3b_81 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_81_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_81[blocks]:
  assumes \<open>(P_0x1bf31_false_81 && P_0x1bf31_false_81_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 81 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_81 ?\<sigma> \<and> block_usage P_0x1bf31_false_81_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_81_def P_0x1bf31_false_81_regions_def post: Q_0x1bf3b_81_def regionset: P_0x1bf31_false_81_regions_set_def)

definition P_0x1bf3b_82 :: state_pred where
  \<open>P_0x1bf3b_82 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_82_def[Ps]

definition P_0x1bf3b_82_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_82_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_82_regions :: state_pred where
  \<open>P_0x1bf3b_82_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_82_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_82 :: state_pred where
  \<open>Q_0x1bf48_82 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_82_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_82[blocks]:
  assumes \<open>(P_0x1bf3b_82 && P_0x1bf3b_82_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 82 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_82 ?\<sigma> \<and> block_usage P_0x1bf3b_82_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_82_def P_0x1bf3b_82_regions_def post: Q_0x1bf48_82_def regionset: P_0x1bf3b_82_regions_set_def)

definition P_0x1bf48_83 :: state_pred where
  \<open>P_0x1bf48_83 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_83_def[Ps]

definition P_0x1bf48_83_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_83_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_83_regions :: state_pred where
  \<open>P_0x1bf48_83_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_83_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_83 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_83 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_83_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_83[blocks]:
  assumes \<open>(P_0x1bf48_83 && P_0x1bf48_83_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 83 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_83 ?\<sigma> \<and> block_usage P_0x1bf48_83_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_83_def P_0x1bf48_83_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_83_def regionset: P_0x1bf48_83_regions_set_def)

definition P_0x1bf4d_84 :: state_pred where
  \<open>P_0x1bf4d_84 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_84_def[Ps]

definition P_0x1bf4d_84_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_84_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_84_regions :: state_pred where
  \<open>P_0x1bf4d_84_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_84_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_84 :: state_pred where
  \<open>Q_0x1bf4f_84 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_84_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_84[blocks]:
  assumes \<open>(P_0x1bf4d_84 && P_0x1bf4d_84_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 84 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_84 ?\<sigma> \<and> block_usage P_0x1bf4d_84_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_84_def P_0x1bf4d_84_regions_def post: Q_0x1bf4f_84_def regionset: P_0x1bf4d_84_regions_set_def)

definition P_0x1bf4f_true_85 :: state_pred where
  \<open>P_0x1bf4f_true_85 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_85_def[Ps]

definition P_0x1bf4f_true_85_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_85_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_85_regions :: state_pred where
  \<open>P_0x1bf4f_true_85_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_85_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_85 :: state_pred where
  \<open>Q_0x1bdd2_85 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_85_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_85[blocks]:
  assumes \<open>(P_0x1bf4f_true_85 && P_0x1bf4f_true_85_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 85 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_85 ?\<sigma> \<and> block_usage P_0x1bf4f_true_85_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_85_def P_0x1bf4f_true_85_regions_def post: Q_0x1bdd2_85_def regionset: P_0x1bf4f_true_85_regions_set_def)

definition P_0x1bf4f_false_86 :: state_pred where
  \<open>P_0x1bf4f_false_86 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_86_def[Ps]

definition P_0x1bf4f_false_86_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_86_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_86_regions :: state_pred where
  \<open>P_0x1bf4f_false_86_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_86_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_86 :: state_pred where
  \<open>Q_0x1bdd2_86 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_86_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_86[blocks]:
  assumes \<open>(P_0x1bf4f_false_86 && P_0x1bf4f_false_86_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 86 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_86 ?\<sigma> \<and> block_usage P_0x1bf4f_false_86_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_86_def P_0x1bf4f_false_86_regions_def post: Q_0x1bdd2_86_def regionset: P_0x1bf4f_false_86_regions_set_def)

definition P_0x1bdd2_87 :: state_pred where
  \<open>P_0x1bdd2_87 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdd2_87_def[Ps]

definition P_0x1bdd2_87_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd2_87_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bdd2_87_regions :: state_pred where
  \<open>P_0x1bdd2_87_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd2_87_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_87 :: state_pred where
  \<open>Q_ret_address_87 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_87_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd2_0x1bde0_87[blocks]:
  assumes \<open>(P_0x1bdd2_87 && P_0x1bdd2_87_regions) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bde0 87 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_87 ?\<sigma> \<and> block_usage P_0x1bdd2_87_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd2_87_def P_0x1bdd2_87_regions_def post: Q_ret_address_87_def regionset: P_0x1bdd2_87_regions_set_def)

definition P_0x1bdef_false_88 :: state_pred where
  \<open>P_0x1bdef_false_88 \<sigma> \<equiv> RIP \<sigma> = 0x1bdef \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bdef_false_88_def[Ps]

definition P_0x1bdef_false_88_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdef_false_88_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdef_false_88_regions :: state_pred where
  \<open>P_0x1bdef_false_88_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdef_false_88_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1be03_88 :: state_pred where
  \<open>Q_0x1be03_88 \<sigma> \<equiv> RIP \<sigma> = 0x1be03 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RDX \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1be03_88_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bdef_0x1be00_88[blocks]:
  assumes \<open>(P_0x1bdef_false_88 && P_0x1bdef_false_88_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1be00 88 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1be03_88 ?\<sigma> \<and> block_usage P_0x1bdef_false_88_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdef_false_88_def P_0x1bdef_false_88_regions_def post: Q_0x1be03_88_def regionset: P_0x1bdef_false_88_regions_set_def)

definition P_0x1be03_89 :: state_pred where
  \<open>P_0x1be03_89 \<sigma> \<equiv> RIP \<sigma> = 0x1be03 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RDX \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1be03_89_def[Ps]

definition P_0x1be03_89_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be03_89_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be03_89_regions :: state_pred where
  \<open>P_0x1be03_89_regions \<sigma> \<equiv> \<exists>regions. P_0x1be03_89_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1be03_89 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1be03_89 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RDX \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be08\<close>
declare Q_raw_pwrite_aligned_addr_0x1be03_89_def[Qs]

schematic_goal raw_pwrite_0_1_0x1be03_0x1be03_89[blocks]:
  assumes \<open>(P_0x1be03_89 && P_0x1be03_89_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1be03 89 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1be03_89 ?\<sigma> \<and> block_usage P_0x1be03_89_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be03_89_def P_0x1be03_89_regions_def post: Q_raw_pwrite_aligned_addr_0x1be03_89_def regionset: P_0x1be03_89_regions_set_def)

definition P_0x1be08_90 :: state_pred where
  \<open>P_0x1be08_90 \<sigma> \<equiv> RIP \<sigma> = 0x1be08 \<and> RAX \<sigma> = raw_pwrite_aligned_0x1be03_retval \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RDX \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be08\<close>
declare P_0x1be08_90_def[Ps]

definition P_0x1be08_90_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be08_90_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be08_90_regions :: state_pred where
  \<open>P_0x1be08_90_regions \<sigma> \<equiv> \<exists>regions. P_0x1be08_90_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_90 :: state_pred where
  \<open>Q_ret_address_90 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_90_def[Qs]

schematic_goal raw_pwrite_0_9_0x1be08_0x1be19_90[blocks]:
  assumes \<open>(P_0x1be08_90 && P_0x1be08_90_regions) \<sigma>\<close>
  shows \<open>exec_block 9 0x1be19 90 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_90 ?\<sigma> \<and> block_usage P_0x1be08_90_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be08_90_def P_0x1be08_90_regions_def post: Q_ret_address_90_def regionset: P_0x1be08_90_regions_set_def)

definition P_0x1bd67_false_91 :: state_pred where
  \<open>P_0x1bd67_false_91 \<sigma> \<equiv> RIP \<sigma> = 0x1bd67 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bd67_false_91_def[Ps]

definition P_0x1bd67_false_91_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd67_false_91_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bd67_false_91_regions :: state_pred where
  \<open>P_0x1bd67_false_91_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd67_false_91_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd72_91 :: state_pred where
  \<open>Q_0x1bd72_91 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bd72_91_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bd67_0x1bd6c_91[blocks]:
  assumes \<open>(P_0x1bd67_false_91 && P_0x1bd67_false_91_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bd6c 91 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd72_91 ?\<sigma> \<and> block_usage P_0x1bd67_false_91_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd67_false_91_def P_0x1bd67_false_91_regions_def post: Q_0x1bd72_91_def regionset: P_0x1bd67_false_91_regions_set_def)

definition P_0x1bd72_true_92 :: state_pred where
  \<open>P_0x1bd72_true_92 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bd72_true_92_def[Ps]

definition P_0x1bd72_true_92_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_true_92_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bd72_true_92_regions :: state_pred where
  \<open>P_0x1bd72_true_92_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_true_92_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_92 :: state_pred where
  \<open>Q_0x1bd9e_92 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_92_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd72_0x1bd72_92[blocks]:
  assumes \<open>(P_0x1bd72_true_92 && P_0x1bd72_true_92_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd72 92 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_92 ?\<sigma> \<and> block_usage P_0x1bd72_true_92_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_true_92_def P_0x1bd72_true_92_regions_def post: Q_0x1bd9e_92_def regionset: P_0x1bd72_true_92_regions_set_def)

definition P_0x1bd9e_93 :: state_pred where
  \<open>P_0x1bd9e_93 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd9e_93_def[Ps]

definition P_0x1bd9e_93_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd9e_93_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd9e_93_regions :: state_pred where
  \<open>P_0x1bd9e_93_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd9e_93_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdb6_93 :: state_pred where
  \<open>Q_0x1bdb6_93 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdb6_93_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bd9e_0x1bdb3_93[blocks]:
  assumes \<open>(P_0x1bd9e_93 && P_0x1bd9e_93_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x1bdb3 93 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdb6_93 ?\<sigma> \<and> block_usage P_0x1bd9e_93_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd9e_93_def P_0x1bd9e_93_regions_def post: Q_0x1bdb6_93_def regionset: P_0x1bd9e_93_regions_set_def)

definition P_0x1bdb6_94 :: state_pred where
  \<open>P_0x1bdb6_94 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdb6_94_def[Ps]

definition P_0x1bdb6_94_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdb6_94_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdb6_94_regions :: state_pred where
  \<open>P_0x1bdb6_94_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdb6_94_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_memcpy_addr_0x1bdb6_94 :: state_pred where
  \<open>Q_memcpy_addr_0x1bdb6_94 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = memcpy_addr \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_memcpy_addr_0x1bdb6_94_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdb6_0x1bdb6_94[blocks]:
  assumes \<open>(P_0x1bdb6_94 && P_0x1bdb6_94_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdb6 94 \<sigma> \<triangleq> ?\<sigma> \<and> Q_memcpy_addr_0x1bdb6_94 ?\<sigma> \<and> block_usage P_0x1bdb6_94_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdb6_94_def P_0x1bdb6_94_regions_def post: Q_memcpy_addr_0x1bdb6_94_def regionset: P_0x1bdb6_94_regions_set_def)

definition P_0x1bdbb_95 :: state_pred where
  \<open>P_0x1bdbb_95 \<sigma> \<equiv> RIP \<sigma> = 0x1bdbb \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdbb_95_def[Ps]

definition P_0x1bdbb_95_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdbb_95_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdbb_95_regions :: state_pred where
  \<open>P_0x1bdbb_95_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdbb_95_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdc9_95 :: state_pred where
  \<open>Q_0x1bdc9_95 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_0x1bdc9_95_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bdbb_0x1bdc6_95[blocks]:
  assumes \<open>(P_0x1bdbb_95 && P_0x1bdbb_95_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bdc6 95 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdc9_95 ?\<sigma> \<and> block_usage P_0x1bdbb_95_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdbb_95_def P_0x1bdbb_95_regions_def post: Q_0x1bdc9_95_def regionset: P_0x1bdbb_95_regions_set_def)

definition P_0x1bdc9_96 :: state_pred where
  \<open>P_0x1bdc9_96 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdc9_96_def[Ps]

definition P_0x1bdc9_96_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdc9_96_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdc9_96_regions :: state_pred where
  \<open>P_0x1bdc9_96_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdc9_96_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bdc9_96 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bdc9_96 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_raw_pwrite_aligned_addr_0x1bdc9_96_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdc9_0x1bdc9_96[blocks]:
  assumes \<open>(P_0x1bdc9_96 && P_0x1bdc9_96_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdc9 96 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bdc9_96 ?\<sigma> \<and> block_usage P_0x1bdc9_96_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdc9_96_def P_0x1bdc9_96_regions_def post: Q_raw_pwrite_aligned_addr_0x1bdc9_96_def regionset: P_0x1bdc9_96_regions_set_def)

definition P_0x1bdce_97 :: state_pred where
  \<open>P_0x1bdce_97 \<sigma> \<equiv> RIP \<sigma> = 0x1bdce \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdce_97_def[Ps]

definition P_0x1bdce_97_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdce_97_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdce_97_regions :: state_pred where
  \<open>P_0x1bdce_97_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdce_97_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd0_97 :: state_pred where
  \<open>Q_0x1bdd0_97 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_0x1bdd0_97_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdce_0x1bdce_97[blocks]:
  assumes \<open>(P_0x1bdce_97 && P_0x1bdce_97_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdce 97 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd0_97 ?\<sigma> \<and> block_usage P_0x1bdce_97_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdce_97_def P_0x1bdce_97_regions_def post: Q_0x1bdd0_97_def regionset: P_0x1bdce_97_regions_set_def)

definition P_0x1bdd0_true_98 :: state_pred where
  \<open>P_0x1bdd0_true_98 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_true_98_def[Ps]

definition P_0x1bdd0_true_98_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_true_98_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_true_98_regions :: state_pred where
  \<open>P_0x1bdd0_true_98_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_true_98_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd98_98 :: state_pred where
  \<open>Q_0x1bd98_98 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd98_98_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd0_0x1bd92_98[blocks]:
  assumes \<open>(P_0x1bdd0_true_98 && P_0x1bdd0_true_98_regions && !SF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bd92 98 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd98_98 ?\<sigma> \<and> block_usage P_0x1bdd0_true_98_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_true_98_def P_0x1bdd0_true_98_regions_def post: Q_0x1bd98_98_def regionset: P_0x1bdd0_true_98_regions_set_def)

definition P_0x1bd98_true_99 :: state_pred where
  \<open>P_0x1bd98_true_99 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_true_99_def[Ps]

definition P_0x1bd98_true_99_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_true_99_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_true_99_regions :: state_pred where
  \<open>P_0x1bd98_true_99_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_true_99_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_99 :: state_pred where
  \<open>Q_0x1bee0_99 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee0_99_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_99[blocks]:
  assumes \<open>(P_0x1bd98_true_99 && P_0x1bd98_true_99_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 99 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_99 ?\<sigma> \<and> block_usage P_0x1bd98_true_99_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_true_99_def P_0x1bd98_true_99_regions_def post: Q_0x1bee0_99_def regionset: P_0x1bd98_true_99_regions_set_def)

definition P_0x1bd98_false_100 :: state_pred where
  \<open>P_0x1bd98_false_100 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_false_100_def[Ps]

definition P_0x1bd98_false_100_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_false_100_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_false_100_regions :: state_pred where
  \<open>P_0x1bd98_false_100_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_false_100_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_100 :: state_pred where
  \<open>Q_0x1bd9e_100 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_100_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_100[blocks]:
  assumes \<open>(P_0x1bd98_false_100 && P_0x1bd98_false_100_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 100 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_100 ?\<sigma> \<and> block_usage P_0x1bd98_false_100_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_false_100_def P_0x1bd98_false_100_regions_def post: Q_0x1bd9e_100_def regionset: P_0x1bd98_false_100_regions_set_def)

definition P_0x1bdd0_false_101 :: state_pred where
  \<open>P_0x1bdd0_false_101 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_false_101_def[Ps]

definition P_0x1bdd0_false_101_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_false_101_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_false_101_regions :: state_pred where
  \<open>P_0x1bdd0_false_101_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_false_101_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_101 :: state_pred where
  \<open>Q_0x1bdd2_101 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_101_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdd0_0x1bdd0_101[blocks]:
  assumes \<open>(P_0x1bdd0_false_101 && P_0x1bdd0_false_101_regions && ! !SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdd0 101 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_101 ?\<sigma> \<and> block_usage P_0x1bdd0_false_101_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_false_101_def P_0x1bdd0_false_101_regions_def post: Q_0x1bdd2_101_def regionset: P_0x1bdd0_false_101_regions_set_def)

definition P_0x1bee0_102 :: state_pred where
  \<open>P_0x1bee0_102 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee0_102_def[Ps]

definition P_0x1bee0_102_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_102_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee0_102_regions :: state_pred where
  \<open>P_0x1bee0_102_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_102_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_102 :: state_pred where
  \<open>Q_0x1bee6_102 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee6_102_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_102[blocks]:
  assumes \<open>(P_0x1bee0_102 && P_0x1bee0_102_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 102 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_102 ?\<sigma> \<and> block_usage P_0x1bee0_102_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_102_def P_0x1bee0_102_regions_def post: Q_0x1bee6_102_def regionset: P_0x1bee0_102_regions_set_def)

definition P_0x1bee6_true_103 :: state_pred where
  \<open>P_0x1bee6_true_103 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_true_103_def[Ps]

definition P_0x1bee6_true_103_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_103_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_true_103_regions :: state_pred where
  \<open>P_0x1bee6_true_103_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_103_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_103 :: state_pred where
  \<open>Q_0x1bdd2_103 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_103_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_103[blocks]:
  assumes \<open>(P_0x1bee6_true_103 && P_0x1bee6_true_103_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 103 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_103 ?\<sigma> \<and> block_usage P_0x1bee6_true_103_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_103_def P_0x1bee6_true_103_regions_def post: Q_0x1bdd2_103_def regionset: P_0x1bee6_true_103_regions_set_def)

definition P_0x1bee6_false_104 :: state_pred where
  \<open>P_0x1bee6_false_104 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_false_104_def[Ps]

definition P_0x1bee6_false_104_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_104_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_false_104_regions :: state_pred where
  \<open>P_0x1bee6_false_104_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_104_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_104 :: state_pred where
  \<open>Q_0x1befd_104 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1befd_104_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_104[blocks]:
  assumes \<open>(P_0x1bee6_false_104 && P_0x1bee6_false_104_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 104 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_104 ?\<sigma> \<and> block_usage P_0x1bee6_false_104_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_104_def P_0x1bee6_false_104_regions_def post: Q_0x1befd_104_def regionset: P_0x1bee6_false_104_regions_set_def)

definition P_0x1befd_105 :: state_pred where
  \<open>P_0x1befd_105 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1befd_105_def[Ps]

definition P_0x1befd_105_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_105_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_105_regions :: state_pred where
  \<open>P_0x1befd_105_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_105_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_105 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_105 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_105_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_105[blocks]:
  assumes \<open>(P_0x1befd_105 && P_0x1befd_105_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 105 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_105 ?\<sigma> \<and> block_usage P_0x1befd_105_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_105_def P_0x1befd_105_regions_def post: Q_raw_pread_aligned_addr_0x1befd_105_def regionset: P_0x1befd_105_regions_set_def)

definition P_0x1bf02_106 :: state_pred where
  \<open>P_0x1bf02_106 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_106_def[Ps]

definition P_0x1bf02_106_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_106_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_106_regions :: state_pred where
  \<open>P_0x1bf02_106_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_106_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_106 :: state_pred where
  \<open>Q_0x1bf04_106 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_106_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_106[blocks]:
  assumes \<open>(P_0x1bf02_106 && P_0x1bf02_106_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 106 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_106 ?\<sigma> \<and> block_usage P_0x1bf02_106_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_106_def P_0x1bf02_106_regions_def post: Q_0x1bf04_106_def regionset: P_0x1bf02_106_regions_set_def)

definition P_0x1bf04_true_107 :: state_pred where
  \<open>P_0x1bf04_true_107 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_107_def[Ps]

definition P_0x1bf04_true_107_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_107_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_107_regions :: state_pred where
  \<open>P_0x1bf04_true_107_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_107_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_107 :: state_pred where
  \<open>Q_0x1bdd2_107 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_107_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_107[blocks]:
  assumes \<open>(P_0x1bf04_true_107 && P_0x1bf04_true_107_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 107 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_107 ?\<sigma> \<and> block_usage P_0x1bf04_true_107_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_107_def P_0x1bf04_true_107_regions_def post: Q_0x1bdd2_107_def regionset: P_0x1bf04_true_107_regions_set_def)

definition P_0x1bf04_false_108 :: state_pred where
  \<open>P_0x1bf04_false_108 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_108_def[Ps]

definition P_0x1bf04_false_108_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_108_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_108_regions :: state_pred where
  \<open>P_0x1bf04_false_108_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_108_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_108 :: state_pred where
  \<open>Q_0x1bf12_108 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_108_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_108[blocks]:
  assumes \<open>(P_0x1bf04_false_108 && P_0x1bf04_false_108_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 108 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_108 ?\<sigma> \<and> block_usage P_0x1bf04_false_108_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_108_def P_0x1bf04_false_108_regions_def post: Q_0x1bf12_108_def regionset: P_0x1bf04_false_108_regions_set_def)

definition P_0x1bf12_true_109 :: state_pred where
  \<open>P_0x1bf12_true_109 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_109_def[Ps]

definition P_0x1bf12_true_109_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_109_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_109_regions :: state_pred where
  \<open>P_0x1bf12_true_109_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_109_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_109 :: state_pred where
  \<open>Q_0x1bfc8_109 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bfc8_109_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_109[blocks]:
  assumes \<open>(P_0x1bf12_true_109 && P_0x1bf12_true_109_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 109 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_109 ?\<sigma> \<and> block_usage P_0x1bf12_true_109_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_109_def P_0x1bf12_true_109_regions_def post: Q_0x1bfc8_109_def regionset: P_0x1bf12_true_109_regions_set_def)

definition P_0x1bfc8_110 :: state_pred where
  \<open>P_0x1bfc8_110 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfc8_110_def[Ps]

definition P_0x1bfc8_110_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_110_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_110_regions :: state_pred where
  \<open>P_0x1bfc8_110_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_110_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_110 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_110 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_110_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_110[blocks]:
  assumes \<open>(P_0x1bfc8_110 && P_0x1bfc8_110_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 110 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_110 ?\<sigma> \<and> block_usage P_0x1bfc8_110_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_110_def P_0x1bfc8_110_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_110_def regionset: P_0x1bfc8_110_regions_set_def)

definition P_0x1bfcb_111 :: state_pred where
  \<open>P_0x1bfcb_111 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfcb_111_def[Ps]

definition P_0x1bfcb_111_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_111_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_111_regions :: state_pred where
  \<open>P_0x1bfcb_111_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_111_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_111 :: state_pred where
  \<open>Q_0x1bf37_111 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bf37_111_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_111[blocks]:
  assumes \<open>(P_0x1bfcb_111 && P_0x1bfcb_111_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 111 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_111 ?\<sigma> \<and> block_usage P_0x1bfcb_111_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_111_def P_0x1bfcb_111_regions_def post: Q_0x1bf37_111_def regionset: P_0x1bfcb_111_regions_set_def)

definition P_0x1bf37_112 :: state_pred where
  \<open>P_0x1bf37_112 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bf37_112_def[Ps]

definition P_0x1bf37_112_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_112_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_112_regions :: state_pred where
  \<open>P_0x1bf37_112_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_112_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_112 :: state_pred where
  \<open>Q_0x1bf3b_112 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_112_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_112[blocks]:
  assumes \<open>(P_0x1bf37_112 && P_0x1bf37_112_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 112 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_112 ?\<sigma> \<and> block_usage P_0x1bf37_112_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_112_def P_0x1bf37_112_regions_def post: Q_0x1bf3b_112_def regionset: P_0x1bf37_112_regions_set_def)

definition P_0x1bf12_false_113 :: state_pred where
  \<open>P_0x1bf12_false_113 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_113_def[Ps]

definition P_0x1bf12_false_113_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_113_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_113_regions :: state_pred where
  \<open>P_0x1bf12_false_113_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_113_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_113 :: state_pred where
  \<open>Q_0x1bf1c_113 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_113_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_113[blocks]:
  assumes \<open>(P_0x1bf12_false_113 && P_0x1bf12_false_113_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 113 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_113 ?\<sigma> \<and> block_usage P_0x1bf12_false_113_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_113_def P_0x1bf12_false_113_regions_def post: Q_0x1bf1c_113_def regionset: P_0x1bf12_false_113_regions_set_def)

definition P_0x1bf1c_true_114 :: state_pred where
  \<open>P_0x1bf1c_true_114 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_114_def[Ps]

definition P_0x1bf1c_true_114_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_114_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_114_regions :: state_pred where
  \<open>P_0x1bf1c_true_114_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_114_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_114 :: state_pred where
  \<open>Q_0x1bf3b_114 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_114_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_114[blocks]:
  assumes \<open>(P_0x1bf1c_true_114 && P_0x1bf1c_true_114_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 114 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_114 ?\<sigma> \<and> block_usage P_0x1bf1c_true_114_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_114_def P_0x1bf1c_true_114_regions_def post: Q_0x1bf3b_114_def regionset: P_0x1bf1c_true_114_regions_set_def)

definition P_0x1bf1c_false_115 :: state_pred where
  \<open>P_0x1bf1c_false_115 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_115_def[Ps]

definition P_0x1bf1c_false_115_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_115_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_115_regions :: state_pred where
  \<open>P_0x1bf1c_false_115_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_115_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_115 :: state_pred where
  \<open>Q_0x1bf25_115 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_115_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_115[blocks]:
  assumes \<open>(P_0x1bf1c_false_115 && P_0x1bf1c_false_115_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 115 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_115 ?\<sigma> \<and> block_usage P_0x1bf1c_false_115_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_115_def P_0x1bf1c_false_115_regions_def post: Q_0x1bf25_115_def regionset: P_0x1bf1c_false_115_regions_set_def)

definition P_0x1bf25_true_116 :: state_pred where
  \<open>P_0x1bf25_true_116 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_116_def[Ps]

definition P_0x1bf25_true_116_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_116_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_116_regions :: state_pred where
  \<open>P_0x1bf25_true_116_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_116_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_116 :: state_pred where
  \<open>Q_0x1bf3b_116 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_116_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_116[blocks]:
  assumes \<open>(P_0x1bf25_true_116 && P_0x1bf25_true_116_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 116 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_116 ?\<sigma> \<and> block_usage P_0x1bf25_true_116_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_116_def P_0x1bf25_true_116_regions_def post: Q_0x1bf3b_116_def regionset: P_0x1bf25_true_116_regions_set_def)

definition P_0x1bf25_false_117 :: state_pred where
  \<open>P_0x1bf25_false_117 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_117_def[Ps]

definition P_0x1bf25_false_117_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_117_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_117_regions :: state_pred where
  \<open>P_0x1bf25_false_117_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_117_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_117 :: state_pred where
  \<open>Q_0x1bf31_117 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare Q_0x1bf31_117_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_117[blocks]:
  assumes \<open>(P_0x1bf25_false_117 && P_0x1bf25_false_117_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 117 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_117 ?\<sigma> \<and> block_usage P_0x1bf25_false_117_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_117_def P_0x1bf25_false_117_regions_def post: Q_0x1bf31_117_def regionset: P_0x1bf25_false_117_regions_set_def)

definition P_0x1bf31_true_118 :: state_pred where
  \<open>P_0x1bf31_true_118 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_true_118_def[Ps]

definition P_0x1bf31_true_118_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_118_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_118_regions :: state_pred where
  \<open>P_0x1bf31_true_118_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_118_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_118 :: state_pred where
  \<open>Q_0x1bf3b_118 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_118_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_118[blocks]:
  assumes \<open>(P_0x1bf31_true_118 && P_0x1bf31_true_118_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 118 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_118 ?\<sigma> \<and> block_usage P_0x1bf31_true_118_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_118_def P_0x1bf31_true_118_regions_def post: Q_0x1bf3b_118_def regionset: P_0x1bf31_true_118_regions_set_def)

definition P_0x1bf31_false_119 :: state_pred where
  \<open>P_0x1bf31_false_119 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_false_119_def[Ps]

definition P_0x1bf31_false_119_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_119_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_119_regions :: state_pred where
  \<open>P_0x1bf31_false_119_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_119_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_119 :: state_pred where
  \<open>Q_0x1bf3b_119 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_119_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_119[blocks]:
  assumes \<open>(P_0x1bf31_false_119 && P_0x1bf31_false_119_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 119 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_119 ?\<sigma> \<and> block_usage P_0x1bf31_false_119_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_119_def P_0x1bf31_false_119_regions_def post: Q_0x1bf3b_119_def regionset: P_0x1bf31_false_119_regions_set_def)

definition P_0x1bf3b_120 :: state_pred where
  \<open>P_0x1bf3b_120 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_120_def[Ps]

definition P_0x1bf3b_120_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_120_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_120_regions :: state_pred where
  \<open>P_0x1bf3b_120_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_120_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_120 :: state_pred where
  \<open>Q_0x1bf48_120 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_120_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_120[blocks]:
  assumes \<open>(P_0x1bf3b_120 && P_0x1bf3b_120_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 120 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_120 ?\<sigma> \<and> block_usage P_0x1bf3b_120_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_120_def P_0x1bf3b_120_regions_def post: Q_0x1bf48_120_def regionset: P_0x1bf3b_120_regions_set_def)

definition P_0x1bf48_121 :: state_pred where
  \<open>P_0x1bf48_121 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_121_def[Ps]

definition P_0x1bf48_121_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_121_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_121_regions :: state_pred where
  \<open>P_0x1bf48_121_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_121_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_121 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_121 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_121_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_121[blocks]:
  assumes \<open>(P_0x1bf48_121 && P_0x1bf48_121_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 121 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_121 ?\<sigma> \<and> block_usage P_0x1bf48_121_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_121_def P_0x1bf48_121_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_121_def regionset: P_0x1bf48_121_regions_set_def)

definition P_0x1bf4d_122 :: state_pred where
  \<open>P_0x1bf4d_122 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_122_def[Ps]

definition P_0x1bf4d_122_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_122_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_122_regions :: state_pred where
  \<open>P_0x1bf4d_122_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_122_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_122 :: state_pred where
  \<open>Q_0x1bf4f_122 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_122_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_122[blocks]:
  assumes \<open>(P_0x1bf4d_122 && P_0x1bf4d_122_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 122 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_122 ?\<sigma> \<and> block_usage P_0x1bf4d_122_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_122_def P_0x1bf4d_122_regions_def post: Q_0x1bf4f_122_def regionset: P_0x1bf4d_122_regions_set_def)

definition P_0x1bf4f_true_123 :: state_pred where
  \<open>P_0x1bf4f_true_123 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_123_def[Ps]

definition P_0x1bf4f_true_123_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_123_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_123_regions :: state_pred where
  \<open>P_0x1bf4f_true_123_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_123_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_123 :: state_pred where
  \<open>Q_0x1bdd2_123 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_123_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_123[blocks]:
  assumes \<open>(P_0x1bf4f_true_123 && P_0x1bf4f_true_123_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 123 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_123 ?\<sigma> \<and> block_usage P_0x1bf4f_true_123_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_123_def P_0x1bf4f_true_123_regions_def post: Q_0x1bdd2_123_def regionset: P_0x1bf4f_true_123_regions_set_def)

definition P_0x1bf4f_false_124 :: state_pred where
  \<open>P_0x1bf4f_false_124 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_124_def[Ps]

definition P_0x1bf4f_false_124_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_124_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_124_regions :: state_pred where
  \<open>P_0x1bf4f_false_124_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_124_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_124 :: state_pred where
  \<open>Q_0x1bdd2_124 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_124_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_124[blocks]:
  assumes \<open>(P_0x1bf4f_false_124 && P_0x1bf4f_false_124_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 124 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_124 ?\<sigma> \<and> block_usage P_0x1bf4f_false_124_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_124_def P_0x1bf4f_false_124_regions_def post: Q_0x1bdd2_124_def regionset: P_0x1bf4f_false_124_regions_set_def)

definition P_0x1bd72_false_125 :: state_pred where
  \<open>P_0x1bd72_false_125 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bd72_false_125_def[Ps]

definition P_0x1bd72_false_125_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_false_125_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bd72_false_125_regions :: state_pred where
  \<open>P_0x1bd72_false_125_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_false_125_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_125 :: state_pred where
  \<open>Q_0x1bee0_125 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bee0_125_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bd72_0x1bd74_125[blocks]:
  assumes \<open>(P_0x1bd72_false_125 && P_0x1bd72_false_125_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bd74 125 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_125 ?\<sigma> \<and> block_usage P_0x1bd72_false_125_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_false_125_def P_0x1bd72_false_125_regions_def post: Q_0x1bee0_125_def regionset: P_0x1bd72_false_125_regions_set_def)

definition P_0x1bee0_126 :: state_pred where
  \<open>P_0x1bee0_126 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bee0_126_def[Ps]

definition P_0x1bee0_126_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_126_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bee0_126_regions :: state_pred where
  \<open>P_0x1bee0_126_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_126_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_126 :: state_pred where
  \<open>Q_0x1bee6_126 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1bee6_126_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_126[blocks]:
  assumes \<open>(P_0x1bee0_126 && P_0x1bee0_126_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 126 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_126 ?\<sigma> \<and> block_usage P_0x1bee0_126_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_126_def P_0x1bee0_126_regions_def post: Q_0x1bee6_126_def regionset: P_0x1bee0_126_regions_set_def)

definition P_0x1bee6_true_127 :: state_pred where
  \<open>P_0x1bee6_true_127 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bee6_true_127_def[Ps]

definition P_0x1bee6_true_127_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_127_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bee6_true_127_regions :: state_pred where
  \<open>P_0x1bee6_true_127_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_127_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_127 :: state_pred where
  \<open>Q_0x1bdd2_127 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_127_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_127[blocks]:
  assumes \<open>(P_0x1bee6_true_127 && P_0x1bee6_true_127_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 127 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_127 ?\<sigma> \<and> block_usage P_0x1bee6_true_127_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_127_def P_0x1bee6_true_127_regions_def post: Q_0x1bdd2_127_def regionset: P_0x1bee6_true_127_regions_set_def)

definition P_0x1bee6_false_128 :: state_pred where
  \<open>P_0x1bee6_false_128 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = ucast ((((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1bee6_false_128_def[Ps]

definition P_0x1bee6_false_128_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_128_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bee6_false_128_regions :: state_pred where
  \<open>P_0x1bee6_false_128_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_128_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_128 :: state_pred where
  \<open>Q_0x1befd_128 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare Q_0x1befd_128_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_128[blocks]:
  assumes \<open>(P_0x1bee6_false_128 && P_0x1bee6_false_128_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 128 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_128 ?\<sigma> \<and> block_usage P_0x1bee6_false_128_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_128_def P_0x1bee6_false_128_regions_def post: Q_0x1befd_128_def regionset: P_0x1bee6_false_128_regions_set_def)

definition P_0x1befd_129 :: state_pred where
  \<open>P_0x1befd_129 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1beb9\<close>
declare P_0x1befd_129_def[Ps]

definition P_0x1befd_129_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_129_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_129_regions :: state_pred where
  \<open>P_0x1befd_129_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_129_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_129 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_129 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_129_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_129[blocks]:
  assumes \<open>(P_0x1befd_129 && P_0x1befd_129_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 129 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_129 ?\<sigma> \<and> block_usage P_0x1befd_129_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_129_def P_0x1befd_129_regions_def post: Q_raw_pread_aligned_addr_0x1befd_129_def regionset: P_0x1befd_129_regions_set_def)

definition P_0x1bf02_130 :: state_pred where
  \<open>P_0x1bf02_130 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_130_def[Ps]

definition P_0x1bf02_130_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_130_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_130_regions :: state_pred where
  \<open>P_0x1bf02_130_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_130_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_130 :: state_pred where
  \<open>Q_0x1bf04_130 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_130_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_130[blocks]:
  assumes \<open>(P_0x1bf02_130 && P_0x1bf02_130_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 130 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_130 ?\<sigma> \<and> block_usage P_0x1bf02_130_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_130_def P_0x1bf02_130_regions_def post: Q_0x1bf04_130_def regionset: P_0x1bf02_130_regions_set_def)

definition P_0x1bf04_true_131 :: state_pred where
  \<open>P_0x1bf04_true_131 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_131_def[Ps]

definition P_0x1bf04_true_131_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_131_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_131_regions :: state_pred where
  \<open>P_0x1bf04_true_131_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_131_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_131 :: state_pred where
  \<open>Q_0x1bdd2_131 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_131_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_131[blocks]:
  assumes \<open>(P_0x1bf04_true_131 && P_0x1bf04_true_131_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 131 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_131 ?\<sigma> \<and> block_usage P_0x1bf04_true_131_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_131_def P_0x1bf04_true_131_regions_def post: Q_0x1bdd2_131_def regionset: P_0x1bf04_true_131_regions_set_def)

definition P_0x1bf04_false_132 :: state_pred where
  \<open>P_0x1bf04_false_132 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_132_def[Ps]

definition P_0x1bf04_false_132_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_132_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_132_regions :: state_pred where
  \<open>P_0x1bf04_false_132_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_132_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_132 :: state_pred where
  \<open>Q_0x1bf12_132 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_132_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_132[blocks]:
  assumes \<open>(P_0x1bf04_false_132 && P_0x1bf04_false_132_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 132 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_132 ?\<sigma> \<and> block_usage P_0x1bf04_false_132_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_132_def P_0x1bf04_false_132_regions_def post: Q_0x1bf12_132_def regionset: P_0x1bf04_false_132_regions_set_def)

definition P_0x1bf12_true_133 :: state_pred where
  \<open>P_0x1bf12_true_133 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_133_def[Ps]

definition P_0x1bf12_true_133_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_133_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_133_regions :: state_pred where
  \<open>P_0x1bf12_true_133_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_133_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_133 :: state_pred where
  \<open>Q_0x1bfc8_133 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare Q_0x1bfc8_133_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_133[blocks]:
  assumes \<open>(P_0x1bf12_true_133 && P_0x1bf12_true_133_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 133 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_133 ?\<sigma> \<and> block_usage P_0x1bf12_true_133_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_133_def P_0x1bf12_true_133_regions_def post: Q_0x1bfc8_133_def regionset: P_0x1bf12_true_133_regions_set_def)

definition P_0x1bfc8_134 :: state_pred where
  \<open>P_0x1bfc8_134 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare P_0x1bfc8_134_def[Ps]

definition P_0x1bfc8_134_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_134_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_134_regions :: state_pred where
  \<open>P_0x1bfc8_134_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_134_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_134 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_134 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_134_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_134[blocks]:
  assumes \<open>(P_0x1bfc8_134 && P_0x1bfc8_134_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 134 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_134 ?\<sigma> \<and> block_usage P_0x1bfc8_134_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_134_def P_0x1bfc8_134_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_134_def regionset: P_0x1bfc8_134_regions_set_def)

definition P_0x1bfcb_135 :: state_pred where
  \<open>P_0x1bfcb_135 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare P_0x1bfcb_135_def[Ps]

definition P_0x1bfcb_135_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_135_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_135_regions :: state_pred where
  \<open>P_0x1bfcb_135_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_135_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_135 :: state_pred where
  \<open>Q_0x1bf37_135 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare Q_0x1bf37_135_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_135[blocks]:
  assumes \<open>(P_0x1bfcb_135 && P_0x1bfcb_135_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 135 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_135 ?\<sigma> \<and> block_usage P_0x1bfcb_135_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_135_def P_0x1bfcb_135_regions_def post: Q_0x1bf37_135_def regionset: P_0x1bfcb_135_regions_set_def)

definition P_0x1bf37_136 :: state_pred where
  \<open>P_0x1bf37_136 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),8]::64 word)\<close>
declare P_0x1bf37_136_def[Ps]

definition P_0x1bf37_136_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_136_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_136_regions :: state_pred where
  \<open>P_0x1bf37_136_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_136_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_136 :: state_pred where
  \<open>Q_0x1bf3b_136 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_136_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_136[blocks]:
  assumes \<open>(P_0x1bf37_136 && P_0x1bf37_136_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 136 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_136 ?\<sigma> \<and> block_usage P_0x1bf37_136_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_136_def P_0x1bf37_136_regions_def post: Q_0x1bf3b_136_def regionset: P_0x1bf37_136_regions_set_def)

definition P_0x1bf12_false_137 :: state_pred where
  \<open>P_0x1bf12_false_137 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_137_def[Ps]

definition P_0x1bf12_false_137_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_137_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_137_regions :: state_pred where
  \<open>P_0x1bf12_false_137_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_137_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_137 :: state_pred where
  \<open>Q_0x1bf1c_137 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_137_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_137[blocks]:
  assumes \<open>(P_0x1bf12_false_137 && P_0x1bf12_false_137_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 137 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_137 ?\<sigma> \<and> block_usage P_0x1bf12_false_137_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_137_def P_0x1bf12_false_137_regions_def post: Q_0x1bf1c_137_def regionset: P_0x1bf12_false_137_regions_set_def)

definition P_0x1bf1c_true_138 :: state_pred where
  \<open>P_0x1bf1c_true_138 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_138_def[Ps]

definition P_0x1bf1c_true_138_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_138_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), 4),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_138_regions :: state_pred where
  \<open>P_0x1bf1c_true_138_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_138_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_138 :: state_pred where
  \<open>Q_0x1bf3b_138 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_138_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_138[blocks]:
  assumes \<open>(P_0x1bf1c_true_138 && P_0x1bf1c_true_138_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 138 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_138 ?\<sigma> \<and> block_usage P_0x1bf1c_true_138_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_138_def P_0x1bf1c_true_138_regions_def post: Q_0x1bf3b_138_def regionset: P_0x1bf1c_true_138_regions_set_def)

definition P_0x1bf1c_false_139 :: state_pred where
  \<open>P_0x1bf1c_false_139 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_139_def[Ps]

definition P_0x1bf1c_false_139_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_139_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_139_regions :: state_pred where
  \<open>P_0x1bf1c_false_139_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_139_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_139 :: state_pred where
  \<open>Q_0x1bf25_139 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_139_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_139[blocks]:
  assumes \<open>(P_0x1bf1c_false_139 && P_0x1bf1c_false_139_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 139 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_139 ?\<sigma> \<and> block_usage P_0x1bf1c_false_139_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_139_def P_0x1bf1c_false_139_regions_def post: Q_0x1bf25_139_def regionset: P_0x1bf1c_false_139_regions_set_def)

definition P_0x1bf25_true_140 :: state_pred where
  \<open>P_0x1bf25_true_140 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_140_def[Ps]

definition P_0x1bf25_true_140_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_140_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_140_regions :: state_pred where
  \<open>P_0x1bf25_true_140_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_140_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_140 :: state_pred where
  \<open>Q_0x1bf3b_140 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_140_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_140[blocks]:
  assumes \<open>(P_0x1bf25_true_140 && P_0x1bf25_true_140_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 140 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_140 ?\<sigma> \<and> block_usage P_0x1bf25_true_140_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_140_def P_0x1bf25_true_140_regions_def post: Q_0x1bf3b_140_def regionset: P_0x1bf25_true_140_regions_set_def)

definition P_0x1bf25_false_141 :: state_pred where
  \<open>P_0x1bf25_false_141 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_141_def[Ps]

definition P_0x1bf25_false_141_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_141_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), Suc 0),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_141_regions :: state_pred where
  \<open>P_0x1bf25_false_141_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_141_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_141 :: state_pred where
  \<open>Q_0x1bf31_141 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word))\<close>
declare Q_0x1bf31_141_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_141[blocks]:
  assumes \<open>(P_0x1bf25_false_141 && P_0x1bf25_false_141_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 141 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_141 ?\<sigma> \<and> block_usage P_0x1bf25_false_141_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_141_def P_0x1bf25_false_141_regions_def post: Q_0x1bf31_141_def regionset: P_0x1bf25_false_141_regions_set_def)

definition P_0x1bf31_true_142 :: state_pred where
  \<open>P_0x1bf31_true_142 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word))\<close>
declare P_0x1bf31_true_142_def[Ps]

definition P_0x1bf31_true_142_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_142_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), Suc 0),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, ((((((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word))::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (15, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (16, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_142_regions :: state_pred where
  \<open>P_0x1bf31_true_142_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_142_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_142 :: state_pred where
  \<open>Q_0x1bf3b_142 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_142_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_142[blocks]:
  assumes \<open>(P_0x1bf31_true_142 && P_0x1bf31_true_142_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 142 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_142 ?\<sigma> \<and> block_usage P_0x1bf31_true_142_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_142_def P_0x1bf31_true_142_regions_def post: Q_0x1bf3b_142_def regionset: P_0x1bf31_true_142_regions_set_def)

definition P_0x1bf31_false_143 :: state_pred where
  \<open>P_0x1bf31_false_143 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)),1]::8 word))\<close>
declare P_0x1bf31_false_143_def[Ps]

definition P_0x1bf31_false_143_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_143_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)), Suc 0),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_143_regions :: state_pred where
  \<open>P_0x1bf31_false_143_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_143_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_143 :: state_pred where
  \<open>Q_0x1bf3b_143 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_143_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_143[blocks]:
  assumes \<open>(P_0x1bf31_false_143 && P_0x1bf31_false_143_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 143 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_143 ?\<sigma> \<and> block_usage P_0x1bf31_false_143_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_143_def P_0x1bf31_false_143_regions_def post: Q_0x1bf3b_143_def regionset: P_0x1bf31_false_143_regions_set_def)

definition P_0x1bf3b_144 :: state_pred where
  \<open>P_0x1bf3b_144 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_144_def[Ps]

definition P_0x1bf3b_144_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_144_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_144_regions :: state_pred where
  \<open>P_0x1bf3b_144_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_144_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_144 :: state_pred where
  \<open>Q_0x1bf48_144 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_144_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_144[blocks]:
  assumes \<open>(P_0x1bf3b_144 && P_0x1bf3b_144_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 144 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_144 ?\<sigma> \<and> block_usage P_0x1bf3b_144_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_144_def P_0x1bf3b_144_regions_def post: Q_0x1bf48_144_def regionset: P_0x1bf3b_144_regions_set_def)

definition P_0x1bf48_145 :: state_pred where
  \<open>P_0x1bf48_145 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_145_def[Ps]

definition P_0x1bf48_145_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_145_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_145_regions :: state_pred where
  \<open>P_0x1bf48_145_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_145_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_145 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_145 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_145_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_145[blocks]:
  assumes \<open>(P_0x1bf48_145 && P_0x1bf48_145_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 145 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_145 ?\<sigma> \<and> block_usage P_0x1bf48_145_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_145_def P_0x1bf48_145_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_145_def regionset: P_0x1bf48_145_regions_set_def)

definition P_0x1bf4d_146 :: state_pred where
  \<open>P_0x1bf4d_146 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_146_def[Ps]

definition P_0x1bf4d_146_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_146_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_146_regions :: state_pred where
  \<open>P_0x1bf4d_146_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_146_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_146 :: state_pred where
  \<open>Q_0x1bf4f_146 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_146_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_146[blocks]:
  assumes \<open>(P_0x1bf4d_146 && P_0x1bf4d_146_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 146 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_146 ?\<sigma> \<and> block_usage P_0x1bf4d_146_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_146_def P_0x1bf4d_146_regions_def post: Q_0x1bf4f_146_def regionset: P_0x1bf4d_146_regions_set_def)

definition P_0x1bf4f_true_147 :: state_pred where
  \<open>P_0x1bf4f_true_147 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_147_def[Ps]

definition P_0x1bf4f_true_147_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_147_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_147_regions :: state_pred where
  \<open>P_0x1bf4f_true_147_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_147_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_147 :: state_pred where
  \<open>Q_0x1bdd2_147 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_147_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_147[blocks]:
  assumes \<open>(P_0x1bf4f_true_147 && P_0x1bf4f_true_147_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 147 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_147 ?\<sigma> \<and> block_usage P_0x1bf4f_true_147_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_147_def P_0x1bf4f_true_147_regions_def post: Q_0x1bdd2_147_def regionset: P_0x1bf4f_true_147_regions_set_def)

definition P_0x1bf4f_false_148 :: state_pred where
  \<open>P_0x1bf4f_false_148 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = ((RSI\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R15 \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) - (if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) \<and> R14 \<sigma> = ((RDX\<^sub>0::64 word) + (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word))) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_148_def[Ps]

definition P_0x1bf4f_false_148_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_148_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_148_regions :: state_pred where
  \<open>P_0x1bf4f_false_148_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_148_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_148 :: state_pred where
  \<open>Q_0x1bdd2_148 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_148_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_148[blocks]:
  assumes \<open>(P_0x1bf4f_false_148 && P_0x1bf4f_false_148_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 148 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_148 ?\<sigma> \<and> block_usage P_0x1bf4f_false_148_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_148_def P_0x1bf4f_false_148_regions_def post: Q_0x1bdd2_148_def regionset: P_0x1bf4f_false_148_regions_set_def)

definition P_0x1bdd2_149 :: state_pred where
  \<open>P_0x1bdd2_149 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = ((RSI\<^sub>0::64 word) - (sextend (ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))) 32 64::64 word)) \<and> R8 \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) \<le>s ((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) then (\<langle>31,0\<rangle>RCX\<^sub>0::32 word) else (((0x200::32 word) - (((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff))::32 word)))) 32 64::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdd2_149_def[Ps]

definition P_0x1bdd2_149_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd2_149_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bdd2_149_regions :: state_pred where
  \<open>P_0x1bdd2_149_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd2_149_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_149 :: state_pred where
  \<open>Q_ret_address_149 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_149_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd2_0x1bde0_149[blocks]:
  assumes \<open>(P_0x1bdd2_149 && P_0x1bdd2_149_regions) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bde0 149 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_149 ?\<sigma> \<and> block_usage P_0x1bdd2_149_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd2_149_def P_0x1bdd2_149_regions_def post: Q_ret_address_149_def regionset: P_0x1bdd2_149_regions_set_def)

definition P_0x1bd5a_false_150 :: state_pred where
  \<open>P_0x1bd5a_false_150 \<sigma> \<equiv> RIP \<sigma> = 0x1bd5a \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd5a_false_150_def[Ps]

definition P_0x1bd5a_false_150_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd5a_false_150_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd5a_false_150_regions :: state_pred where
  \<open>P_0x1bd5a_false_150_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd5a_false_150_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd67_150 :: state_pred where
  \<open>Q_0x1bd67_150 \<sigma> \<equiv> RIP \<sigma> = 0x1bd67 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd67_150_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bd5a_0x1bd60_150[blocks]:
  assumes \<open>(P_0x1bd5a_false_150 && P_0x1bd5a_false_150_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bd60 150 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd67_150 ?\<sigma> \<and> block_usage P_0x1bd5a_false_150_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd5a_false_150_def P_0x1bd5a_false_150_regions_def post: Q_0x1bd67_150_def regionset: P_0x1bd5a_false_150_regions_set_def)

definition P_0x1bd67_true_151 :: state_pred where
  \<open>P_0x1bd67_true_151 \<sigma> \<equiv> RIP \<sigma> = 0x1bd67 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd67_true_151_def[Ps]

definition P_0x1bd67_true_151_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd67_true_151_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd67_true_151_regions :: state_pred where
  \<open>P_0x1bd67_true_151_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd67_true_151_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdef_151 :: state_pred where
  \<open>Q_0x1bdef_151 \<sigma> \<equiv> RIP \<sigma> = 0x1bdef \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdef_151_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bd67_0x1bde8_151[blocks]:
  assumes \<open>(P_0x1bd67_true_151 && P_0x1bd67_true_151_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bde8 151 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdef_151 ?\<sigma> \<and> block_usage P_0x1bd67_true_151_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd67_true_151_def P_0x1bd67_true_151_regions_def post: Q_0x1bdef_151_def regionset: P_0x1bd67_true_151_regions_set_def)

definition P_0x1bdef_true_152 :: state_pred where
  \<open>P_0x1bdef_true_152 \<sigma> \<equiv> RIP \<sigma> = 0x1bdef \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdef_true_152_def[Ps]

definition P_0x1bdef_true_152_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdef_true_152_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bdef_true_152_regions :: state_pred where
  \<open>P_0x1bdef_true_152_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdef_true_152_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd72_152 :: state_pred where
  \<open>Q_0x1bd72_152 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd72_152_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bdef_0x1bd6c_152[blocks]:
  assumes \<open>(P_0x1bdef_true_152 && P_0x1bdef_true_152_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bd6c 152 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd72_152 ?\<sigma> \<and> block_usage P_0x1bdef_true_152_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdef_true_152_def P_0x1bdef_true_152_regions_def post: Q_0x1bd72_152_def regionset: P_0x1bdef_true_152_regions_set_def)

definition P_0x1bd72_true_153 :: state_pred where
  \<open>P_0x1bd72_true_153 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd72_true_153_def[Ps]

definition P_0x1bd72_true_153_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_true_153_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd72_true_153_regions :: state_pred where
  \<open>P_0x1bd72_true_153_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_true_153_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_153 :: state_pred where
  \<open>Q_0x1bd9e_153 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_153_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd72_0x1bd72_153[blocks]:
  assumes \<open>(P_0x1bd72_true_153 && P_0x1bd72_true_153_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd72 153 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_153 ?\<sigma> \<and> block_usage P_0x1bd72_true_153_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_true_153_def P_0x1bd72_true_153_regions_def post: Q_0x1bd9e_153_def regionset: P_0x1bd72_true_153_regions_set_def)

definition P_0x1bd9e_154 :: state_pred where
  \<open>P_0x1bd9e_154 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd9e_154_def[Ps]

definition P_0x1bd9e_154_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd9e_154_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd9e_154_regions :: state_pred where
  \<open>P_0x1bd9e_154_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd9e_154_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdb6_154 :: state_pred where
  \<open>Q_0x1bdb6_154 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdb6_154_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bd9e_0x1bdb3_154[blocks]:
  assumes \<open>(P_0x1bd9e_154 && P_0x1bd9e_154_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x1bdb3 154 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdb6_154 ?\<sigma> \<and> block_usage P_0x1bd9e_154_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd9e_154_def P_0x1bd9e_154_regions_def post: Q_0x1bdb6_154_def regionset: P_0x1bd9e_154_regions_set_def)

definition P_0x1bdb6_155 :: state_pred where
  \<open>P_0x1bdb6_155 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdb6_155_def[Ps]

definition P_0x1bdb6_155_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdb6_155_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdb6_155_regions :: state_pred where
  \<open>P_0x1bdb6_155_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdb6_155_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_memcpy_addr_0x1bdb6_155 :: state_pred where
  \<open>Q_memcpy_addr_0x1bdb6_155 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = memcpy_addr \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_memcpy_addr_0x1bdb6_155_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdb6_0x1bdb6_155[blocks]:
  assumes \<open>(P_0x1bdb6_155 && P_0x1bdb6_155_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdb6 155 \<sigma> \<triangleq> ?\<sigma> \<and> Q_memcpy_addr_0x1bdb6_155 ?\<sigma> \<and> block_usage P_0x1bdb6_155_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdb6_155_def P_0x1bdb6_155_regions_def post: Q_memcpy_addr_0x1bdb6_155_def regionset: P_0x1bdb6_155_regions_set_def)

definition P_0x1bdbb_156 :: state_pred where
  \<open>P_0x1bdbb_156 \<sigma> \<equiv> RIP \<sigma> = 0x1bdbb \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdbb_156_def[Ps]

definition P_0x1bdbb_156_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdbb_156_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdbb_156_regions :: state_pred where
  \<open>P_0x1bdbb_156_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdbb_156_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdc9_156 :: state_pred where
  \<open>Q_0x1bdc9_156 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_0x1bdc9_156_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bdbb_0x1bdc6_156[blocks]:
  assumes \<open>(P_0x1bdbb_156 && P_0x1bdbb_156_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bdc6 156 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdc9_156 ?\<sigma> \<and> block_usage P_0x1bdbb_156_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdbb_156_def P_0x1bdbb_156_regions_def post: Q_0x1bdc9_156_def regionset: P_0x1bdbb_156_regions_set_def)

definition P_0x1bdc9_157 :: state_pred where
  \<open>P_0x1bdc9_157 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdc9_157_def[Ps]

definition P_0x1bdc9_157_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdc9_157_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdc9_157_regions :: state_pred where
  \<open>P_0x1bdc9_157_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdc9_157_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bdc9_157 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bdc9_157 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_raw_pwrite_aligned_addr_0x1bdc9_157_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdc9_0x1bdc9_157[blocks]:
  assumes \<open>(P_0x1bdc9_157 && P_0x1bdc9_157_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdc9 157 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bdc9_157 ?\<sigma> \<and> block_usage P_0x1bdc9_157_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdc9_157_def P_0x1bdc9_157_regions_def post: Q_raw_pwrite_aligned_addr_0x1bdc9_157_def regionset: P_0x1bdc9_157_regions_set_def)

definition P_0x1bdce_158 :: state_pred where
  \<open>P_0x1bdce_158 \<sigma> \<equiv> RIP \<sigma> = 0x1bdce \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdce_158_def[Ps]

definition P_0x1bdce_158_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdce_158_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdce_158_regions :: state_pred where
  \<open>P_0x1bdce_158_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdce_158_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd0_158 :: state_pred where
  \<open>Q_0x1bdd0_158 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_0x1bdd0_158_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdce_0x1bdce_158[blocks]:
  assumes \<open>(P_0x1bdce_158 && P_0x1bdce_158_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdce 158 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd0_158 ?\<sigma> \<and> block_usage P_0x1bdce_158_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdce_158_def P_0x1bdce_158_regions_def post: Q_0x1bdd0_158_def regionset: P_0x1bdce_158_regions_set_def)

definition P_0x1bdd0_true_159 :: state_pred where
  \<open>P_0x1bdd0_true_159 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_true_159_def[Ps]

definition P_0x1bdd0_true_159_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_true_159_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_true_159_regions :: state_pred where
  \<open>P_0x1bdd0_true_159_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_true_159_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd98_159 :: state_pred where
  \<open>Q_0x1bd98_159 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd98_159_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd0_0x1bd92_159[blocks]:
  assumes \<open>(P_0x1bdd0_true_159 && P_0x1bdd0_true_159_regions && !SF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bd92 159 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd98_159 ?\<sigma> \<and> block_usage P_0x1bdd0_true_159_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_true_159_def P_0x1bdd0_true_159_regions_def post: Q_0x1bd98_159_def regionset: P_0x1bdd0_true_159_regions_set_def)

definition P_0x1bd98_true_160 :: state_pred where
  \<open>P_0x1bd98_true_160 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_true_160_def[Ps]

definition P_0x1bd98_true_160_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_true_160_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_true_160_regions :: state_pred where
  \<open>P_0x1bd98_true_160_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_true_160_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_160 :: state_pred where
  \<open>Q_0x1bee0_160 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee0_160_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_160[blocks]:
  assumes \<open>(P_0x1bd98_true_160 && P_0x1bd98_true_160_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 160 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_160 ?\<sigma> \<and> block_usage P_0x1bd98_true_160_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_true_160_def P_0x1bd98_true_160_regions_def post: Q_0x1bee0_160_def regionset: P_0x1bd98_true_160_regions_set_def)

definition P_0x1bd98_false_161 :: state_pred where
  \<open>P_0x1bd98_false_161 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_false_161_def[Ps]

definition P_0x1bd98_false_161_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_false_161_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_false_161_regions :: state_pred where
  \<open>P_0x1bd98_false_161_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_false_161_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_161 :: state_pred where
  \<open>Q_0x1bd9e_161 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_161_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_161[blocks]:
  assumes \<open>(P_0x1bd98_false_161 && P_0x1bd98_false_161_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 161 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_161 ?\<sigma> \<and> block_usage P_0x1bd98_false_161_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_false_161_def P_0x1bd98_false_161_regions_def post: Q_0x1bd9e_161_def regionset: P_0x1bd98_false_161_regions_set_def)

definition P_0x1bdd0_false_162 :: state_pred where
  \<open>P_0x1bdd0_false_162 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_false_162_def[Ps]

definition P_0x1bdd0_false_162_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_false_162_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_false_162_regions :: state_pred where
  \<open>P_0x1bdd0_false_162_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_false_162_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_162 :: state_pred where
  \<open>Q_0x1bdd2_162 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_162_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdd0_0x1bdd0_162[blocks]:
  assumes \<open>(P_0x1bdd0_false_162 && P_0x1bdd0_false_162_regions && ! !SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdd0 162 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_162 ?\<sigma> \<and> block_usage P_0x1bdd0_false_162_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_false_162_def P_0x1bdd0_false_162_regions_def post: Q_0x1bdd2_162_def regionset: P_0x1bdd0_false_162_regions_set_def)

definition P_0x1bee0_163 :: state_pred where
  \<open>P_0x1bee0_163 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee0_163_def[Ps]

definition P_0x1bee0_163_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_163_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee0_163_regions :: state_pred where
  \<open>P_0x1bee0_163_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_163_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_163 :: state_pred where
  \<open>Q_0x1bee6_163 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee6_163_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_163[blocks]:
  assumes \<open>(P_0x1bee0_163 && P_0x1bee0_163_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 163 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_163 ?\<sigma> \<and> block_usage P_0x1bee0_163_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_163_def P_0x1bee0_163_regions_def post: Q_0x1bee6_163_def regionset: P_0x1bee0_163_regions_set_def)

definition P_0x1bee6_true_164 :: state_pred where
  \<open>P_0x1bee6_true_164 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_true_164_def[Ps]

definition P_0x1bee6_true_164_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_164_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_true_164_regions :: state_pred where
  \<open>P_0x1bee6_true_164_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_164_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_164 :: state_pred where
  \<open>Q_0x1bdd2_164 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_164_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_164[blocks]:
  assumes \<open>(P_0x1bee6_true_164 && P_0x1bee6_true_164_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 164 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_164 ?\<sigma> \<and> block_usage P_0x1bee6_true_164_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_164_def P_0x1bee6_true_164_regions_def post: Q_0x1bdd2_164_def regionset: P_0x1bee6_true_164_regions_set_def)

definition P_0x1bee6_false_165 :: state_pred where
  \<open>P_0x1bee6_false_165 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_false_165_def[Ps]

definition P_0x1bee6_false_165_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_165_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_false_165_regions :: state_pred where
  \<open>P_0x1bee6_false_165_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_165_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_165 :: state_pred where
  \<open>Q_0x1befd_165 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1befd_165_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_165[blocks]:
  assumes \<open>(P_0x1bee6_false_165 && P_0x1bee6_false_165_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 165 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_165 ?\<sigma> \<and> block_usage P_0x1bee6_false_165_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_165_def P_0x1bee6_false_165_regions_def post: Q_0x1befd_165_def regionset: P_0x1bee6_false_165_regions_set_def)

definition P_0x1befd_166 :: state_pred where
  \<open>P_0x1befd_166 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1befd_166_def[Ps]

definition P_0x1befd_166_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_166_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_166_regions :: state_pred where
  \<open>P_0x1befd_166_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_166_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_166 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_166 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_166_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_166[blocks]:
  assumes \<open>(P_0x1befd_166 && P_0x1befd_166_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 166 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_166 ?\<sigma> \<and> block_usage P_0x1befd_166_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_166_def P_0x1befd_166_regions_def post: Q_raw_pread_aligned_addr_0x1befd_166_def regionset: P_0x1befd_166_regions_set_def)

definition P_0x1bf02_167 :: state_pred where
  \<open>P_0x1bf02_167 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_167_def[Ps]

definition P_0x1bf02_167_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_167_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_167_regions :: state_pred where
  \<open>P_0x1bf02_167_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_167_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_167 :: state_pred where
  \<open>Q_0x1bf04_167 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_167_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_167[blocks]:
  assumes \<open>(P_0x1bf02_167 && P_0x1bf02_167_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 167 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_167 ?\<sigma> \<and> block_usage P_0x1bf02_167_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_167_def P_0x1bf02_167_regions_def post: Q_0x1bf04_167_def regionset: P_0x1bf02_167_regions_set_def)

definition P_0x1bf04_true_168 :: state_pred where
  \<open>P_0x1bf04_true_168 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_168_def[Ps]

definition P_0x1bf04_true_168_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_168_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_168_regions :: state_pred where
  \<open>P_0x1bf04_true_168_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_168_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_168 :: state_pred where
  \<open>Q_0x1bdd2_168 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_168_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_168[blocks]:
  assumes \<open>(P_0x1bf04_true_168 && P_0x1bf04_true_168_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 168 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_168 ?\<sigma> \<and> block_usage P_0x1bf04_true_168_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_168_def P_0x1bf04_true_168_regions_def post: Q_0x1bdd2_168_def regionset: P_0x1bf04_true_168_regions_set_def)

definition P_0x1bf04_false_169 :: state_pred where
  \<open>P_0x1bf04_false_169 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_169_def[Ps]

definition P_0x1bf04_false_169_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_169_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_169_regions :: state_pred where
  \<open>P_0x1bf04_false_169_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_169_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_169 :: state_pred where
  \<open>Q_0x1bf12_169 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_169_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_169[blocks]:
  assumes \<open>(P_0x1bf04_false_169 && P_0x1bf04_false_169_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 169 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_169 ?\<sigma> \<and> block_usage P_0x1bf04_false_169_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_169_def P_0x1bf04_false_169_regions_def post: Q_0x1bf12_169_def regionset: P_0x1bf04_false_169_regions_set_def)

definition P_0x1bf12_true_170 :: state_pred where
  \<open>P_0x1bf12_true_170 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_170_def[Ps]

definition P_0x1bf12_true_170_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_170_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_170_regions :: state_pred where
  \<open>P_0x1bf12_true_170_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_170_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_170 :: state_pred where
  \<open>Q_0x1bfc8_170 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bfc8_170_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_170[blocks]:
  assumes \<open>(P_0x1bf12_true_170 && P_0x1bf12_true_170_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 170 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_170 ?\<sigma> \<and> block_usage P_0x1bf12_true_170_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_170_def P_0x1bf12_true_170_regions_def post: Q_0x1bfc8_170_def regionset: P_0x1bf12_true_170_regions_set_def)

definition P_0x1bfc8_171 :: state_pred where
  \<open>P_0x1bfc8_171 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfc8_171_def[Ps]

definition P_0x1bfc8_171_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_171_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_171_regions :: state_pred where
  \<open>P_0x1bfc8_171_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_171_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_171 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_171 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_171_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_171[blocks]:
  assumes \<open>(P_0x1bfc8_171 && P_0x1bfc8_171_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 171 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_171 ?\<sigma> \<and> block_usage P_0x1bfc8_171_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_171_def P_0x1bfc8_171_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_171_def regionset: P_0x1bfc8_171_regions_set_def)

definition P_0x1bfcb_172 :: state_pred where
  \<open>P_0x1bfcb_172 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfcb_172_def[Ps]

definition P_0x1bfcb_172_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_172_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_172_regions :: state_pred where
  \<open>P_0x1bfcb_172_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_172_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_172 :: state_pred where
  \<open>Q_0x1bf37_172 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bf37_172_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_172[blocks]:
  assumes \<open>(P_0x1bfcb_172 && P_0x1bfcb_172_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 172 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_172 ?\<sigma> \<and> block_usage P_0x1bfcb_172_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_172_def P_0x1bfcb_172_regions_def post: Q_0x1bf37_172_def regionset: P_0x1bfcb_172_regions_set_def)

definition P_0x1bf37_173 :: state_pred where
  \<open>P_0x1bf37_173 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bf37_173_def[Ps]

definition P_0x1bf37_173_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_173_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_173_regions :: state_pred where
  \<open>P_0x1bf37_173_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_173_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_173 :: state_pred where
  \<open>Q_0x1bf3b_173 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_173_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_173[blocks]:
  assumes \<open>(P_0x1bf37_173 && P_0x1bf37_173_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 173 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_173 ?\<sigma> \<and> block_usage P_0x1bf37_173_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_173_def P_0x1bf37_173_regions_def post: Q_0x1bf3b_173_def regionset: P_0x1bf37_173_regions_set_def)

definition P_0x1bf12_false_174 :: state_pred where
  \<open>P_0x1bf12_false_174 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_174_def[Ps]

definition P_0x1bf12_false_174_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_174_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_174_regions :: state_pred where
  \<open>P_0x1bf12_false_174_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_174_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_174 :: state_pred where
  \<open>Q_0x1bf1c_174 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_174_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_174[blocks]:
  assumes \<open>(P_0x1bf12_false_174 && P_0x1bf12_false_174_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 174 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_174 ?\<sigma> \<and> block_usage P_0x1bf12_false_174_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_174_def P_0x1bf12_false_174_regions_def post: Q_0x1bf1c_174_def regionset: P_0x1bf12_false_174_regions_set_def)

definition P_0x1bf1c_true_175 :: state_pred where
  \<open>P_0x1bf1c_true_175 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_175_def[Ps]

definition P_0x1bf1c_true_175_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_175_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_175_regions :: state_pred where
  \<open>P_0x1bf1c_true_175_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_175_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_175 :: state_pred where
  \<open>Q_0x1bf3b_175 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_175_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_175[blocks]:
  assumes \<open>(P_0x1bf1c_true_175 && P_0x1bf1c_true_175_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 175 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_175 ?\<sigma> \<and> block_usage P_0x1bf1c_true_175_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_175_def P_0x1bf1c_true_175_regions_def post: Q_0x1bf3b_175_def regionset: P_0x1bf1c_true_175_regions_set_def)

definition P_0x1bf1c_false_176 :: state_pred where
  \<open>P_0x1bf1c_false_176 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_176_def[Ps]

definition P_0x1bf1c_false_176_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_176_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_176_regions :: state_pred where
  \<open>P_0x1bf1c_false_176_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_176_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_176 :: state_pred where
  \<open>Q_0x1bf25_176 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_176_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_176[blocks]:
  assumes \<open>(P_0x1bf1c_false_176 && P_0x1bf1c_false_176_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 176 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_176 ?\<sigma> \<and> block_usage P_0x1bf1c_false_176_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_176_def P_0x1bf1c_false_176_regions_def post: Q_0x1bf25_176_def regionset: P_0x1bf1c_false_176_regions_set_def)

definition P_0x1bf25_true_177 :: state_pred where
  \<open>P_0x1bf25_true_177 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_177_def[Ps]

definition P_0x1bf25_true_177_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_177_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_177_regions :: state_pred where
  \<open>P_0x1bf25_true_177_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_177_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_177 :: state_pred where
  \<open>Q_0x1bf3b_177 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_177_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_177[blocks]:
  assumes \<open>(P_0x1bf25_true_177 && P_0x1bf25_true_177_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 177 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_177 ?\<sigma> \<and> block_usage P_0x1bf25_true_177_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_177_def P_0x1bf25_true_177_regions_def post: Q_0x1bf3b_177_def regionset: P_0x1bf25_true_177_regions_set_def)

definition P_0x1bf25_false_178 :: state_pred where
  \<open>P_0x1bf25_false_178 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_178_def[Ps]

definition P_0x1bf25_false_178_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_178_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_178_regions :: state_pred where
  \<open>P_0x1bf25_false_178_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_178_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_178 :: state_pred where
  \<open>Q_0x1bf31_178 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare Q_0x1bf31_178_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_178[blocks]:
  assumes \<open>(P_0x1bf25_false_178 && P_0x1bf25_false_178_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 178 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_178 ?\<sigma> \<and> block_usage P_0x1bf25_false_178_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_178_def P_0x1bf25_false_178_regions_def post: Q_0x1bf31_178_def regionset: P_0x1bf25_false_178_regions_set_def)

definition P_0x1bf31_true_179 :: state_pred where
  \<open>P_0x1bf31_true_179 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_true_179_def[Ps]

definition P_0x1bf31_true_179_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_179_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_179_regions :: state_pred where
  \<open>P_0x1bf31_true_179_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_179_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_179 :: state_pred where
  \<open>Q_0x1bf3b_179 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_179_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_179[blocks]:
  assumes \<open>(P_0x1bf31_true_179 && P_0x1bf31_true_179_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 179 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_179 ?\<sigma> \<and> block_usage P_0x1bf31_true_179_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_179_def P_0x1bf31_true_179_regions_def post: Q_0x1bf3b_179_def regionset: P_0x1bf31_true_179_regions_set_def)

definition P_0x1bf31_false_180 :: state_pred where
  \<open>P_0x1bf31_false_180 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_false_180_def[Ps]

definition P_0x1bf31_false_180_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_180_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_180_regions :: state_pred where
  \<open>P_0x1bf31_false_180_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_180_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_180 :: state_pred where
  \<open>Q_0x1bf3b_180 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_180_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_180[blocks]:
  assumes \<open>(P_0x1bf31_false_180 && P_0x1bf31_false_180_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 180 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_180 ?\<sigma> \<and> block_usage P_0x1bf31_false_180_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_180_def P_0x1bf31_false_180_regions_def post: Q_0x1bf3b_180_def regionset: P_0x1bf31_false_180_regions_set_def)

definition P_0x1bf3b_181 :: state_pred where
  \<open>P_0x1bf3b_181 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_181_def[Ps]

definition P_0x1bf3b_181_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_181_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_181_regions :: state_pred where
  \<open>P_0x1bf3b_181_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_181_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_181 :: state_pred where
  \<open>Q_0x1bf48_181 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_181_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_181[blocks]:
  assumes \<open>(P_0x1bf3b_181 && P_0x1bf3b_181_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 181 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_181 ?\<sigma> \<and> block_usage P_0x1bf3b_181_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_181_def P_0x1bf3b_181_regions_def post: Q_0x1bf48_181_def regionset: P_0x1bf3b_181_regions_set_def)

definition P_0x1bf48_182 :: state_pred where
  \<open>P_0x1bf48_182 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_182_def[Ps]

definition P_0x1bf48_182_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_182_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_182_regions :: state_pred where
  \<open>P_0x1bf48_182_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_182_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_182 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_182 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_182_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_182[blocks]:
  assumes \<open>(P_0x1bf48_182 && P_0x1bf48_182_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 182 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_182 ?\<sigma> \<and> block_usage P_0x1bf48_182_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_182_def P_0x1bf48_182_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_182_def regionset: P_0x1bf48_182_regions_set_def)

definition P_0x1bf4d_183 :: state_pred where
  \<open>P_0x1bf4d_183 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_183_def[Ps]

definition P_0x1bf4d_183_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_183_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_183_regions :: state_pred where
  \<open>P_0x1bf4d_183_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_183_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_183 :: state_pred where
  \<open>Q_0x1bf4f_183 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_183_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_183[blocks]:
  assumes \<open>(P_0x1bf4d_183 && P_0x1bf4d_183_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 183 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_183 ?\<sigma> \<and> block_usage P_0x1bf4d_183_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_183_def P_0x1bf4d_183_regions_def post: Q_0x1bf4f_183_def regionset: P_0x1bf4d_183_regions_set_def)

definition P_0x1bf4f_true_184 :: state_pred where
  \<open>P_0x1bf4f_true_184 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_184_def[Ps]

definition P_0x1bf4f_true_184_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_184_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_184_regions :: state_pred where
  \<open>P_0x1bf4f_true_184_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_184_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_184 :: state_pred where
  \<open>Q_0x1bdd2_184 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_184_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_184[blocks]:
  assumes \<open>(P_0x1bf4f_true_184 && P_0x1bf4f_true_184_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 184 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_184 ?\<sigma> \<and> block_usage P_0x1bf4f_true_184_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_184_def P_0x1bf4f_true_184_regions_def post: Q_0x1bdd2_184_def regionset: P_0x1bf4f_true_184_regions_set_def)

definition P_0x1bf4f_false_185 :: state_pred where
  \<open>P_0x1bf4f_false_185 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_185_def[Ps]

definition P_0x1bf4f_false_185_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_185_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_185_regions :: state_pred where
  \<open>P_0x1bf4f_false_185_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_185_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_185 :: state_pred where
  \<open>Q_0x1bdd2_185 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_185_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_185[blocks]:
  assumes \<open>(P_0x1bf4f_false_185 && P_0x1bf4f_false_185_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 185 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_185 ?\<sigma> \<and> block_usage P_0x1bf4f_false_185_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_185_def P_0x1bf4f_false_185_regions_def post: Q_0x1bdd2_185_def regionset: P_0x1bf4f_false_185_regions_set_def)

definition P_0x1bd72_false_186 :: state_pred where
  \<open>P_0x1bd72_false_186 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd72_false_186_def[Ps]

definition P_0x1bd72_false_186_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_false_186_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd72_false_186_regions :: state_pred where
  \<open>P_0x1bd72_false_186_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_false_186_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_186 :: state_pred where
  \<open>Q_0x1bee0_186 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee0_186_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bd72_0x1bd74_186[blocks]:
  assumes \<open>(P_0x1bd72_false_186 && P_0x1bd72_false_186_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bd74 186 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_186 ?\<sigma> \<and> block_usage P_0x1bd72_false_186_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_false_186_def P_0x1bd72_false_186_regions_def post: Q_0x1bee0_186_def regionset: P_0x1bd72_false_186_regions_set_def)

definition P_0x1bee0_187 :: state_pred where
  \<open>P_0x1bee0_187 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee0_187_def[Ps]

definition P_0x1bee0_187_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_187_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee0_187_regions :: state_pred where
  \<open>P_0x1bee0_187_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_187_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_187 :: state_pred where
  \<open>Q_0x1bee6_187 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee6_187_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_187[blocks]:
  assumes \<open>(P_0x1bee0_187 && P_0x1bee0_187_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 187 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_187 ?\<sigma> \<and> block_usage P_0x1bee0_187_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_187_def P_0x1bee0_187_regions_def post: Q_0x1bee6_187_def regionset: P_0x1bee0_187_regions_set_def)

definition P_0x1bee6_true_188 :: state_pred where
  \<open>P_0x1bee6_true_188 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_true_188_def[Ps]

definition P_0x1bee6_true_188_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_188_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_true_188_regions :: state_pred where
  \<open>P_0x1bee6_true_188_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_188_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_188 :: state_pred where
  \<open>Q_0x1bdd2_188 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_188_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_188[blocks]:
  assumes \<open>(P_0x1bee6_true_188 && P_0x1bee6_true_188_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 188 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_188 ?\<sigma> \<and> block_usage P_0x1bee6_true_188_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_188_def P_0x1bee6_true_188_regions_def post: Q_0x1bdd2_188_def regionset: P_0x1bee6_true_188_regions_set_def)

definition P_0x1bee6_false_189 :: state_pred where
  \<open>P_0x1bee6_false_189 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_false_189_def[Ps]

definition P_0x1bee6_false_189_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_189_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_false_189_regions :: state_pred where
  \<open>P_0x1bee6_false_189_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_189_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_189 :: state_pred where
  \<open>Q_0x1befd_189 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1befd_189_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_189[blocks]:
  assumes \<open>(P_0x1bee6_false_189 && P_0x1bee6_false_189_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 189 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_189 ?\<sigma> \<and> block_usage P_0x1bee6_false_189_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_189_def P_0x1bee6_false_189_regions_def post: Q_0x1befd_189_def regionset: P_0x1bee6_false_189_regions_set_def)

definition P_0x1befd_190 :: state_pred where
  \<open>P_0x1befd_190 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1befd_190_def[Ps]

definition P_0x1befd_190_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_190_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_190_regions :: state_pred where
  \<open>P_0x1befd_190_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_190_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_190 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_190 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_190_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_190[blocks]:
  assumes \<open>(P_0x1befd_190 && P_0x1befd_190_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 190 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_190 ?\<sigma> \<and> block_usage P_0x1befd_190_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_190_def P_0x1befd_190_regions_def post: Q_raw_pread_aligned_addr_0x1befd_190_def regionset: P_0x1befd_190_regions_set_def)

definition P_0x1bf02_191 :: state_pred where
  \<open>P_0x1bf02_191 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_191_def[Ps]

definition P_0x1bf02_191_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_191_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_191_regions :: state_pred where
  \<open>P_0x1bf02_191_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_191_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_191 :: state_pred where
  \<open>Q_0x1bf04_191 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_191_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_191[blocks]:
  assumes \<open>(P_0x1bf02_191 && P_0x1bf02_191_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 191 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_191 ?\<sigma> \<and> block_usage P_0x1bf02_191_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_191_def P_0x1bf02_191_regions_def post: Q_0x1bf04_191_def regionset: P_0x1bf02_191_regions_set_def)

definition P_0x1bf04_true_192 :: state_pred where
  \<open>P_0x1bf04_true_192 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_192_def[Ps]

definition P_0x1bf04_true_192_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_192_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_192_regions :: state_pred where
  \<open>P_0x1bf04_true_192_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_192_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_192 :: state_pred where
  \<open>Q_0x1bdd2_192 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_192_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_192[blocks]:
  assumes \<open>(P_0x1bf04_true_192 && P_0x1bf04_true_192_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 192 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_192 ?\<sigma> \<and> block_usage P_0x1bf04_true_192_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_192_def P_0x1bf04_true_192_regions_def post: Q_0x1bdd2_192_def regionset: P_0x1bf04_true_192_regions_set_def)

definition P_0x1bf04_false_193 :: state_pred where
  \<open>P_0x1bf04_false_193 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_193_def[Ps]

definition P_0x1bf04_false_193_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_193_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_193_regions :: state_pred where
  \<open>P_0x1bf04_false_193_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_193_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_193 :: state_pred where
  \<open>Q_0x1bf12_193 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_193_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_193[blocks]:
  assumes \<open>(P_0x1bf04_false_193 && P_0x1bf04_false_193_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 193 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_193 ?\<sigma> \<and> block_usage P_0x1bf04_false_193_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_193_def P_0x1bf04_false_193_regions_def post: Q_0x1bf12_193_def regionset: P_0x1bf04_false_193_regions_set_def)

definition P_0x1bf12_true_194 :: state_pred where
  \<open>P_0x1bf12_true_194 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_194_def[Ps]

definition P_0x1bf12_true_194_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_194_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_194_regions :: state_pred where
  \<open>P_0x1bf12_true_194_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_194_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_194 :: state_pred where
  \<open>Q_0x1bfc8_194 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare Q_0x1bfc8_194_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_194[blocks]:
  assumes \<open>(P_0x1bf12_true_194 && P_0x1bf12_true_194_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 194 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_194 ?\<sigma> \<and> block_usage P_0x1bf12_true_194_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_194_def P_0x1bf12_true_194_regions_def post: Q_0x1bfc8_194_def regionset: P_0x1bf12_true_194_regions_set_def)

definition P_0x1bfc8_195 :: state_pred where
  \<open>P_0x1bfc8_195 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare P_0x1bfc8_195_def[Ps]

definition P_0x1bfc8_195_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_195_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_195_regions :: state_pred where
  \<open>P_0x1bfc8_195_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_195_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_195 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_195 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_195_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_195[blocks]:
  assumes \<open>(P_0x1bfc8_195 && P_0x1bfc8_195_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 195 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_195 ?\<sigma> \<and> block_usage P_0x1bfc8_195_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_195_def P_0x1bfc8_195_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_195_def regionset: P_0x1bfc8_195_regions_set_def)

definition P_0x1bfcb_196 :: state_pred where
  \<open>P_0x1bfcb_196 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare P_0x1bfcb_196_def[Ps]

definition P_0x1bfcb_196_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_196_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_196_regions :: state_pred where
  \<open>P_0x1bfcb_196_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_196_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_196 :: state_pred where
  \<open>Q_0x1bf37_196 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare Q_0x1bf37_196_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_196[blocks]:
  assumes \<open>(P_0x1bfcb_196 && P_0x1bfcb_196_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 196 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_196 ?\<sigma> \<and> block_usage P_0x1bfcb_196_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_196_def P_0x1bfcb_196_regions_def post: Q_0x1bf37_196_def regionset: P_0x1bfcb_196_regions_set_def)

definition P_0x1bf37_197 :: state_pred where
  \<open>P_0x1bf37_197 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare P_0x1bf37_197_def[Ps]

definition P_0x1bf37_197_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_197_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_197_regions :: state_pred where
  \<open>P_0x1bf37_197_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_197_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_197 :: state_pred where
  \<open>Q_0x1bf3b_197 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_197_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_197[blocks]:
  assumes \<open>(P_0x1bf37_197 && P_0x1bf37_197_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 197 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_197 ?\<sigma> \<and> block_usage P_0x1bf37_197_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_197_def P_0x1bf37_197_regions_def post: Q_0x1bf3b_197_def regionset: P_0x1bf37_197_regions_set_def)

definition P_0x1bf12_false_198 :: state_pred where
  \<open>P_0x1bf12_false_198 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_198_def[Ps]

definition P_0x1bf12_false_198_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_198_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_198_regions :: state_pred where
  \<open>P_0x1bf12_false_198_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_198_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_198 :: state_pred where
  \<open>Q_0x1bf1c_198 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_198_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_198[blocks]:
  assumes \<open>(P_0x1bf12_false_198 && P_0x1bf12_false_198_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 198 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_198 ?\<sigma> \<and> block_usage P_0x1bf12_false_198_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_198_def P_0x1bf12_false_198_regions_def post: Q_0x1bf1c_198_def regionset: P_0x1bf12_false_198_regions_set_def)

definition P_0x1bf1c_true_199 :: state_pred where
  \<open>P_0x1bf1c_true_199 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_199_def[Ps]

definition P_0x1bf1c_true_199_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_199_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_199_regions :: state_pred where
  \<open>P_0x1bf1c_true_199_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_199_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_199 :: state_pred where
  \<open>Q_0x1bf3b_199 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_199_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_199[blocks]:
  assumes \<open>(P_0x1bf1c_true_199 && P_0x1bf1c_true_199_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 199 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_199 ?\<sigma> \<and> block_usage P_0x1bf1c_true_199_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_199_def P_0x1bf1c_true_199_regions_def post: Q_0x1bf3b_199_def regionset: P_0x1bf1c_true_199_regions_set_def)

definition P_0x1bf1c_false_200 :: state_pred where
  \<open>P_0x1bf1c_false_200 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_200_def[Ps]

definition P_0x1bf1c_false_200_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_200_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_200_regions :: state_pred where
  \<open>P_0x1bf1c_false_200_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_200_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_200 :: state_pred where
  \<open>Q_0x1bf25_200 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_200_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_200[blocks]:
  assumes \<open>(P_0x1bf1c_false_200 && P_0x1bf1c_false_200_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 200 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_200 ?\<sigma> \<and> block_usage P_0x1bf1c_false_200_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_200_def P_0x1bf1c_false_200_regions_def post: Q_0x1bf25_200_def regionset: P_0x1bf1c_false_200_regions_set_def)

definition P_0x1bf25_true_201 :: state_pred where
  \<open>P_0x1bf25_true_201 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_201_def[Ps]

definition P_0x1bf25_true_201_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_201_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_201_regions :: state_pred where
  \<open>P_0x1bf25_true_201_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_201_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_201 :: state_pred where
  \<open>Q_0x1bf3b_201 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_201_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_201[blocks]:
  assumes \<open>(P_0x1bf25_true_201 && P_0x1bf25_true_201_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 201 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_201 ?\<sigma> \<and> block_usage P_0x1bf25_true_201_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_201_def P_0x1bf25_true_201_regions_def post: Q_0x1bf3b_201_def regionset: P_0x1bf25_true_201_regions_set_def)

definition P_0x1bf25_false_202 :: state_pred where
  \<open>P_0x1bf25_false_202 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_202_def[Ps]

definition P_0x1bf25_false_202_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_202_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_202_regions :: state_pred where
  \<open>P_0x1bf25_false_202_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_202_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_202 :: state_pred where
  \<open>Q_0x1bf31_202 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word))\<close>
declare Q_0x1bf31_202_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_202[blocks]:
  assumes \<open>(P_0x1bf25_false_202 && P_0x1bf25_false_202_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 202 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_202 ?\<sigma> \<and> block_usage P_0x1bf25_false_202_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_202_def P_0x1bf25_false_202_regions_def post: Q_0x1bf31_202_def regionset: P_0x1bf25_false_202_regions_set_def)

definition P_0x1bf31_true_203 :: state_pred where
  \<open>P_0x1bf31_true_203 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word))\<close>
declare P_0x1bf31_true_203_def[Ps]

definition P_0x1bf31_true_203_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_203_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_203_regions :: state_pred where
  \<open>P_0x1bf31_true_203_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_203_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_203 :: state_pred where
  \<open>Q_0x1bf3b_203 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_203_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_203[blocks]:
  assumes \<open>(P_0x1bf31_true_203 && P_0x1bf31_true_203_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 203 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_203 ?\<sigma> \<and> block_usage P_0x1bf31_true_203_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_203_def P_0x1bf31_true_203_regions_def post: Q_0x1bf3b_203_def regionset: P_0x1bf31_true_203_regions_set_def)

definition P_0x1bf31_false_204 :: state_pred where
  \<open>P_0x1bf31_false_204 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word))\<close>
declare P_0x1bf31_false_204_def[Ps]

definition P_0x1bf31_false_204_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_204_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_204_regions :: state_pred where
  \<open>P_0x1bf31_false_204_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_204_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_204 :: state_pred where
  \<open>Q_0x1bf3b_204 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_204_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_204[blocks]:
  assumes \<open>(P_0x1bf31_false_204 && P_0x1bf31_false_204_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 204 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_204 ?\<sigma> \<and> block_usage P_0x1bf31_false_204_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_204_def P_0x1bf31_false_204_regions_def post: Q_0x1bf3b_204_def regionset: P_0x1bf31_false_204_regions_set_def)

definition P_0x1bf3b_205 :: state_pred where
  \<open>P_0x1bf3b_205 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_205_def[Ps]

definition P_0x1bf3b_205_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_205_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_205_regions :: state_pred where
  \<open>P_0x1bf3b_205_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_205_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_205 :: state_pred where
  \<open>Q_0x1bf48_205 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_205_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_205[blocks]:
  assumes \<open>(P_0x1bf3b_205 && P_0x1bf3b_205_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 205 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_205 ?\<sigma> \<and> block_usage P_0x1bf3b_205_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_205_def P_0x1bf3b_205_regions_def post: Q_0x1bf48_205_def regionset: P_0x1bf3b_205_regions_set_def)

definition P_0x1bf48_206 :: state_pred where
  \<open>P_0x1bf48_206 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_206_def[Ps]

definition P_0x1bf48_206_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_206_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_206_regions :: state_pred where
  \<open>P_0x1bf48_206_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_206_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_206 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_206 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_206_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_206[blocks]:
  assumes \<open>(P_0x1bf48_206 && P_0x1bf48_206_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 206 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_206 ?\<sigma> \<and> block_usage P_0x1bf48_206_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_206_def P_0x1bf48_206_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_206_def regionset: P_0x1bf48_206_regions_set_def)

definition P_0x1bf4d_207 :: state_pred where
  \<open>P_0x1bf4d_207 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_207_def[Ps]

definition P_0x1bf4d_207_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_207_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_207_regions :: state_pred where
  \<open>P_0x1bf4d_207_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_207_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_207 :: state_pred where
  \<open>Q_0x1bf4f_207 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_207_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_207[blocks]:
  assumes \<open>(P_0x1bf4d_207 && P_0x1bf4d_207_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 207 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_207 ?\<sigma> \<and> block_usage P_0x1bf4d_207_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_207_def P_0x1bf4d_207_regions_def post: Q_0x1bf4f_207_def regionset: P_0x1bf4d_207_regions_set_def)

definition P_0x1bf4f_true_208 :: state_pred where
  \<open>P_0x1bf4f_true_208 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_208_def[Ps]

definition P_0x1bf4f_true_208_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_208_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_208_regions :: state_pred where
  \<open>P_0x1bf4f_true_208_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_208_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_208 :: state_pred where
  \<open>Q_0x1bdd2_208 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_208_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_208[blocks]:
  assumes \<open>(P_0x1bf4f_true_208 && P_0x1bf4f_true_208_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 208 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_208 ?\<sigma> \<and> block_usage P_0x1bf4f_true_208_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_208_def P_0x1bf4f_true_208_regions_def post: Q_0x1bdd2_208_def regionset: P_0x1bf4f_true_208_regions_set_def)

definition P_0x1bf4f_false_209 :: state_pred where
  \<open>P_0x1bf4f_false_209 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_209_def[Ps]

definition P_0x1bf4f_false_209_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_209_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_209_regions :: state_pred where
  \<open>P_0x1bf4f_false_209_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_209_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_209 :: state_pred where
  \<open>Q_0x1bdd2_209 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_209_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_209[blocks]:
  assumes \<open>(P_0x1bf4f_false_209 && P_0x1bf4f_false_209_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 209 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_209 ?\<sigma> \<and> block_usage P_0x1bf4f_false_209_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_209_def P_0x1bf4f_false_209_regions_def post: Q_0x1bdd2_209_def regionset: P_0x1bf4f_false_209_regions_set_def)

definition P_0x1bdd2_210 :: state_pred where
  \<open>P_0x1bdd2_210 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdd2_210_def[Ps]

definition P_0x1bdd2_210_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd2_210_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bdd2_210_regions :: state_pred where
  \<open>P_0x1bdd2_210_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd2_210_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_210 :: state_pred where
  \<open>Q_ret_address_210 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_210_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd2_0x1bde0_210[blocks]:
  assumes \<open>(P_0x1bdd2_210 && P_0x1bdd2_210_regions) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bde0 210 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_210 ?\<sigma> \<and> block_usage P_0x1bdd2_210_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd2_210_def P_0x1bdd2_210_regions_def post: Q_ret_address_210_def regionset: P_0x1bdd2_210_regions_set_def)

definition P_0x1bdef_false_211 :: state_pred where
  \<open>P_0x1bdef_false_211 \<sigma> \<equiv> RIP \<sigma> = 0x1bdef \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdef_false_211_def[Ps]

definition P_0x1bdef_false_211_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdef_false_211_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bdef_false_211_regions :: state_pred where
  \<open>P_0x1bdef_false_211_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdef_false_211_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1be03_211 :: state_pred where
  \<open>Q_0x1be03_211 \<sigma> \<equiv> RIP \<sigma> = 0x1be03 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1be03_211_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bdef_0x1be00_211[blocks]:
  assumes \<open>(P_0x1bdef_false_211 && P_0x1bdef_false_211_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1be00 211 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1be03_211 ?\<sigma> \<and> block_usage P_0x1bdef_false_211_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdef_false_211_def P_0x1bdef_false_211_regions_def post: Q_0x1be03_211_def regionset: P_0x1bdef_false_211_regions_set_def)

definition P_0x1be03_212 :: state_pred where
  \<open>P_0x1be03_212 \<sigma> \<equiv> RIP \<sigma> = 0x1be03 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1be03_212_def[Ps]

definition P_0x1be03_212_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be03_212_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be03_212_regions :: state_pred where
  \<open>P_0x1be03_212_regions \<sigma> \<equiv> \<exists>regions. P_0x1be03_212_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1be03_212 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1be03_212 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be08\<close>
declare Q_raw_pwrite_aligned_addr_0x1be03_212_def[Qs]

schematic_goal raw_pwrite_0_1_0x1be03_0x1be03_212[blocks]:
  assumes \<open>(P_0x1be03_212 && P_0x1be03_212_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1be03 212 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1be03_212 ?\<sigma> \<and> block_usage P_0x1be03_212_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be03_212_def P_0x1be03_212_regions_def post: Q_raw_pwrite_aligned_addr_0x1be03_212_def regionset: P_0x1be03_212_regions_set_def)

definition P_0x1be08_213 :: state_pred where
  \<open>P_0x1be08_213 \<sigma> \<equiv> RIP \<sigma> = 0x1be08 \<and> RAX \<sigma> = raw_pwrite_aligned_0x1be03_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1be08\<close>
declare P_0x1be08_213_def[Ps]

definition P_0x1be08_213_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1be08_213_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1be08_213_regions :: state_pred where
  \<open>P_0x1be08_213_regions \<sigma> \<equiv> \<exists>regions. P_0x1be08_213_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_213 :: state_pred where
  \<open>Q_ret_address_213 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_213_def[Qs]

schematic_goal raw_pwrite_0_9_0x1be08_0x1be19_213[blocks]:
  assumes \<open>(P_0x1be08_213 && P_0x1be08_213_regions) \<sigma>\<close>
  shows \<open>exec_block 9 0x1be19 213 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_213 ?\<sigma> \<and> block_usage P_0x1be08_213_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1be08_213_def P_0x1be08_213_regions_def post: Q_ret_address_213_def regionset: P_0x1be08_213_regions_set_def)

definition P_0x1bd67_false_214 :: state_pred where
  \<open>P_0x1bd67_false_214 \<sigma> \<equiv> RIP \<sigma> = 0x1bd67 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd67_false_214_def[Ps]

definition P_0x1bd67_false_214_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd67_false_214_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd67_false_214_regions :: state_pred where
  \<open>P_0x1bd67_false_214_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd67_false_214_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd72_214 :: state_pred where
  \<open>Q_0x1bd72_214 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd72_214_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bd67_0x1bd6c_214[blocks]:
  assumes \<open>(P_0x1bd67_false_214 && P_0x1bd67_false_214_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bd6c 214 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd72_214 ?\<sigma> \<and> block_usage P_0x1bd67_false_214_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd67_false_214_def P_0x1bd67_false_214_regions_def post: Q_0x1bd72_214_def regionset: P_0x1bd67_false_214_regions_set_def)

definition P_0x1bd72_true_215 :: state_pred where
  \<open>P_0x1bd72_true_215 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd72_true_215_def[Ps]

definition P_0x1bd72_true_215_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_true_215_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd72_true_215_regions :: state_pred where
  \<open>P_0x1bd72_true_215_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_true_215_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_215 :: state_pred where
  \<open>Q_0x1bd9e_215 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_215_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd72_0x1bd72_215[blocks]:
  assumes \<open>(P_0x1bd72_true_215 && P_0x1bd72_true_215_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd72 215 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_215 ?\<sigma> \<and> block_usage P_0x1bd72_true_215_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_true_215_def P_0x1bd72_true_215_regions_def post: Q_0x1bd9e_215_def regionset: P_0x1bd72_true_215_regions_set_def)

definition P_0x1bd9e_216 :: state_pred where
  \<open>P_0x1bd9e_216 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd9e_216_def[Ps]

definition P_0x1bd9e_216_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd9e_216_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd9e_216_regions :: state_pred where
  \<open>P_0x1bd9e_216_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd9e_216_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdb6_216 :: state_pred where
  \<open>Q_0x1bdb6_216 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdb6_216_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bd9e_0x1bdb3_216[blocks]:
  assumes \<open>(P_0x1bd9e_216 && P_0x1bd9e_216_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x1bdb3 216 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdb6_216 ?\<sigma> \<and> block_usage P_0x1bd9e_216_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd9e_216_def P_0x1bd9e_216_regions_def post: Q_0x1bdb6_216_def regionset: P_0x1bd9e_216_regions_set_def)

definition P_0x1bdb6_217 :: state_pred where
  \<open>P_0x1bdb6_217 \<sigma> \<equiv> RIP \<sigma> = 0x1bdb6 \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdb6_217_def[Ps]

definition P_0x1bdb6_217_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdb6_217_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdb6_217_regions :: state_pred where
  \<open>P_0x1bdb6_217_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdb6_217_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_memcpy_addr_0x1bdb6_217 :: state_pred where
  \<open>Q_memcpy_addr_0x1bdb6_217 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = memcpy_addr \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_memcpy_addr_0x1bdb6_217_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdb6_0x1bdb6_217[blocks]:
  assumes \<open>(P_0x1bdb6_217 && P_0x1bdb6_217_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdb6 217 \<sigma> \<triangleq> ?\<sigma> \<and> Q_memcpy_addr_0x1bdb6_217 ?\<sigma> \<and> block_usage P_0x1bdb6_217_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdb6_217_def P_0x1bdb6_217_regions_def post: Q_memcpy_addr_0x1bdb6_217_def regionset: P_0x1bdb6_217_regions_set_def)

definition P_0x1bdbb_218 :: state_pred where
  \<open>P_0x1bdbb_218 \<sigma> \<equiv> RIP \<sigma> = 0x1bdbb \<and> RBX \<sigma> = ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word))) \<and> RDX \<sigma> = (sextend (ucast ((if' ((\<langle>31,0\<rangle>RCX \<sigma>::32 word)::32 word) \<le>s 0x4000 then (\<langle>31,0\<rangle>RCX \<sigma>::32 word) else (0x4000::32 word)))) 32 64::64 word) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSI \<sigma> = R14 \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdbb_218_def[Ps]

definition P_0x1bdbb_218_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdbb_218_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdbb_218_regions :: state_pred where
  \<open>P_0x1bdbb_218_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdbb_218_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdc9_218 :: state_pred where
  \<open>Q_0x1bdc9_218 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare Q_0x1bdc9_218_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bdbb_0x1bdc6_218[blocks]:
  assumes \<open>(P_0x1bdbb_218 && P_0x1bdbb_218_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bdc6 218 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdc9_218 ?\<sigma> \<and> block_usage P_0x1bdbb_218_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdbb_218_def P_0x1bdbb_218_regions_def post: Q_0x1bdc9_218_def regionset: P_0x1bdbb_218_regions_set_def)

definition P_0x1bdc9_219 :: state_pred where
  \<open>P_0x1bdc9_219 \<sigma> \<equiv> RIP \<sigma> = 0x1bdc9 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdbb\<close>
declare P_0x1bdc9_219_def[Ps]

definition P_0x1bdc9_219_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdc9_219_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdc9_219_regions :: state_pred where
  \<open>P_0x1bdc9_219_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdc9_219_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bdc9_219 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bdc9_219 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_raw_pwrite_aligned_addr_0x1bdc9_219_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdc9_0x1bdc9_219[blocks]:
  assumes \<open>(P_0x1bdc9_219 && P_0x1bdc9_219_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdc9 219 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bdc9_219 ?\<sigma> \<and> block_usage P_0x1bdc9_219_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdc9_219_def P_0x1bdc9_219_regions_def post: Q_raw_pwrite_aligned_addr_0x1bdc9_219_def regionset: P_0x1bdc9_219_regions_set_def)

definition P_0x1bdce_220 :: state_pred where
  \<open>P_0x1bdce_220 \<sigma> \<equiv> RIP \<sigma> = 0x1bdce \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdce_220_def[Ps]

definition P_0x1bdce_220_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdce_220_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdce_220_regions :: state_pred where
  \<open>P_0x1bdce_220_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdce_220_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd0_220 :: state_pred where
  \<open>Q_0x1bdd0_220 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare Q_0x1bdd0_220_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdce_0x1bdce_220[blocks]:
  assumes \<open>(P_0x1bdce_220 && P_0x1bdce_220_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdce 220 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd0_220 ?\<sigma> \<and> block_usage P_0x1bdce_220_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdce_220_def P_0x1bdce_220_regions_def post: Q_0x1bdd0_220_def regionset: P_0x1bdce_220_regions_set_def)

definition P_0x1bdd0_true_221 :: state_pred where
  \<open>P_0x1bdd0_true_221 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_true_221_def[Ps]

definition P_0x1bdd0_true_221_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_true_221_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_true_221_regions :: state_pred where
  \<open>P_0x1bdd0_true_221_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_true_221_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd98_221 :: state_pred where
  \<open>Q_0x1bd98_221 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd98_221_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd0_0x1bd92_221[blocks]:
  assumes \<open>(P_0x1bdd0_true_221 && P_0x1bdd0_true_221_regions && !SF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bd92 221 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd98_221 ?\<sigma> \<and> block_usage P_0x1bdd0_true_221_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_true_221_def P_0x1bdd0_true_221_regions_def post: Q_0x1bd98_221_def regionset: P_0x1bdd0_true_221_regions_set_def)

definition P_0x1bd98_true_222 :: state_pred where
  \<open>P_0x1bd98_true_222 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_true_222_def[Ps]

definition P_0x1bd98_true_222_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_true_222_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_true_222_regions :: state_pred where
  \<open>P_0x1bd98_true_222_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_true_222_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_222 :: state_pred where
  \<open>Q_0x1bee0_222 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee0_222_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_222[blocks]:
  assumes \<open>(P_0x1bd98_true_222 && P_0x1bd98_true_222_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 222 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_222 ?\<sigma> \<and> block_usage P_0x1bd98_true_222_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_true_222_def P_0x1bd98_true_222_regions_def post: Q_0x1bee0_222_def regionset: P_0x1bd98_true_222_regions_set_def)

definition P_0x1bd98_false_223 :: state_pred where
  \<open>P_0x1bd98_false_223 \<sigma> \<equiv> RIP \<sigma> = 0x1bd98 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd98_false_223_def[Ps]

definition P_0x1bd98_false_223_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd98_false_223_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd98_false_223_regions :: state_pred where
  \<open>P_0x1bd98_false_223_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd98_false_223_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bd9e_223 :: state_pred where
  \<open>Q_0x1bd9e_223 \<sigma> \<equiv> RIP \<sigma> = 0x1bd9e \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bd9e_223_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bd98_0x1bd98_223[blocks]:
  assumes \<open>(P_0x1bd98_false_223 && P_0x1bd98_false_223_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bd98 223 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bd9e_223 ?\<sigma> \<and> block_usage P_0x1bd98_false_223_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd98_false_223_def P_0x1bd98_false_223_regions_def post: Q_0x1bd9e_223_def regionset: P_0x1bd98_false_223_regions_set_def)

definition P_0x1bdd0_false_224 :: state_pred where
  \<open>P_0x1bdd0_false_224 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bdce\<close>
declare P_0x1bdd0_false_224_def[Ps]

definition P_0x1bdd0_false_224_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd0_false_224_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bdd0_false_224_regions :: state_pred where
  \<open>P_0x1bdd0_false_224_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd0_false_224_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_224 :: state_pred where
  \<open>Q_0x1bdd2_224 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_224_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bdd0_0x1bdd0_224[blocks]:
  assumes \<open>(P_0x1bdd0_false_224 && P_0x1bdd0_false_224_regions && ! !SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bdd0 224 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_224 ?\<sigma> \<and> block_usage P_0x1bdd0_false_224_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd0_false_224_def P_0x1bdd0_false_224_regions_def post: Q_0x1bdd2_224_def regionset: P_0x1bdd0_false_224_regions_set_def)

definition P_0x1bee0_225 :: state_pred where
  \<open>P_0x1bee0_225 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee0_225_def[Ps]

definition P_0x1bee0_225_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_225_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee0_225_regions :: state_pred where
  \<open>P_0x1bee0_225_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_225_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_225 :: state_pred where
  \<open>Q_0x1bee6_225 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee6_225_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_225[blocks]:
  assumes \<open>(P_0x1bee0_225 && P_0x1bee0_225_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 225 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_225 ?\<sigma> \<and> block_usage P_0x1bee0_225_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_225_def P_0x1bee0_225_regions_def post: Q_0x1bee6_225_def regionset: P_0x1bee0_225_regions_set_def)

definition P_0x1bee6_true_226 :: state_pred where
  \<open>P_0x1bee6_true_226 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_true_226_def[Ps]

definition P_0x1bee6_true_226_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_226_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_true_226_regions :: state_pred where
  \<open>P_0x1bee6_true_226_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_226_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_226 :: state_pred where
  \<open>Q_0x1bdd2_226 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_226_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_226[blocks]:
  assumes \<open>(P_0x1bee6_true_226 && P_0x1bee6_true_226_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 226 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_226 ?\<sigma> \<and> block_usage P_0x1bee6_true_226_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_226_def P_0x1bee6_true_226_regions_def post: Q_0x1bdd2_226_def regionset: P_0x1bee6_true_226_regions_set_def)

definition P_0x1bee6_false_227 :: state_pred where
  \<open>P_0x1bee6_false_227 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_false_227_def[Ps]

definition P_0x1bee6_false_227_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_227_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_false_227_regions :: state_pred where
  \<open>P_0x1bee6_false_227_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_227_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_227 :: state_pred where
  \<open>Q_0x1befd_227 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1befd_227_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_227[blocks]:
  assumes \<open>(P_0x1bee6_false_227 && P_0x1bee6_false_227_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 227 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_227 ?\<sigma> \<and> block_usage P_0x1bee6_false_227_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_227_def P_0x1bee6_false_227_regions_def post: Q_0x1befd_227_def regionset: P_0x1bee6_false_227_regions_set_def)

definition P_0x1befd_228 :: state_pred where
  \<open>P_0x1befd_228 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1befd_228_def[Ps]

definition P_0x1befd_228_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_228_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_228_regions :: state_pred where
  \<open>P_0x1befd_228_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_228_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_228 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_228 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R12 \<sigma>::32 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_228_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_228[blocks]:
  assumes \<open>(P_0x1befd_228 && P_0x1befd_228_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 228 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_228 ?\<sigma> \<and> block_usage P_0x1befd_228_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_228_def P_0x1befd_228_regions_def post: Q_raw_pread_aligned_addr_0x1befd_228_def regionset: P_0x1befd_228_regions_set_def)

definition P_0x1bf02_229 :: state_pred where
  \<open>P_0x1bf02_229 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_229_def[Ps]

definition P_0x1bf02_229_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_229_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_229_regions :: state_pred where
  \<open>P_0x1bf02_229_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_229_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_229 :: state_pred where
  \<open>Q_0x1bf04_229 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_229_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_229[blocks]:
  assumes \<open>(P_0x1bf02_229 && P_0x1bf02_229_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 229 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_229 ?\<sigma> \<and> block_usage P_0x1bf02_229_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_229_def P_0x1bf02_229_regions_def post: Q_0x1bf04_229_def regionset: P_0x1bf02_229_regions_set_def)

definition P_0x1bf04_true_230 :: state_pred where
  \<open>P_0x1bf04_true_230 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_230_def[Ps]

definition P_0x1bf04_true_230_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_230_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_230_regions :: state_pred where
  \<open>P_0x1bf04_true_230_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_230_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_230 :: state_pred where
  \<open>Q_0x1bdd2_230 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_230_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_230[blocks]:
  assumes \<open>(P_0x1bf04_true_230 && P_0x1bf04_true_230_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 230 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_230 ?\<sigma> \<and> block_usage P_0x1bf04_true_230_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_230_def P_0x1bf04_true_230_regions_def post: Q_0x1bdd2_230_def regionset: P_0x1bf04_true_230_regions_set_def)

definition P_0x1bf04_false_231 :: state_pred where
  \<open>P_0x1bf04_false_231 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_231_def[Ps]

definition P_0x1bf04_false_231_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_231_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_231_regions :: state_pred where
  \<open>P_0x1bf04_false_231_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_231_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_231 :: state_pred where
  \<open>Q_0x1bf12_231 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_231_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_231[blocks]:
  assumes \<open>(P_0x1bf04_false_231 && P_0x1bf04_false_231_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 231 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_231 ?\<sigma> \<and> block_usage P_0x1bf04_false_231_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_231_def P_0x1bf04_false_231_regions_def post: Q_0x1bf12_231_def regionset: P_0x1bf04_false_231_regions_set_def)

definition P_0x1bf12_true_232 :: state_pred where
  \<open>P_0x1bf12_true_232 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_232_def[Ps]

definition P_0x1bf12_true_232_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_232_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_232_regions :: state_pred where
  \<open>P_0x1bf12_true_232_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_232_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_232 :: state_pred where
  \<open>Q_0x1bfc8_232 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bfc8_232_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_232[blocks]:
  assumes \<open>(P_0x1bf12_true_232 && P_0x1bf12_true_232_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 232 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_232 ?\<sigma> \<and> block_usage P_0x1bf12_true_232_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_232_def P_0x1bf12_true_232_regions_def post: Q_0x1bfc8_232_def regionset: P_0x1bf12_true_232_regions_set_def)

definition P_0x1bfc8_233 :: state_pred where
  \<open>P_0x1bfc8_233 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfc8_233_def[Ps]

definition P_0x1bfc8_233_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_233_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_233_regions :: state_pred where
  \<open>P_0x1bfc8_233_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_233_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_233 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_233 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_233_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_233[blocks]:
  assumes \<open>(P_0x1bfc8_233 && P_0x1bfc8_233_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 233 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_233 ?\<sigma> \<and> block_usage P_0x1bfc8_233_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_233_def P_0x1bfc8_233_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_233_def regionset: P_0x1bfc8_233_regions_set_def)

definition P_0x1bfcb_234 :: state_pred where
  \<open>P_0x1bfcb_234 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bfcb_234_def[Ps]

definition P_0x1bfcb_234_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_234_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_234_regions :: state_pred where
  \<open>P_0x1bfcb_234_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_234_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_234 :: state_pred where
  \<open>Q_0x1bf37_234 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare Q_0x1bf37_234_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_234[blocks]:
  assumes \<open>(P_0x1bfcb_234 && P_0x1bfcb_234_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 234 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_234 ?\<sigma> \<and> block_usage P_0x1bfcb_234_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_234_def P_0x1bfcb_234_regions_def post: Q_0x1bf37_234_def regionset: P_0x1bfcb_234_regions_set_def)

definition P_0x1bf37_235 :: state_pred where
  \<open>P_0x1bf37_235 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>R15 \<sigma>::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((R14 \<sigma>::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[R14 \<sigma>,8]::64 word)\<close>
declare P_0x1bf37_235_def[Ps]

definition P_0x1bf37_235_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_235_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_235_regions :: state_pred where
  \<open>P_0x1bf37_235_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_235_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_235 :: state_pred where
  \<open>Q_0x1bf3b_235 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_235_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_235[blocks]:
  assumes \<open>(P_0x1bf37_235 && P_0x1bf37_235_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 235 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_235 ?\<sigma> \<and> block_usage P_0x1bf37_235_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_235_def P_0x1bf37_235_regions_def post: Q_0x1bf3b_235_def regionset: P_0x1bf37_235_regions_set_def)

definition P_0x1bf12_false_236 :: state_pred where
  \<open>P_0x1bf12_false_236 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_236_def[Ps]

definition P_0x1bf12_false_236_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_236_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_236_regions :: state_pred where
  \<open>P_0x1bf12_false_236_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_236_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_236 :: state_pred where
  \<open>Q_0x1bf1c_236 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_236_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_236[blocks]:
  assumes \<open>(P_0x1bf12_false_236 && P_0x1bf12_false_236_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 236 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_236 ?\<sigma> \<and> block_usage P_0x1bf12_false_236_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_236_def P_0x1bf12_false_236_regions_def post: Q_0x1bf1c_236_def regionset: P_0x1bf12_false_236_regions_set_def)

definition P_0x1bf1c_true_237 :: state_pred where
  \<open>P_0x1bf1c_true_237 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_237_def[Ps]

definition P_0x1bf1c_true_237_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_237_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_237_regions :: state_pred where
  \<open>P_0x1bf1c_true_237_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_237_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_237 :: state_pred where
  \<open>Q_0x1bf3b_237 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_237_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_237[blocks]:
  assumes \<open>(P_0x1bf1c_true_237 && P_0x1bf1c_true_237_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 237 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_237 ?\<sigma> \<and> block_usage P_0x1bf1c_true_237_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_237_def P_0x1bf1c_true_237_regions_def post: Q_0x1bf3b_237_def regionset: P_0x1bf1c_true_237_regions_set_def)

definition P_0x1bf1c_false_238 :: state_pred where
  \<open>P_0x1bf1c_false_238 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_238_def[Ps]

definition P_0x1bf1c_false_238_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_238_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_238_regions :: state_pred where
  \<open>P_0x1bf1c_false_238_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_238_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_238 :: state_pred where
  \<open>Q_0x1bf25_238 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_238_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_238[blocks]:
  assumes \<open>(P_0x1bf1c_false_238 && P_0x1bf1c_false_238_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 238 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_238 ?\<sigma> \<and> block_usage P_0x1bf1c_false_238_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_238_def P_0x1bf1c_false_238_regions_def post: Q_0x1bf25_238_def regionset: P_0x1bf1c_false_238_regions_set_def)

definition P_0x1bf25_true_239 :: state_pred where
  \<open>P_0x1bf25_true_239 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_239_def[Ps]

definition P_0x1bf25_true_239_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_239_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_239_regions :: state_pred where
  \<open>P_0x1bf25_true_239_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_239_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_239 :: state_pred where
  \<open>Q_0x1bf3b_239 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_239_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_239[blocks]:
  assumes \<open>(P_0x1bf25_true_239 && P_0x1bf25_true_239_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 239 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_239 ?\<sigma> \<and> block_usage P_0x1bf25_true_239_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_239_def P_0x1bf25_true_239_regions_def post: Q_0x1bf3b_239_def regionset: P_0x1bf25_true_239_regions_set_def)

definition P_0x1bf25_false_240 :: state_pred where
  \<open>P_0x1bf25_false_240 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_240_def[Ps]

definition P_0x1bf25_false_240_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_240_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_240_regions :: state_pred where
  \<open>P_0x1bf25_false_240_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_240_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_240 :: state_pred where
  \<open>Q_0x1bf31_240 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare Q_0x1bf31_240_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_240[blocks]:
  assumes \<open>(P_0x1bf25_false_240 && P_0x1bf25_false_240_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 240 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_240 ?\<sigma> \<and> block_usage P_0x1bf25_false_240_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_240_def P_0x1bf25_false_240_regions_def post: Q_0x1bf31_240_def regionset: P_0x1bf25_false_240_regions_set_def)

definition P_0x1bf31_true_241 :: state_pred where
  \<open>P_0x1bf31_true_241 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_true_241_def[Ps]

definition P_0x1bf31_true_241_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_241_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((R14 \<sigma>::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>R15 \<sigma>::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_241_regions :: state_pred where
  \<open>P_0x1bf31_true_241_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_241_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_241 :: state_pred where
  \<open>Q_0x1bf3b_241 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_241_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_241[blocks]:
  assumes \<open>(P_0x1bf31_true_241 && P_0x1bf31_true_241_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 241 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_241 ?\<sigma> \<and> block_usage P_0x1bf31_true_241_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_241_def P_0x1bf31_true_241_regions_def post: Q_0x1bf3b_241_def regionset: P_0x1bf31_true_241_regions_set_def)

definition P_0x1bf31_false_242 :: state_pred where
  \<open>P_0x1bf31_false_242 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[R14 \<sigma>,1]::8 word))\<close>
declare P_0x1bf31_false_242_def[Ps]

definition P_0x1bf31_false_242_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_242_regions_set \<sigma> \<equiv> {
    (0, R14 \<sigma>, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_242_regions :: state_pred where
  \<open>P_0x1bf31_false_242_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_242_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_242 :: state_pred where
  \<open>Q_0x1bf3b_242 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_242_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_242[blocks]:
  assumes \<open>(P_0x1bf31_false_242 && P_0x1bf31_false_242_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 242 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_242 ?\<sigma> \<and> block_usage P_0x1bf31_false_242_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_242_def P_0x1bf31_false_242_regions_def post: Q_0x1bf3b_242_def regionset: P_0x1bf31_false_242_regions_set_def)

definition P_0x1bf3b_243 :: state_pred where
  \<open>P_0x1bf3b_243 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_243_def[Ps]

definition P_0x1bf3b_243_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_243_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_243_regions :: state_pred where
  \<open>P_0x1bf3b_243_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_243_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_243 :: state_pred where
  \<open>Q_0x1bf48_243 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_243_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_243[blocks]:
  assumes \<open>(P_0x1bf3b_243 && P_0x1bf3b_243_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 243 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_243 ?\<sigma> \<and> block_usage P_0x1bf3b_243_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_243_def P_0x1bf3b_243_regions_def post: Q_0x1bf48_243_def regionset: P_0x1bf3b_243_regions_set_def)

definition P_0x1bf48_244 :: state_pred where
  \<open>P_0x1bf48_244 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_244_def[Ps]

definition P_0x1bf48_244_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_244_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_244_regions :: state_pred where
  \<open>P_0x1bf48_244_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_244_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_244 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_244 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_244_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_244[blocks]:
  assumes \<open>(P_0x1bf48_244 && P_0x1bf48_244_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 244 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_244 ?\<sigma> \<and> block_usage P_0x1bf48_244_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_244_def P_0x1bf48_244_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_244_def regionset: P_0x1bf48_244_regions_set_def)

definition P_0x1bf4d_245 :: state_pred where
  \<open>P_0x1bf4d_245 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_245_def[Ps]

definition P_0x1bf4d_245_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_245_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_245_regions :: state_pred where
  \<open>P_0x1bf4d_245_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_245_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_245 :: state_pred where
  \<open>Q_0x1bf4f_245 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_245_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_245[blocks]:
  assumes \<open>(P_0x1bf4d_245 && P_0x1bf4d_245_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 245 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_245 ?\<sigma> \<and> block_usage P_0x1bf4d_245_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_245_def P_0x1bf4d_245_regions_def post: Q_0x1bf4f_245_def regionset: P_0x1bf4d_245_regions_set_def)

definition P_0x1bf4f_true_246 :: state_pred where
  \<open>P_0x1bf4f_true_246 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_246_def[Ps]

definition P_0x1bf4f_true_246_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_246_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_246_regions :: state_pred where
  \<open>P_0x1bf4f_true_246_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_246_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_246 :: state_pred where
  \<open>Q_0x1bdd2_246 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_246_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_246[blocks]:
  assumes \<open>(P_0x1bf4f_true_246 && P_0x1bf4f_true_246_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 246 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_246 ?\<sigma> \<and> block_usage P_0x1bf4f_true_246_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_246_def P_0x1bf4f_true_246_regions_def post: Q_0x1bdd2_246_def regionset: P_0x1bf4f_true_246_regions_set_def)

definition P_0x1bf4f_false_247 :: state_pred where
  \<open>P_0x1bf4f_false_247 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RBP \<sigma> \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_247_def[Ps]

definition P_0x1bf4f_false_247_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_247_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_247_regions :: state_pred where
  \<open>P_0x1bf4f_false_247_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_247_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_247 :: state_pred where
  \<open>Q_0x1bdd2_247 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_247_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_247[blocks]:
  assumes \<open>(P_0x1bf4f_false_247 && P_0x1bf4f_false_247_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 247 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_247 ?\<sigma> \<and> block_usage P_0x1bf4f_false_247_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_247_def P_0x1bf4f_false_247_regions_def post: Q_0x1bdd2_247_def regionset: P_0x1bf4f_false_247_regions_set_def)

definition P_0x1bd72_false_248 :: state_pred where
  \<open>P_0x1bd72_false_248 \<sigma> \<equiv> RIP \<sigma> = 0x1bd72 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bd72_false_248_def[Ps]

definition P_0x1bd72_false_248_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bd72_false_248_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bd72_false_248_regions :: state_pred where
  \<open>P_0x1bd72_false_248_regions \<sigma> \<equiv> \<exists>regions. P_0x1bd72_false_248_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee0_248 :: state_pred where
  \<open>Q_0x1bee0_248 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee0_248_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bd72_0x1bd74_248[blocks]:
  assumes \<open>(P_0x1bd72_false_248 && P_0x1bd72_false_248_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bd74 248 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee0_248 ?\<sigma> \<and> block_usage P_0x1bd72_false_248_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bd72_false_248_def P_0x1bd72_false_248_regions_def post: Q_0x1bee0_248_def regionset: P_0x1bd72_false_248_regions_set_def)

definition P_0x1bee0_249 :: state_pred where
  \<open>P_0x1bee0_249 \<sigma> \<equiv> RIP \<sigma> = 0x1bee0 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee0_249_def[Ps]

definition P_0x1bee0_249_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee0_249_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee0_249_regions :: state_pred where
  \<open>P_0x1bee0_249_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee0_249_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bee6_249 :: state_pred where
  \<open>Q_0x1bee6_249 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bee6_249_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bee0_0x1bee3_249[blocks]:
  assumes \<open>(P_0x1bee0_249 && P_0x1bee0_249_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bee3 249 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bee6_249 ?\<sigma> \<and> block_usage P_0x1bee0_249_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee0_249_def P_0x1bee0_249_regions_def post: Q_0x1bee6_249_def regionset: P_0x1bee0_249_regions_set_def)

definition P_0x1bee6_true_250 :: state_pred where
  \<open>P_0x1bee6_true_250 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_true_250_def[Ps]

definition P_0x1bee6_true_250_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_true_250_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_true_250_regions :: state_pred where
  \<open>P_0x1bee6_true_250_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_true_250_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_250 :: state_pred where
  \<open>Q_0x1bdd2_250 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_250_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bee6_0x1bee6_250[blocks]:
  assumes \<open>(P_0x1bee6_true_250 && P_0x1bee6_true_250_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bee6 250 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_250 ?\<sigma> \<and> block_usage P_0x1bee6_true_250_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_true_250_def P_0x1bee6_true_250_regions_def post: Q_0x1bdd2_250_def regionset: P_0x1bee6_true_250_regions_set_def)

definition P_0x1bee6_false_251 :: state_pred where
  \<open>P_0x1bee6_false_251 \<sigma> \<equiv> RIP \<sigma> = 0x1bee6 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word) AND 0xfffffe00)) \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bee6_false_251_def[Ps]

definition P_0x1bee6_false_251_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bee6_false_251_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bee6_false_251_regions :: state_pred where
  \<open>P_0x1bee6_false_251_regions \<sigma> \<equiv> \<exists>regions. P_0x1bee6_false_251_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1befd_251 :: state_pred where
  \<open>Q_0x1befd_251 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1befd_251_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bee6_0x1befa_251[blocks]:
  assumes \<open>(P_0x1bee6_false_251 && P_0x1bee6_false_251_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1befa 251 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1befd_251 ?\<sigma> \<and> block_usage P_0x1bee6_false_251_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bee6_false_251_def P_0x1bee6_false_251_regions_def post: Q_0x1befd_251_def regionset: P_0x1bee6_false_251_regions_set_def)

definition P_0x1befd_252 :: state_pred where
  \<open>P_0x1befd_252 \<sigma> \<equiv> RIP \<sigma> = 0x1befd \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1befd_252_def[Ps]

definition P_0x1befd_252_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1befd_252_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1befd_252_regions :: state_pred where
  \<open>P_0x1befd_252_regions \<sigma> \<equiv> \<exists>regions. P_0x1befd_252_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pread_aligned_addr_0x1befd_252 :: state_pred where
  \<open>Q_raw_pread_aligned_addr_0x1befd_252 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pread_aligned_addr \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_raw_pread_aligned_addr_0x1befd_252_def[Qs]

schematic_goal raw_pwrite_0_1_0x1befd_0x1befd_252[blocks]:
  assumes \<open>(P_0x1befd_252 && P_0x1befd_252_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1befd 252 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pread_aligned_addr_0x1befd_252 ?\<sigma> \<and> block_usage P_0x1befd_252_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1befd_252_def P_0x1befd_252_regions_def post: Q_raw_pread_aligned_addr_0x1befd_252_def regionset: P_0x1befd_252_regions_set_def)

definition P_0x1bf02_253 :: state_pred where
  \<open>P_0x1bf02_253 \<sigma> \<equiv> RIP \<sigma> = 0x1bf02 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf02_253_def[Ps]

definition P_0x1bf02_253_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf02_253_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf02_253_regions :: state_pred where
  \<open>P_0x1bf02_253_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf02_253_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf04_253 :: state_pred where
  \<open>Q_0x1bf04_253 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf04_253_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf02_0x1bf02_253[blocks]:
  assumes \<open>(P_0x1bf02_253 && P_0x1bf02_253_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf02 253 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf04_253 ?\<sigma> \<and> block_usage P_0x1bf02_253_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf02_253_def P_0x1bf02_253_regions_def post: Q_0x1bf04_253_def regionset: P_0x1bf02_253_regions_set_def)

definition P_0x1bf04_true_254 :: state_pred where
  \<open>P_0x1bf04_true_254 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_true_254_def[Ps]

definition P_0x1bf04_true_254_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_true_254_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_true_254_regions :: state_pred where
  \<open>P_0x1bf04_true_254_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_true_254_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_254 :: state_pred where
  \<open>Q_0x1bdd2_254 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_254_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf04_0x1bf04_254[blocks]:
  assumes \<open>(P_0x1bf04_true_254 && P_0x1bf04_true_254_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf04 254 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_254 ?\<sigma> \<and> block_usage P_0x1bf04_true_254_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_true_254_def P_0x1bf04_true_254_regions_def post: Q_0x1bdd2_254_def regionset: P_0x1bf04_true_254_regions_set_def)

definition P_0x1bf04_false_255 :: state_pred where
  \<open>P_0x1bf04_false_255 \<sigma> \<equiv> RIP \<sigma> = 0x1bf04 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf04_false_255_def[Ps]

definition P_0x1bf04_false_255_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf04_false_255_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf04_false_255_regions :: state_pred where
  \<open>P_0x1bf04_false_255_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf04_false_255_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf12_255 :: state_pred where
  \<open>Q_0x1bf12_255 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf12_255_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf04_0x1bf0e_255[blocks]:
  assumes \<open>(P_0x1bf04_false_255 && P_0x1bf04_false_255_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf0e 255 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf12_255 ?\<sigma> \<and> block_usage P_0x1bf04_false_255_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf04_false_255_def P_0x1bf04_false_255_regions_def post: Q_0x1bf12_255_def regionset: P_0x1bf04_false_255_regions_set_def)

definition P_0x1bf12_true_256 :: state_pred where
  \<open>P_0x1bf12_true_256 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_true_256_def[Ps]

definition P_0x1bf12_true_256_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_true_256_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf12_true_256_regions :: state_pred where
  \<open>P_0x1bf12_true_256_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_true_256_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bfc8_256 :: state_pred where
  \<open>Q_0x1bfc8_256 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare Q_0x1bfc8_256_def[Qs]

schematic_goal raw_pwrite_0_14_0x1bf12_0x1bfc6_256[blocks]:
  assumes \<open>(P_0x1bf12_true_256 && P_0x1bf12_true_256_regions && !CF) \<sigma>\<close>
  shows \<open>exec_block 14 0x1bfc6 256 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bfc8_256 ?\<sigma> \<and> block_usage P_0x1bf12_true_256_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_true_256_def P_0x1bf12_true_256_regions_def post: Q_0x1bfc8_256_def regionset: P_0x1bf12_true_256_regions_set_def)

definition P_0x1bfc8_257 :: state_pred where
  \<open>P_0x1bfc8_257 \<sigma> \<equiv> RIP \<sigma> = 0x1bfc8 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare P_0x1bfc8_257_def[Ps]

definition P_0x1bfc8_257_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfc8_257_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfc8_257_regions :: state_pred where
  \<open>P_0x1bfc8_257_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfc8_257_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_257 :: state_pred where
  \<open>Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_257 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = rep_movs_ESRDI_DSRSI_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_257_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfc8_0x1bfc8_257[blocks]:
  assumes \<open>(P_0x1bfc8_257 && P_0x1bfc8_257_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfc8 257 \<sigma> \<triangleq> ?\<sigma> \<and> Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_257 ?\<sigma> \<and> block_usage P_0x1bfc8_257_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfc8_257_def P_0x1bfc8_257_regions_def post: Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_257_def regionset: P_0x1bfc8_257_regions_set_def)

definition P_0x1bfcb_258 :: state_pred where
  \<open>P_0x1bfcb_258 \<sigma> \<equiv> RIP \<sigma> = 0x1bfcb \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare P_0x1bfcb_258_def[Ps]

definition P_0x1bfcb_258_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bfcb_258_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bfcb_258_regions :: state_pred where
  \<open>P_0x1bfcb_258_regions \<sigma> \<equiv> \<exists>regions. P_0x1bfcb_258_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf37_258 :: state_pred where
  \<open>Q_0x1bf37_258 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare Q_0x1bf37_258_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bfcb_0x1bfcb_258[blocks]:
  assumes \<open>(P_0x1bfcb_258 && P_0x1bfcb_258_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bfcb 258 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf37_258 ?\<sigma> \<and> block_usage P_0x1bfcb_258_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bfcb_258_def P_0x1bfcb_258_regions_def post: Q_0x1bf37_258_def regionset: P_0x1bfcb_258_regions_set_def)

definition P_0x1bf37_259 :: state_pred where
  \<open>P_0x1bf37_259 \<sigma> \<equiv> RIP \<sigma> = 0x1bf37 \<and> RAX \<sigma> = rep_movs_ESRDI_DSRSI_0x1bfc8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDX \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>(((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) - (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8))::32 word)::32 word) + (\<langle>31,0\<rangle>RCX\<^sub>0::32 word))::32 word))::32 word) >> 3)) \<and> RDI \<sigma> = (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8) \<and> RSI \<sigma> = ((((RDX\<^sub>0::64 word) - (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word))::64 word) + (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + 0x8)::64 word) AND 0xfffffffffffffff8)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bfcb \<and> (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) = (\<sigma> \<turnstile> *[((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8),8]::64 word) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word)\<close>
declare P_0x1bf37_259_def[Ps]

definition P_0x1bf37_259_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf37_259_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x8), 8),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 8)
  }\<close>

definition P_0x1bf37_259_regions :: state_pred where
  \<open>P_0x1bf37_259_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf37_259_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_259 :: state_pred where
  \<open>Q_0x1bf3b_259 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_259_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf37_0x1bf37_259[blocks]:
  assumes \<open>(P_0x1bf37_259 && P_0x1bf37_259_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf37 259 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_259 ?\<sigma> \<and> block_usage P_0x1bf37_259_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf37_259_def P_0x1bf37_259_regions_def post: Q_0x1bf3b_259_def regionset: P_0x1bf37_259_regions_set_def)

definition P_0x1bf12_false_260 :: state_pred where
  \<open>P_0x1bf12_false_260 \<sigma> \<equiv> RIP \<sigma> = 0x1bf12 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf12_false_260_def[Ps]

definition P_0x1bf12_false_260_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf12_false_260_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf12_false_260_regions :: state_pred where
  \<open>P_0x1bf12_false_260_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf12_false_260_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf1c_260 :: state_pred where
  \<open>Q_0x1bf1c_260 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf1c_260_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf12_0x1bf18_260[blocks]:
  assumes \<open>(P_0x1bf12_false_260 && P_0x1bf12_false_260_regions && ! !CF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf18 260 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf1c_260 ?\<sigma> \<and> block_usage P_0x1bf12_false_260_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf12_false_260_def P_0x1bf12_false_260_regions_def post: Q_0x1bf1c_260_def regionset: P_0x1bf12_false_260_regions_set_def)

definition P_0x1bf1c_true_261 :: state_pred where
  \<open>P_0x1bf1c_true_261 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_true_261_def[Ps]

definition P_0x1bf1c_true_261_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_true_261_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x4), 4),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), 4)
  }\<close>

definition P_0x1bf1c_true_261_regions :: state_pred where
  \<open>P_0x1bf1c_true_261_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_true_261_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_261 :: state_pred where
  \<open>Q_0x1bf3b_261 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_261_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bf1c_0x1bffd_261[blocks]:
  assumes \<open>(P_0x1bf1c_true_261 && P_0x1bf1c_true_261_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bffd 261 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_261 ?\<sigma> \<and> block_usage P_0x1bf1c_true_261_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_true_261_def P_0x1bf1c_true_261_regions_def post: Q_0x1bf3b_261_def regionset: P_0x1bf1c_true_261_regions_set_def)

definition P_0x1bf1c_false_262 :: state_pred where
  \<open>P_0x1bf1c_false_262 \<sigma> \<equiv> RIP \<sigma> = 0x1bf1c \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf1c_false_262_def[Ps]

definition P_0x1bf1c_false_262_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf1c_false_262_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf1c_false_262_regions :: state_pred where
  \<open>P_0x1bf1c_false_262_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf1c_false_262_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf25_262 :: state_pred where
  \<open>Q_0x1bf25_262 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare Q_0x1bf25_262_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf1c_0x1bf22_262[blocks]:
  assumes \<open>(P_0x1bf1c_false_262 && P_0x1bf1c_false_262_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf22 262 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf25_262 ?\<sigma> \<and> block_usage P_0x1bf1c_false_262_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf1c_false_262_def P_0x1bf1c_false_262_regions_def post: Q_0x1bf25_262_def regionset: P_0x1bf1c_false_262_regions_set_def)

definition P_0x1bf25_true_263 :: state_pred where
  \<open>P_0x1bf25_true_263 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_true_263_def[Ps]

definition P_0x1bf25_true_263_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_true_263_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf25_true_263_regions :: state_pred where
  \<open>P_0x1bf25_true_263_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_true_263_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_263 :: state_pred where
  \<open>Q_0x1bf3b_263 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_263_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf25_0x1bf25_263[blocks]:
  assumes \<open>(P_0x1bf25_true_263 && P_0x1bf25_true_263_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf25 263 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_263 ?\<sigma> \<and> block_usage P_0x1bf25_true_263_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_true_263_def P_0x1bf25_true_263_regions_def post: Q_0x1bf3b_263_def regionset: P_0x1bf25_true_263_regions_set_def)

definition P_0x1bf25_false_264 :: state_pred where
  \<open>P_0x1bf25_false_264 \<sigma> \<equiv> RIP \<sigma> = 0x1bf25 \<and> RAX \<sigma> = raw_pread_aligned_0x1befd_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02\<close>
declare P_0x1bf25_false_264_def[Ps]

definition P_0x1bf25_false_264_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf25_false_264_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf25_false_264_regions :: state_pred where
  \<open>P_0x1bf25_false_264_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf25_false_264_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf31_264 :: state_pred where
  \<open>Q_0x1bf31_264 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word))\<close>
declare Q_0x1bf31_264_def[Qs]

schematic_goal raw_pwrite_0_4_0x1bf25_0x1bf2d_264[blocks]:
  assumes \<open>(P_0x1bf25_false_264 && P_0x1bf25_false_264_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x1bf2d 264 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf31_264 ?\<sigma> \<and> block_usage P_0x1bf25_false_264_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf25_false_264_def P_0x1bf25_false_264_regions_def post: Q_0x1bf31_264_def regionset: P_0x1bf25_false_264_regions_set_def)

definition P_0x1bf31_true_265 :: state_pred where
  \<open>P_0x1bf31_true_265 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word))\<close>
declare P_0x1bf31_true_265_def[Ps]

definition P_0x1bf31_true_265_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_true_265_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, ((((RDX\<^sub>0::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (13, (((((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word)::64 word) + (\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)::32 word))::64 word) * (0x1::64 word))::64 word))::64 word) - 0x2), 2),
    (14, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_true_265_regions :: state_pred where
  \<open>P_0x1bf31_true_265_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_true_265_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_265 :: state_pred where
  \<open>Q_0x1bf3b_265 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_265_def[Qs]

schematic_goal raw_pwrite_0_6_0x1bf31_0x1c014_265[blocks]:
  assumes \<open>(P_0x1bf31_true_265 && P_0x1bf31_true_265_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1c014 265 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_265 ?\<sigma> \<and> block_usage P_0x1bf31_true_265_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_true_265_def P_0x1bf31_true_265_regions_def post: Q_0x1bf3b_265_def regionset: P_0x1bf31_true_265_regions_set_def)

definition P_0x1bf31_false_266 :: state_pred where
  \<open>P_0x1bf31_false_266 \<sigma> \<equiv> RIP \<sigma> = 0x1bf31 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf02 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word),1]::8 word) = ucast ((\<sigma> \<turnstile> *[RDX\<^sub>0,1]::8 word))\<close>
declare P_0x1bf31_false_266_def[Ps]

definition P_0x1bf31_false_266_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf31_false_266_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, Suc 0),
    (1, RSP\<^sub>0, 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (12, (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word), Suc 0)
  }\<close>

definition P_0x1bf31_false_266_regions :: state_pred where
  \<open>P_0x1bf31_false_266_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf31_false_266_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf3b_266 :: state_pred where
  \<open>Q_0x1bf3b_266 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf3b_266_def[Qs]

schematic_goal raw_pwrite_0_2_0x1bf31_0x1bf37_266[blocks]:
  assumes \<open>(P_0x1bf31_false_266 && P_0x1bf31_false_266_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1bf37 266 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf3b_266 ?\<sigma> \<and> block_usage P_0x1bf31_false_266_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf31_false_266_def P_0x1bf31_false_266_regions_def post: Q_0x1bf3b_266_def regionset: P_0x1bf31_false_266_regions_set_def)

definition P_0x1bf3b_267 :: state_pred where
  \<open>P_0x1bf3b_267 \<sigma> \<equiv> RIP \<sigma> = 0x1bf3b \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf3b_267_def[Ps]

definition P_0x1bf3b_267_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf3b_267_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bf3b_267_regions :: state_pred where
  \<open>P_0x1bf3b_267_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf3b_267_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf48_267 :: state_pred where
  \<open>Q_0x1bf48_267 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bf48_267_def[Qs]

schematic_goal raw_pwrite_0_3_0x1bf3b_0x1bf45_267[blocks]:
  assumes \<open>(P_0x1bf3b_267 && P_0x1bf3b_267_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x1bf45 267 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf48_267 ?\<sigma> \<and> block_usage P_0x1bf3b_267_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf3b_267_def P_0x1bf3b_267_regions_def post: Q_0x1bf48_267_def regionset: P_0x1bf3b_267_regions_set_def)

definition P_0x1bf48_268 :: state_pred where
  \<open>P_0x1bf48_268 \<sigma> \<equiv> RIP \<sigma> = 0x1bf48 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bf48_268_def[Ps]

definition P_0x1bf48_268_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf48_268_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf48_268_regions :: state_pred where
  \<open>P_0x1bf48_268_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf48_268_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_raw_pwrite_aligned_addr_0x1bf48_268 :: state_pred where
  \<open>Q_raw_pwrite_aligned_addr_0x1bf48_268 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x60) \<and> RIP \<sigma> = raw_pwrite_aligned_addr \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_raw_pwrite_aligned_addr_0x1bf48_268_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf48_0x1bf48_268[blocks]:
  assumes \<open>(P_0x1bf48_268 && P_0x1bf48_268_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf48 268 \<sigma> \<triangleq> ?\<sigma> \<and> Q_raw_pwrite_aligned_addr_0x1bf48_268 ?\<sigma> \<and> block_usage P_0x1bf48_268_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf48_268_def P_0x1bf48_268_regions_def post: Q_raw_pwrite_aligned_addr_0x1bf48_268_def regionset: P_0x1bf48_268_regions_set_def)

definition P_0x1bf4d_269 :: state_pred where
  \<open>P_0x1bf4d_269 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4d \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4d_269_def[Ps]

definition P_0x1bf4d_269_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4d_269_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4d_269_regions :: state_pred where
  \<open>P_0x1bf4d_269_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4d_269_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bf4f_269 :: state_pred where
  \<open>Q_0x1bf4f_269 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare Q_0x1bf4f_269_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4d_0x1bf4d_269[blocks]:
  assumes \<open>(P_0x1bf4d_269 && P_0x1bf4d_269_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4d 269 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bf4f_269 ?\<sigma> \<and> block_usage P_0x1bf4d_269_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4d_269_def P_0x1bf4d_269_regions_def post: Q_0x1bf4f_269_def regionset: P_0x1bf4d_269_regions_set_def)

definition P_0x1bf4f_true_270 :: state_pred where
  \<open>P_0x1bf4f_true_270 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_true_270_def[Ps]

definition P_0x1bf4f_true_270_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_true_270_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_true_270_regions :: state_pred where
  \<open>P_0x1bf4f_true_270_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_true_270_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_270 :: state_pred where
  \<open>Q_0x1bdd2_270 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_270_def[Qs]

schematic_goal raw_pwrite_0_1_0x1bf4f_0x1bf4f_270[blocks]:
  assumes \<open>(P_0x1bf4f_true_270 && P_0x1bf4f_true_270_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1bf4f 270 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_270 ?\<sigma> \<and> block_usage P_0x1bf4f_true_270_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_true_270_def P_0x1bf4f_true_270_regions_def post: Q_0x1bdd2_270_def regionset: P_0x1bf4f_true_270_regions_set_def)

definition P_0x1bf4f_false_271 :: state_pred where
  \<open>P_0x1bf4f_false_271 \<sigma> \<equiv> RIP \<sigma> = 0x1bf4f \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = 0x200 \<and> RDX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> RBP \<sigma> = RSI\<^sub>0 \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>RCX\<^sub>0::32 word)) \<and> R14 \<sigma> = RDX\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = 0x0 \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = 0x1bf4d\<close>
declare P_0x1bf4f_false_271_def[Ps]

definition P_0x1bf4f_false_271_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bf4f_false_271_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x60), 8)
  }\<close>

definition P_0x1bf4f_false_271_regions :: state_pred where
  \<open>P_0x1bf4f_false_271_regions \<sigma> \<equiv> \<exists>regions. P_0x1bf4f_false_271_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1bdd2_271 :: state_pred where
  \<open>Q_0x1bdd2_271 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_0x1bdd2_271_def[Qs]

schematic_goal raw_pwrite_0_5_0x1bf4f_0x1bf5f_271[blocks]:
  assumes \<open>(P_0x1bf4f_false_271 && P_0x1bf4f_false_271_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x1bf5f 271 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1bdd2_271 ?\<sigma> \<and> block_usage P_0x1bf4f_false_271_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bf4f_false_271_def P_0x1bf4f_false_271_regions_def post: Q_0x1bdd2_271_def regionset: P_0x1bf4f_false_271_regions_set_def)

definition P_0x1bdd2_272 :: state_pred where
  \<open>P_0x1bdd2_272 \<sigma> \<equiv> RIP \<sigma> = 0x1bdd2 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x58) \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R10 \<sigma> = R10\<^sub>0 \<and> R8 \<sigma> = ucast ((((\<langle>31,0\<rangle>RSI\<^sub>0::32 word)::32 word) AND 0x1ff)) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare P_0x1bdd2_272_def[Ps]

definition P_0x1bdd2_272_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1bdd2_272_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (2, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x50), 8)
  }\<close>

definition P_0x1bdd2_272_regions :: state_pred where
  \<open>P_0x1bdd2_272_regions \<sigma> \<equiv> \<exists>regions. P_0x1bdd2_272_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_272 :: state_pred where
  \<open>Q_ret_address_272 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) + 0x8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = RDI\<^sub>0\<close>
declare Q_ret_address_272_def[Qs]

schematic_goal raw_pwrite_0_8_0x1bdd2_0x1bde0_272[blocks]:
  assumes \<open>(P_0x1bdd2_272 && P_0x1bdd2_272_regions) \<sigma>\<close>
  shows \<open>exec_block 8 0x1bde0 272 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_272 ?\<sigma> \<and> block_usage P_0x1bdd2_272_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1bdd2_272_def P_0x1bdd2_272_regions_def post: Q_ret_address_272_def regionset: P_0x1bdd2_272_regions_set_def)

definition raw_pwrite_acode :: ACode where
  \<open>raw_pwrite_acode =
    Block 15 0x1bd47 0;
    IF ZF THEN
      Block 5 0x1be00 (Suc 0);
      Block (Suc 0) 0x1be03 2;
      CALL raw_pwrite_aligned_acode;
      Block 9 0x1be19 3
    ELSE
      Block 3 0x1bd53 4;
      IF !ZF THEN
        Block 8 0x1be36 5;
        Block (Suc 0) 0x1be3b 6;
        CALL raw_pread_aligned_acode;
        Block (Suc 0) 0x1be40 7;
        IF SF THEN
          Block 9 0x1bde0 8
        ELSE
          Block 11 0x1be68 9;
          IF CF THEN
            Block 2 0x1bf68 10;
            IF !ZF THEN
              Block 7 0x1bfe3 11
            ELSE
              Block 2 0x1bf6e 12;
              IF ZF THEN
                Block (Suc 0) 0x1bf71 13
              ELSE
                Block 4 0x1bf7d 14;
                IF ZF THEN
                  Block 2 0x1be9e 15
                ELSE
                  Block 5 0x1bf97 16
                FI
              FI
            FI
          ELSE
            Block 12 0x1be97 17;
            Block (Suc 0) 0x1be9b 18;
            CALL rep_movs_ESRDI_DSRSI_acode;
            Block (Suc 0) 0x1be9e 19
          FI;
          Block 4 0x1beaf 20;
          Block (Suc 0) 0x1beb4 21;
          CALL raw_pwrite_aligned_acode;
          Block (Suc 0) 0x1beb9 22;
          IF SF THEN
            Block 9 0x1bde0 23
          ELSE
            Block 3 0x1bec4 24;
            IF ZF THEN
              Block 9 0x1bde0 25
            ELSE
              Block 5 0x1bed8 26;
              Block (Suc 0) 0x1bd60 27;
              IF ZF THEN
                Block 2 0x1bde8 28;
                IF !ZF THEN
                  Block 3 0x1bd6c 29;
                  IF !ZF THEN
                    Block (Suc 0) 0x1bd72 30;
                    WHILE P_0x1bd9e_31 DO
                      Block 6 0x1bdb3 31;
                      Block (Suc 0) 0x1bdb6 32;
                      CALL memcpy_acode;
                      Block 4 0x1bdc6 33;
                      Block (Suc 0) 0x1bdc9 34;
                      CALL raw_pwrite_aligned_acode;
                      Block (Suc 0) 0x1bdce 35;
                      IF !SF THEN
                        Block 8 0x1bd92 36;
                        IF ZF THEN
                          Block (Suc 0) 0x1bd98 37
                        ELSE
                          Block (Suc 0) 0x1bd98 38
                        FI
                      ELSE
                        Block (Suc 0) 0x1bdd0 39
                      FI
                    OD;
                    CASES [
                      (P_0x1bee0_40,
                        Block 2 0x1bee3 40;
                        IF ZF THEN
                          Block (Suc 0) 0x1bee6 41
                        ELSE
                          Block 5 0x1befa 42;
                          Block (Suc 0) 0x1befd 43;
                          CALL raw_pread_aligned_acode;
                          Block (Suc 0) 0x1bf02 44;
                          IF SF THEN
                            Block (Suc 0) 0x1bf04 45
                          ELSE
                            Block 3 0x1bf0e 46;
                            IF !CF THEN
                              Block 14 0x1bfc6 47;
                              Block (Suc 0) 0x1bfc8 48;
                              CALL rep_movs_ESRDI_DSRSI_acode;
                              Block (Suc 0) 0x1bfcb 49;
                              Block (Suc 0) 0x1bf37 50
                            ELSE
                              Block 2 0x1bf18 51;
                              IF !ZF THEN
                                Block 8 0x1bffd 52
                              ELSE
                                Block 2 0x1bf22 53;
                                IF ZF THEN
                                  Block (Suc 0) 0x1bf25 54
                                ELSE
                                  Block 4 0x1bf2d 55;
                                  IF !ZF THEN
                                    Block 6 0x1c014 56
                                  ELSE
                                    Block 2 0x1bf37 57
                                  FI
                                FI
                              FI
                            FI;
                            Block 3 0x1bf45 58;
                            Block (Suc 0) 0x1bf48 59;
                            CALL raw_pwrite_aligned_acode;
                            Block (Suc 0) 0x1bf4d 60;
                            IF SF THEN
                              Block (Suc 0) 0x1bf4f 61
                            ELSE
                              Block 5 0x1bf5f 62
                            FI
                          FI
                        FI
                      )
                    ]
                  ELSE
                    Block 2 0x1bd74 63;
                    Block 2 0x1bee3 64;
                    IF ZF THEN
                      Block (Suc 0) 0x1bee6 65
                    ELSE
                      Block 5 0x1befa 66;
                      Block (Suc 0) 0x1befd 67;
                      CALL raw_pread_aligned_acode;
                      Block (Suc 0) 0x1bf02 68;
                      IF SF THEN
                        Block (Suc 0) 0x1bf04 69
                      ELSE
                        Block 3 0x1bf0e 70;
                        IF !CF THEN
                          Block 14 0x1bfc6 71;
                          Block (Suc 0) 0x1bfc8 72;
                          CALL rep_movs_ESRDI_DSRSI_acode;
                          Block (Suc 0) 0x1bfcb 73;
                          Block (Suc 0) 0x1bf37 74
                        ELSE
                          Block 2 0x1bf18 75;
                          IF !ZF THEN
                            Block 8 0x1bffd 76
                          ELSE
                            Block 2 0x1bf22 77;
                            IF ZF THEN
                              Block (Suc 0) 0x1bf25 78
                            ELSE
                              Block 4 0x1bf2d 79;
                              IF !ZF THEN
                                Block 6 0x1c014 80
                              ELSE
                                Block 2 0x1bf37 81
                              FI
                            FI
                          FI
                        FI;
                        Block 3 0x1bf45 82;
                        Block (Suc 0) 0x1bf48 83;
                        CALL raw_pwrite_aligned_acode;
                        Block (Suc 0) 0x1bf4d 84;
                        IF SF THEN
                          Block (Suc 0) 0x1bf4f 85
                        ELSE
                          Block 5 0x1bf5f 86
                        FI
                      FI
                    FI
                  FI;
                  Block 8 0x1bde0 87
                ELSE
                  Block 5 0x1be00 88;
                  Block (Suc 0) 0x1be03 89;
                  CALL raw_pwrite_aligned_acode;
                  Block 9 0x1be19 90
                FI
              ELSE
                Block 3 0x1bd6c 91;
                IF !ZF THEN
                  Block (Suc 0) 0x1bd72 92;
                  WHILE P_0x1bd9e_93 DO
                    Block 6 0x1bdb3 93;
                    Block (Suc 0) 0x1bdb6 94;
                    CALL memcpy_acode;
                    Block 4 0x1bdc6 95;
                    Block (Suc 0) 0x1bdc9 96;
                    CALL raw_pwrite_aligned_acode;
                    Block (Suc 0) 0x1bdce 97;
                    IF !SF THEN
                      Block 8 0x1bd92 98;
                      IF ZF THEN
                        Block (Suc 0) 0x1bd98 99
                      ELSE
                        Block (Suc 0) 0x1bd98 100
                      FI
                    ELSE
                      Block (Suc 0) 0x1bdd0 101
                    FI
                  OD;
                  CASES [
                    (P_0x1bee0_102,
                      Block 2 0x1bee3 102;
                      IF ZF THEN
                        Block (Suc 0) 0x1bee6 103
                      ELSE
                        Block 5 0x1befa 104;
                        Block (Suc 0) 0x1befd 105;
                        CALL raw_pread_aligned_acode;
                        Block (Suc 0) 0x1bf02 106;
                        IF SF THEN
                          Block (Suc 0) 0x1bf04 107
                        ELSE
                          Block 3 0x1bf0e 108;
                          IF !CF THEN
                            Block 14 0x1bfc6 109;
                            Block (Suc 0) 0x1bfc8 110;
                            CALL rep_movs_ESRDI_DSRSI_acode;
                            Block (Suc 0) 0x1bfcb 111;
                            Block (Suc 0) 0x1bf37 112
                          ELSE
                            Block 2 0x1bf18 113;
                            IF !ZF THEN
                              Block 8 0x1bffd 114
                            ELSE
                              Block 2 0x1bf22 115;
                              IF ZF THEN
                                Block (Suc 0) 0x1bf25 116
                              ELSE
                                Block 4 0x1bf2d 117;
                                IF !ZF THEN
                                  Block 6 0x1c014 118
                                ELSE
                                  Block 2 0x1bf37 119
                                FI
                              FI
                            FI
                          FI;
                          Block 3 0x1bf45 120;
                          Block (Suc 0) 0x1bf48 121;
                          CALL raw_pwrite_aligned_acode;
                          Block (Suc 0) 0x1bf4d 122;
                          IF SF THEN
                            Block (Suc 0) 0x1bf4f 123
                          ELSE
                            Block 5 0x1bf5f 124
                          FI
                        FI
                      FI
                    )
                  ]
                ELSE
                  Block 2 0x1bd74 125;
                  Block 2 0x1bee3 126;
                  IF ZF THEN
                    Block (Suc 0) 0x1bee6 127
                  ELSE
                    Block 5 0x1befa 128;
                    Block (Suc 0) 0x1befd 129;
                    CALL raw_pread_aligned_acode;
                    Block (Suc 0) 0x1bf02 130;
                    IF SF THEN
                      Block (Suc 0) 0x1bf04 131
                    ELSE
                      Block 3 0x1bf0e 132;
                      IF !CF THEN
                        Block 14 0x1bfc6 133;
                        Block (Suc 0) 0x1bfc8 134;
                        CALL rep_movs_ESRDI_DSRSI_acode;
                        Block (Suc 0) 0x1bfcb 135;
                        Block (Suc 0) 0x1bf37 136
                      ELSE
                        Block 2 0x1bf18 137;
                        IF !ZF THEN
                          Block 8 0x1bffd 138
                        ELSE
                          Block 2 0x1bf22 139;
                          IF ZF THEN
                            Block (Suc 0) 0x1bf25 140
                          ELSE
                            Block 4 0x1bf2d 141;
                            IF !ZF THEN
                              Block 6 0x1c014 142
                            ELSE
                              Block 2 0x1bf37 143
                            FI
                          FI
                        FI
                      FI;
                      Block 3 0x1bf45 144;
                      Block (Suc 0) 0x1bf48 145;
                      CALL raw_pwrite_aligned_acode;
                      Block (Suc 0) 0x1bf4d 146;
                      IF SF THEN
                        Block (Suc 0) 0x1bf4f 147
                      ELSE
                        Block 5 0x1bf5f 148
                      FI
                    FI
                  FI
                FI;
                Block 8 0x1bde0 149
              FI
            FI
          FI
        FI
      ELSE
        Block 2 0x1bd60 150;
        IF ZF THEN
          Block 2 0x1bde8 151;
          IF !ZF THEN
            Block 3 0x1bd6c 152;
            IF !ZF THEN
              Block (Suc 0) 0x1bd72 153;
              WHILE P_0x1bd9e_154 DO
                Block 6 0x1bdb3 154;
                Block (Suc 0) 0x1bdb6 155;
                CALL memcpy_acode;
                Block 4 0x1bdc6 156;
                Block (Suc 0) 0x1bdc9 157;
                CALL raw_pwrite_aligned_acode;
                Block (Suc 0) 0x1bdce 158;
                IF !SF THEN
                  Block 8 0x1bd92 159;
                  IF ZF THEN
                    Block (Suc 0) 0x1bd98 160
                  ELSE
                    Block (Suc 0) 0x1bd98 161
                  FI
                ELSE
                  Block (Suc 0) 0x1bdd0 162
                FI
              OD;
              CASES [
                (P_0x1bee0_163,
                  Block 2 0x1bee3 163;
                  IF ZF THEN
                    Block (Suc 0) 0x1bee6 164
                  ELSE
                    Block 5 0x1befa 165;
                    Block (Suc 0) 0x1befd 166;
                    CALL raw_pread_aligned_acode;
                    Block (Suc 0) 0x1bf02 167;
                    IF SF THEN
                      Block (Suc 0) 0x1bf04 168
                    ELSE
                      Block 3 0x1bf0e 169;
                      IF !CF THEN
                        Block 14 0x1bfc6 170;
                        Block (Suc 0) 0x1bfc8 171;
                        CALL rep_movs_ESRDI_DSRSI_acode;
                        Block (Suc 0) 0x1bfcb 172;
                        Block (Suc 0) 0x1bf37 173
                      ELSE
                        Block 2 0x1bf18 174;
                        IF !ZF THEN
                          Block 8 0x1bffd 175
                        ELSE
                          Block 2 0x1bf22 176;
                          IF ZF THEN
                            Block (Suc 0) 0x1bf25 177
                          ELSE
                            Block 4 0x1bf2d 178;
                            IF !ZF THEN
                              Block 6 0x1c014 179
                            ELSE
                              Block 2 0x1bf37 180
                            FI
                          FI
                        FI
                      FI;
                      Block 3 0x1bf45 181;
                      Block (Suc 0) 0x1bf48 182;
                      CALL raw_pwrite_aligned_acode;
                      Block (Suc 0) 0x1bf4d 183;
                      IF SF THEN
                        Block (Suc 0) 0x1bf4f 184
                      ELSE
                        Block 5 0x1bf5f 185
                      FI
                    FI
                  FI
                )
              ]
            ELSE
              Block 2 0x1bd74 186;
              Block 2 0x1bee3 187;
              IF ZF THEN
                Block (Suc 0) 0x1bee6 188
              ELSE
                Block 5 0x1befa 189;
                Block (Suc 0) 0x1befd 190;
                CALL raw_pread_aligned_acode;
                Block (Suc 0) 0x1bf02 191;
                IF SF THEN
                  Block (Suc 0) 0x1bf04 192
                ELSE
                  Block 3 0x1bf0e 193;
                  IF !CF THEN
                    Block 14 0x1bfc6 194;
                    Block (Suc 0) 0x1bfc8 195;
                    CALL rep_movs_ESRDI_DSRSI_acode;
                    Block (Suc 0) 0x1bfcb 196;
                    Block (Suc 0) 0x1bf37 197
                  ELSE
                    Block 2 0x1bf18 198;
                    IF !ZF THEN
                      Block 8 0x1bffd 199
                    ELSE
                      Block 2 0x1bf22 200;
                      IF ZF THEN
                        Block (Suc 0) 0x1bf25 201
                      ELSE
                        Block 4 0x1bf2d 202;
                        IF !ZF THEN
                          Block 6 0x1c014 203
                        ELSE
                          Block 2 0x1bf37 204
                        FI
                      FI
                    FI
                  FI;
                  Block 3 0x1bf45 205;
                  Block (Suc 0) 0x1bf48 206;
                  CALL raw_pwrite_aligned_acode;
                  Block (Suc 0) 0x1bf4d 207;
                  IF SF THEN
                    Block (Suc 0) 0x1bf4f 208
                  ELSE
                    Block 5 0x1bf5f 209
                  FI
                FI
              FI
            FI;
            Block 8 0x1bde0 210
          ELSE
            Block 5 0x1be00 211;
            Block (Suc 0) 0x1be03 212;
            CALL raw_pwrite_aligned_acode;
            Block 9 0x1be19 213
          FI
        ELSE
          Block 3 0x1bd6c 214;
          IF !ZF THEN
            Block (Suc 0) 0x1bd72 215;
            WHILE P_0x1bd9e_216 DO
              Block 6 0x1bdb3 216;
              Block (Suc 0) 0x1bdb6 217;
              CALL memcpy_acode;
              Block 4 0x1bdc6 218;
              Block (Suc 0) 0x1bdc9 219;
              CALL raw_pwrite_aligned_acode;
              Block (Suc 0) 0x1bdce 220;
              IF !SF THEN
                Block 8 0x1bd92 221;
                IF ZF THEN
                  Block (Suc 0) 0x1bd98 222
                ELSE
                  Block (Suc 0) 0x1bd98 223
                FI
              ELSE
                Block (Suc 0) 0x1bdd0 224
              FI
            OD;
            CASES [
              (P_0x1bee0_225,
                Block 2 0x1bee3 225;
                IF ZF THEN
                  Block (Suc 0) 0x1bee6 226
                ELSE
                  Block 5 0x1befa 227;
                  Block (Suc 0) 0x1befd 228;
                  CALL raw_pread_aligned_acode;
                  Block (Suc 0) 0x1bf02 229;
                  IF SF THEN
                    Block (Suc 0) 0x1bf04 230
                  ELSE
                    Block 3 0x1bf0e 231;
                    IF !CF THEN
                      Block 14 0x1bfc6 232;
                      Block (Suc 0) 0x1bfc8 233;
                      CALL rep_movs_ESRDI_DSRSI_acode;
                      Block (Suc 0) 0x1bfcb 234;
                      Block (Suc 0) 0x1bf37 235
                    ELSE
                      Block 2 0x1bf18 236;
                      IF !ZF THEN
                        Block 8 0x1bffd 237
                      ELSE
                        Block 2 0x1bf22 238;
                        IF ZF THEN
                          Block (Suc 0) 0x1bf25 239
                        ELSE
                          Block 4 0x1bf2d 240;
                          IF !ZF THEN
                            Block 6 0x1c014 241
                          ELSE
                            Block 2 0x1bf37 242
                          FI
                        FI
                      FI
                    FI;
                    Block 3 0x1bf45 243;
                    Block (Suc 0) 0x1bf48 244;
                    CALL raw_pwrite_aligned_acode;
                    Block (Suc 0) 0x1bf4d 245;
                    IF SF THEN
                      Block (Suc 0) 0x1bf4f 246
                    ELSE
                      Block 5 0x1bf5f 247
                    FI
                  FI
                FI
              )
            ]
          ELSE
            Block 2 0x1bd74 248;
            Block 2 0x1bee3 249;
            IF ZF THEN
              Block (Suc 0) 0x1bee6 250
            ELSE
              Block 5 0x1befa 251;
              Block (Suc 0) 0x1befd 252;
              CALL raw_pread_aligned_acode;
              Block (Suc 0) 0x1bf02 253;
              IF SF THEN
                Block (Suc 0) 0x1bf04 254
              ELSE
                Block 3 0x1bf0e 255;
                IF !CF THEN
                  Block 14 0x1bfc6 256;
                  Block (Suc 0) 0x1bfc8 257;
                  CALL rep_movs_ESRDI_DSRSI_acode;
                  Block (Suc 0) 0x1bfcb 258;
                  Block (Suc 0) 0x1bf37 259
                ELSE
                  Block 2 0x1bf18 260;
                  IF !ZF THEN
                    Block 8 0x1bffd 261
                  ELSE
                    Block 2 0x1bf22 262;
                    IF ZF THEN
                      Block (Suc 0) 0x1bf25 263
                    ELSE
                      Block 4 0x1bf2d 264;
                      IF !ZF THEN
                        Block 6 0x1c014 265
                      ELSE
                        Block 2 0x1bf37 266
                      FI
                    FI
                  FI
                FI;
                Block 3 0x1bf45 267;
                Block (Suc 0) 0x1bf48 268;
                CALL raw_pwrite_aligned_acode;
                Block (Suc 0) 0x1bf4d 269;
                IF SF THEN
                  Block (Suc 0) 0x1bf4f 270
                ELSE
                  Block 5 0x1bf5f 271
                FI
              FI
            FI
          FI;
          Block 8 0x1bde0 272
        FI
      FI
    FI
  \<close>

schematic_goal "raw_pwrite":
  assumes
    \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd4a \<longrightarrow> P_0x1bd4a_true_1_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be03 \<longrightarrow> P_0x1be03_2_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be08 \<longrightarrow> P_0x1be08_3_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd4a \<longrightarrow> P_0x1bd4a_false_4_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd5a \<longrightarrow> P_0x1bd5a_true_5_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be3b \<longrightarrow> P_0x1be3b_6_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be40 \<longrightarrow> P_0x1be40_7_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be42 \<longrightarrow> P_0x1be42_true_8_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be42 \<longrightarrow> P_0x1be42_false_9_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be6c \<longrightarrow> P_0x1be6c_true_10_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf6c \<longrightarrow> P_0x1bf6c_true_11_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf6c \<longrightarrow> P_0x1bf6c_false_12_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf71 \<longrightarrow> P_0x1bf71_true_13_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf71 \<longrightarrow> P_0x1bf71_false_14_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf81 \<longrightarrow> P_0x1bf81_true_15_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf81 \<longrightarrow> P_0x1bf81_false_16_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be6c \<longrightarrow> P_0x1be6c_false_17_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be9b \<longrightarrow> P_0x1be9b_18_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be9e \<longrightarrow> P_0x1be9e_19_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bea2 \<longrightarrow> P_0x1bea2_20_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1beb4 \<longrightarrow> P_0x1beb4_21_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1beb9 \<longrightarrow> P_0x1beb9_22_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bebb \<longrightarrow> P_0x1bebb_true_23_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bebb \<longrightarrow> P_0x1bebb_false_24_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bec7 \<longrightarrow> P_0x1bec7_true_25_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bec7 \<longrightarrow> P_0x1bec7_false_26_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd60 \<longrightarrow> P_0x1bd60_27_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd67 \<longrightarrow> P_0x1bd67_true_28_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdef \<longrightarrow> P_0x1bdef_true_29_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_true_30_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd9e \<longrightarrow> P_0x1bd9e_31_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdb6 \<longrightarrow> P_0x1bdb6_32_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdbb \<longrightarrow> P_0x1bdbb_33_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdc9 \<longrightarrow> P_0x1bdc9_34_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdce \<longrightarrow> P_0x1bdce_35_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_true_36_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_true_37_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_false_38_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_false_39_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_40_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_41_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_42_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_43_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_44_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_45_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_46_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_47_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_48_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_49_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_50_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_51_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_52_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_53_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_54_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_55_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_56_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_57_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_58_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_59_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_60_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_61_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_62_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_false_63_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_64_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_65_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_66_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_67_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_68_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_69_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_70_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_71_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_72_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_73_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_74_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_75_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_76_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_77_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_78_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_79_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_80_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_81_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_82_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_83_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_84_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_85_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_86_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd2 \<longrightarrow> P_0x1bdd2_87_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdef \<longrightarrow> P_0x1bdef_false_88_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be03 \<longrightarrow> P_0x1be03_89_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be08 \<longrightarrow> P_0x1be08_90_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd67 \<longrightarrow> P_0x1bd67_false_91_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_true_92_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd9e \<longrightarrow> P_0x1bd9e_93_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdb6 \<longrightarrow> P_0x1bdb6_94_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdbb \<longrightarrow> P_0x1bdbb_95_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdc9 \<longrightarrow> P_0x1bdc9_96_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdce \<longrightarrow> P_0x1bdce_97_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_true_98_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_true_99_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_false_100_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_false_101_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_102_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_103_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_104_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_105_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_106_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_107_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_108_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_109_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_110_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_111_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_112_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_113_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_114_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_115_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_116_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_117_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_118_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_119_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_120_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_121_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_122_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_123_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_124_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_false_125_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_126_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_127_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_128_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_129_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_130_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_131_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_132_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_133_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_134_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_135_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_136_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_137_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_138_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_139_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_140_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_141_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_142_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_143_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_144_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_145_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_146_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_147_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_148_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd2 \<longrightarrow> P_0x1bdd2_149_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd5a \<longrightarrow> P_0x1bd5a_false_150_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd67 \<longrightarrow> P_0x1bd67_true_151_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdef \<longrightarrow> P_0x1bdef_true_152_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_true_153_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd9e \<longrightarrow> P_0x1bd9e_154_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdb6 \<longrightarrow> P_0x1bdb6_155_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdbb \<longrightarrow> P_0x1bdbb_156_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdc9 \<longrightarrow> P_0x1bdc9_157_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdce \<longrightarrow> P_0x1bdce_158_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_true_159_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_true_160_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_false_161_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_false_162_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_163_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_164_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_165_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_166_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_167_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_168_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_169_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_170_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_171_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_172_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_173_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_174_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_175_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_176_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_177_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_178_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_179_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_180_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_181_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_182_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_183_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_184_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_185_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_false_186_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_187_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_188_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_189_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_190_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_191_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_192_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_193_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_194_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_195_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_196_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_197_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_198_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_199_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_200_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_201_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_202_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_203_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_204_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_205_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_206_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_207_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_208_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_209_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd2 \<longrightarrow> P_0x1bdd2_210_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdef \<longrightarrow> P_0x1bdef_false_211_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be03 \<longrightarrow> P_0x1be03_212_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1be08 \<longrightarrow> P_0x1be08_213_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd67 \<longrightarrow> P_0x1bd67_false_214_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_true_215_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd9e \<longrightarrow> P_0x1bd9e_216_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdb6 \<longrightarrow> P_0x1bdb6_217_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdbb \<longrightarrow> P_0x1bdbb_218_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdc9 \<longrightarrow> P_0x1bdc9_219_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdce \<longrightarrow> P_0x1bdce_220_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_true_221_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_true_222_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd98 \<longrightarrow> P_0x1bd98_false_223_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd0 \<longrightarrow> P_0x1bdd0_false_224_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_225_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_226_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_227_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_228_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_229_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_230_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_231_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_232_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_233_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_234_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_235_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_236_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_237_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_238_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_239_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_240_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_241_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_242_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_243_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_244_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_245_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_246_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_247_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bd72 \<longrightarrow> P_0x1bd72_false_248_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee0 \<longrightarrow> P_0x1bee0_249_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_true_250_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bee6 \<longrightarrow> P_0x1bee6_false_251_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1befd \<longrightarrow> P_0x1befd_252_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf02 \<longrightarrow> P_0x1bf02_253_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_true_254_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf04 \<longrightarrow> P_0x1bf04_false_255_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_true_256_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfc8 \<longrightarrow> P_0x1bfc8_257_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bfcb \<longrightarrow> P_0x1bfcb_258_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf37 \<longrightarrow> P_0x1bf37_259_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf12 \<longrightarrow> P_0x1bf12_false_260_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_true_261_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf1c \<longrightarrow> P_0x1bf1c_false_262_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_true_263_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf25 \<longrightarrow> P_0x1bf25_false_264_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_true_265_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf31 \<longrightarrow> P_0x1bf31_false_266_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf3b \<longrightarrow> P_0x1bf3b_267_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf48 \<longrightarrow> P_0x1bf48_268_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4d \<longrightarrow> P_0x1bf4d_269_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_true_270_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bf4f \<longrightarrow> P_0x1bf4f_false_271_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1bdd2 \<longrightarrow> P_0x1bdd2_272_regions \<sigma>\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1be03_2}} \<box>raw_pwrite_aligned_acode {{P_0x1be08_3;M_0x1be03}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1be3b_6}} \<box>raw_pread_aligned_acode {{P_0x1be40_7;M_0x1be3b}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1be9b_18}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1be9e_19;M_0x1be9b}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1beb4_21}} \<box>raw_pwrite_aligned_acode {{P_0x1beb9_22;M_0x1beb4}}\<close>
    and [blocks]: \<open>{{Q_memcpy_addr_0x1bdb6_32}} \<box>memcpy_acode {{P_0x1bdbb_33;M_0x1bdb6}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bdc9_34}} \<box>raw_pwrite_aligned_acode {{P_0x1bdce_35;M_0x1bdc9}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_43}} \<box>raw_pread_aligned_acode {{P_0x1bf02_44;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_48}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_49;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_59}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_60;M_0x1bf48}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_67}} \<box>raw_pread_aligned_acode {{P_0x1bf02_68;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_72}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_73;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_83}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_84;M_0x1bf48}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1be03_89}} \<box>raw_pwrite_aligned_acode {{P_0x1be08_90;M_0x1be03}}\<close>
    and [blocks]: \<open>{{Q_memcpy_addr_0x1bdb6_94}} \<box>memcpy_acode {{P_0x1bdbb_95;M_0x1bdb6}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bdc9_96}} \<box>raw_pwrite_aligned_acode {{P_0x1bdce_97;M_0x1bdc9}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_105}} \<box>raw_pread_aligned_acode {{P_0x1bf02_106;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_110}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_111;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_121}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_122;M_0x1bf48}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_129}} \<box>raw_pread_aligned_acode {{P_0x1bf02_130;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_134}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_135;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_145}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_146;M_0x1bf48}}\<close>
    and [blocks]: \<open>{{Q_memcpy_addr_0x1bdb6_155}} \<box>memcpy_acode {{P_0x1bdbb_156;M_0x1bdb6}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bdc9_157}} \<box>raw_pwrite_aligned_acode {{P_0x1bdce_158;M_0x1bdc9}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_166}} \<box>raw_pread_aligned_acode {{P_0x1bf02_167;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_171}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_172;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_182}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_183;M_0x1bf48}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_190}} \<box>raw_pread_aligned_acode {{P_0x1bf02_191;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_195}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_196;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_206}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_207;M_0x1bf48}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1be03_212}} \<box>raw_pwrite_aligned_acode {{P_0x1be08_213;M_0x1be03}}\<close>
    and [blocks]: \<open>{{Q_memcpy_addr_0x1bdb6_217}} \<box>memcpy_acode {{P_0x1bdbb_218;M_0x1bdb6}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bdc9_219}} \<box>raw_pwrite_aligned_acode {{P_0x1bdce_220;M_0x1bdc9}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_228}} \<box>raw_pread_aligned_acode {{P_0x1bf02_229;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_233}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_234;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_244}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_245;M_0x1bf48}}\<close>
    and [blocks]: \<open>{{Q_raw_pread_aligned_addr_0x1befd_252}} \<box>raw_pread_aligned_acode {{P_0x1bf02_253;M_0x1befd}}\<close>
    and [blocks]: \<open>{{Q_rep_movs_ESRDI_DSRSI_addr_0x1bfc8_257}} \<box>rep_movs_ESRDI_DSRSI_acode {{P_0x1bfcb_258;M_0x1bfc8}}\<close>
    and [blocks]: \<open>{{Q_raw_pwrite_aligned_addr_0x1bf48_268}} \<box>raw_pwrite_aligned_acode {{P_0x1bf4d_269;M_0x1bf48}}\<close>
  shows \<open>{{?P}} raw_pwrite_acode {{?Q;?M}}\<close>
  apply (vcg acode: raw_pwrite_acode_def assms: assms)
  apply (vcg_while \<open>P_0x1bd9e_31 || P_0x1bee0_40\<close> assms: assms)
  apply (vcg_while \<open>P_0x1bd9e_93 || P_0x1bee0_102\<close> assms: assms)
  apply (vcg_while \<open>P_0x1bd9e_154 || P_0x1bee0_163\<close> assms: assms)
  apply (vcg_while \<open>P_0x1bd9e_216 || P_0x1bee0_225\<close> assms: assms)
  done

end

end
