(*
Copyright 2019

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*)
theory vmdk_create_part_5
  imports "../../../isabelle/VCG/HTriple"
begin

locale "qemu_img_xen" = execution_context + exec_code +
  fixes open64_0x9ac8_retval\<^sub>v write_0x9b99_retval\<^sub>v write_0x9ba8_retval\<^sub>v ftruncate64_0x9bb8_retval\<^sub>v lseek64_0x9bca_retval\<^sub>v write_0x9bfc_retval\<^sub>v lseek64_0x9c1e_retval\<^sub>v write_0x9c45_retval\<^sub>v strrchr_0x9c66_retval\<^sub>v strrchr_0x9c7e_retval\<^sub>v strrchr_0x9c96_retval\<^sub>v time_0x9cd7_retval\<^sub>v snprintf_chk_0x9d09_retval\<^sub>v lseek64_0x9d1f_retval\<^sub>v write_0x9d63_retval\<^sub>v close_0x9d6a_retval\<^sub>v lseek64_0x9dad_retval\<^sub>v stack_chk_fail_0x9dca_retval\<^sub>v snprintf_chk_addr stack_chk_fail_addr close_addr ftruncate64_addr lseek64_addr open64_addr strrchr_addr time_addr write_addr :: \<open>64 word\<close>
    and snprintf_chk_acode stack_chk_fail_acode close_acode ftruncate64_acode lseek64_acode open64_acode strrchr_acode time_acode write_acode :: ACode
  assumes fetch:
    "fetch 0x9a90 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x9a92 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r15)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x9a95 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 577)), 5)"
    "fetch 0x9a9a \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x9a9c \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x9a9f \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x9aa1 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x9aa3 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x9aa4 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x9aa5 \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 1160)), 7)"
    "fetch 0x9aac \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 4)))) (Storage (Reg (General ThirtyTwo rdx))), 4)"
    "fetch 0x9ab0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 420)), 5)"
    "fetch 0x9ab5 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour fs)) (A_WordConstant 40))))), 9)"
    "fetch 0x9abe \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 1144)))) (Storage (Reg (General SixtyFour rax))), 8)"
    "fetch 0x9ac6 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9ac8 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''open64'')), 5)"
    "fetch 0x9acd \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9acf \<equiv> (Unary (IS_8088 Js) (Immediate SixtyFour (ImmVal 40387)), 6)"
    "fetch 0x9ad5 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9ad7 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 28)))), 5)"
    "fetch 0x9adc \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Immediate SixtyFour (ImmVal 12884901889)), 10)"
    "fetch 0x9ae6 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 28)))) (Immediate SixtyFour (ImmVal 1447904331)), 8)"
    "fetch 0x9aee \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 32)))) (Storage (Reg (General SixtyFour rax))), 5)"
    "fetch 0x9af3 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour r15))), 3)"
    "fetch 0x9af6 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9af8 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rbp)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 32)))), 5)"
    "fetch 0x9afd \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rax)) (Immediate SixtyFour (ImmVal 127)), 4)"
    "fetch 0x9b01 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r12)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour r15)) (A_WordConstant 254)))), 7)"
    "fetch 0x9b08 \<equiv> (Binary (IS_8088 Mov) (Memory Eight (A_SizeDirective 8 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 100)))) (Immediate SixtyFour (ImmVal 0)), 5)"
    "fetch 0x9b0d \<equiv> (Binary (IS_PentiumPro Cmovns) (Reg (General SixtyFour r12)) (Storage (Reg (General SixtyFour rax))), 4)"
    "fetch 0x9b11 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 40)))) (Storage (Reg (General SixtyFour r15))), 5)"
    "fetch 0x9b16 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 48)))) (Immediate SixtyFour (ImmVal 128)), 9)"
    "fetch 0x9b1f \<equiv> (Binary (IS_8088 Sar) (Reg (General SixtyFour r12)) (Immediate SixtyFour (ImmVal 7)), 4)"
    "fetch 0x9b23 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 72)))) (Immediate SixtyFour (ImmVal 512)), 8)"
    "fetch 0x9b2b \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 511)), 7)"
    "fetch 0x9b32 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 56)))) (Immediate SixtyFour (ImmVal 1)), 9)"
    "fetch 0x9b3b \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo r12)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9b3f \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 101)))) (Immediate SixtyFour (ImmVal 168632330)), 8)"
    "fetch 0x9b47 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x9b4a \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo rdx)) (Storage (Memory SixtyFour (A_Plus (A_Mult 4 (A_FromReg (General SixtyFour r12))) (A_WordConstant 0)))), 8)"
    "fetch 0x9b52 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 64)))) (Immediate SixtyFour (ImmVal 20)), 9)"
    "fetch 0x9b5b \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_Plus (A_Mult 4 (A_FromReg (General SixtyFour rax))) (A_WordConstant 511)))), 8)"
    "fetch 0x9b63 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 76)))) (Immediate SixtyFour (ImmVal 21)), 9)"
    "fetch 0x9b6c \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r13)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x9b6f \<equiv> (Binary (IS_8088 Shr) (Reg (General SixtyFour r13)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9b73 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour r13)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rdx))) (A_WordConstant 21))))), 5)"
    "fetch 0x9b78 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8)))) (Storage (Reg (General SixtyFour r13))), 5)"
    "fetch 0x9b7d \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 84)))) (Storage (Reg (General SixtyFour rax))), 5)"
    "fetch 0x9b82 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour r13))), 3)"
    "fetch 0x9b85 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rdx)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 127))))), 5)"
    "fetch 0x9b8a \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 4)), 5)"
    "fetch 0x9b8f \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 1073741696)), 5)"
    "fetch 0x9b94 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 92)))) (Storage (Reg (General SixtyFour rax))), 5)"
    "fetch 0x9b99 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''write'')), 5)"
    "fetch 0x9b9e \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 73)), 5)"
    "fetch 0x9ba3 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour rbp))), 3)"
    "fetch 0x9ba6 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9ba8 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''write'')), 5)"
    "fetch 0x9bad \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 92))))), 5)"
    "fetch 0x9bb2 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9bb4 \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9bb8 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''ftruncate64'')), 5)"
    "fetch 0x9bbd \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 76))))), 5)"
    "fetch 0x9bc2 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rdx)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x9bc4 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9bc6 \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9bca \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''lseek64'')), 5)"
    "fetch 0x9bcf \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 76))))), 4)"
    "fetch 0x9bd3 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r13))), 3)"
    "fetch 0x9bd6 \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))) (Storage (Reg (General ThirtyTwo rax))), 4)"
    "fetch 0x9bda \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x9bdd \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 40352)), 6)"
    "fetch 0x9be3 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo rbp))), 2)"
    "fetch 0x9be5 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r13)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))), 5)"
    "fetch 0x9bea \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 39922)), 2)"
    "fetch 0x9bec \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 0))))), 4)"
    "fetch 0x9bf0 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rbp)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9bf2 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 4)), 5)"
    "fetch 0x9bf7 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r13))), 3)"
    "fetch 0x9bfa \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9bfc \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''write'')), 5)"
    "fetch 0x9c01 \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo rax)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rbp)) (A_WordConstant 1)))), 3)"
    "fetch 0x9c04 \<equiv> (Binary (IS_8088 Add) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))) (Immediate SixtyFour (ImmVal 4)), 5)"
    "fetch 0x9c09 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x9c0c \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 39920)), 2)"
    "fetch 0x9c0e \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 84))))), 5)"
    "fetch 0x9c13 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rdx)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x9c15 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9c17 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo r12))), 3)"
    "fetch 0x9c1a \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9c1e \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''lseek64'')), 5)"
    "fetch 0x9c23 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 4)"
    "fetch 0x9c27 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 84))))), 4)"
    "fetch 0x9c2b \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))) (Storage (Reg (General ThirtyTwo rax))), 4)"
    "fetch 0x9c2f \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 39995)), 2)"
    "fetch 0x9c31 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 0))))), 7)"
    "fetch 0x9c38 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x9c3b \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 4)), 5)"
    "fetch 0x9c40 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r13))), 3)"
    "fetch 0x9c43 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9c45 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''write'')), 5)"
    "fetch 0x9c4a \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo rax)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour r12)) (A_WordConstant 1)))), 5)"
    "fetch 0x9c4f \<equiv> (Binary (IS_8088 Add) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))) (Immediate SixtyFour (ImmVal 4)), 5)"
    "fetch 0x9c54 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo r12)) (Storage (Reg (General ThirtyTwo rbp))), 3)"
    "fetch 0x9c57 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 39992)), 2)"
    "fetch 0x9c59 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x9c5c \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 92)), 5)"
    "fetch 0x9c61 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r12)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 112)))), 5)"
    "fetch 0x9c66 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''strrchr'')), 5)"
    "fetch 0x9c6b \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 47)), 5)"
    "fetch 0x9c70 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 1)))), 4)"
    "fetch 0x9c74 \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x9c77 \<equiv> (Binary (IS_PentiumPro Cmovne) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdx))), 4)"
    "fetch 0x9c7b \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x9c7e \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''strrchr'')), 5)"
    "fetch 0x9c83 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 58)), 5)"
    "fetch 0x9c88 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 1)))), 4)"
    "fetch 0x9c8c \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x9c8f \<equiv> (Binary (IS_PentiumPro Cmovne) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdx))), 4)"
    "fetch 0x9c93 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x9c96 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''strrchr'')), 5)"
    "fetch 0x9c9b \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x9c9e \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rax)) (A_WordConstant 1)))), 4)"
    "fetch 0x9ca2 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour r15))), 3)"
    "fetch 0x9ca5 \<equiv> (Binary (IS_PentiumPro Cmovne) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rdx))), 4)"
    "fetch 0x9ca9 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 9369774767598502409)), 10)"
    "fetch 0x9cb3 \<equiv> (Unary (IS_8088 Imul) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x9cb6 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour r15))), 3)"
    "fetch 0x9cb9 \<equiv> (Binary (IS_8088 Sar) (Reg (General SixtyFour rax)) (Immediate SixtyFour (ImmVal 63)), 4)"
    "fetch 0x9cbd \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rbp)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rdx)) (A_Mult 1 (A_FromReg (General SixtyFour r15)))))), 4)"
    "fetch 0x9cc1 \<equiv> (Binary (IS_8088 Sar) (Reg (General SixtyFour rbp)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9cc5 \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rbp)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x9cc8 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 4))))), 4)"
    "fetch 0x9ccc \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 4)), 3)"
    "fetch 0x9ccf \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 1)), 3)"
    "fetch 0x9cd2 \<equiv> (Binary (IS_8088 Sbb) (Reg (General ThirtyTwo r13)) (Storage (Reg (General ThirtyTwo r13))), 3)"
    "fetch 0x9cd5 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rdi))), 2)"
    "fetch 0x9cd7 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''time'')), 5)"
    "fetch 0x9cdc \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo r13)) (Immediate SixtyFour (ImmVal 4294967294)), 4)"
    "fetch 0x9ce0 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x9ce1 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 1024)), 5)"
    "fetch 0x9ce6 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo r13)) (Immediate SixtyFour (ImmVal 6)), 4)"
    "fetch 0x9cea \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r9)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x9ced \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r8)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rip)) (A_WordConstant 93164)))), 7)"
    "fetch 0x9cf4 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9cf6 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x9cf8 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 1)), 5)"
    "fetch 0x9cfd \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rsi)) (Immediate SixtyFour (ImmVal 1024)), 5)"
    "fetch 0x9d02 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour r12))), 3)"
    "fetch 0x9d05 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x9d07 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x9d09 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''__snprintf_chk'')), 5)"
    "fetch 0x9d0e \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 32)), 4)"
    "fetch 0x9d12 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 56))))), 5)"
    "fetch 0x9d17 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rdx)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x9d19 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9d1b \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9d1f \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''lseek64'')), 5)"
    "fetch 0x9d24 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour r12))), 3)"
    "fetch 0x9d27 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rdx))))), 2)"
    "fetch 0x9d29 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 4)), 4)"
    "fetch 0x9d2d \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo rax)) (Storage (Memory SixtyFour (A_Minus (A_FromReg (General SixtyFour rcx)) (A_WordConstant 16843009)))), 6)"
    "fetch 0x9d33 \<equiv> (Unary (IS_8088 Not) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x9d35 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x9d37 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 2155905152)), 5)"
    "fetch 0x9d3c \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 40231)), 2)"
    "fetch 0x9d3e \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9d40 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r12))), 3)"
    "fetch 0x9d43 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9d45 \<equiv> (Binary (IS_8088 Shr) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 16)), 3)"
    "fetch 0x9d48 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 32896)), 5)"
    "fetch 0x9d4d \<equiv> (Binary (IS_PentiumPro Cmove) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rcx))), 3)"
    "fetch 0x9d50 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 2)))), 4)"
    "fetch 0x9d54 \<equiv> (Binary (IS_PentiumPro Cmove) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rcx))), 4)"
    "fetch 0x9d58 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9d5a \<equiv> (Binary (IS_8088 Add) (Reg (General Eight rcx)) (Storage (Reg (General Eight rax))), 2)"
    "fetch 0x9d5c \<equiv> (Binary (IS_8088 Sbb) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 3)), 4)"
    "fetch 0x9d60 \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour r12))), 3)"
    "fetch 0x9d63 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''write'')), 5)"
    "fetch 0x9d68 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9d6a \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''close'')), 5)"
    "fetch 0x9d6f \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x9d71 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 1144))))), 8)"
    "fetch 0x9d79 \<equiv> (Binary (IS_8088 Xor) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour fs)) (A_WordConstant 40))))), 9)"
    "fetch 0x9d82 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 40394)), 2)"
    "fetch 0x9d84 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 1160)), 7)"
    "fetch 0x9d8b \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x9d8c \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x9d8d \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x9d8f \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x9d91 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x9d93 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x9d95 \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x9d96 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour cs)) (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0))))))), 10)"
    "fetch 0x9da0 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 84))))), 5)"
    "fetch 0x9da5 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rdx)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x9da7 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdi)) (Storage (Reg (General ThirtyTwo rbx))), 2)"
    "fetch 0x9da9 \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x9dad \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''lseek64'')), 5)"
    "fetch 0x9db2 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 4)"
    "fetch 0x9db6 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 84))))), 4)"
    "fetch 0x9dba \<equiv> (Binary (IS_8088 Mov) (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))) (Storage (Reg (General ThirtyTwo rax))), 4)"
    "fetch 0x9dbe \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 40025)), 5)"
    "fetch 0x9dc3 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Immediate SixtyFour (ImmVal 4294967295)), 5)"
    "fetch 0x9dc8 \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 40305)), 2)"
    "fetch 0x9dca \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''__stack_chk_fail'')), 5)"
    and \<alpha>_def: \<open>\<alpha> = \<lparr>text_sections = [], data_sections = [], labels_to_offsets = [], binary_offset = 0\<rparr>\<close>
    and snprintf_chk\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''__snprintf_chk'') = snprintf_chk_addr\<close>
    and stack_chk_fail\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''__stack_chk_fail'') = stack_chk_fail_addr\<close>
    and close\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''close'') = close_addr\<close>
    and ftruncate64\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''ftruncate64'') = ftruncate64_addr\<close>
    and lseek64\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''lseek64'') = lseek64_addr\<close>
    and open64\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''open64'') = open64_addr\<close>
    and strrchr\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''strrchr'') = strrchr_addr\<close>
    and time\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''time'') = time_addr\<close>
    and write\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''write'') = write_addr\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>open64_0x9ac8_retval \<equiv> open64_0x9ac8_retval\<^sub>v\<close>
definition \<open>write_0x9b99_retval \<equiv> write_0x9b99_retval\<^sub>v\<close>
definition \<open>write_0x9ba8_retval \<equiv> write_0x9ba8_retval\<^sub>v\<close>
definition \<open>ftruncate64_0x9bb8_retval \<equiv> ftruncate64_0x9bb8_retval\<^sub>v\<close>
definition \<open>lseek64_0x9bca_retval \<equiv> lseek64_0x9bca_retval\<^sub>v\<close>
definition \<open>write_0x9bfc_retval \<equiv> write_0x9bfc_retval\<^sub>v\<close>
definition \<open>lseek64_0x9c1e_retval \<equiv> lseek64_0x9c1e_retval\<^sub>v\<close>
definition \<open>write_0x9c45_retval \<equiv> write_0x9c45_retval\<^sub>v\<close>
definition \<open>strrchr_0x9c66_retval \<equiv> strrchr_0x9c66_retval\<^sub>v\<close>
definition \<open>strrchr_0x9c7e_retval \<equiv> strrchr_0x9c7e_retval\<^sub>v\<close>
definition \<open>strrchr_0x9c96_retval \<equiv> strrchr_0x9c96_retval\<^sub>v\<close>
definition \<open>time_0x9cd7_retval \<equiv> time_0x9cd7_retval\<^sub>v\<close>
definition \<open>snprintf_chk_0x9d09_retval \<equiv> snprintf_chk_0x9d09_retval\<^sub>v\<close>
definition \<open>lseek64_0x9d1f_retval \<equiv> lseek64_0x9d1f_retval\<^sub>v\<close>
definition \<open>write_0x9d63_retval \<equiv> write_0x9d63_retval\<^sub>v\<close>
definition \<open>close_0x9d6a_retval \<equiv> close_0x9d6a_retval\<^sub>v\<close>
definition \<open>lseek64_0x9dad_retval \<equiv> lseek64_0x9dad_retval\<^sub>v\<close>
definition \<open>stack_chk_fail_0x9dca_retval \<equiv> stack_chk_fail_0x9dca_retval\<^sub>v\<close>

text \<open>
  Going with a binary offset of 0 for now to make things easier. (We do want to keep that field
  around, though, for future more generic usage.)
\<close>
lemma \<alpha>_boffset[simp]: \<open>binary_offset \<alpha> = 0\<close>
  unfolding \<alpha>_def
  by simp

named_theorems blocks and Ps and Qs

method step uses add del =
  subst exec_block.simps,
  rewrite_one_let',
  rewrite_one_let' add: fetch,
  rewrite_one_let',
  auto simp add: simp_rules Let'_def read_region'_def write_block'_def get'_def set'_def step_def exec_instr_def presimplify add numeral_2_eq_2[symmetric] simp del: del

method steps uses pre post regionset add del =
  auto simp: pred_logic pre regionset,
  (step add: add del: del)+,
  (auto simp add: eq_def)[1],
  auto simp: block_usage_def eq_def setcc_def cmovcc_def if'_then_else_def sub_sign_flag_def simp_rules numeral_2_eq_2[symmetric] Let'_def read_region'_def write_block'_def get'_def set'_def post regionset

(* ((simp add: assms pred_logic Ps Qs)+)? helps keep goals clean but causes issues when there are subcalls *)
method vcg_step uses assms =
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

text \<open>For @{const CASES}.\<close>
method vcg_step' uses assms =
  (rule htriples)+,
  simp,
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

text \<open>
  Sometimes needs to be moved down (close to the abstract code) to avoid TERM exceptions,
  haven't figured out the cause.
\<close>
method vcg_while for P :: state_pred uses assms =
  ((rule htriples)+)?,
  rule HTriple_weaken[where P=P],
  simp add: pred_logic Ps Qs assms,
  rule HTriple_while,
  (vcg_step assms: assms)+,
  (simp add: pred_logic Ps Qs)+,
  (
    (vcg_step' assms: assms | vcg_step assms: assms)+,
    ((simp add: assms)+)?
  )

method vcg uses acode assms =
  subst acode,
  (vcg_step assms: assms)+

end

locale "vmdk_create_part_5" = "qemu_img_xen" +
  fixes RAX\<^sub>0\<^sub>v RBX\<^sub>0\<^sub>v RCX\<^sub>0\<^sub>v RDX\<^sub>0\<^sub>v RDI\<^sub>0\<^sub>v RSI\<^sub>0\<^sub>v RSP\<^sub>0\<^sub>v RBP\<^sub>0\<^sub>v R15\<^sub>0\<^sub>v R14\<^sub>0\<^sub>v R13\<^sub>0\<^sub>v R12\<^sub>0\<^sub>v R9\<^sub>0\<^sub>v R8\<^sub>0\<^sub>v FS\<^sub>0\<^sub>v ret_address\<^sub>v :: \<open>64 word\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>RAX\<^sub>0 \<equiv> RAX\<^sub>0\<^sub>v\<close>
definition \<open>RBX\<^sub>0 \<equiv> RBX\<^sub>0\<^sub>v\<close>
definition \<open>RCX\<^sub>0 \<equiv> RCX\<^sub>0\<^sub>v\<close>
definition \<open>RDX\<^sub>0 \<equiv> RDX\<^sub>0\<^sub>v\<close>
definition \<open>RDI\<^sub>0 \<equiv> RDI\<^sub>0\<^sub>v\<close>
definition \<open>RSI\<^sub>0 \<equiv> RSI\<^sub>0\<^sub>v\<close>
definition \<open>RSP\<^sub>0 \<equiv> RSP\<^sub>0\<^sub>v\<close>
definition \<open>RBP\<^sub>0 \<equiv> RBP\<^sub>0\<^sub>v\<close>
definition \<open>R15\<^sub>0 \<equiv> R15\<^sub>0\<^sub>v\<close>
definition \<open>R14\<^sub>0 \<equiv> R14\<^sub>0\<^sub>v\<close>
definition \<open>R13\<^sub>0 \<equiv> R13\<^sub>0\<^sub>v\<close>
definition \<open>R12\<^sub>0 \<equiv> R12\<^sub>0\<^sub>v\<close>
definition \<open>R9\<^sub>0 \<equiv> R9\<^sub>0\<^sub>v\<close>
definition \<open>R8\<^sub>0 \<equiv> R8\<^sub>0\<^sub>v\<close>
definition \<open>FS\<^sub>0 \<equiv> FS\<^sub>0\<^sub>v\<close>
definition \<open>ret_address \<equiv> ret_address\<^sub>v\<close>

definition P_0x9a90_0 :: state_pred where
  \<open>P_0x9a90_0 \<sigma> \<equiv> RIP \<sigma> = 0x9a90 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x9a90_0_def[Ps]

definition P_0x9a90_0_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9a90_0_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9a90_0_regions :: state_pred where
  \<open>P_0x9a90_0_regions \<sigma> \<equiv> \<exists>regions. P_0x9a90_0_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9ac8_0 :: state_pred where
  \<open>Q_0x9ac8_0 \<sigma> \<equiv> RIP \<sigma> = 0x9ac8 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x1a4 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x241 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9ac8_0_def[Qs]

schematic_goal vmdk_create_part_5_0_15_0x9a90_0x9ac6_0[blocks]:
  assumes \<open>(P_0x9a90_0 && P_0x9a90_0_regions) \<sigma>\<close>
  shows \<open>exec_block 15 0x9ac6 0 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9ac8_0 ?\<sigma> \<and> block_usage P_0x9a90_0_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9a90_0_def P_0x9a90_0_regions_def post: Q_0x9ac8_0_def regionset: P_0x9a90_0_regions_set_def)

definition P_0x9ac8_1 :: state_pred where
  \<open>P_0x9ac8_1 \<sigma> \<equiv> RIP \<sigma> = 0x9ac8 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x1a4 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x241 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9ac8_1_def[Ps]

definition P_0x9ac8_1_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9ac8_1_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9ac8_1_regions :: state_pred where
  \<open>P_0x9ac8_1_regions \<sigma> \<equiv> \<exists>regions. P_0x9ac8_1_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_open64_addr_0x9ac8_1 :: state_pred where
  \<open>Q_open64_addr_0x9ac8_1 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = open64_addr \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x1a4 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x241 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9acd\<close>
declare Q_open64_addr_0x9ac8_1_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9ac8_0x9ac8_1[blocks]:
  assumes \<open>(P_0x9ac8_1 && P_0x9ac8_1_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9ac8 (Suc 0) \<sigma> \<triangleq> ?\<sigma> \<and> Q_open64_addr_0x9ac8_1 ?\<sigma> \<and> block_usage P_0x9ac8_1_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9ac8_1_def P_0x9ac8_1_regions_def post: Q_open64_addr_0x9ac8_1_def regionset: P_0x9ac8_1_regions_set_def)

definition P_0x9acd_2 :: state_pred where
  \<open>P_0x9acd_2 \<sigma> \<equiv> RIP \<sigma> = 0x9acd \<and> RAX \<sigma> = open64_0x9ac8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x1a4 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x241 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9acd\<close>
declare P_0x9acd_2_def[Ps]

definition P_0x9acd_2_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9acd_2_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9acd_2_regions :: state_pred where
  \<open>P_0x9acd_2_regions \<sigma> \<equiv> \<exists>regions. P_0x9acd_2_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9acf_2 :: state_pred where
  \<open>Q_0x9acf_2 \<sigma> \<equiv> RIP \<sigma> = 0x9acf \<and> RAX \<sigma> = open64_0x9ac8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x1a4 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x241 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9acd\<close>
declare Q_0x9acf_2_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9acd_0x9acd_2[blocks]:
  assumes \<open>(P_0x9acd_2 && P_0x9acd_2_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9acd 2 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9acf_2 ?\<sigma> \<and> block_usage P_0x9acd_2_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9acd_2_def P_0x9acd_2_regions_def post: Q_0x9acf_2_def regionset: P_0x9acd_2_regions_set_def)

definition P_0x9acf_true_3 :: state_pred where
  \<open>P_0x9acf_true_3 \<sigma> \<equiv> RIP \<sigma> = 0x9acf \<and> RAX \<sigma> = open64_0x9ac8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x1a4 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x241 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9acd\<close>
declare P_0x9acf_true_3_def[Ps]

definition P_0x9acf_true_3_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9acf_true_3_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9acf_true_3_regions :: state_pred where
  \<open>P_0x9acf_true_3_regions \<sigma> \<equiv> \<exists>regions. P_0x9acf_true_3_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9d71_3 :: state_pred where
  \<open>Q_0x9d71_3 \<sigma> \<equiv> RIP \<sigma> = 0x9d71 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9d71_3_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9acf_0x9dc8_3[blocks]:
  assumes \<open>(P_0x9acf_true_3 && P_0x9acf_true_3_regions && SF) \<sigma>\<close>
  shows \<open>exec_block 3 0x9dc8 3 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d71_3 ?\<sigma> \<and> block_usage P_0x9acf_true_3_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9acf_true_3_def P_0x9acf_true_3_regions_def post: Q_0x9d71_3_def regionset: P_0x9acf_true_3_regions_set_def)

definition P_0x9acf_false_4 :: state_pred where
  \<open>P_0x9acf_false_4 \<sigma> \<equiv> RIP \<sigma> = 0x9acf \<and> RAX \<sigma> = open64_0x9ac8_retval \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x1a4 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x241 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9acd\<close>
declare P_0x9acf_false_4_def[Ps]

definition P_0x9acf_false_4_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9acf_false_4_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9acf_false_4_regions :: state_pred where
  \<open>P_0x9acf_false_4_regions \<sigma> \<equiv> \<exists>regions. P_0x9acf_false_4_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9b99_4 :: state_pred where
  \<open>Q_0x9b99_4 \<sigma> \<equiv> RIP \<sigma> = 0x9b99 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x49c) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9acd\<close>
declare Q_0x9b99_4_def[Qs]

schematic_goal vmdk_create_part_5_0_36_0x9acf_0x9b94_4[blocks]:
  assumes \<open>(P_0x9acf_false_4 && P_0x9acf_false_4_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 36 0x9b94 4 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9b99_4 ?\<sigma> \<and> block_usage P_0x9acf_false_4_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9acf_false_4_def P_0x9acf_false_4_regions_def post: Q_0x9b99_4_def regionset: P_0x9acf_false_4_regions_set_def)

definition P_0x9b99_5 :: state_pred where
  \<open>P_0x9b99_5 \<sigma> \<equiv> RIP \<sigma> = 0x9b99 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x49c) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9acd\<close>
declare P_0x9b99_5_def[Ps]

definition P_0x9b99_5_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9b99_5_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9b99_5_regions :: state_pred where
  \<open>P_0x9b99_5_regions \<sigma> \<equiv> \<exists>regions. P_0x9b99_5_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_write_addr_0x9b99_5 :: state_pred where
  \<open>Q_write_addr_0x9b99_5 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = write_addr \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x49c) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9b9e\<close>
declare Q_write_addr_0x9b99_5_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9b99_0x9b99_5[blocks]:
  assumes \<open>(P_0x9b99_5 && P_0x9b99_5_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9b99 5 \<sigma> \<triangleq> ?\<sigma> \<and> Q_write_addr_0x9b99_5 ?\<sigma> \<and> block_usage P_0x9b99_5_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9b99_5_def P_0x9b99_5_regions_def post: Q_write_addr_0x9b99_5_def regionset: P_0x9b99_5_regions_set_def)

definition P_0x9b9e_6 :: state_pred where
  \<open>P_0x9b9e_6 \<sigma> \<equiv> RIP \<sigma> = 0x9b9e \<and> RAX \<sigma> = write_0x9b99_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x49c) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9b9e\<close>
declare P_0x9b9e_6_def[Ps]

definition P_0x9b9e_6_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9b9e_6_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9b9e_6_regions :: state_pred where
  \<open>P_0x9b9e_6_regions \<sigma> \<equiv> \<exists>regions. P_0x9b9e_6_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9ba8_6 :: state_pred where
  \<open>Q_0x9ba8_6 \<sigma> \<equiv> RIP \<sigma> = 0x9ba8 \<and> RAX \<sigma> = write_0x9b99_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9b9e\<close>
declare Q_0x9ba8_6_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9b9e_0x9ba6_6[blocks]:
  assumes \<open>(P_0x9b9e_6 && P_0x9b9e_6_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x9ba6 6 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9ba8_6 ?\<sigma> \<and> block_usage P_0x9b9e_6_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9b9e_6_def P_0x9b9e_6_regions_def post: Q_0x9ba8_6_def regionset: P_0x9b9e_6_regions_set_def)

definition P_0x9ba8_7 :: state_pred where
  \<open>P_0x9ba8_7 \<sigma> \<equiv> RIP \<sigma> = 0x9ba8 \<and> RAX \<sigma> = write_0x9b99_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9b9e\<close>
declare P_0x9ba8_7_def[Ps]

definition P_0x9ba8_7_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9ba8_7_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9ba8_7_regions :: state_pred where
  \<open>P_0x9ba8_7_regions \<sigma> \<equiv> \<exists>regions. P_0x9ba8_7_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_write_addr_0x9ba8_7 :: state_pred where
  \<open>Q_write_addr_0x9ba8_7 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = write_addr \<and> RAX \<sigma> = write_0x9b99_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bad\<close>
declare Q_write_addr_0x9ba8_7_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9ba8_0x9ba8_7[blocks]:
  assumes \<open>(P_0x9ba8_7 && P_0x9ba8_7_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9ba8 7 \<sigma> \<triangleq> ?\<sigma> \<and> Q_write_addr_0x9ba8_7 ?\<sigma> \<and> block_usage P_0x9ba8_7_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9ba8_7_def P_0x9ba8_7_regions_def post: Q_write_addr_0x9ba8_7_def regionset: P_0x9ba8_7_regions_set_def)

definition P_0x9bad_8 :: state_pred where
  \<open>P_0x9bad_8 \<sigma> \<equiv> RIP \<sigma> = 0x9bad \<and> RAX \<sigma> = write_0x9ba8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bad\<close>
declare P_0x9bad_8_def[Ps]

definition P_0x9bad_8_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bad_8_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bad_8_regions :: state_pred where
  \<open>P_0x9bad_8_regions \<sigma> \<equiv> \<exists>regions. P_0x9bad_8_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9bb8_8 :: state_pred where
  \<open>Q_0x9bb8_8 \<sigma> \<equiv> RIP \<sigma> = 0x9bb8 \<and> RAX \<sigma> = write_0x9ba8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast (((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)::32 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bad\<close>
declare Q_0x9bb8_8_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9bad_0x9bb4_8[blocks]:
  assumes \<open>(P_0x9bad_8 && P_0x9bad_8_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x9bb4 8 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9bb8_8 ?\<sigma> \<and> block_usage P_0x9bad_8_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bad_8_def P_0x9bad_8_regions_def post: Q_0x9bb8_8_def regionset: P_0x9bad_8_regions_set_def)

definition P_0x9bb8_9 :: state_pred where
  \<open>P_0x9bb8_9 \<sigma> \<equiv> RIP \<sigma> = 0x9bb8 \<and> RAX \<sigma> = write_0x9ba8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast (((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)::32 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bad\<close>
declare P_0x9bb8_9_def[Ps]

definition P_0x9bb8_9_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bb8_9_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bb8_9_regions :: state_pred where
  \<open>P_0x9bb8_9_regions \<sigma> \<equiv> \<exists>regions. P_0x9bb8_9_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ftruncate64_addr_0x9bb8_9 :: state_pred where
  \<open>Q_ftruncate64_addr_0x9bb8_9 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = ftruncate64_addr \<and> RAX \<sigma> = write_0x9ba8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast (((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)::32 word))::64 word) << 9) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bbd\<close>
declare Q_ftruncate64_addr_0x9bb8_9_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9bb8_0x9bb8_9[blocks]:
  assumes \<open>(P_0x9bb8_9 && P_0x9bb8_9_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9bb8 9 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ftruncate64_addr_0x9bb8_9 ?\<sigma> \<and> block_usage P_0x9bb8_9_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bb8_9_def P_0x9bb8_9_regions_def post: Q_ftruncate64_addr_0x9bb8_9_def regionset: P_0x9bb8_9_regions_set_def)

definition P_0x9bbd_10 :: state_pred where
  \<open>P_0x9bbd_10 \<sigma> \<equiv> RIP \<sigma> = 0x9bbd \<and> RAX \<sigma> = ftruncate64_0x9bb8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x49 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast (((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)::32 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bbd\<close>
declare P_0x9bbd_10_def[Ps]

definition P_0x9bbd_10_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bbd_10_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bbd_10_regions :: state_pred where
  \<open>P_0x9bbd_10_regions \<sigma> \<equiv> \<exists>regions. P_0x9bbd_10_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9bca_10 :: state_pred where
  \<open>Q_0x9bca_10 \<sigma> \<equiv> RIP \<sigma> = 0x9bca \<and> RAX \<sigma> = ftruncate64_0x9bb8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x15::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bbd\<close>
declare Q_0x9bca_10_def[Qs]

schematic_goal vmdk_create_part_5_0_4_0x9bbd_0x9bc6_10[blocks]:
  assumes \<open>(P_0x9bbd_10 && P_0x9bbd_10_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x9bc6 10 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9bca_10 ?\<sigma> \<and> block_usage P_0x9bbd_10_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bbd_10_def P_0x9bbd_10_regions_def post: Q_0x9bca_10_def regionset: P_0x9bbd_10_regions_set_def)

definition P_0x9bca_11 :: state_pred where
  \<open>P_0x9bca_11 \<sigma> \<equiv> RIP \<sigma> = 0x9bca \<and> RAX \<sigma> = ftruncate64_0x9bb8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x15::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bbd\<close>
declare P_0x9bca_11_def[Ps]

definition P_0x9bca_11_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bca_11_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (21, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bca_11_regions :: state_pred where
  \<open>P_0x9bca_11_regions \<sigma> \<equiv> \<exists>regions. P_0x9bca_11_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_lseek64_addr_0x9bca_11 :: state_pred where
  \<open>Q_lseek64_addr_0x9bca_11 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = lseek64_addr \<and> RAX \<sigma> = ftruncate64_0x9bb8_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x15::64 word))::64 word) << 9) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bcf\<close>
declare Q_lseek64_addr_0x9bca_11_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9bca_0x9bca_11[blocks]:
  assumes \<open>(P_0x9bca_11 && P_0x9bca_11_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9bca 11 \<sigma> \<triangleq> ?\<sigma> \<and> Q_lseek64_addr_0x9bca_11 ?\<sigma> \<and> block_usage P_0x9bca_11_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bca_11_def P_0x9bca_11_regions_def post: Q_lseek64_addr_0x9bca_11_def regionset: P_0x9bca_11_regions_set_def)

definition P_0x9bcf_12 :: state_pred where
  \<open>P_0x9bcf_12 \<sigma> \<equiv> RIP \<sigma> = 0x9bcf \<and> RAX \<sigma> = lseek64_0x9bca_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x15::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bcf\<close>
declare P_0x9bcf_12_def[Ps]

definition P_0x9bcf_12_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bcf_12_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bcf_12_regions :: state_pred where
  \<open>P_0x9bcf_12_regions \<sigma> \<equiv> \<exists>regions. P_0x9bcf_12_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9bdd_12 :: state_pred where
  \<open>Q_0x9bdd_12 \<sigma> \<equiv> RIP \<sigma> = 0x9bdd \<and> RAX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x15::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4a0),4]::32 word) = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bcf\<close>
declare Q_0x9bdd_12_def[Qs]

schematic_goal vmdk_create_part_5_0_4_0x9bcf_0x9bda_12[blocks]:
  assumes \<open>(P_0x9bcf_12 && P_0x9bcf_12_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x9bda 12 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9bdd_12 ?\<sigma> \<and> block_usage P_0x9bcf_12_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bcf_12_def P_0x9bcf_12_regions_def post: Q_0x9bdd_12_def regionset: P_0x9bcf_12_regions_set_def)

definition P_0x9bdd_true_13 :: state_pred where
  \<open>P_0x9bdd_true_13 \<sigma> \<equiv> RIP \<sigma> = 0x9bdd \<and> RAX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x15::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4a0),4]::32 word) = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bcf\<close>
declare P_0x9bdd_true_13_def[Ps]

definition P_0x9bdd_true_13_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bdd_true_13_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bdd_true_13_regions :: state_pred where
  \<open>P_0x9bdd_true_13_regions \<sigma> \<equiv> \<exists>regions. P_0x9bdd_true_13_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9dad_13 :: state_pred where
  \<open>Q_0x9dad_13 \<sigma> \<equiv> RIP \<sigma> = 0x9dad \<and> RAX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4a0),4]::32 word) = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bcf\<close>
declare Q_0x9dad_13_def[Qs]

schematic_goal vmdk_create_part_5_0_5_0x9bdd_0x9da9_13[blocks]:
  assumes \<open>(P_0x9bdd_true_13 && P_0x9bdd_true_13_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x9da9 13 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9dad_13 ?\<sigma> \<and> block_usage P_0x9bdd_true_13_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bdd_true_13_def P_0x9bdd_true_13_regions_def post: Q_0x9dad_13_def regionset: P_0x9bdd_true_13_regions_set_def)

definition P_0x9dad_14 :: state_pred where
  \<open>P_0x9dad_14 \<sigma> \<equiv> RIP \<sigma> = 0x9dad \<and> RAX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4a0),4]::32 word) = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bcf\<close>
declare P_0x9dad_14_def[Ps]

definition P_0x9dad_14_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9dad_14_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9dad_14_regions :: state_pred where
  \<open>P_0x9dad_14_regions \<sigma> \<equiv> \<exists>regions. P_0x9dad_14_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_lseek64_addr_0x9dad_14 :: state_pred where
  \<open>Q_lseek64_addr_0x9dad_14 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = lseek64_addr \<and> RAX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4a0),4]::32 word) = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9db2\<close>
declare Q_lseek64_addr_0x9dad_14_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9dad_0x9dad_14[blocks]:
  assumes \<open>(P_0x9dad_14 && P_0x9dad_14_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9dad 14 \<sigma> \<triangleq> ?\<sigma> \<and> Q_lseek64_addr_0x9dad_14 ?\<sigma> \<and> block_usage P_0x9dad_14_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9dad_14_def P_0x9dad_14_regions_def post: Q_lseek64_addr_0x9dad_14_def regionset: P_0x9dad_14_regions_set_def)

definition P_0x9db2_15 :: state_pred where
  \<open>P_0x9db2_15 \<sigma> \<equiv> RIP \<sigma> = 0x9db2 \<and> RAX \<sigma> = lseek64_0x9dad_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4a0),4]::32 word) = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9db2\<close>
declare P_0x9db2_15_def[Ps]

definition P_0x9db2_15_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9db2_15_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (26, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (27, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9db2_15_regions :: state_pred where
  \<open>P_0x9db2_15_regions \<sigma> \<equiv> \<exists>regions. P_0x9db2_15_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (24,25)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (24,25), (25,24)}))
\<close>

definition Q_0x9c59_15 :: state_pred where
  \<open>Q_0x9c59_15 \<sigma> \<equiv> RIP \<sigma> = 0x9c59 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c59_15_def[Qs]

schematic_goal vmdk_create_part_5_0_4_0x9db2_0x9dbe_15[blocks]:
  assumes \<open>(P_0x9db2_15 && P_0x9db2_15_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x9dbe 15 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c59_15 ?\<sigma> \<and> block_usage P_0x9db2_15_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9db2_15_def P_0x9db2_15_regions_def post: Q_0x9c59_15_def regionset: P_0x9db2_15_regions_set_def)

definition P_0x9bdd_false_16 :: state_pred where
  \<open>P_0x9bdd_false_16 \<sigma> \<equiv> RIP \<sigma> = 0x9bdd \<and> RAX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x15::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((RSP\<^sub>0::64 word) - 0x498) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4a0),4]::32 word) = ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)::32 word) + (\<langle>31,0\<rangle>((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::32 word))) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9bcf\<close>
declare P_0x9bdd_false_16_def[Ps]

definition P_0x9bdd_false_16_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bdd_false_16_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bdd_false_16_regions :: state_pred where
  \<open>P_0x9bdd_false_16_regions \<sigma> \<equiv> \<exists>regions. P_0x9bdd_false_16_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9bf2_16 :: state_pred where
  \<open>Q_0x9bf2_16 \<sigma> \<equiv> RIP \<sigma> = 0x9bf2 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9bf2_16_def[Qs]

schematic_goal vmdk_create_part_5_0_4_0x9bdd_0x9bea_16[blocks]:
  assumes \<open>(P_0x9bdd_false_16 && P_0x9bdd_false_16_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 4 0x9bea 16 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9bf2_16 ?\<sigma> \<and> block_usage P_0x9bdd_false_16_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bdd_false_16_def P_0x9bdd_false_16_regions_def post: Q_0x9bf2_16_def regionset: P_0x9bdd_false_16_regions_set_def)

definition P_0x9bf2_17 :: state_pred where
  \<open>P_0x9bf2_17 \<sigma> \<equiv> RIP \<sigma> = 0x9bf2 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9bf2_17_def[Ps]

definition P_0x9bf2_17_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bf2_17_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9bf2_17_regions :: state_pred where
  \<open>P_0x9bf2_17_regions \<sigma> \<equiv> \<exists>regions. P_0x9bf2_17_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9bfc_17 :: state_pred where
  \<open>Q_0x9bfc_17 \<sigma> \<equiv> RIP \<sigma> = 0x9bfc \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9bfc_17_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9bf2_0x9bfa_17[blocks]:
  assumes \<open>(P_0x9bf2_17 && P_0x9bf2_17_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x9bfa 17 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9bfc_17 ?\<sigma> \<and> block_usage P_0x9bf2_17_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bf2_17_def P_0x9bf2_17_regions_def post: Q_0x9bfc_17_def regionset: P_0x9bf2_17_regions_set_def)

definition P_0x9bfc_18 :: state_pred where
  \<open>P_0x9bfc_18 \<sigma> \<equiv> RIP \<sigma> = 0x9bfc \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9bfc_18_def[Ps]

definition P_0x9bfc_18_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9bfc_18_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9bfc_18_regions :: state_pred where
  \<open>P_0x9bfc_18_regions \<sigma> \<equiv> \<exists>regions. P_0x9bfc_18_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_write_addr_0x9bfc_18 :: state_pred where
  \<open>Q_write_addr_0x9bfc_18 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = write_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c01\<close>
declare Q_write_addr_0x9bfc_18_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9bfc_0x9bfc_18[blocks]:
  assumes \<open>(P_0x9bfc_18 && P_0x9bfc_18_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9bfc 18 \<sigma> \<triangleq> ?\<sigma> \<and> Q_write_addr_0x9bfc_18 ?\<sigma> \<and> block_usage P_0x9bfc_18_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9bfc_18_def P_0x9bfc_18_regions_def post: Q_write_addr_0x9bfc_18_def regionset: P_0x9bfc_18_regions_set_def)

definition P_0x9c01_19 :: state_pred where
  \<open>P_0x9c01_19 \<sigma> \<equiv> RIP \<sigma> = 0x9c01 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c01\<close>
declare P_0x9c01_19_def[Ps]

definition P_0x9c01_19_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c01_19_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (24, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c01_19_regions :: state_pred where
  \<open>P_0x9c01_19_regions \<sigma> \<equiv> \<exists>regions. P_0x9c01_19_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9c0c_19 :: state_pred where
  \<open>Q_0x9c0c_19 \<sigma> \<equiv> RIP \<sigma> = 0x9c0c \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>((RBP \<sigma>::64 word) + 0x1)::32 word)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c01\<close>
declare Q_0x9c0c_19_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9c01_0x9c09_19[blocks]:
  assumes \<open>(P_0x9c01_19 && P_0x9c01_19_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x9c09 19 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c0c_19 ?\<sigma> \<and> block_usage P_0x9c01_19_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c01_19_def P_0x9c01_19_regions_def post: Q_0x9c0c_19_def regionset: P_0x9c01_19_regions_set_def)

definition P_0x9c0c_true_20 :: state_pred where
  \<open>P_0x9c0c_true_20 \<sigma> \<equiv> RIP \<sigma> = 0x9c0c \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>((RBP \<sigma>::64 word) + 0x1)::32 word)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c01\<close>
declare P_0x9c0c_true_20_def[Ps]

definition P_0x9c0c_true_20_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c0c_true_20_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c0c_true_20_regions :: state_pred where
  \<open>P_0x9c0c_true_20_regions \<sigma> \<equiv> \<exists>regions. P_0x9c0c_true_20_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9bf2_20 :: state_pred where
  \<open>Q_0x9bf2_20 \<sigma> \<equiv> RIP \<sigma> = 0x9bf2 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9bf2_20_def[Qs]

schematic_goal vmdk_create_part_5_0_2_0x9c0c_0x9bf0_20[blocks]:
  assumes \<open>(P_0x9c0c_true_20 && P_0x9c0c_true_20_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x9bf0 20 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9bf2_20 ?\<sigma> \<and> block_usage P_0x9c0c_true_20_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c0c_true_20_def P_0x9c0c_true_20_regions_def post: Q_0x9bf2_20_def regionset: P_0x9c0c_true_20_regions_set_def)

definition P_0x9c0c_false_21 :: state_pred where
  \<open>P_0x9c0c_false_21 \<sigma> \<equiv> RIP \<sigma> = 0x9c0c \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>((RBP \<sigma>::64 word) + 0x1)::32 word)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c01\<close>
declare P_0x9c0c_false_21_def[Ps]

definition P_0x9c0c_false_21_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c0c_false_21_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c0c_false_21_regions :: state_pred where
  \<open>P_0x9c0c_false_21_regions \<sigma> \<equiv> \<exists>regions. P_0x9c0c_false_21_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9c0e_21 :: state_pred where
  \<open>Q_0x9c0e_21 \<sigma> \<equiv> RIP \<sigma> = 0x9c0e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c0e_21_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9c0c_0x9c0c_21[blocks]:
  assumes \<open>(P_0x9c0c_false_21 && P_0x9c0c_false_21_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9c0c 21 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c0e_21 ?\<sigma> \<and> block_usage P_0x9c0c_false_21_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c0c_false_21_def P_0x9c0c_false_21_regions_def post: Q_0x9c0e_21_def regionset: P_0x9c0c_false_21_regions_set_def)

definition P_0x9c0e_22 :: state_pred where
  \<open>P_0x9c0e_22 \<sigma> \<equiv> RIP \<sigma> = 0x9c0e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = ucast (((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9c0e_22_def[Ps]

definition P_0x9c0e_22_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c0e_22_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9c0e_22_regions :: state_pred where
  \<open>P_0x9c0e_22_regions \<sigma> \<equiv> \<exists>regions. P_0x9c0e_22_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_0x9c1e_22 :: state_pred where
  \<open>Q_0x9c1e_22 \<sigma> \<equiv> RIP \<sigma> = 0x9c1e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = 0x0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c1e_22_def[Qs]

schematic_goal vmdk_create_part_5_0_5_0x9c0e_0x9c1a_22[blocks]:
  assumes \<open>(P_0x9c0e_22 && P_0x9c0e_22_regions) \<sigma>\<close>
  shows \<open>exec_block 5 0x9c1a 22 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c1e_22 ?\<sigma> \<and> block_usage P_0x9c0e_22_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c0e_22_def P_0x9c0e_22_regions_def post: Q_0x9c1e_22_def regionset: P_0x9c0e_22_regions_set_def)

definition P_0x9c1e_23 :: state_pred where
  \<open>P_0x9c1e_23 \<sigma> \<equiv> RIP \<sigma> = 0x9c1e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = 0x0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9c1e_23_def[Ps]

definition P_0x9c1e_23_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c1e_23_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (22, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c1e_23_regions :: state_pred where
  \<open>P_0x9c1e_23_regions \<sigma> \<equiv> \<exists>regions. P_0x9c1e_23_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13)}))
\<close>

definition Q_lseek64_addr_0x9c1e_23 :: state_pred where
  \<open>Q_lseek64_addr_0x9c1e_23 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = lseek64_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = 0x0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c23\<close>
declare Q_lseek64_addr_0x9c1e_23_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9c1e_0x9c1e_23[blocks]:
  assumes \<open>(P_0x9c1e_23 && P_0x9c1e_23_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9c1e 23 \<sigma> \<triangleq> ?\<sigma> \<and> Q_lseek64_addr_0x9c1e_23 ?\<sigma> \<and> block_usage P_0x9c1e_23_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c1e_23_def P_0x9c1e_23_regions_def post: Q_lseek64_addr_0x9c1e_23_def regionset: P_0x9c1e_23_regions_set_def)

definition P_0x9c23_24 :: state_pred where
  \<open>P_0x9c23_24 \<sigma> \<equiv> RIP \<sigma> = 0x9c23 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R12 \<sigma> = 0x0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c23\<close>
declare P_0x9c23_24_def[Ps]

definition P_0x9c23_24_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c23_24_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (26, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (27, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c23_24_regions :: state_pred where
  \<open>P_0x9c23_24_regions \<sigma> \<equiv> \<exists>regions. P_0x9c23_24_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (24,25)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (24,25), (25,24)}))
\<close>

definition Q_0x9c3b_24 :: state_pred where
  \<open>Q_0x9c3b_24 \<sigma> \<equiv> RIP \<sigma> = 0x9c3b \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c3b_24_def[Qs]

schematic_goal vmdk_create_part_5_0_4_0x9c23_0x9c2f_24[blocks]:
  assumes \<open>(P_0x9c23_24 && P_0x9c23_24_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x9c2f 24 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c3b_24 ?\<sigma> \<and> block_usage P_0x9c23_24_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c23_24_def P_0x9c23_24_regions_def post: Q_0x9c3b_24_def regionset: P_0x9c23_24_regions_set_def)

definition P_0x9c3b_25 :: state_pred where
  \<open>P_0x9c3b_25 \<sigma> \<equiv> RIP \<sigma> = 0x9c3b \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9c3b_25_def[Ps]

definition P_0x9c3b_25_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c3b_25_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9c3b_25_regions :: state_pred where
  \<open>P_0x9c3b_25_regions \<sigma> \<equiv> \<exists>regions. P_0x9c3b_25_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9c45_25 :: state_pred where
  \<open>Q_0x9c45_25 \<sigma> \<equiv> RIP \<sigma> = 0x9c45 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c45_25_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9c3b_0x9c43_25[blocks]:
  assumes \<open>(P_0x9c3b_25 && P_0x9c3b_25_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x9c43 25 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c45_25 ?\<sigma> \<and> block_usage P_0x9c3b_25_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c3b_25_def P_0x9c3b_25_regions_def post: Q_0x9c45_25_def regionset: P_0x9c3b_25_regions_set_def)

definition P_0x9c45_26 :: state_pred where
  \<open>P_0x9c45_26 \<sigma> \<equiv> RIP \<sigma> = 0x9c45 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9c45_26_def[Ps]

definition P_0x9c45_26_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c45_26_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c45_26_regions :: state_pred where
  \<open>P_0x9c45_26_regions \<sigma> \<equiv> \<exists>regions. P_0x9c45_26_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_write_addr_0x9c45_26 :: state_pred where
  \<open>Q_write_addr_0x9c45_26 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = write_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c4a\<close>
declare Q_write_addr_0x9c45_26_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9c45_0x9c45_26[blocks]:
  assumes \<open>(P_0x9c45_26 && P_0x9c45_26_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9c45 26 \<sigma> \<triangleq> ?\<sigma> \<and> Q_write_addr_0x9c45_26 ?\<sigma> \<and> block_usage P_0x9c45_26_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c45_26_def P_0x9c45_26_regions_def post: Q_write_addr_0x9c45_26_def regionset: P_0x9c45_26_regions_set_def)

definition P_0x9c4a_27 :: state_pred where
  \<open>P_0x9c4a_27 \<sigma> \<equiv> RIP \<sigma> = 0x9c4a \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c4a\<close>
declare P_0x9c4a_27_def[Ps]

definition P_0x9c4a_27_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c4a_27_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4a0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (26, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (27, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c4a_27_regions :: state_pred where
  \<open>P_0x9c4a_27_regions \<sigma> \<equiv> \<exists>regions. P_0x9c4a_27_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (24,25)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (24,25), (25,24)}))
\<close>

definition Q_0x9c57_27 :: state_pred where
  \<open>Q_0x9c57_27 \<sigma> \<equiv> RIP \<sigma> = 0x9c57 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>((R12 \<sigma>::64 word) + 0x1)::32 word)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c4a\<close>
declare Q_0x9c57_27_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9c4a_0x9c54_27[blocks]:
  assumes \<open>(P_0x9c4a_27 && P_0x9c4a_27_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x9c54 27 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c57_27 ?\<sigma> \<and> block_usage P_0x9c4a_27_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c4a_27_def P_0x9c4a_27_regions_def post: Q_0x9c57_27_def regionset: P_0x9c4a_27_regions_set_def)

definition P_0x9c57_true_28 :: state_pred where
  \<open>P_0x9c57_true_28 \<sigma> \<equiv> RIP \<sigma> = 0x9c57 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>((R12 \<sigma>::64 word) + 0x1)::32 word)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c4a\<close>
declare P_0x9c57_true_28_def[Ps]

definition P_0x9c57_true_28_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c57_true_28_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c57_true_28_regions :: state_pred where
  \<open>P_0x9c57_true_28_regions \<sigma> \<equiv> \<exists>regions. P_0x9c57_true_28_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9c3b_28 :: state_pred where
  \<open>Q_0x9c3b_28 \<sigma> \<equiv> RIP \<sigma> = 0x9c3b \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c3b_28_def[Qs]

schematic_goal vmdk_create_part_5_0_2_0x9c57_0x9c38_28[blocks]:
  assumes \<open>(P_0x9c57_true_28 && P_0x9c57_true_28_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x9c38 28 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c3b_28 ?\<sigma> \<and> block_usage P_0x9c57_true_28_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c57_true_28_def P_0x9c57_true_28_regions_def post: Q_0x9c3b_28_def regionset: P_0x9c57_true_28_regions_set_def)

definition P_0x9c57_false_29 :: state_pred where
  \<open>P_0x9c57_false_29 \<sigma> \<equiv> RIP \<sigma> = 0x9c57 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>((R12 \<sigma>::64 word) + 0x1)::32 word)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = 0x4 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c4a\<close>
declare P_0x9c57_false_29_def[Ps]

definition P_0x9c57_false_29_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c57_false_29_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c57_false_29_regions :: state_pred where
  \<open>P_0x9c57_false_29_regions \<sigma> \<equiv> \<exists>regions. P_0x9c57_false_29_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9c59_29 :: state_pred where
  \<open>Q_0x9c59_29 \<sigma> \<equiv> RIP \<sigma> = 0x9c59 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R13 \<sigma> = ((RSP\<^sub>0::64 word) - 0x4a0) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c59_29_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9c57_0x9c57_29[blocks]:
  assumes \<open>(P_0x9c57_false_29 && P_0x9c57_false_29_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9c57 29 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c59_29 ?\<sigma> \<and> block_usage P_0x9c57_false_29_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c57_false_29_def P_0x9c57_false_29_regions_def post: Q_0x9c59_29_def regionset: P_0x9c57_false_29_regions_set_def)

definition P_0x9c59_30 :: state_pred where
  \<open>P_0x9c59_30 \<sigma> \<equiv> RIP \<sigma> = 0x9c59 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9c59_30_def[Ps]

definition P_0x9c59_30_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c59_30_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9c59_30_regions :: state_pred where
  \<open>P_0x9c59_30_regions \<sigma> \<equiv> \<exists>regions. P_0x9c59_30_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9c66_30 :: state_pred where
  \<open>Q_0x9c66_30 \<sigma> \<equiv> RIP \<sigma> = 0x9c66 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x5c \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9c66_30_def[Qs]

schematic_goal vmdk_create_part_5_0_3_0x9c59_0x9c61_30[blocks]:
  assumes \<open>(P_0x9c59_30 && P_0x9c59_30_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x9c61 30 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c66_30 ?\<sigma> \<and> block_usage P_0x9c59_30_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c59_30_def P_0x9c59_30_regions_def post: Q_0x9c66_30_def regionset: P_0x9c59_30_regions_set_def)

definition P_0x9c66_31 :: state_pred where
  \<open>P_0x9c66_31 \<sigma> \<equiv> RIP \<sigma> = 0x9c66 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x5c \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9c66_31_def[Ps]

definition P_0x9c66_31_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c66_31_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c66_31_regions :: state_pred where
  \<open>P_0x9c66_31_regions \<sigma> \<equiv> \<exists>regions. P_0x9c66_31_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_strrchr_addr_0x9c66_31 :: state_pred where
  \<open>Q_strrchr_addr_0x9c66_31 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = strrchr_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x5c \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c6b\<close>
declare Q_strrchr_addr_0x9c66_31_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9c66_0x9c66_31[blocks]:
  assumes \<open>(P_0x9c66_31 && P_0x9c66_31_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9c66 31 \<sigma> \<triangleq> ?\<sigma> \<and> Q_strrchr_addr_0x9c66_31 ?\<sigma> \<and> block_usage P_0x9c66_31_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c66_31_def P_0x9c66_31_regions_def post: Q_strrchr_addr_0x9c66_31_def regionset: P_0x9c66_31_regions_set_def)

definition P_0x9c6b_32 :: state_pred where
  \<open>P_0x9c6b_32 \<sigma> \<equiv> RIP \<sigma> = 0x9c6b \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x5c \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = RDI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c6b\<close>
declare P_0x9c6b_32_def[Ps]

definition P_0x9c6b_32_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c6b_32_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c6b_32_regions :: state_pred where
  \<open>P_0x9c6b_32_regions \<sigma> \<equiv> \<exists>regions. P_0x9c6b_32_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9c7e_32 :: state_pred where
  \<open>Q_0x9c7e_32 \<sigma> \<equiv> RIP \<sigma> = 0x9c7e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = ((RAX \<sigma>::64 word) + 0x1) \<and> RDI \<sigma> = (if' (RAX \<sigma>::64 word) \<noteq> (ucast ((0x0::64 word))::64 word) then ((RAX \<sigma>::64 word) + 0x1) else (RDI\<^sub>0::64 word)) \<and> RSI \<sigma> = 0x2f \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = (if' (RAX \<sigma>::64 word) \<noteq> (ucast ((0x0::64 word))::64 word) then ((RAX \<sigma>::64 word) + 0x1) else (RDI\<^sub>0::64 word)) \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c6b\<close>
declare Q_0x9c7e_32_def[Qs]

schematic_goal vmdk_create_part_5_0_5_0x9c6b_0x9c7b_32[blocks]:
  assumes \<open>(P_0x9c6b_32 && P_0x9c6b_32_regions) \<sigma>\<close>
  shows \<open>exec_block 5 0x9c7b 32 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c7e_32 ?\<sigma> \<and> block_usage P_0x9c6b_32_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c6b_32_def P_0x9c6b_32_regions_def post: Q_0x9c7e_32_def regionset: P_0x9c6b_32_regions_set_def)

definition P_0x9c7e_33 :: state_pred where
  \<open>P_0x9c7e_33 \<sigma> \<equiv> RIP \<sigma> = 0x9c7e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = ((RAX \<sigma>::64 word) + 0x1) \<and> RDI \<sigma> = (if' (RAX \<sigma>::64 word) \<noteq> (ucast ((0x0::64 word))::64 word) then ((RAX \<sigma>::64 word) + 0x1) else (RDI\<^sub>0::64 word)) \<and> RSI \<sigma> = 0x2f \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R14 \<sigma> = (if' (RAX \<sigma>::64 word) \<noteq> (ucast ((0x0::64 word))::64 word) then ((RAX \<sigma>::64 word) + 0x1) else (RDI\<^sub>0::64 word)) \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c6b\<close>
declare P_0x9c7e_33_def[Ps]

definition P_0x9c7e_33_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c7e_33_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c7e_33_regions :: state_pred where
  \<open>P_0x9c7e_33_regions \<sigma> \<equiv> \<exists>regions. P_0x9c7e_33_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_strrchr_addr_0x9c7e_33 :: state_pred where
  \<open>Q_strrchr_addr_0x9c7e_33 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = strrchr_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RSI \<sigma> = 0x2f \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c83\<close>
declare Q_strrchr_addr_0x9c7e_33_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9c7e_0x9c7e_33[blocks]:
  assumes \<open>(P_0x9c7e_33 && P_0x9c7e_33_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9c7e 33 \<sigma> \<triangleq> ?\<sigma> \<and> Q_strrchr_addr_0x9c7e_33 ?\<sigma> \<and> block_usage P_0x9c7e_33_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c7e_33_def P_0x9c7e_33_regions_def post: Q_strrchr_addr_0x9c7e_33_def regionset: P_0x9c7e_33_regions_set_def)

definition P_0x9c83_34 :: state_pred where
  \<open>P_0x9c83_34 \<sigma> \<equiv> RIP \<sigma> = 0x9c83 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RSI \<sigma> = 0x2f \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c83\<close>
declare P_0x9c83_34_def[Ps]

definition P_0x9c83_34_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c83_34_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c83_34_regions :: state_pred where
  \<open>P_0x9c83_34_regions \<sigma> \<equiv> \<exists>regions. P_0x9c83_34_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9c96_34 :: state_pred where
  \<open>Q_0x9c96_34 \<sigma> \<equiv> RIP \<sigma> = 0x9c96 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = ((RAX \<sigma>::64 word) + 0x1) \<and> RSI \<sigma> = 0x3a \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c83\<close>
declare Q_0x9c96_34_def[Qs]

schematic_goal vmdk_create_part_5_0_5_0x9c83_0x9c93_34[blocks]:
  assumes \<open>(P_0x9c83_34 && P_0x9c83_34_regions) \<sigma>\<close>
  shows \<open>exec_block 5 0x9c93 34 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9c96_34 ?\<sigma> \<and> block_usage P_0x9c83_34_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c83_34_def P_0x9c83_34_regions_def post: Q_0x9c96_34_def regionset: P_0x9c83_34_regions_set_def)

definition P_0x9c96_35 :: state_pred where
  \<open>P_0x9c96_35 \<sigma> \<equiv> RIP \<sigma> = 0x9c96 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = ((RAX \<sigma>::64 word) + 0x1) \<and> RSI \<sigma> = 0x3a \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c83\<close>
declare P_0x9c96_35_def[Ps]

definition P_0x9c96_35_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c96_35_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c96_35_regions :: state_pred where
  \<open>P_0x9c96_35_regions \<sigma> \<equiv> \<exists>regions. P_0x9c96_35_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_strrchr_addr_0x9c96_35 :: state_pred where
  \<open>Q_strrchr_addr_0x9c96_35 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = strrchr_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RSI \<sigma> = 0x3a \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c9b\<close>
declare Q_strrchr_addr_0x9c96_35_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9c96_0x9c96_35[blocks]:
  assumes \<open>(P_0x9c96_35 && P_0x9c96_35_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9c96 35 \<sigma> \<triangleq> ?\<sigma> \<and> Q_strrchr_addr_0x9c96_35 ?\<sigma> \<and> block_usage P_0x9c96_35_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c96_35_def P_0x9c96_35_regions_def post: Q_strrchr_addr_0x9c96_35_def regionset: P_0x9c96_35_regions_set_def)

definition P_0x9c9b_36 :: state_pred where
  \<open>P_0x9c9b_36 \<sigma> \<equiv> RIP \<sigma> = 0x9c9b \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RSI \<sigma> = 0x3a \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c9b\<close>
declare P_0x9c9b_36_def[Ps]

definition P_0x9c9b_36_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9c9b_36_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9c9b_36_regions :: state_pred where
  \<open>P_0x9c9b_36_regions \<sigma> \<equiv> \<exists>regions. P_0x9c9b_36_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9cd7_36 :: state_pred where
  \<open>Q_0x9cd7_36 \<sigma> \<equiv> RIP \<sigma> = 0x9cd7 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)::32 word) AND 0x4)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word)) \<and> RDI \<sigma> = 0x0 \<and> RSI \<sigma> = 0x3a \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c9b\<close>
declare Q_0x9cd7_36_def[Qs]

schematic_goal vmdk_create_part_5_0_16_0x9c9b_0x9cd5_36[blocks]:
  assumes \<open>(P_0x9c9b_36 && P_0x9c9b_36_regions) \<sigma>\<close>
  shows \<open>exec_block 16 0x9cd5 36 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9cd7_36 ?\<sigma> \<and> block_usage P_0x9c9b_36_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9c9b_36_def P_0x9c9b_36_regions_def post: Q_0x9cd7_36_def regionset: P_0x9c9b_36_regions_set_def)

definition P_0x9cd7_37 :: state_pred where
  \<open>P_0x9cd7_37 \<sigma> \<equiv> RIP \<sigma> = 0x9cd7 \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)::32 word) AND 0x4)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word)) \<and> RDI \<sigma> = 0x0 \<and> RSI \<sigma> = 0x3a \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9c9b\<close>
declare P_0x9cd7_37_def[Ps]

definition P_0x9cd7_37_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9cd7_37_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9cd7_37_regions :: state_pred where
  \<open>P_0x9cd7_37_regions \<sigma> \<equiv> \<exists>regions. P_0x9cd7_37_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_time_addr_0x9cd7_37 :: state_pred where
  \<open>Q_time_addr_0x9cd7_37 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = time_addr \<and> RAX \<sigma> = ucast ((((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)::32 word) AND 0x4)) \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word)) \<and> RDI \<sigma> = 0x0 \<and> RSI \<sigma> = 0x3a \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9cdc\<close>
declare Q_time_addr_0x9cd7_37_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9cd7_0x9cd7_37[blocks]:
  assumes \<open>(P_0x9cd7_37 && P_0x9cd7_37_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9cd7 37 \<sigma> \<triangleq> ?\<sigma> \<and> Q_time_addr_0x9cd7_37 ?\<sigma> \<and> block_usage P_0x9cd7_37_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9cd7_37_def P_0x9cd7_37_regions_def post: Q_time_addr_0x9cd7_37_def regionset: P_0x9cd7_37_regions_set_def)

definition P_0x9cdc_38 :: state_pred where
  \<open>P_0x9cdc_38 \<sigma> \<equiv> RIP \<sigma> = 0x9cdc \<and> RAX \<sigma> = time_0x9cd7_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = (hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word)) \<and> RDI \<sigma> = 0x0 \<and> RSI \<sigma> = 0x3a \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9cdc\<close>
declare P_0x9cdc_38_def[Ps]

definition P_0x9cdc_38_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9cdc_38_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4c8), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4d8), 8)
  }\<close>

definition P_0x9cdc_38_regions :: state_pred where
  \<open>P_0x9cdc_38_regions \<sigma> \<equiv> \<exists>regions. P_0x9cdc_38_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d09_38 :: state_pred where
  \<open>Q_0x9d09_38 \<sigma> \<equiv> RIP \<sigma> = 0x9d09 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSI \<sigma> = 0x400 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4d8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0\<close>
declare Q_0x9d09_38_def[Qs]

schematic_goal vmdk_create_part_5_0_13_0x9cdc_0x9d07_38[blocks]:
  assumes \<open>(P_0x9cdc_38 && P_0x9cdc_38_regions) \<sigma>\<close>
  shows \<open>exec_block 13 0x9d07 38 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d09_38 ?\<sigma> \<and> block_usage P_0x9cdc_38_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9cdc_38_def P_0x9cdc_38_regions_def post: Q_0x9d09_38_def regionset: P_0x9cdc_38_regions_set_def)

definition P_0x9d09_39 :: state_pred where
  \<open>P_0x9d09_39 \<sigma> \<equiv> RIP \<sigma> = 0x9d09 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSI \<sigma> = 0x400 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4d8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0\<close>
declare P_0x9d09_39_def[Ps]

definition P_0x9d09_39_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d09_39_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d09_39_regions :: state_pred where
  \<open>P_0x9d09_39_regions \<sigma> \<equiv> \<exists>regions. P_0x9d09_39_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_snprintf_chk_addr_0x9d09_39 :: state_pred where
  \<open>Q_snprintf_chk_addr_0x9d09_39 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4e0) \<and> RIP \<sigma> = snprintf_chk_addr \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSI \<sigma> = 0x400 \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_snprintf_chk_addr_0x9d09_39_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d09_0x9d09_39[blocks]:
  assumes \<open>(P_0x9d09_39 && P_0x9d09_39_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d09 39 \<sigma> \<triangleq> ?\<sigma> \<and> Q_snprintf_chk_addr_0x9d09_39 ?\<sigma> \<and> block_usage P_0x9d09_39_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d09_39_def P_0x9d09_39_regions_def post: Q_snprintf_chk_addr_0x9d09_39_def regionset: P_0x9d09_39_regions_set_def)

definition P_0x9d0e_40 :: state_pred where
  \<open>P_0x9d0e_40 \<sigma> \<equiv> RIP \<sigma> = 0x9d0e \<and> RAX \<sigma> = snprintf_chk_0x9d09_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSI \<sigma> = 0x400 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4d8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d0e_40_def[Ps]

definition P_0x9d0e_40_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d0e_40_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d0e_40_regions :: state_pred where
  \<open>P_0x9d0e_40_regions \<sigma> \<equiv> \<exists>regions. P_0x9d0e_40_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d1f_40 :: state_pred where
  \<open>Q_0x9d1f_40 \<sigma> \<equiv> RIP \<sigma> = 0x9d1f \<and> RAX \<sigma> = snprintf_chk_0x9d09_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_0x9d1f_40_def[Qs]

schematic_goal vmdk_create_part_5_0_5_0x9d0e_0x9d1b_40[blocks]:
  assumes \<open>(P_0x9d0e_40 && P_0x9d0e_40_regions) \<sigma>\<close>
  shows \<open>exec_block 5 0x9d1b 40 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d1f_40 ?\<sigma> \<and> block_usage P_0x9d0e_40_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d0e_40_def P_0x9d0e_40_regions_def post: Q_0x9d1f_40_def regionset: P_0x9d0e_40_regions_set_def)

definition P_0x9d1f_41 :: state_pred where
  \<open>P_0x9d1f_41 \<sigma> \<equiv> RIP \<sigma> = 0x9d1f \<and> RAX \<sigma> = snprintf_chk_0x9d09_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d1f_41_def[Ps]

definition P_0x9d1f_41_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d1f_41_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d1f_41_regions :: state_pred where
  \<open>P_0x9d1f_41_regions \<sigma> \<equiv> \<exists>regions. P_0x9d1f_41_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_lseek64_addr_0x9d1f_41 :: state_pred where
  \<open>Q_lseek64_addr_0x9d1f_41 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = lseek64_addr \<and> RAX \<sigma> = snprintf_chk_0x9d09_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_lseek64_addr_0x9d1f_41_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d1f_0x9d1f_41[blocks]:
  assumes \<open>(P_0x9d1f_41 && P_0x9d1f_41_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d1f 41 \<sigma> \<triangleq> ?\<sigma> \<and> Q_lseek64_addr_0x9d1f_41 ?\<sigma> \<and> block_usage P_0x9d1f_41_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d1f_41_def P_0x9d1f_41_regions_def post: Q_lseek64_addr_0x9d1f_41_def regionset: P_0x9d1f_41_regions_set_def)

definition P_0x9d24_42 :: state_pred where
  \<open>P_0x9d24_42 \<sigma> \<equiv> RIP \<sigma> = 0x9d24 \<and> RAX \<sigma> = lseek64_0x9d1f_retval \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RCX \<sigma> = 0x400 \<and> RDX \<sigma> = 0x0 \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d24_42_def[Ps]

definition P_0x9d24_42_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d24_42_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d24_42_regions :: state_pred where
  \<open>P_0x9d24_42_regions \<sigma> \<equiv> \<exists>regions. P_0x9d24_42_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d27_42 :: state_pred where
  \<open>Q_0x9d27_42 \<sigma> \<equiv> RIP \<sigma> = 0x9d27 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_0x9d27_42_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d24_0x9d24_42[blocks]:
  assumes \<open>(P_0x9d24_42 && P_0x9d24_42_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d24 42 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d27_42 ?\<sigma> \<and> block_usage P_0x9d24_42_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d24_42_def P_0x9d24_42_regions_def post: Q_0x9d27_42_def regionset: P_0x9d24_42_regions_set_def)

definition P_0x9d27_43 :: state_pred where
  \<open>P_0x9d27_43 \<sigma> \<equiv> RIP \<sigma> = 0x9d27 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d27_43_def[Ps]

definition P_0x9d27_43_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d27_43_regions_set \<sigma> \<equiv> {
    (0, RDX \<sigma>, 4),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (11, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (12, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (14, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (16, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (18, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (23, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (25, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (26, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (27, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (30, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d27_43_regions :: state_pred where
  \<open>P_0x9d27_43_regions \<sigma> \<equiv> \<exists>regions. P_0x9d27_43_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(13,14), (15,16), (24,25)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(13,14), (14,13), (15,16), (16,15), (24,25), (25,24)}))
\<close>

definition Q_0x9d3c_43 :: state_pred where
  \<open>Q_0x9d3c_43 \<sigma> \<equiv> RIP \<sigma> = 0x9d3c \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_0x9d3c_43_def[Qs]

schematic_goal vmdk_create_part_5_0_6_0x9d27_0x9d37_43[blocks]:
  assumes \<open>(P_0x9d27_43 && P_0x9d27_43_regions) \<sigma>\<close>
  shows \<open>exec_block 6 0x9d37 43 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d3c_43 ?\<sigma> \<and> block_usage P_0x9d27_43_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d27_43_def P_0x9d27_43_regions_def post: Q_0x9d3c_43_def regionset: P_0x9d27_43_regions_set_def)

definition P_0x9d3c_true_44 :: state_pred where
  \<open>P_0x9d3c_true_44 \<sigma> \<equiv> RIP \<sigma> = 0x9d3c \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d3c_true_44_def[Ps]

definition P_0x9d3c_true_44_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d3c_true_44_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d3c_true_44_regions :: state_pred where
  \<open>P_0x9d3c_true_44_regions \<sigma> \<equiv> \<exists>regions. P_0x9d3c_true_44_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d27_44 :: state_pred where
  \<open>Q_0x9d27_44 \<sigma> \<equiv> RIP \<sigma> = 0x9d27 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_0x9d27_44_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d3c_0x9d3c_44[blocks]:
  assumes \<open>(P_0x9d3c_true_44 && P_0x9d3c_true_44_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d3c 44 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d27_44 ?\<sigma> \<and> block_usage P_0x9d3c_true_44_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d3c_true_44_def P_0x9d3c_true_44_regions_def post: Q_0x9d27_44_def regionset: P_0x9d3c_true_44_regions_set_def)

definition P_0x9d3c_false_45 :: state_pred where
  \<open>P_0x9d3c_false_45 \<sigma> \<equiv> RIP \<sigma> = 0x9d3c \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d3c_false_45_def[Ps]

definition P_0x9d3c_false_45_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d3c_false_45_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d3c_false_45_regions :: state_pred where
  \<open>P_0x9d3c_false_45_regions \<sigma> \<equiv> \<exists>regions. P_0x9d3c_false_45_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d3e_45 :: state_pred where
  \<open>Q_0x9d3e_45 \<sigma> \<equiv> RIP \<sigma> = 0x9d3e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_0x9d3e_45_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d3c_0x9d3c_45[blocks]:
  assumes \<open>(P_0x9d3c_false_45 && P_0x9d3c_false_45_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d3c 45 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d3e_45 ?\<sigma> \<and> block_usage P_0x9d3c_false_45_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d3c_false_45_def P_0x9d3c_false_45_regions_def post: Q_0x9d3e_45_def regionset: P_0x9d3c_false_45_regions_set_def)

definition P_0x9d3e_46 :: state_pred where
  \<open>P_0x9d3e_46 \<sigma> \<equiv> RIP \<sigma> = 0x9d3e \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((ucast ((0x1::64 word))::64 word) << 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d3e_46_def[Ps]

definition P_0x9d3e_46_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d3e_46_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d3e_46_regions :: state_pred where
  \<open>P_0x9d3e_46_regions \<sigma> \<equiv> \<exists>regions. P_0x9d3e_46_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d63_46 :: state_pred where
  \<open>Q_0x9d63_46 \<sigma> \<equiv> RIP \<sigma> = 0x9d63 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_0x9d63_46_def[Qs]

schematic_goal vmdk_create_part_5_0_12_0x9d3e_0x9d60_46[blocks]:
  assumes \<open>(P_0x9d3e_46 && P_0x9d3e_46_regions) \<sigma>\<close>
  shows \<open>exec_block 12 0x9d60 46 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d63_46 ?\<sigma> \<and> block_usage P_0x9d3e_46_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d3e_46_def P_0x9d3e_46_regions_def post: Q_0x9d63_46_def regionset: P_0x9d3e_46_regions_set_def)

definition P_0x9d63_47 :: state_pred where
  \<open>P_0x9d63_47 \<sigma> \<equiv> RIP \<sigma> = 0x9d63 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d24 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d63_47_def[Ps]

definition P_0x9d63_47_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d63_47_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d63_47_regions :: state_pred where
  \<open>P_0x9d63_47_regions \<sigma> \<equiv> \<exists>regions. P_0x9d63_47_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_write_addr_0x9d63_47 :: state_pred where
  \<open>Q_write_addr_0x9d63_47 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = write_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d68 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_write_addr_0x9d63_47_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d63_0x9d63_47[blocks]:
  assumes \<open>(P_0x9d63_47 && P_0x9d63_47_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d63 47 \<sigma> \<triangleq> ?\<sigma> \<and> Q_write_addr_0x9d63_47 ?\<sigma> \<and> block_usage P_0x9d63_47_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d63_47_def P_0x9d63_47_regions_def post: Q_write_addr_0x9d63_47_def regionset: P_0x9d63_47_regions_set_def)

definition P_0x9d68_48 :: state_pred where
  \<open>P_0x9d68_48 \<sigma> \<equiv> RIP \<sigma> = 0x9d68 \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d68 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d68_48_def[Ps]

definition P_0x9d68_48_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d68_48_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d68_48_regions :: state_pred where
  \<open>P_0x9d68_48_regions \<sigma> \<equiv> \<exists>regions. P_0x9d68_48_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d6a_48 :: state_pred where
  \<open>Q_0x9d6a_48 \<sigma> \<equiv> RIP \<sigma> = 0x9d6a \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d68 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_0x9d6a_48_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d68_0x9d68_48[blocks]:
  assumes \<open>(P_0x9d68_48 && P_0x9d68_48_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d68 48 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d6a_48 ?\<sigma> \<and> block_usage P_0x9d68_48_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d68_48_def P_0x9d68_48_regions_def post: Q_0x9d6a_48_def regionset: P_0x9d68_48_regions_set_def)

definition P_0x9d6a_49 :: state_pred where
  \<open>P_0x9d6a_49 \<sigma> \<equiv> RIP \<sigma> = 0x9d6a \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d68 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d6a_49_def[Ps]

definition P_0x9d6a_49_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d6a_49_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d6a_49_regions :: state_pred where
  \<open>P_0x9d6a_49_regions \<sigma> \<equiv> \<exists>regions. P_0x9d6a_49_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_close_addr_0x9d6a_49 :: state_pred where
  \<open>Q_close_addr_0x9d6a_49 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = close_addr \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d6f \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare Q_close_addr_0x9d6a_49_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d6a_0x9d6a_49[blocks]:
  assumes \<open>(P_0x9d6a_49 && P_0x9d6a_49_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d6a 49 \<sigma> \<triangleq> ?\<sigma> \<and> Q_close_addr_0x9d6a_49 ?\<sigma> \<and> block_usage P_0x9d6a_49_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d6a_49_def P_0x9d6a_49_regions_def post: Q_close_addr_0x9d6a_49_def regionset: P_0x9d6a_49_regions_set_def)

definition P_0x9d6f_50 :: state_pred where
  \<open>P_0x9d6f_50 \<sigma> \<equiv> RIP \<sigma> = 0x9d6f \<and> RBX \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RDI \<sigma> = ucast ((\<langle>31,0\<rangle>open64_0x9ac8_retval::32 word)) \<and> RSI \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> RBP \<sigma> = ((((ucast (((((hi_imul(ucast ((RSI\<^sub>0::64 word))::64 word) (ucast ((0x8208208208208209::64 word))::64 word))::64 word) + (\<langle>63,0\<rangle>((RSI\<^sub>0::64 word) * 0x1)::64 word))::64 word))::64 word) >>> 9)::64 word) - ((ucast ((RSI\<^sub>0::64 word))::64 word) >>> 63)) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> R12 \<sigma> = ((RSP\<^sub>0::64 word) - 0x448) \<and> R9 \<sigma> = ucast ((\<langle>31,0\<rangle>time_0x9cd7_retval::32 word)) \<and> R8 \<sigma> = 0x208e0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x453),4]::32 word) = 0xa0d200a \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x454),1]::8 word) = 0x0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x45c),8]::64 word) = ucast ((((\<langle>31,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) + ((((\<langle>63,0\<rangle>((((((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15))::64 word) + ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9))::64 word) * 0x1)::64 word)::64 word) + 0x7f)::64 word))::32 word)::32 word) AND 0x3fffff80)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x464),8]::64 word) = ((((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9)::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::32 word)::32 word))::64 word) * (0x1::64 word))::64 word)::64 word) + 0x15)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x46c),8]::64 word) = 0x15 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x470),4]::32 word) = 0x200 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x478),8]::64 word) = 0x14 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x480),8]::64 word) = 0x1 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x488),8]::64 word) = 0x80 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x490),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x498),8]::64 word) = 0x300000001 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x49c),4]::32 word) = 0x564d444b \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b0),8]::64 word) = ((ucast (((((\<langle>63,0\<rangle>(((\<langle>31,0\<rangle>((ucast (((((\<langle>31,0\<rangle>((ucast (((if' (((RSI\<^sub>0::64 word) + 0x7f)::64 word) \<ge>s (ucast ((0x0::64 word))::64 word) then ((RSI\<^sub>0::64 word) + 0x7f) else (((RSI\<^sub>0::64 word) + 0xfe)::64 word))::64 word))::64 word) >>> 7)::32 word)::32 word) + 0x1ff)::32 word))::32 word) >> 9)::64 word)::64 word) * 0x4)::64 word)::64 word) + 0x1ff)::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4c0),8]::64 word) = 0x9d6f \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d0),8]::64 word) = R14 \<sigma> \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4d8),8]::64 word) = RSI\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4e0),8]::64 word) = 0x9d0e\<close>
declare P_0x9d6f_50_def[Ps]

definition P_0x9d6f_50_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d6f_50_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x453), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x454), Suc 0),
    (11, ((RSP\<^sub>0::64 word) - 0x45c), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x464), 4),
    (13, ((RSP\<^sub>0::64 word) - 0x464), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x46c), 4),
    (15, ((RSP\<^sub>0::64 word) - 0x46c), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x470), 4),
    (17, ((RSP\<^sub>0::64 word) - 0x478), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x480), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x488), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x490), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x498), 8),
    (22, ((RSP\<^sub>0::64 word) - 0x49c), 4),
    (23, ((RSP\<^sub>0::64 word) - 0x4b0), 4),
    (24, ((RSP\<^sub>0::64 word) - 0x4b0), 8),
    (25, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (26, ((RSP\<^sub>0::64 word) - 0x4c0), 8),
    (27, ((RSP\<^sub>0::64 word) - 0x4d0), 8),
    (28, ((RSP\<^sub>0::64 word) - 0x4d8), 8),
    (29, ((RSP\<^sub>0::64 word) - 0x4e0), 8)
  }\<close>

definition P_0x9d6f_50_regions :: state_pred where
  \<open>P_0x9d6f_50_regions \<sigma> \<equiv> \<exists>regions. P_0x9d6f_50_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {(12,13), (14,15), (23,24)}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {(12,13), (13,12), (14,15), (15,14), (23,24), (24,23)}))
\<close>

definition Q_0x9d71_50 :: state_pred where
  \<open>Q_0x9d71_50 \<sigma> \<equiv> RIP \<sigma> = 0x9d71 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9d71_50_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d6f_0x9d6f_50[blocks]:
  assumes \<open>(P_0x9d6f_50 && P_0x9d6f_50_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d6f 50 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d71_50 ?\<sigma> \<and> block_usage P_0x9d6f_50_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d6f_50_def P_0x9d6f_50_regions_def post: Q_0x9d71_50_def regionset: P_0x9d6f_50_regions_set_def)

definition P_0x9d71_51 :: state_pred where
  \<open>P_0x9d71_51 \<sigma> \<equiv> RIP \<sigma> = 0x9d71 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9d71_51_def[Ps]

definition P_0x9d71_51_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d71_51_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9d71_51_regions :: state_pred where
  \<open>P_0x9d71_51_regions \<sigma> \<equiv> \<exists>regions. P_0x9d71_51_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9d82_51 :: state_pred where
  \<open>Q_0x9d82_51 \<sigma> \<equiv> RIP \<sigma> = 0x9d82 \<and> RCX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9d82_51_def[Qs]

schematic_goal vmdk_create_part_5_0_2_0x9d71_0x9d79_51[blocks]:
  assumes \<open>(P_0x9d71_51 && P_0x9d71_51_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x9d79 51 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9d82_51 ?\<sigma> \<and> block_usage P_0x9d71_51_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d71_51_def P_0x9d71_51_regions_def post: Q_0x9d82_51_def regionset: P_0x9d71_51_regions_set_def)

definition P_0x9d82_true_52 :: state_pred where
  \<open>P_0x9d82_true_52 \<sigma> \<equiv> RIP \<sigma> = 0x9d82 \<and> RCX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9d82_true_52_def[Ps]

definition P_0x9d82_true_52_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d82_true_52_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9d82_true_52_regions :: state_pred where
  \<open>P_0x9d82_true_52_regions \<sigma> \<equiv> \<exists>regions. P_0x9d82_true_52_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x9dca_52 :: state_pred where
  \<open>Q_0x9dca_52 \<sigma> \<equiv> RIP \<sigma> = 0x9dca \<and> RCX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_0x9dca_52_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9d82_0x9d82_52[blocks]:
  assumes \<open>(P_0x9d82_true_52 && P_0x9d82_true_52_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9d82 52 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x9dca_52 ?\<sigma> \<and> block_usage P_0x9d82_true_52_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d82_true_52_def P_0x9d82_true_52_regions_def post: Q_0x9dca_52_def regionset: P_0x9d82_true_52_regions_set_def)

definition P_0x9dca_53 :: state_pred where
  \<open>P_0x9dca_53 \<sigma> \<equiv> RIP \<sigma> = 0x9dca \<and> RCX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9dca_53_def[Ps]

definition P_0x9dca_53_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9dca_53_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x4c0), 8)
  }\<close>

definition P_0x9dca_53_regions :: state_pred where
  \<open>P_0x9dca_53_regions \<sigma> \<equiv> \<exists>regions. P_0x9dca_53_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_stack_chk_fail_addr_0x9dca_53 :: state_pred where
  \<open>Q_stack_chk_fail_addr_0x9dca_53 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4c0) \<and> RIP \<sigma> = stack_chk_fail_addr \<and> RCX \<sigma> = 0x0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_stack_chk_fail_addr_0x9dca_53_def[Qs]

schematic_goal vmdk_create_part_5_0_1_0x9dca_0x9dca_53[blocks]:
  assumes \<open>(P_0x9dca_53 && P_0x9dca_53_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x9dca 53 \<sigma> \<triangleq> ?\<sigma> \<and> Q_stack_chk_fail_addr_0x9dca_53 ?\<sigma> \<and> block_usage P_0x9dca_53_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9dca_53_def P_0x9dca_53_regions_def post: Q_stack_chk_fail_addr_0x9dca_53_def regionset: P_0x9dca_53_regions_set_def)

definition P_0x9d82_false_54 :: state_pred where
  \<open>P_0x9d82_false_54 \<sigma> \<equiv> RIP \<sigma> = 0x9d82 \<and> RCX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x4b8) \<and> R15 \<sigma> = RSI\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare P_0x9d82_false_54_def[Ps]

definition P_0x9d82_false_54_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x9d82_false_54_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (3, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x4b4), 4)
  }\<close>

definition P_0x9d82_false_54_regions :: state_pred where
  \<open>P_0x9d82_false_54_regions \<sigma> \<equiv> \<exists>regions. P_0x9d82_false_54_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_54 :: state_pred where
  \<open>Q_ret_address_54 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> RCX \<sigma> = 0x0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x4b4),4]::32 word) = ucast ((\<langle>31,0\<rangle>RDX\<^sub>0::32 word))\<close>
declare Q_ret_address_54_def[Qs]

schematic_goal vmdk_create_part_5_0_9_0x9d82_0x9d95_54[blocks]:
  assumes \<open>(P_0x9d82_false_54 && P_0x9d82_false_54_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 9 0x9d95 54 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_54 ?\<sigma> \<and> block_usage P_0x9d82_false_54_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x9d82_false_54_def P_0x9d82_false_54_regions_def post: Q_ret_address_54_def regionset: P_0x9d82_false_54_regions_set_def)

definition vmdk_create_part_5_acode :: ACode where
  \<open>vmdk_create_part_5_acode =
    Block 15 0x9ac6 0;
    Block (Suc 0) 0x9ac8 (Suc 0);
    CALL open64_acode;
    Block (Suc 0) 0x9acd 2;
    IF SF THEN
      Block 3 0x9dc8 3
    ELSE
      Block 36 0x9b94 4;
      Block (Suc 0) 0x9b99 5;
      CALL write_acode;
      Block 3 0x9ba6 6;
      Block (Suc 0) 0x9ba8 7;
      CALL write_acode;
      Block 3 0x9bb4 8;
      Block (Suc 0) 0x9bb8 9;
      CALL ftruncate64_acode;
      Block 4 0x9bc6 10;
      Block (Suc 0) 0x9bca 11;
      CALL lseek64_acode;
      Block 4 0x9bda 12;
      IF ZF THEN
        Block 5 0x9da9 13;
        Block (Suc 0) 0x9dad 14;
        CALL lseek64_acode;
        Block 4 0x9dbe 15
      ELSE
        Block 4 0x9bea 16;
        WHILE P_0x9bf2_17 DO
          Block 3 0x9bfa 17;
          Block (Suc 0) 0x9bfc 18;
          CALL write_acode;
          Block 3 0x9c09 19;
          IF !ZF THEN
            Block 2 0x9bf0 20
          ELSE
            Block (Suc 0) 0x9c0c 21
          FI
        OD;
        Block 5 0x9c1a 22;
        Block (Suc 0) 0x9c1e 23;
        CALL lseek64_acode;
        Block 4 0x9c2f 24;
        WHILE P_0x9c3b_25 DO
          Block 3 0x9c43 25;
          Block (Suc 0) 0x9c45 26;
          CALL write_acode;
          Block 3 0x9c54 27;
          IF !ZF THEN
            Block 2 0x9c38 28
          ELSE
            Block (Suc 0) 0x9c57 29
          FI
        OD
      FI;
      Block 3 0x9c61 30;
      Block (Suc 0) 0x9c66 31;
      CALL strrchr_acode;
      Block 5 0x9c7b 32;
      Block (Suc 0) 0x9c7e 33;
      CALL strrchr_acode;
      Block 5 0x9c93 34;
      Block (Suc 0) 0x9c96 35;
      CALL strrchr_acode;
      Block 16 0x9cd5 36;
      Block (Suc 0) 0x9cd7 37;
      CALL time_acode;
      Block 13 0x9d07 38;
      Block (Suc 0) 0x9d09 39;
      CALL snprintf_chk_acode;
      Block 5 0x9d1b 40;
      Block (Suc 0) 0x9d1f 41;
      CALL lseek64_acode;
      Block (Suc 0) 0x9d24 42;
      WHILE P_0x9d27_43 DO
        Block 6 0x9d37 43;
        IF ZF THEN
          Block (Suc 0) 0x9d3c 44
        ELSE
          Block (Suc 0) 0x9d3c 45
        FI
      OD;
      Block 12 0x9d60 46;
      Block (Suc 0) 0x9d63 47;
      CALL write_acode;
      Block (Suc 0) 0x9d68 48;
      Block (Suc 0) 0x9d6a 49;
      CALL close_acode;
      Block (Suc 0) 0x9d6f 50
    FI;
    Block 2 0x9d79 51;
    IF !ZF THEN
      Block (Suc 0) 0x9d82 52;
      Block (Suc 0) 0x9dca 53;
      CALL stack_chk_fail_acode
    ELSE
      Block 9 0x9d95 54
    FI
  \<close>

schematic_goal "vmdk_create_part_5":
  assumes
    \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9ac8 \<longrightarrow> P_0x9ac8_1_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9acd \<longrightarrow> P_0x9acd_2_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9acf \<longrightarrow> P_0x9acf_true_3_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9acf \<longrightarrow> P_0x9acf_false_4_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9b99 \<longrightarrow> P_0x9b99_5_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9b9e \<longrightarrow> P_0x9b9e_6_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9ba8 \<longrightarrow> P_0x9ba8_7_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bad \<longrightarrow> P_0x9bad_8_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bb8 \<longrightarrow> P_0x9bb8_9_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bbd \<longrightarrow> P_0x9bbd_10_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bca \<longrightarrow> P_0x9bca_11_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bcf \<longrightarrow> P_0x9bcf_12_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bdd \<longrightarrow> P_0x9bdd_true_13_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9dad \<longrightarrow> P_0x9dad_14_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9db2 \<longrightarrow> P_0x9db2_15_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bdd \<longrightarrow> P_0x9bdd_false_16_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bf2 \<longrightarrow> P_0x9bf2_17_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9bfc \<longrightarrow> P_0x9bfc_18_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c01 \<longrightarrow> P_0x9c01_19_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c0c \<longrightarrow> P_0x9c0c_true_20_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c0c \<longrightarrow> P_0x9c0c_false_21_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c0e \<longrightarrow> P_0x9c0e_22_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c1e \<longrightarrow> P_0x9c1e_23_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c23 \<longrightarrow> P_0x9c23_24_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c3b \<longrightarrow> P_0x9c3b_25_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c45 \<longrightarrow> P_0x9c45_26_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c4a \<longrightarrow> P_0x9c4a_27_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c57 \<longrightarrow> P_0x9c57_true_28_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c57 \<longrightarrow> P_0x9c57_false_29_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c59 \<longrightarrow> P_0x9c59_30_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c66 \<longrightarrow> P_0x9c66_31_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c6b \<longrightarrow> P_0x9c6b_32_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c7e \<longrightarrow> P_0x9c7e_33_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c83 \<longrightarrow> P_0x9c83_34_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c96 \<longrightarrow> P_0x9c96_35_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9c9b \<longrightarrow> P_0x9c9b_36_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9cd7 \<longrightarrow> P_0x9cd7_37_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9cdc \<longrightarrow> P_0x9cdc_38_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d09 \<longrightarrow> P_0x9d09_39_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d0e \<longrightarrow> P_0x9d0e_40_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d1f \<longrightarrow> P_0x9d1f_41_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d24 \<longrightarrow> P_0x9d24_42_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d27 \<longrightarrow> P_0x9d27_43_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d3c \<longrightarrow> P_0x9d3c_true_44_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d3c \<longrightarrow> P_0x9d3c_false_45_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d3e \<longrightarrow> P_0x9d3e_46_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d63 \<longrightarrow> P_0x9d63_47_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d68 \<longrightarrow> P_0x9d68_48_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d6a \<longrightarrow> P_0x9d6a_49_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d6f \<longrightarrow> P_0x9d6f_50_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d71 \<longrightarrow> P_0x9d71_51_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d82 \<longrightarrow> P_0x9d82_true_52_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9dca \<longrightarrow> P_0x9dca_53_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x9d82 \<longrightarrow> P_0x9d82_false_54_regions \<sigma>\<close>
    and [blocks]: \<open>{{Q_open64_addr_0x9ac8_1}} \<box>open64_acode {{P_0x9acd_2;M_0x9ac8}}\<close>
    and [blocks]: \<open>{{Q_write_addr_0x9b99_5}} \<box>write_acode {{P_0x9b9e_6;M_0x9b99}}\<close>
    and [blocks]: \<open>{{Q_write_addr_0x9ba8_7}} \<box>write_acode {{P_0x9bad_8;M_0x9ba8}}\<close>
    and [blocks]: \<open>{{Q_ftruncate64_addr_0x9bb8_9}} \<box>ftruncate64_acode {{P_0x9bbd_10;M_0x9bb8}}\<close>
    and [blocks]: \<open>{{Q_lseek64_addr_0x9bca_11}} \<box>lseek64_acode {{P_0x9bcf_12;M_0x9bca}}\<close>
    and [blocks]: \<open>{{Q_lseek64_addr_0x9dad_14}} \<box>lseek64_acode {{P_0x9db2_15;M_0x9dad}}\<close>
    and [blocks]: \<open>{{Q_write_addr_0x9bfc_18}} \<box>write_acode {{P_0x9c01_19;M_0x9bfc}}\<close>
    and [blocks]: \<open>{{Q_lseek64_addr_0x9c1e_23}} \<box>lseek64_acode {{P_0x9c23_24;M_0x9c1e}}\<close>
    and [blocks]: \<open>{{Q_write_addr_0x9c45_26}} \<box>write_acode {{P_0x9c4a_27;M_0x9c45}}\<close>
    and [blocks]: \<open>{{Q_strrchr_addr_0x9c66_31}} \<box>strrchr_acode {{P_0x9c6b_32;M_0x9c66}}\<close>
    and [blocks]: \<open>{{Q_strrchr_addr_0x9c7e_33}} \<box>strrchr_acode {{P_0x9c83_34;M_0x9c7e}}\<close>
    and [blocks]: \<open>{{Q_strrchr_addr_0x9c96_35}} \<box>strrchr_acode {{P_0x9c9b_36;M_0x9c96}}\<close>
    and [blocks]: \<open>{{Q_time_addr_0x9cd7_37}} \<box>time_acode {{P_0x9cdc_38;M_0x9cd7}}\<close>
    and [blocks]: \<open>{{Q_snprintf_chk_addr_0x9d09_39}} \<box>snprintf_chk_acode {{P_0x9d0e_40;M_0x9d09}}\<close>
    and [blocks]: \<open>{{Q_lseek64_addr_0x9d1f_41}} \<box>lseek64_acode {{P_0x9d24_42;M_0x9d1f}}\<close>
    and [blocks]: \<open>{{Q_write_addr_0x9d63_47}} \<box>write_acode {{P_0x9d68_48;M_0x9d63}}\<close>
    and [blocks]: \<open>{{Q_close_addr_0x9d6a_49}} \<box>close_acode {{P_0x9d6f_50;M_0x9d6a}}\<close>
    and [blocks]: \<open>{{Q_stack_chk_fail_addr_0x9dca_53}} \<box>stack_chk_fail_acode {{Q_fail;M_0x9dca}}\<close>
  shows \<open>{{?P}} vmdk_create_part_5_acode {{?Q;?M}}\<close>
  apply (vcg acode: vmdk_create_part_5_acode_def assms: assms)
                      apply (vcg_while \<open>P_0x9bf2_17 || P_0x9c0e_22\<close> assms: assms)
                      apply (vcg_step assms: assms)+
                      apply (vcg_while \<open>P_0x9c3b_25 || P_0x9c59_30\<close> assms: assms)
                      apply (vcg_step assms: assms)+
                      apply (vcg_while \<open>P_0x9d27_43 || P_0x9d3e_46\<close> assms: assms)
                      apply (vcg_step assms: assms)+
  done

end

end
