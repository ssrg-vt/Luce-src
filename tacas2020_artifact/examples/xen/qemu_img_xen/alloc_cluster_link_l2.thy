theory alloc_cluster_link_l2
  imports
    "../../../isabelle/VCG/HTriple"
begin

locale "qemu_img_xen" = execution_context + exec_code +
  fixes qemu_malloc_0x14fb4_retval\<^sub>v copy_sectors_0x1500b_retval\<^sub>v get_cluster_table_0x15031_retval\<^sub>v bdrv_pwrite_0x150d5_retval\<^sub>v free_any_clusters_0x15110_retval\<^sub>v bdrv_pwrite_0x15141_retval\<^sub>v qemu_free_0x15169_retval\<^sub>v copy_sectors_0x15185_retval\<^sub>v stack_chk_fail_0x1519c_retval\<^sub>v stack_chk_fail_addr bdrv_pwrite_addr copy_sectors_addr free_any_clusters_addr get_cluster_table_addr qemu_free_addr qemu_malloc_addr :: \<open>64 word\<close>
    and stack_chk_fail_acode bdrv_pwrite_acode copy_sectors_acode free_any_clusters_acode get_cluster_table_acode qemu_free_acode qemu_malloc_acode :: ACode
  assumes fetch:
    "fetch 0x14f50 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x14f52 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x14f54 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x14f56 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x14f58 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x14f59 \<equiv> (Unary (IS_8088 Push) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x14f5a \<equiv> (Binary (IS_8088 Sub) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 56)), 4)"
    "fetch 0x14f5e \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r15)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rdx)) (A_WordConstant 16))))), 4)"
    "fetch 0x14f62 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour fs)) (A_WordConstant 40))))), 9)"
    "fetch 0x14f6b \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 40)))) (Storage (Reg (General SixtyFour rax))), 5)"
    "fetch 0x14f70 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x14f72 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x14f75 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 85920)), 2)"
    "fetch 0x14f77 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rbx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 40))))), 5)"
    "fetch 0x14f7c \<equiv> (Binary (IS_8088 Xor) (Reg (General SixtyFour rbx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour fs)) (A_WordConstant 40))))), 9)"
    "fetch 0x14f85 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x14f88 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 86428)), 6)"
    "fetch 0x14f8e \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsp)) (Immediate SixtyFour (ImmVal 56)), 4)"
    "fetch 0x14f92 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbx))), 1)"
    "fetch 0x14f93 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour rbp))), 1)"
    "fetch 0x14f94 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r12))), 2)"
    "fetch 0x14f96 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r13))), 2)"
    "fetch 0x14f98 \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r14))), 2)"
    "fetch 0x14f9a \<equiv> (Unary (IS_8088 Pop) (Storage (Reg (General SixtyFour r15))), 2)"
    "fetch 0x14f9c \<equiv> (Nullary (IS_8088 Ret), 1)"
    "fetch 0x14f9d \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_FromReg (General SixtyFour rax))))), 3)"
    "fetch 0x14fa0 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r13)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rdi)) (A_WordConstant 64))))), 4)"
    "fetch 0x14fa4 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rbx)) (Storage (Reg (General SixtyFour rdi))), 3)"
    "fetch 0x14fa7 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rdi)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x14faa \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r12)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x14fad \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rdi)) (Immediate SixtyFour (ImmVal 3)), 4)"
    "fetch 0x14fb1 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r14)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x14fb4 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''qemu_malloc'')), 5)"
    "fetch 0x14fb9 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rsi)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 12))))), 4)"
    "fetch 0x14fbd \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r12)) (A_WordConstant 8))))), 5)"
    "fetch 0x14fc2 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rbp)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x14fc5 \<equiv> (Unary (IS_8088 Neg) (Storage (Reg (General ThirtyTwo rsi))), 2)"
    "fetch 0x14fc7 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rsi)) (Storage (Reg (General ThirtyTwo rsi))), 3)"
    "fetch 0x14fca \<equiv> (Binary (IS_8088 And) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour r12))))), 4)"
    "fetch 0x14fce \<equiv> (Binary (IS_8088 Shr) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x14fd2 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r9)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x14fd5 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r8)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x14fd8 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 86392)), 6)"
    "fetch 0x14fde \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r8)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 16))))), 4)"
    "fetch 0x14fe2 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r12)) (A_WordConstant 12))))), 5)"
    "fetch 0x14fe7 \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo rax)) (Storage (Memory SixtyFour (A_Minus (A_FromReg (General SixtyFour r8)) (A_WordConstant 1)))), 4)"
    "fetch 0x14feb \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x14fed \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 86043)), 2)"
    "fetch 0x14fef \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo r8))), 3)"
    "fetch 0x14ff2 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour rbx))), 3)"
    "fetch 0x14ff5 \<equiv> (Unary (IS_8088 Neg) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x14ff7 \<equiv> (Binary (IS_8088 And) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x14ff9 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rsi)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x14ffc \<equiv> (Binary (IS_8088 Sub) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x14ffe \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x15001 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsi)) (Storage (Reg (General SixtyFour r9))), 3)"
    "fetch 0x15004 \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 9)), 4)"
    "fetch 0x15008 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x1500b \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''copy_sectors'')), 5)"
    "fetch 0x15010 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x15013 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x15015 \<equiv> (Unary (IS_8088 Js) (Immediate SixtyFour (ImmVal 86374)), 6)"
    "fetch 0x1501b \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour r12))))), 4)"
    "fetch 0x1501f \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24)))), 5)"
    "fetch 0x15024 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 32)))), 5)"
    "fetch 0x15029 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour rbx))), 3)"
    "fetch 0x1502c \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r8)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 20)))), 5)"
    "fetch 0x15031 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''get_cluster_table'')), 5)"
    "fetch 0x15036 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x15038 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 86368)), 6)"
    "fetch 0x1503e \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r12)) (A_WordConstant 16))))), 5)"
    "fetch 0x15043 \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x15045 \<equiv> (Unary (IS_8088 Jle) (Immediate SixtyFour (ImmVal 86304)), 6)"
    "fetch 0x1504b \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 9223372036854775808)), 10)"
    "fetch 0x15055 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x15058 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rdx)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x1505a \<equiv> (Unary (IS_8088 Nop) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 6)"
    "fetch 0x15060 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 20))))), 4)"
    "fetch 0x15064 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 32))))), 5)"
    "fetch 0x15069 \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x1506b \<equiv> (Nullary (IS_X86_64 Cdqe), 2)"
    "fetch 0x1506d \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rcx)) (A_Mult 8 (A_FromReg (General SixtyFour rax)))))), 4)"
    "fetch 0x15071 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rax)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour rdi))))), 3)"
    "fetch 0x15074 \<equiv> (Binary (IS_8088 Test) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x15077 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 86166)), 2)"
    "fetch 0x15079 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rcx)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1507c \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo r15)) (Immediate SixtyFour (ImmVal 1)), 4)"
    "fetch 0x15080 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rbp)) (A_Plus (A_Mult 8 (A_FromReg (General SixtyFour rcx))) (A_WordConstant 0))))) (Storage (Reg (General SixtyFour rax))), 5)"
    "fetch 0x15085 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 20))))), 4)"
    "fetch 0x15089 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rcx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 32))))), 5)"
    "fetch 0x1508e \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x15090 \<equiv> (Nullary (IS_X86_64 Cdqe), 2)"
    "fetch 0x15092 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rcx)) (A_Mult 8 (A_FromReg (General SixtyFour rax)))))), 4)"
    "fetch 0x15096 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 8))))), 4)"
    "fetch 0x1509a \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x1509c \<equiv> (Binary (IS_8088 Add) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 1)), 3)"
    "fetch 0x1509f \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rax)) (Storage (Reg (General Eight rcx))), 2)"
    "fetch 0x150a1 \<equiv> (Nullary (IS_X86_64 Cdqe), 2)"
    "fetch 0x150a3 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x150a6 \<equiv> (Binary (IS_8088 Or) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x150a9 \<equiv> (Unary (IS_80486 Bswap) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x150ac \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour rdi)))) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x150af \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rcx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r12)) (A_WordConstant 16))))), 5)"
    "fetch 0x150b4 \<equiv> (Binary (IS_8088 Cmp) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rdx))), 2)"
    "fetch 0x150b6 \<equiv> (Unary (IS_8088 Jg) (Immediate SixtyFour (ImmVal 86112)), 2)"
    "fetch 0x150b8 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rsi)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 20))))), 5)"
    "fetch 0x150bd \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 32))))), 5)"
    "fetch 0x150c2 \<equiv> (Binary (IS_8088 Shl) (Reg (General ThirtyTwo rcx)) (Immediate SixtyFour (ImmVal 3)), 3)"
    "fetch 0x150c5 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 0))))), 4)"
    "fetch 0x150c9 \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 3)), 4)"
    "fetch 0x150cd \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x150d0 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24))))), 5)"
    "fetch 0x150d5 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''bdrv_pwrite'')), 5)"
    "fetch 0x150da \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rdx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r12)) (A_WordConstant 16))))), 5)"
    "fetch 0x150df \<equiv> (Nullary (IS_X86_64 Cdqe), 2)"
    "fetch 0x150e1 \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 3)), 4)"
    "fetch 0x150e5 \<equiv> (Binary (IS_8088 Cmp) (Reg (General SixtyFour rax)) (Storage (Reg (General SixtyFour rdx))), 3)"
    "fetch 0x150e8 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 86368)), 2)"
    "fetch 0x150ea \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x150ed \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 86298)), 2)"
    "fetch 0x150ef \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo rax)) (Storage (Memory SixtyFour (A_Minus (A_FromReg (General SixtyFour r15)) (A_WordConstant 1)))), 4)"
    "fetch 0x150f3 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r12)) (Storage (Reg (General SixtyFour rbp))), 3)"
    "fetch 0x150f6 \<equiv> (Binary (IS_8088 Lea) (Reg (General SixtyFour r13)) (Storage (Memory SixtyFour (A_Plus (A_FromReg (General SixtyFour rbp)) (A_Plus (A_Mult 8 (A_FromReg (General SixtyFour rax))) (A_WordConstant 8))))), 5)"
    "fetch 0x150fb \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 5)"
    "fetch 0x15100 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_FromReg (General SixtyFour r12))))), 4)"
    "fetch 0x15104 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo rdx)) (Immediate SixtyFour (ImmVal 1)), 5)"
    "fetch 0x15109 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour rbx))), 3)"
    "fetch 0x1510c \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour r12)) (Immediate SixtyFour (ImmVal 8)), 4)"
    "fetch 0x15110 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''free_any_clusters'')), 5)"
    "fetch 0x15115 \<equiv> (Binary (IS_8088 Cmp) (Reg (General SixtyFour r13)) (Storage (Reg (General SixtyFour r12))), 3)"
    "fetch 0x15118 \<equiv> (Unary (IS_8088 Jne) (Immediate SixtyFour (ImmVal 86272)), 2)"
    "fetch 0x1511a \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo r15))), 3)"
    "fetch 0x1511d \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 86374)), 2)"
    "fetch 0x1511f \<equiv> (Nullary (IS_8088 Nop), 1)"
    "fetch 0x15120 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rsi)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 20))))), 5)"
    "fetch 0x15125 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 32))))), 5)"
    "fetch 0x1512a \<equiv> (Binary (IS_8088 Lea) (Reg (General ThirtyTwo rcx)) (Storage (Memory SixtyFour (A_Plus (A_Mult 8 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))), 7)"
    "fetch 0x15131 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour r13)) (A_WordConstant 0))))), 4)"
    "fetch 0x15135 \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rsi)) (Immediate SixtyFour (ImmVal 3)), 4)"
    "fetch 0x15139 \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rsi))), 3)"
    "fetch 0x1513c \<equiv> (Binary (IS_8088 Add) (Reg (General SixtyFour rsi)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 24))))), 5)"
    "fetch 0x15141 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''bdrv_pwrite'')), 5)"
    "fetch 0x15146 \<equiv> (Binary (IS_X86_64 Movsxd) (Reg (General SixtyFour rdx)) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour r12)) (A_WordConstant 16))))), 5)"
    "fetch 0x1514b \<equiv> (Nullary (IS_X86_64 Cdqe), 2)"
    "fetch 0x1514d \<equiv> (Binary (IS_8088 Shl) (Reg (General SixtyFour rdx)) (Immediate SixtyFour (ImmVal 3)), 4)"
    "fetch 0x15151 \<equiv> (Binary (IS_8088 Cmp) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour rax))), 3)"
    "fetch 0x15154 \<equiv> (Unary (IS_8088 Je) (Immediate SixtyFour (ImmVal 86298)), 2)"
    "fetch 0x15156 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour cs)) (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0))))))), 10)"
    "fetch 0x15160 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r15)) (Immediate SixtyFour (ImmVal 4294967291)), 6)"
    "fetch 0x15166 \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour rbp))), 3)"
    "fetch 0x15169 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''qemu_free'')), 5)"
    "fetch 0x1516e \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 85879)), 5)"
    "fetch 0x15173 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory ThirtyTwo (A_SizeDirective 32 (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0)))))), 5)"
    "fetch 0x15178 \<equiv> (Binary (IS_8088 Xor) (Reg (General ThirtyTwo rcx)) (Storage (Reg (General ThirtyTwo rcx))), 2)"
    "fetch 0x1517a \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdx)) (Storage (Reg (General SixtyFour r14))), 3)"
    "fetch 0x1517d \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour rdi)) (Storage (Reg (General SixtyFour rbx))), 3)"
    "fetch 0x15180 \<equiv> (Binary (IS_8088 Mov) (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8)))) (Storage (Reg (General SixtyFour rsi))), 5)"
    "fetch 0x15185 \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''copy_sectors'')), 5)"
    "fetch 0x1518a \<equiv> (Binary (IS_8088 Mov) (Reg (General SixtyFour r9)) (Storage (Memory SixtyFour (A_SizeDirective 64 (A_Plus (A_FromReg (General SixtyFour rsp)) (A_WordConstant 8))))), 5)"
    "fetch 0x1518f \<equiv> (Binary (IS_8088 Test) (Reg (General ThirtyTwo rax)) (Storage (Reg (General ThirtyTwo rax))), 2)"
    "fetch 0x15191 \<equiv> (Binary (IS_8088 Mov) (Reg (General ThirtyTwo r15)) (Storage (Reg (General ThirtyTwo rax))), 3)"
    "fetch 0x15194 \<equiv> (Unary (IS_8088 Jns) (Immediate SixtyFour (ImmVal 85982)), 6)"
    "fetch 0x1519a \<equiv> (Unary (IS_8088 Jmp) (Immediate SixtyFour (ImmVal 86374)), 2)"
    "fetch 0x1519c \<equiv> (Unary (IS_8088 Call) (Immediate SixtyFour (ImmLabel ''__stack_chk_fail'')), 5)"
    "fetch 0x151a1 \<equiv> (Unary (IS_8088 Nop) (Storage (Memory Sixteen (A_SizeDirective 16 (A_Plus (A_FromReg (General SixtyFour cs)) (A_Plus (A_FromReg (General SixtyFour rax)) (A_Plus (A_Mult 1 (A_FromReg (General SixtyFour rax))) (A_WordConstant 0))))))), 11)"
    and \<alpha>_def: \<open>\<alpha> = \<lparr>text_sections = [], data_sections = [], labels_to_offsets = [], binary_offset = 0\<rparr>\<close>
    and stack_chk_fail\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''__stack_chk_fail'') = stack_chk_fail_addr\<close>
    and bdrv_pwrite\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''bdrv_pwrite'') = bdrv_pwrite_addr\<close>
    and copy_sectors\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''copy_sectors'') = copy_sectors_addr\<close>
    and free_any_clusters\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''free_any_clusters'') = free_any_clusters_addr\<close>
    and get_cluster_table\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''get_cluster_table'') = get_cluster_table_addr\<close>
    and qemu_free\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''qemu_free'') = qemu_free_addr\<close>
    and qemu_malloc\<^sub>a\<^sub>d\<^sub>d\<^sub>r[simp]: \<open>the (label_to_address \<alpha> ''qemu_malloc'') = qemu_malloc_addr\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>qemu_malloc_0x14fb4_retval \<equiv> qemu_malloc_0x14fb4_retval\<^sub>v\<close>
definition \<open>copy_sectors_0x1500b_retval \<equiv> copy_sectors_0x1500b_retval\<^sub>v\<close>
definition \<open>get_cluster_table_0x15031_retval \<equiv> get_cluster_table_0x15031_retval\<^sub>v\<close>
definition \<open>bdrv_pwrite_0x150d5_retval \<equiv> bdrv_pwrite_0x150d5_retval\<^sub>v\<close>
definition \<open>free_any_clusters_0x15110_retval \<equiv> free_any_clusters_0x15110_retval\<^sub>v\<close>
definition \<open>bdrv_pwrite_0x15141_retval \<equiv> bdrv_pwrite_0x15141_retval\<^sub>v\<close>
definition \<open>qemu_free_0x15169_retval \<equiv> qemu_free_0x15169_retval\<^sub>v\<close>
definition \<open>copy_sectors_0x15185_retval \<equiv> copy_sectors_0x15185_retval\<^sub>v\<close>
definition \<open>stack_chk_fail_0x1519c_retval \<equiv> stack_chk_fail_0x1519c_retval\<^sub>v\<close>

text \<open>
  Going with a binary offset of 0 for now to make things easier. (We do want to keep that field
  around, though, for future more generic usage.)
\<close>
lemma \<alpha>_boffset[simp]: \<open>binary_offset \<alpha> = 0\<close>
  unfolding \<alpha>_def
  by simp

named_theorems blocks and Ps and Qs

method step uses add del =
  subst exec_block.simps,
  rewrite_one_let',
  rewrite_one_let' add: fetch,
  rewrite_one_let',
  auto simp add: simp_rules Let'_def read_region'_def write_block'_def get'_def set'_def step_def exec_instr_def presimplify add numeral_2_eq_2[symmetric] simp del: del

method steps uses pre post regionset add del =
  auto simp: pred_logic pre regionset,
  (step add: add del: del)+,
  (auto simp add: eq_def)[1],
  auto simp: block_usage_def eq_def setcc_def cmovcc_def if'_then_else_def sub_sign_flag_def simp_rules numeral_2_eq_2[symmetric] Let'_def read_region'_def write_block'_def get'_def set'_def post regionset

(* ((simp add: assms pred_logic Ps Qs)+)? helps keep goals clean but causes issues when there are subcalls *)
method vcg_step uses assms =
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

text \<open>For @{const CASES}.\<close>
method vcg_step' uses assms =
  (rule htriples)+,
  simp,
  ((rule htriples)+, rule blocks)+,
  (simp add: assms pred_logic Ps Qs)?,
  (((auto simp: eq_def)[])+)?

text \<open>
  Sometimes needs to be moved down (close to the abstract code) to avoid TERM exceptions,
  haven't figured out the cause.
  Also haven't settled on a proper setup for the ending methods,
  there are troubles when nested loops and such are involved.
\<close>
method vcg_while for P :: state_pred uses assms =
  ((rule htriples)+)?,
  rule HTriple_weaken[where P=P],
  simp add: pred_logic Ps Qs assms,
  rule HTriple_while,
  (vcg_step assms: assms)+,
  (simp add: pred_logic Ps Qs)+,
  (
    (vcg_step' assms: assms | vcg_step assms: assms)+,
    ((simp add: assms)+)?
  )

method vcg uses acode assms =
  subst acode,
  (vcg_step assms: assms)+

end

locale "alloc_cluster_link_l2" = "qemu_img_xen" +
  fixes RAX\<^sub>0\<^sub>v RBX\<^sub>0\<^sub>v RCX\<^sub>0\<^sub>v RDX\<^sub>0\<^sub>v RDI\<^sub>0\<^sub>v RSI\<^sub>0\<^sub>v RSP\<^sub>0\<^sub>v RBP\<^sub>0\<^sub>v R15\<^sub>0\<^sub>v R14\<^sub>0\<^sub>v R13\<^sub>0\<^sub>v R12\<^sub>0\<^sub>v R9\<^sub>0\<^sub>v R8\<^sub>0\<^sub>v FS\<^sub>0\<^sub>v ret_address\<^sub>v :: \<open>64 word\<close>
begin

text \<open>Using definitions that don't get unfolded immediately prevents locale argument issues.\<close>
definition \<open>RAX\<^sub>0 \<equiv> RAX\<^sub>0\<^sub>v\<close>
definition \<open>RBX\<^sub>0 \<equiv> RBX\<^sub>0\<^sub>v\<close>
definition \<open>RCX\<^sub>0 \<equiv> RCX\<^sub>0\<^sub>v\<close>
definition \<open>RDX\<^sub>0 \<equiv> RDX\<^sub>0\<^sub>v\<close>
definition \<open>RDI\<^sub>0 \<equiv> RDI\<^sub>0\<^sub>v\<close>
definition \<open>RSI\<^sub>0 \<equiv> RSI\<^sub>0\<^sub>v\<close>
definition \<open>RSP\<^sub>0 \<equiv> RSP\<^sub>0\<^sub>v\<close>
definition \<open>RBP\<^sub>0 \<equiv> RBP\<^sub>0\<^sub>v\<close>
definition \<open>R15\<^sub>0 \<equiv> R15\<^sub>0\<^sub>v\<close>
definition \<open>R14\<^sub>0 \<equiv> R14\<^sub>0\<^sub>v\<close>
definition \<open>R13\<^sub>0 \<equiv> R13\<^sub>0\<^sub>v\<close>
definition \<open>R12\<^sub>0 \<equiv> R12\<^sub>0\<^sub>v\<close>
definition \<open>R9\<^sub>0 \<equiv> R9\<^sub>0\<^sub>v\<close>
definition \<open>R8\<^sub>0 \<equiv> R8\<^sub>0\<^sub>v\<close>
definition \<open>FS\<^sub>0 \<equiv> FS\<^sub>0\<^sub>v\<close>
definition \<open>ret_address \<equiv> ret_address\<^sub>v\<close>

definition P_0x14f50_0 :: state_pred where
  \<open>P_0x14f50_0 \<sigma> \<equiv> RIP \<sigma> = 0x14f50 \<and> RAX \<sigma> = RAX\<^sub>0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = RSP\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = R15\<^sub>0 \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address\<close>
declare P_0x14f50_0_def[Ps]

definition P_0x14f50_0_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14f50_0_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8)
  }\<close>

definition P_0x14f50_0_regions :: state_pred where
  \<open>P_0x14f50_0_regions \<sigma> \<equiv> \<exists>regions. P_0x14f50_0_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14f75_0 :: state_pred where
  \<open>Q_0x14f75_0 \<sigma> \<equiv> RIP \<sigma> = 0x14f75 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x14f75_0_def[Qs]

schematic_goal alloc_cluster_link_l2_0_12_0x14f50_0x14f72_0[blocks]:
  assumes \<open>(P_0x14f50_0 && P_0x14f50_0_regions) \<sigma>\<close>
  shows \<open>exec_block 12 0x14f72 0 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14f75_0 ?\<sigma> \<and> block_usage P_0x14f50_0_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14f50_0_def P_0x14f50_0_regions_def post: Q_0x14f75_0_def regionset: P_0x14f50_0_regions_set_def)

definition P_0x14f75_true_1 :: state_pred where
  \<open>P_0x14f75_true_1 \<sigma> \<equiv> RIP \<sigma> = 0x14f75 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x14f75_true_1_def[Ps]

definition P_0x14f75_true_1_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14f75_true_1_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8)
  }\<close>

definition P_0x14f75_true_1_regions :: state_pred where
  \<open>P_0x14f75_true_1_regions \<sigma> \<equiv> \<exists>regions. P_0x14f75_true_1_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14fb4_1 :: state_pred where
  \<open>Q_0x14fb4_1 \<sigma> \<equiv> RIP \<sigma> = 0x14fb4 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x14fb4_1_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x14f75_0x14fb1_1[blocks]:
  assumes \<open>(P_0x14f75_true_1 && P_0x14f75_true_1_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 7 0x14fb1 (Suc 0) \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14fb4_1 ?\<sigma> \<and> block_usage P_0x14f75_true_1_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14f75_true_1_def P_0x14f75_true_1_regions_def post: Q_0x14fb4_1_def regionset: P_0x14f75_true_1_regions_set_def)

definition P_0x14fb4_2 :: state_pred where
  \<open>P_0x14fb4_2 \<sigma> \<equiv> RIP \<sigma> = 0x14fb4 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x14fb4_2_def[Ps]

definition P_0x14fb4_2_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fb4_2_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (3, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (4, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fb4_2_regions :: state_pred where
  \<open>P_0x14fb4_2_regions \<sigma> \<equiv> \<exists>regions. P_0x14fb4_2_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_qemu_malloc_addr_0x14fb4_2 :: state_pred where
  \<open>Q_qemu_malloc_addr_0x14fb4_2 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = qemu_malloc_addr \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare Q_qemu_malloc_addr_0x14fb4_2_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x14fb4_0x14fb4_2[blocks]:
  assumes \<open>(P_0x14fb4_2 && P_0x14fb4_2_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x14fb4 2 \<sigma> \<triangleq> ?\<sigma> \<and> Q_qemu_malloc_addr_0x14fb4_2 ?\<sigma> \<and> block_usage P_0x14fb4_2_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fb4_2_def P_0x14fb4_2_regions_def post: Q_qemu_malloc_addr_0x14fb4_2_def regionset: P_0x14fb4_2_regions_set_def)

definition P_0x14fb9_3 :: state_pred where
  \<open>P_0x14fb9_3 \<sigma> \<equiv> RIP \<sigma> = 0x14fb9 \<and> RAX \<sigma> = qemu_malloc_0x14fb4_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x14fb9_3_def[Ps]

definition P_0x14fb9_3_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fb9_3_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fb9_3_regions :: state_pred where
  \<open>P_0x14fb9_3_regions \<sigma> \<equiv> \<exists>regions. P_0x14fb9_3_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14fd8_3 :: state_pred where
  \<open>Q_0x14fd8_3 \<sigma> \<equiv> RIP \<sigma> = 0x14fd8 \<and> RAX \<sigma> = qemu_malloc_0x14fb4_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare Q_0x14fd8_3_def[Qs]

schematic_goal alloc_cluster_link_l2_0_9_0x14fb9_0x14fd5_3[blocks]:
  assumes \<open>(P_0x14fb9_3 && P_0x14fb9_3_regions) \<sigma>\<close>
  shows \<open>exec_block 9 0x14fd5 3 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14fd8_3 ?\<sigma> \<and> block_usage P_0x14fb9_3_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fb9_3_def P_0x14fb9_3_regions_def post: Q_0x14fd8_3_def regionset: P_0x14fb9_3_regions_set_def)

definition P_0x14fd8_true_4 :: state_pred where
  \<open>P_0x14fd8_true_4 \<sigma> \<equiv> RIP \<sigma> = 0x14fd8 \<and> RAX \<sigma> = qemu_malloc_0x14fb4_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x14fd8_true_4_def[Ps]

definition P_0x14fd8_true_4_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fd8_true_4_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fd8_true_4_regions :: state_pred where
  \<open>P_0x14fd8_true_4_regions \<sigma> \<equiv> \<exists>regions. P_0x14fd8_true_4_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15185_4 :: state_pred where
  \<open>Q_0x15185_4 \<sigma> \<equiv> RIP \<sigma> = 0x15185 \<and> RAX \<sigma> = qemu_malloc_0x14fb4_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = 0x0 \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare Q_0x15185_4_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x14fd8_0x15180_4[blocks]:
  assumes \<open>(P_0x14fd8_true_4 && P_0x14fd8_true_4_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x15180 4 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15185_4 ?\<sigma> \<and> block_usage P_0x14fd8_true_4_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fd8_true_4_def P_0x14fd8_true_4_regions_def post: Q_0x15185_4_def regionset: P_0x14fd8_true_4_regions_set_def)

definition P_0x15185_5 :: state_pred where
  \<open>P_0x15185_5 \<sigma> \<equiv> RIP \<sigma> = 0x15185 \<and> RAX \<sigma> = qemu_malloc_0x14fb4_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = 0x0 \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x15185_5_def[Ps]

definition P_0x15185_5_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15185_5_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15185_5_regions :: state_pred where
  \<open>P_0x15185_5_regions \<sigma> \<equiv> \<exists>regions. P_0x15185_5_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_copy_sectors_addr_0x15185_5 :: state_pred where
  \<open>Q_copy_sectors_addr_0x15185_5 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = copy_sectors_addr \<and> RAX \<sigma> = qemu_malloc_0x14fb4_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = 0x0 \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare Q_copy_sectors_addr_0x15185_5_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15185_0x15185_5[blocks]:
  assumes \<open>(P_0x15185_5 && P_0x15185_5_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15185 5 \<sigma> \<triangleq> ?\<sigma> \<and> Q_copy_sectors_addr_0x15185_5 ?\<sigma> \<and> block_usage P_0x15185_5_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15185_5_def P_0x15185_5_regions_def post: Q_copy_sectors_addr_0x15185_5_def regionset: P_0x15185_5_regions_set_def)

definition P_0x1518a_6 :: state_pred where
  \<open>P_0x1518a_6 \<sigma> \<equiv> RIP \<sigma> = 0x1518a \<and> RAX \<sigma> = copy_sectors_0x15185_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = 0x0 \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare P_0x1518a_6_def[Ps]

definition P_0x1518a_6_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1518a_6_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x1518a_6_regions :: state_pred where
  \<open>P_0x1518a_6_regions \<sigma> \<equiv> \<exists>regions. P_0x1518a_6_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15194_6 :: state_pred where
  \<open>Q_0x15194_6 \<sigma> \<equiv> RIP \<sigma> = 0x15194 \<and> RAX \<sigma> = copy_sectors_0x15185_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = 0x0 \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare Q_0x15194_6_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x1518a_0x15191_6[blocks]:
  assumes \<open>(P_0x1518a_6 && P_0x1518a_6_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x15191 6 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15194_6 ?\<sigma> \<and> block_usage P_0x1518a_6_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1518a_6_def P_0x1518a_6_regions_def post: Q_0x15194_6_def regionset: P_0x1518a_6_regions_set_def)

definition P_0x15194_true_7 :: state_pred where
  \<open>P_0x15194_true_7 \<sigma> \<equiv> RIP \<sigma> = 0x15194 \<and> RAX \<sigma> = copy_sectors_0x15185_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = 0x0 \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare P_0x15194_true_7_def[Ps]

definition P_0x15194_true_7_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15194_true_7_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15194_true_7_regions :: state_pred where
  \<open>P_0x15194_true_7_regions \<sigma> \<equiv> \<exists>regions. P_0x15194_true_7_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14fed_7 :: state_pred where
  \<open>Q_0x14fed_7 \<sigma> \<equiv> RIP \<sigma> = 0x14fed \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare Q_0x14fed_7_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x15194_0x14feb_7[blocks]:
  assumes \<open>(P_0x15194_true_7 && P_0x15194_true_7_regions && !SF) \<sigma>\<close>
  shows \<open>exec_block 5 0x14feb 7 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14fed_7 ?\<sigma> \<and> block_usage P_0x15194_true_7_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15194_true_7_def P_0x15194_true_7_regions_def post: Q_0x14fed_7_def regionset: P_0x15194_true_7_regions_set_def)

definition P_0x14fed_true_8 :: state_pred where
  \<open>P_0x14fed_true_8 \<sigma> \<equiv> RIP \<sigma> = 0x14fed \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare P_0x14fed_true_8_def[Ps]

definition P_0x14fed_true_8_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fed_true_8_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fed_true_8_regions :: state_pred where
  \<open>P_0x14fed_true_8_regions \<sigma> \<equiv> \<exists>regions. P_0x14fed_true_8_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15031_8 :: state_pred where
  \<open>Q_0x15031_8 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare Q_0x15031_8_def[Qs]

schematic_goal alloc_cluster_link_l2_0_6_0x14fed_0x1502c_8[blocks]:
  assumes \<open>(P_0x14fed_true_8 && P_0x14fed_true_8_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1502c 8 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15031_8 ?\<sigma> \<and> block_usage P_0x14fed_true_8_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fed_true_8_def P_0x14fed_true_8_regions_def post: Q_0x15031_8_def regionset: P_0x14fed_true_8_regions_set_def)

definition P_0x15031_9 :: state_pred where
  \<open>P_0x15031_9 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare P_0x15031_9_def[Ps]

definition P_0x15031_9_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15031_9_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15031_9_regions :: state_pred where
  \<open>P_0x15031_9_regions \<sigma> \<equiv> \<exists>regions. P_0x15031_9_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_get_cluster_table_addr_0x15031_9 :: state_pred where
  \<open>Q_get_cluster_table_addr_0x15031_9 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = get_cluster_table_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_get_cluster_table_addr_0x15031_9_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15031_0x15031_9[blocks]:
  assumes \<open>(P_0x15031_9 && P_0x15031_9_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15031 9 \<sigma> \<triangleq> ?\<sigma> \<and> Q_get_cluster_table_addr_0x15031_9 ?\<sigma> \<and> block_usage P_0x15031_9_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15031_9_def P_0x15031_9_regions_def post: Q_get_cluster_table_addr_0x15031_9_def regionset: P_0x15031_9_regions_set_def)

definition P_0x15036_10 :: state_pred where
  \<open>P_0x15036_10 \<sigma> \<equiv> RIP \<sigma> = 0x15036 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15036_10_def[Ps]

definition P_0x15036_10_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15036_10_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15036_10_regions :: state_pred where
  \<open>P_0x15036_10_regions \<sigma> \<equiv> \<exists>regions. P_0x15036_10_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15038_10 :: state_pred where
  \<open>Q_0x15038_10 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15038_10_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15036_0x15036_10[blocks]:
  assumes \<open>(P_0x15036_10 && P_0x15036_10_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15036 10 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15038_10 ?\<sigma> \<and> block_usage P_0x15036_10_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15036_10_def P_0x15036_10_regions_def post: Q_0x15038_10_def regionset: P_0x15036_10_regions_set_def)

definition P_0x15038_true_11 :: state_pred where
  \<open>P_0x15038_true_11 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_true_11_def[Ps]

definition P_0x15038_true_11_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_true_11_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_true_11_regions :: state_pred where
  \<open>P_0x15038_true_11_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_true_11_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_11 :: state_pred where
  \<open>Q_0x15166_11 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_11_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15038_0x15160_11[blocks]:
  assumes \<open>(P_0x15038_true_11 && P_0x15038_true_11_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 11 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_11 ?\<sigma> \<and> block_usage P_0x15038_true_11_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_true_11_def P_0x15038_true_11_regions_def post: Q_0x15166_11_def regionset: P_0x15038_true_11_regions_set_def)

definition P_0x15038_false_12 :: state_pred where
  \<open>P_0x15038_false_12 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_false_12_def[Ps]

definition P_0x15038_false_12_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_false_12_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_false_12_regions :: state_pred where
  \<open>P_0x15038_false_12_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_false_12_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15045_12 :: state_pred where
  \<open>Q_0x15045_12 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15045_12_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15038_0x15043_12[blocks]:
  assumes \<open>(P_0x15038_false_12 && P_0x15038_false_12_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x15043 12 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15045_12 ?\<sigma> \<and> block_usage P_0x15038_false_12_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_false_12_def P_0x15038_false_12_regions_def post: Q_0x15045_12_def regionset: P_0x15038_false_12_regions_set_def)

definition P_0x15045_true_13 :: state_pred where
  \<open>P_0x15045_true_13 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_true_13_def[Ps]

definition P_0x15045_true_13_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_true_13_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15045_true_13_regions :: state_pred where
  \<open>P_0x15045_true_13_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_true_13_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15141_13 :: state_pred where
  \<open>Q_0x15141_13 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15141_13_def[Qs]

schematic_goal alloc_cluster_link_l2_0_8_0x15045_0x1513c_13[blocks]:
  assumes \<open>(P_0x15045_true_13 && P_0x15045_true_13_regions && jle) \<sigma>\<close>
  shows \<open>exec_block 8 0x1513c 13 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15141_13 ?\<sigma> \<and> block_usage P_0x15045_true_13_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_true_13_def P_0x15045_true_13_regions_def post: Q_0x15141_13_def regionset: P_0x15045_true_13_regions_set_def)

definition P_0x15141_14 :: state_pred where
  \<open>P_0x15141_14 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15141_14_def[Ps]

definition P_0x15141_14_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15141_14_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15141_14_regions :: state_pred where
  \<open>P_0x15141_14_regions \<sigma> \<equiv> \<exists>regions. P_0x15141_14_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x15141_14 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x15141_14 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x15141_14_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15141_0x15141_14[blocks]:
  assumes \<open>(P_0x15141_14 && P_0x15141_14_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15141 14 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x15141_14 ?\<sigma> \<and> block_usage P_0x15141_14_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15141_14_def P_0x15141_14_regions_def post: Q_bdrv_pwrite_addr_0x15141_14_def regionset: P_0x15141_14_regions_set_def)

definition P_0x15146_15 :: state_pred where
  \<open>P_0x15146_15 \<sigma> \<equiv> RIP \<sigma> = 0x15146 \<and> RAX \<sigma> = bdrv_pwrite_0x15141_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15146_15_def[Ps]

definition P_0x15146_15_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15146_15_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15146_15_regions :: state_pred where
  \<open>P_0x15146_15_regions \<sigma> \<equiv> \<exists>regions. P_0x15146_15_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15154_15 :: state_pred where
  \<open>Q_0x15154_15 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15154_15_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15146_0x15151_15[blocks]:
  assumes \<open>(P_0x15146_15 && P_0x15146_15_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x15151 15 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15154_15 ?\<sigma> \<and> block_usage P_0x15146_15_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15146_15_def P_0x15146_15_regions_def post: Q_0x15154_15_def regionset: P_0x15146_15_regions_set_def)

definition P_0x15154_true_16 :: state_pred where
  \<open>P_0x15154_true_16 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_true_16_def[Ps]

definition P_0x15154_true_16_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_true_16_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_true_16_regions :: state_pred where
  \<open>P_0x15154_true_16_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_true_16_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_16 :: state_pred where
  \<open>Q_0x15166_16 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_16_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15154_0x1511d_16[blocks]:
  assumes \<open>(P_0x15154_true_16 && P_0x15154_true_16_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1511d 16 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_16 ?\<sigma> \<and> block_usage P_0x15154_true_16_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_true_16_def P_0x15154_true_16_regions_def post: Q_0x15166_16_def regionset: P_0x15154_true_16_regions_set_def)

definition P_0x15154_false_17 :: state_pred where
  \<open>P_0x15154_false_17 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_false_17_def[Ps]

definition P_0x15154_false_17_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_false_17_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_false_17_regions :: state_pred where
  \<open>P_0x15154_false_17_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_false_17_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15160_17 :: state_pred where
  \<open>Q_0x15160_17 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15160_17_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15154_0x15156_17[blocks]:
  assumes \<open>(P_0x15154_false_17 && P_0x15154_false_17_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15156 17 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15160_17 ?\<sigma> \<and> block_usage P_0x15154_false_17_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_false_17_def P_0x15154_false_17_regions_def post: Q_0x15160_17_def regionset: P_0x15154_false_17_regions_set_def)

definition P_0x15160_18 :: state_pred where
  \<open>P_0x15160_18 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15160_18_def[Ps]

definition P_0x15160_18_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15160_18_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15160_18_regions :: state_pred where
  \<open>P_0x15160_18_regions \<sigma> \<equiv> \<exists>regions. P_0x15160_18_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_18 :: state_pred where
  \<open>Q_0x15166_18 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_18_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15160_0x15160_18[blocks]:
  assumes \<open>(P_0x15160_18 && P_0x15160_18_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15160 18 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_18 ?\<sigma> \<and> block_usage P_0x15160_18_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15160_18_def P_0x15160_18_regions_def post: Q_0x15166_18_def regionset: P_0x15160_18_regions_set_def)

definition P_0x15045_false_19 :: state_pred where
  \<open>P_0x15045_false_19 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_false_19_def[Ps]

definition P_0x15045_false_19_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_false_19_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15045_false_19_regions :: state_pred where
  \<open>P_0x15045_false_19_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_false_19_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_19 :: state_pred where
  \<open>Q_0x15060_19 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_19_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x15045_0x1505a_19[blocks]:
  assumes \<open>(P_0x15045_false_19 && P_0x15045_false_19_regions && ! jle) \<sigma>\<close>
  shows \<open>exec_block 5 0x1505a 19 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_19 ?\<sigma> \<and> block_usage P_0x15045_false_19_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_false_19_def P_0x15045_false_19_regions_def post: Q_0x15060_19_def regionset: P_0x15045_false_19_regions_set_def)

definition P_0x15060_20 :: state_pred where
  \<open>P_0x15060_20 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15060_20_def[Ps]

definition P_0x15060_20_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15060_20_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15060_20_regions :: state_pred where
  \<open>P_0x15060_20_regions \<sigma> \<equiv> \<exists>regions. P_0x15060_20_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15077_20 :: state_pred where
  \<open>Q_0x15077_20 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15077_20_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x15060_0x15074_20[blocks]:
  assumes \<open>(P_0x15060_20 && P_0x15060_20_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x15074 20 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15077_20 ?\<sigma> \<and> block_usage P_0x15060_20_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15060_20_def P_0x15060_20_regions_def post: Q_0x15077_20_def regionset: P_0x15060_20_regions_set_def)

definition P_0x15077_true_21 :: state_pred where
  \<open>P_0x15077_true_21 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_true_21_def[Ps]

definition P_0x15077_true_21_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_true_21_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_true_21_regions :: state_pred where
  \<open>P_0x15077_true_21_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_true_21_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_21 :: state_pred where
  \<open>Q_0x15096_21 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_21_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15077_0x15077_21[blocks]:
  assumes \<open>(P_0x15077_true_21 && P_0x15077_true_21_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15077 21 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_21 ?\<sigma> \<and> block_usage P_0x15077_true_21_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_true_21_def P_0x15077_true_21_regions_def post: Q_0x15096_21_def regionset: P_0x15077_true_21_regions_set_def)

definition P_0x15077_false_22 :: state_pred where
  \<open>P_0x15077_false_22 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_false_22_def[Ps]

definition P_0x15077_false_22_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_false_22_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, ((qemu_malloc_0x14fb4_retval::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_false_22_regions :: state_pred where
  \<open>P_0x15077_false_22_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_false_22_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_22 :: state_pred where
  \<open>Q_0x15096_22 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_22_def[Qs]

schematic_goal alloc_cluster_link_l2_0_9_0x15077_0x15092_22[blocks]:
  assumes \<open>(P_0x15077_false_22 && P_0x15077_false_22_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 9 0x15092 22 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_22 ?\<sigma> \<and> block_usage P_0x15077_false_22_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_false_22_def P_0x15077_false_22_regions_def post: Q_0x15096_22_def regionset: P_0x15077_false_22_regions_set_def)

definition P_0x15096_23 :: state_pred where
  \<open>P_0x15096_23 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15096_23_def[Ps]

definition P_0x15096_23_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15096_23_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x8), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15096_23_regions :: state_pred where
  \<open>P_0x15096_23_regions \<sigma> \<equiv> \<exists>regions. P_0x15096_23_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b6_23 :: state_pred where
  \<open>Q_0x150b6_23 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b6_23_def[Qs]

schematic_goal alloc_cluster_link_l2_0_11_0x15096_0x150b4_23[blocks]:
  assumes \<open>(P_0x15096_23 && P_0x15096_23_regions) \<sigma>\<close>
  shows \<open>exec_block 11 0x150b4 23 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b6_23 ?\<sigma> \<and> block_usage P_0x15096_23_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15096_23_def P_0x15096_23_regions_def post: Q_0x150b6_23_def regionset: P_0x15096_23_regions_set_def)

definition P_0x150b6_true_24 :: state_pred where
  \<open>P_0x150b6_true_24 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_true_24_def[Ps]

definition P_0x150b6_true_24_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_true_24_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_true_24_regions :: state_pred where
  \<open>P_0x150b6_true_24_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_true_24_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_24 :: state_pred where
  \<open>Q_0x15060_24 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_24_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_24[blocks]:
  assumes \<open>(P_0x150b6_true_24 && P_0x150b6_true_24_regions && jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 24 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_24 ?\<sigma> \<and> block_usage P_0x150b6_true_24_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_true_24_def P_0x150b6_true_24_regions_def post: Q_0x15060_24_def regionset: P_0x150b6_true_24_regions_set_def)

definition P_0x150b6_false_25 :: state_pred where
  \<open>P_0x150b6_false_25 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_false_25_def[Ps]

definition P_0x150b6_false_25_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_false_25_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_false_25_regions :: state_pred where
  \<open>P_0x150b6_false_25_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_false_25_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b8_25 :: state_pred where
  \<open>Q_0x150b8_25 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b8_25_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_25[blocks]:
  assumes \<open>(P_0x150b6_false_25 && P_0x150b6_false_25_regions && ! jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 25 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b8_25 ?\<sigma> \<and> block_usage P_0x150b6_false_25_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_false_25_def P_0x150b6_false_25_regions_def post: Q_0x150b8_25_def regionset: P_0x150b6_false_25_regions_set_def)

definition P_0x150b8_26 :: state_pred where
  \<open>P_0x150b8_26 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b8_26_def[Ps]

definition P_0x150b8_26_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b8_26_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150b8_26_regions :: state_pred where
  \<open>P_0x150b8_26_regions \<sigma> \<equiv> \<exists>regions. P_0x150b8_26_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150d5_26 :: state_pred where
  \<open>Q_0x150d5_26 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150d5_26_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x150b8_0x150d0_26[blocks]:
  assumes \<open>(P_0x150b8_26 && P_0x150b8_26_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x150d0 26 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150d5_26 ?\<sigma> \<and> block_usage P_0x150b8_26_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b8_26_def P_0x150b8_26_regions_def post: Q_0x150d5_26_def regionset: P_0x150b8_26_regions_set_def)

definition P_0x150d5_27 :: state_pred where
  \<open>P_0x150d5_27 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150d5_27_def[Ps]

definition P_0x150d5_27_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150d5_27_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150d5_27_regions :: state_pred where
  \<open>P_0x150d5_27_regions \<sigma> \<equiv> \<exists>regions. P_0x150d5_27_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x150d5_27 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x150d5_27 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x150d5_27_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150d5_0x150d5_27[blocks]:
  assumes \<open>(P_0x150d5_27 && P_0x150d5_27_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150d5 27 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x150d5_27 ?\<sigma> \<and> block_usage P_0x150d5_27_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150d5_27_def P_0x150d5_27_regions_def post: Q_bdrv_pwrite_addr_0x150d5_27_def regionset: P_0x150d5_27_regions_set_def)

definition P_0x150da_28 :: state_pred where
  \<open>P_0x150da_28 \<sigma> \<equiv> RIP \<sigma> = 0x150da \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150da_28_def[Ps]

definition P_0x150da_28_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150da_28_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150da_28_regions :: state_pred where
  \<open>P_0x150da_28_regions \<sigma> \<equiv> \<exists>regions. P_0x150da_28_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150e8_28 :: state_pred where
  \<open>Q_0x150e8_28 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150e8_28_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x150da_0x150e5_28[blocks]:
  assumes \<open>(P_0x150da_28 && P_0x150da_28_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x150e5 28 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150e8_28 ?\<sigma> \<and> block_usage P_0x150da_28_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150da_28_def P_0x150da_28_regions_def post: Q_0x150e8_28_def regionset: P_0x150da_28_regions_set_def)

definition P_0x150e8_true_29 :: state_pred where
  \<open>P_0x150e8_true_29 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_true_29_def[Ps]

definition P_0x150e8_true_29_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_true_29_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_true_29_regions :: state_pred where
  \<open>P_0x150e8_true_29_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_true_29_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_29 :: state_pred where
  \<open>Q_0x15166_29 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_29_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x15160_29[blocks]:
  assumes \<open>(P_0x150e8_true_29 && P_0x150e8_true_29_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 29 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_29 ?\<sigma> \<and> block_usage P_0x150e8_true_29_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_true_29_def P_0x150e8_true_29_regions_def post: Q_0x15166_29_def regionset: P_0x150e8_true_29_regions_set_def)

definition P_0x150e8_false_30 :: state_pred where
  \<open>P_0x150e8_false_30 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_false_30_def[Ps]

definition P_0x150e8_false_30_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_false_30_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_false_30_regions :: state_pred where
  \<open>P_0x150e8_false_30_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_false_30_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150ed_30 :: state_pred where
  \<open>Q_0x150ed_30 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150ed_30_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x150ea_30[blocks]:
  assumes \<open>(P_0x150e8_false_30 && P_0x150e8_false_30_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x150ea 30 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150ed_30 ?\<sigma> \<and> block_usage P_0x150e8_false_30_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_false_30_def P_0x150e8_false_30_regions_def post: Q_0x150ed_30_def regionset: P_0x150e8_false_30_regions_set_def)

definition P_0x150ed_true_31 :: state_pred where
  \<open>P_0x150ed_true_31 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_true_31_def[Ps]

definition P_0x150ed_true_31_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_true_31_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_true_31_regions :: state_pred where
  \<open>P_0x150ed_true_31_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_true_31_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_31 :: state_pred where
  \<open>Q_0x1511a_31 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_31_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150ed_0x150ed_31[blocks]:
  assumes \<open>(P_0x150ed_true_31 && P_0x150ed_true_31_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150ed 31 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_31 ?\<sigma> \<and> block_usage P_0x150ed_true_31_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_true_31_def P_0x150ed_true_31_regions_def post: Q_0x1511a_31_def regionset: P_0x150ed_true_31_regions_set_def)

definition P_0x150ed_false_32 :: state_pred where
  \<open>P_0x150ed_false_32 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_false_32_def[Ps]

definition P_0x150ed_false_32_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_false_32_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_false_32_regions :: state_pred where
  \<open>P_0x150ed_false_32_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_false_32_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_32 :: state_pred where
  \<open>Q_0x15100_32 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_32_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x150ed_0x150fb_32[blocks]:
  assumes \<open>(P_0x150ed_false_32 && P_0x150ed_false_32_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x150fb 32 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_32 ?\<sigma> \<and> block_usage P_0x150ed_false_32_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_false_32_def P_0x150ed_false_32_regions_def post: Q_0x15100_32_def regionset: P_0x150ed_false_32_regions_set_def)

definition P_0x15100_33 :: state_pred where
  \<open>P_0x15100_33 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15100_33_def[Ps]

definition P_0x15100_33_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15100_33_regions_set \<sigma> \<equiv> {
    (0, R12 \<sigma>, 8),
    (1, RDX\<^sub>0, 8),
    (2, RSP\<^sub>0, 8),
    (3, ((FS\<^sub>0::64 word) + 0x28), 8),
    (4, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (5, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (6, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (7, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15100_33_regions :: state_pred where
  \<open>P_0x15100_33_regions \<sigma> \<equiv> \<exists>regions. P_0x15100_33_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15110_33 :: state_pred where
  \<open>Q_0x15110_33 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15110_33_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15100_0x1510c_33[blocks]:
  assumes \<open>(P_0x15100_33 && P_0x15100_33_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1510c 33 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15110_33 ?\<sigma> \<and> block_usage P_0x15100_33_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15100_33_def P_0x15100_33_regions_def post: Q_0x15110_33_def regionset: P_0x15100_33_regions_set_def)

definition P_0x15110_34 :: state_pred where
  \<open>P_0x15110_34 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15110_34_def[Ps]

definition P_0x15110_34_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15110_34_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15110_34_regions :: state_pred where
  \<open>P_0x15110_34_regions \<sigma> \<equiv> \<exists>regions. P_0x15110_34_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_free_any_clusters_addr_0x15110_34 :: state_pred where
  \<open>Q_free_any_clusters_addr_0x15110_34 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = free_any_clusters_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_free_any_clusters_addr_0x15110_34_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15110_0x15110_34[blocks]:
  assumes \<open>(P_0x15110_34 && P_0x15110_34_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15110 34 \<sigma> \<triangleq> ?\<sigma> \<and> Q_free_any_clusters_addr_0x15110_34 ?\<sigma> \<and> block_usage P_0x15110_34_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15110_34_def P_0x15110_34_regions_def post: Q_free_any_clusters_addr_0x15110_34_def regionset: P_0x15110_34_regions_set_def)

definition P_0x15115_35 :: state_pred where
  \<open>P_0x15115_35 \<sigma> \<equiv> RIP \<sigma> = 0x15115 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15115_35_def[Ps]

definition P_0x15115_35_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15115_35_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15115_35_regions :: state_pred where
  \<open>P_0x15115_35_regions \<sigma> \<equiv> \<exists>regions. P_0x15115_35_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15118_35 :: state_pred where
  \<open>Q_0x15118_35 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15118_35_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15115_0x15115_35[blocks]:
  assumes \<open>(P_0x15115_35 && P_0x15115_35_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15115 35 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15118_35 ?\<sigma> \<and> block_usage P_0x15115_35_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15115_35_def P_0x15115_35_regions_def post: Q_0x15118_35_def regionset: P_0x15115_35_regions_set_def)

definition P_0x15118_true_36 :: state_pred where
  \<open>P_0x15118_true_36 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_true_36_def[Ps]

definition P_0x15118_true_36_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_true_36_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_true_36_regions :: state_pred where
  \<open>P_0x15118_true_36_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_true_36_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_36 :: state_pred where
  \<open>Q_0x15100_36 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_36_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_36[blocks]:
  assumes \<open>(P_0x15118_true_36 && P_0x15118_true_36_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 36 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_36 ?\<sigma> \<and> block_usage P_0x15118_true_36_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_true_36_def P_0x15118_true_36_regions_def post: Q_0x15100_36_def regionset: P_0x15118_true_36_regions_set_def)

definition P_0x15118_false_37 :: state_pred where
  \<open>P_0x15118_false_37 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_false_37_def[Ps]

definition P_0x15118_false_37_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_false_37_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_false_37_regions :: state_pred where
  \<open>P_0x15118_false_37_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_false_37_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_37 :: state_pred where
  \<open>Q_0x1511a_37 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_37_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_37[blocks]:
  assumes \<open>(P_0x15118_false_37 && P_0x15118_false_37_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 37 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_37 ?\<sigma> \<and> block_usage P_0x15118_false_37_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_false_37_def P_0x15118_false_37_regions_def post: Q_0x1511a_37_def regionset: P_0x15118_false_37_regions_set_def)

definition P_0x1511a_38 :: state_pred where
  \<open>P_0x1511a_38 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x1511a_38_def[Ps]

definition P_0x1511a_38_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1511a_38_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x1511a_38_regions :: state_pred where
  \<open>P_0x1511a_38_regions \<sigma> \<equiv> \<exists>regions. P_0x1511a_38_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_38 :: state_pred where
  \<open>Q_0x15166_38 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_38_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x1511a_0x1511d_38[blocks]:
  assumes \<open>(P_0x1511a_38 && P_0x1511a_38_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1511d 38 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_38 ?\<sigma> \<and> block_usage P_0x1511a_38_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1511a_38_def P_0x1511a_38_regions_def post: Q_0x15166_38_def regionset: P_0x1511a_38_regions_set_def)

definition P_0x14fed_false_39 :: state_pred where
  \<open>P_0x14fed_false_39 \<sigma> \<equiv> RIP \<sigma> = 0x14fed \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare P_0x14fed_false_39_def[Ps]

definition P_0x14fed_false_39_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fed_false_39_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fed_false_39_regions :: state_pred where
  \<open>P_0x14fed_false_39_regions \<sigma> \<equiv> \<exists>regions. P_0x14fed_false_39_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1500b_39 :: state_pred where
  \<open>Q_0x1500b_39 \<sigma> \<equiv> RIP \<sigma> = 0x1500b \<and> RAX \<sigma> = ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word))) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare Q_0x1500b_39_def[Qs]

schematic_goal alloc_cluster_link_l2_0_11_0x14fed_0x15008_39[blocks]:
  assumes \<open>(P_0x14fed_false_39 && P_0x14fed_false_39_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 11 0x15008 39 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1500b_39 ?\<sigma> \<and> block_usage P_0x14fed_false_39_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fed_false_39_def P_0x14fed_false_39_regions_def post: Q_0x1500b_39_def regionset: P_0x14fed_false_39_regions_set_def)

definition P_0x1500b_40 :: state_pred where
  \<open>P_0x1500b_40 \<sigma> \<equiv> RIP \<sigma> = 0x1500b \<and> RAX \<sigma> = ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word))) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare P_0x1500b_40_def[Ps]

definition P_0x1500b_40_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1500b_40_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x1500b_40_regions :: state_pred where
  \<open>P_0x1500b_40_regions \<sigma> \<equiv> \<exists>regions. P_0x1500b_40_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_copy_sectors_addr_0x1500b_40 :: state_pred where
  \<open>Q_copy_sectors_addr_0x1500b_40 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = copy_sectors_addr \<and> RAX \<sigma> = ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word))) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare Q_copy_sectors_addr_0x1500b_40_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x1500b_0x1500b_40[blocks]:
  assumes \<open>(P_0x1500b_40 && P_0x1500b_40_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1500b 40 \<sigma> \<triangleq> ?\<sigma> \<and> Q_copy_sectors_addr_0x1500b_40 ?\<sigma> \<and> block_usage P_0x1500b_40_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1500b_40_def P_0x1500b_40_regions_def post: Q_copy_sectors_addr_0x1500b_40_def regionset: P_0x1500b_40_regions_set_def)

definition P_0x15010_41 :: state_pred where
  \<open>P_0x15010_41 \<sigma> \<equiv> RIP \<sigma> = 0x15010 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15010_41_def[Ps]

definition P_0x15010_41_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15010_41_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15010_41_regions :: state_pred where
  \<open>P_0x15010_41_regions \<sigma> \<equiv> \<exists>regions. P_0x15010_41_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15015_41 :: state_pred where
  \<open>Q_0x15015_41 \<sigma> \<equiv> RIP \<sigma> = 0x15015 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare Q_0x15015_41_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15010_0x15013_41[blocks]:
  assumes \<open>(P_0x15010_41 && P_0x15010_41_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x15013 41 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15015_41 ?\<sigma> \<and> block_usage P_0x15010_41_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15010_41_def P_0x15010_41_regions_def post: Q_0x15015_41_def regionset: P_0x15010_41_regions_set_def)

definition P_0x15015_true_42 :: state_pred where
  \<open>P_0x15015_true_42 \<sigma> \<equiv> RIP \<sigma> = 0x15015 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15015_true_42_def[Ps]

definition P_0x15015_true_42_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15015_true_42_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15015_true_42_regions :: state_pred where
  \<open>P_0x15015_true_42_regions \<sigma> \<equiv> \<exists>regions. P_0x15015_true_42_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_42 :: state_pred where
  \<open>Q_0x15166_42 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_42_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15015_0x15015_42[blocks]:
  assumes \<open>(P_0x15015_true_42 && P_0x15015_true_42_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15015 42 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_42 ?\<sigma> \<and> block_usage P_0x15015_true_42_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15015_true_42_def P_0x15015_true_42_regions_def post: Q_0x15166_42_def regionset: P_0x15015_true_42_regions_set_def)

definition P_0x15015_false_43 :: state_pred where
  \<open>P_0x15015_false_43 \<sigma> \<equiv> RIP \<sigma> = 0x15015 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15015_false_43_def[Ps]

definition P_0x15015_false_43_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15015_false_43_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15015_false_43_regions :: state_pred where
  \<open>P_0x15015_false_43_regions \<sigma> \<equiv> \<exists>regions. P_0x15015_false_43_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15031_43 :: state_pred where
  \<open>Q_0x15031_43 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare Q_0x15031_43_def[Qs]

schematic_goal alloc_cluster_link_l2_0_6_0x15015_0x1502c_43[blocks]:
  assumes \<open>(P_0x15015_false_43 && P_0x15015_false_43_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1502c 43 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15031_43 ?\<sigma> \<and> block_usage P_0x15015_false_43_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15015_false_43_def P_0x15015_false_43_regions_def post: Q_0x15031_43_def regionset: P_0x15015_false_43_regions_set_def)

definition P_0x15031_44 :: state_pred where
  \<open>P_0x15031_44 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15031_44_def[Ps]

definition P_0x15031_44_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15031_44_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15031_44_regions :: state_pred where
  \<open>P_0x15031_44_regions \<sigma> \<equiv> \<exists>regions. P_0x15031_44_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_get_cluster_table_addr_0x15031_44 :: state_pred where
  \<open>Q_get_cluster_table_addr_0x15031_44 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = get_cluster_table_addr \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_get_cluster_table_addr_0x15031_44_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15031_0x15031_44[blocks]:
  assumes \<open>(P_0x15031_44 && P_0x15031_44_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15031 44 \<sigma> \<triangleq> ?\<sigma> \<and> Q_get_cluster_table_addr_0x15031_44 ?\<sigma> \<and> block_usage P_0x15031_44_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15031_44_def P_0x15031_44_regions_def post: Q_get_cluster_table_addr_0x15031_44_def regionset: P_0x15031_44_regions_set_def)

definition P_0x15036_45 :: state_pred where
  \<open>P_0x15036_45 \<sigma> \<equiv> RIP \<sigma> = 0x15036 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15036_45_def[Ps]

definition P_0x15036_45_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15036_45_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15036_45_regions :: state_pred where
  \<open>P_0x15036_45_regions \<sigma> \<equiv> \<exists>regions. P_0x15036_45_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15038_45 :: state_pred where
  \<open>Q_0x15038_45 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15038_45_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15036_0x15036_45[blocks]:
  assumes \<open>(P_0x15036_45 && P_0x15036_45_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15036 45 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15038_45 ?\<sigma> \<and> block_usage P_0x15036_45_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15036_45_def P_0x15036_45_regions_def post: Q_0x15038_45_def regionset: P_0x15036_45_regions_set_def)

definition P_0x15038_true_46 :: state_pred where
  \<open>P_0x15038_true_46 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_true_46_def[Ps]

definition P_0x15038_true_46_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_true_46_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_true_46_regions :: state_pred where
  \<open>P_0x15038_true_46_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_true_46_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_46 :: state_pred where
  \<open>Q_0x15166_46 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_46_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15038_0x15160_46[blocks]:
  assumes \<open>(P_0x15038_true_46 && P_0x15038_true_46_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 46 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_46 ?\<sigma> \<and> block_usage P_0x15038_true_46_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_true_46_def P_0x15038_true_46_regions_def post: Q_0x15166_46_def regionset: P_0x15038_true_46_regions_set_def)

definition P_0x15038_false_47 :: state_pred where
  \<open>P_0x15038_false_47 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_false_47_def[Ps]

definition P_0x15038_false_47_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_false_47_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_false_47_regions :: state_pred where
  \<open>P_0x15038_false_47_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_false_47_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15045_47 :: state_pred where
  \<open>Q_0x15045_47 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15045_47_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15038_0x15043_47[blocks]:
  assumes \<open>(P_0x15038_false_47 && P_0x15038_false_47_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x15043 47 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15045_47 ?\<sigma> \<and> block_usage P_0x15038_false_47_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_false_47_def P_0x15038_false_47_regions_def post: Q_0x15045_47_def regionset: P_0x15038_false_47_regions_set_def)

definition P_0x15045_true_48 :: state_pred where
  \<open>P_0x15045_true_48 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_true_48_def[Ps]

definition P_0x15045_true_48_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_true_48_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15045_true_48_regions :: state_pred where
  \<open>P_0x15045_true_48_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_true_48_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15141_48 :: state_pred where
  \<open>Q_0x15141_48 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15141_48_def[Qs]

schematic_goal alloc_cluster_link_l2_0_8_0x15045_0x1513c_48[blocks]:
  assumes \<open>(P_0x15045_true_48 && P_0x15045_true_48_regions && jle) \<sigma>\<close>
  shows \<open>exec_block 8 0x1513c 48 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15141_48 ?\<sigma> \<and> block_usage P_0x15045_true_48_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_true_48_def P_0x15045_true_48_regions_def post: Q_0x15141_48_def regionset: P_0x15045_true_48_regions_set_def)

definition P_0x15141_49 :: state_pred where
  \<open>P_0x15141_49 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15141_49_def[Ps]

definition P_0x15141_49_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15141_49_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15141_49_regions :: state_pred where
  \<open>P_0x15141_49_regions \<sigma> \<equiv> \<exists>regions. P_0x15141_49_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x15141_49 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x15141_49 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x15141_49_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15141_0x15141_49[blocks]:
  assumes \<open>(P_0x15141_49 && P_0x15141_49_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15141 49 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x15141_49 ?\<sigma> \<and> block_usage P_0x15141_49_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15141_49_def P_0x15141_49_regions_def post: Q_bdrv_pwrite_addr_0x15141_49_def regionset: P_0x15141_49_regions_set_def)

definition P_0x15146_50 :: state_pred where
  \<open>P_0x15146_50 \<sigma> \<equiv> RIP \<sigma> = 0x15146 \<and> RAX \<sigma> = bdrv_pwrite_0x15141_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15146_50_def[Ps]

definition P_0x15146_50_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15146_50_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15146_50_regions :: state_pred where
  \<open>P_0x15146_50_regions \<sigma> \<equiv> \<exists>regions. P_0x15146_50_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15154_50 :: state_pred where
  \<open>Q_0x15154_50 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15154_50_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15146_0x15151_50[blocks]:
  assumes \<open>(P_0x15146_50 && P_0x15146_50_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x15151 50 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15154_50 ?\<sigma> \<and> block_usage P_0x15146_50_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15146_50_def P_0x15146_50_regions_def post: Q_0x15154_50_def regionset: P_0x15146_50_regions_set_def)

definition P_0x15154_true_51 :: state_pred where
  \<open>P_0x15154_true_51 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_true_51_def[Ps]

definition P_0x15154_true_51_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_true_51_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_true_51_regions :: state_pred where
  \<open>P_0x15154_true_51_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_true_51_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_51 :: state_pred where
  \<open>Q_0x15166_51 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_51_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15154_0x1511d_51[blocks]:
  assumes \<open>(P_0x15154_true_51 && P_0x15154_true_51_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1511d 51 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_51 ?\<sigma> \<and> block_usage P_0x15154_true_51_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_true_51_def P_0x15154_true_51_regions_def post: Q_0x15166_51_def regionset: P_0x15154_true_51_regions_set_def)

definition P_0x15154_false_52 :: state_pred where
  \<open>P_0x15154_false_52 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_false_52_def[Ps]

definition P_0x15154_false_52_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_false_52_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_false_52_regions :: state_pred where
  \<open>P_0x15154_false_52_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_false_52_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15160_52 :: state_pred where
  \<open>Q_0x15160_52 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15160_52_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15154_0x15156_52[blocks]:
  assumes \<open>(P_0x15154_false_52 && P_0x15154_false_52_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15156 52 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15160_52 ?\<sigma> \<and> block_usage P_0x15154_false_52_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_false_52_def P_0x15154_false_52_regions_def post: Q_0x15160_52_def regionset: P_0x15154_false_52_regions_set_def)

definition P_0x15160_53 :: state_pred where
  \<open>P_0x15160_53 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15160_53_def[Ps]

definition P_0x15160_53_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15160_53_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15160_53_regions :: state_pred where
  \<open>P_0x15160_53_regions \<sigma> \<equiv> \<exists>regions. P_0x15160_53_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_53 :: state_pred where
  \<open>Q_0x15166_53 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_53_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15160_0x15160_53[blocks]:
  assumes \<open>(P_0x15160_53 && P_0x15160_53_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15160 53 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_53 ?\<sigma> \<and> block_usage P_0x15160_53_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15160_53_def P_0x15160_53_regions_def post: Q_0x15166_53_def regionset: P_0x15160_53_regions_set_def)

definition P_0x15045_false_54 :: state_pred where
  \<open>P_0x15045_false_54 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_false_54_def[Ps]

definition P_0x15045_false_54_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_false_54_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15045_false_54_regions :: state_pred where
  \<open>P_0x15045_false_54_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_false_54_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_54 :: state_pred where
  \<open>Q_0x15060_54 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_54_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x15045_0x1505a_54[blocks]:
  assumes \<open>(P_0x15045_false_54 && P_0x15045_false_54_regions && ! jle) \<sigma>\<close>
  shows \<open>exec_block 5 0x1505a 54 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_54 ?\<sigma> \<and> block_usage P_0x15045_false_54_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_false_54_def P_0x15045_false_54_regions_def post: Q_0x15060_54_def regionset: P_0x15045_false_54_regions_set_def)

definition P_0x15060_55 :: state_pred where
  \<open>P_0x15060_55 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15060_55_def[Ps]

definition P_0x15060_55_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15060_55_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15060_55_regions :: state_pred where
  \<open>P_0x15060_55_regions \<sigma> \<equiv> \<exists>regions. P_0x15060_55_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15077_55 :: state_pred where
  \<open>Q_0x15077_55 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15077_55_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x15060_0x15074_55[blocks]:
  assumes \<open>(P_0x15060_55 && P_0x15060_55_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x15074 55 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15077_55 ?\<sigma> \<and> block_usage P_0x15060_55_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15060_55_def P_0x15060_55_regions_def post: Q_0x15077_55_def regionset: P_0x15060_55_regions_set_def)

definition P_0x15077_true_56 :: state_pred where
  \<open>P_0x15077_true_56 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_true_56_def[Ps]

definition P_0x15077_true_56_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_true_56_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_true_56_regions :: state_pred where
  \<open>P_0x15077_true_56_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_true_56_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_56 :: state_pred where
  \<open>Q_0x15096_56 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_56_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15077_0x15077_56[blocks]:
  assumes \<open>(P_0x15077_true_56 && P_0x15077_true_56_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15077 56 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_56 ?\<sigma> \<and> block_usage P_0x15077_true_56_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_true_56_def P_0x15077_true_56_regions_def post: Q_0x15096_56_def regionset: P_0x15077_true_56_regions_set_def)

definition P_0x15077_false_57 :: state_pred where
  \<open>P_0x15077_false_57 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_false_57_def[Ps]

definition P_0x15077_false_57_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_false_57_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, ((qemu_malloc_0x14fb4_retval::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_false_57_regions :: state_pred where
  \<open>P_0x15077_false_57_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_false_57_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_57 :: state_pred where
  \<open>Q_0x15096_57 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_57_def[Qs]

schematic_goal alloc_cluster_link_l2_0_9_0x15077_0x15092_57[blocks]:
  assumes \<open>(P_0x15077_false_57 && P_0x15077_false_57_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 9 0x15092 57 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_57 ?\<sigma> \<and> block_usage P_0x15077_false_57_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_false_57_def P_0x15077_false_57_regions_def post: Q_0x15096_57_def regionset: P_0x15077_false_57_regions_set_def)

definition P_0x15096_58 :: state_pred where
  \<open>P_0x15096_58 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15096_58_def[Ps]

definition P_0x15096_58_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15096_58_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x8), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (21, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15096_58_regions :: state_pred where
  \<open>P_0x15096_58_regions \<sigma> \<equiv> \<exists>regions. P_0x15096_58_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b6_58 :: state_pred where
  \<open>Q_0x150b6_58 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b6_58_def[Qs]

schematic_goal alloc_cluster_link_l2_0_11_0x15096_0x150b4_58[blocks]:
  assumes \<open>(P_0x15096_58 && P_0x15096_58_regions) \<sigma>\<close>
  shows \<open>exec_block 11 0x150b4 58 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b6_58 ?\<sigma> \<and> block_usage P_0x15096_58_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15096_58_def P_0x15096_58_regions_def post: Q_0x150b6_58_def regionset: P_0x15096_58_regions_set_def)

definition P_0x150b6_true_59 :: state_pred where
  \<open>P_0x150b6_true_59 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_true_59_def[Ps]

definition P_0x150b6_true_59_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_true_59_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_true_59_regions :: state_pred where
  \<open>P_0x150b6_true_59_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_true_59_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_59 :: state_pred where
  \<open>Q_0x15060_59 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_59_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_59[blocks]:
  assumes \<open>(P_0x150b6_true_59 && P_0x150b6_true_59_regions && jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 59 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_59 ?\<sigma> \<and> block_usage P_0x150b6_true_59_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_true_59_def P_0x150b6_true_59_regions_def post: Q_0x15060_59_def regionset: P_0x150b6_true_59_regions_set_def)

definition P_0x150b6_false_60 :: state_pred where
  \<open>P_0x150b6_false_60 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_false_60_def[Ps]

definition P_0x150b6_false_60_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_false_60_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_false_60_regions :: state_pred where
  \<open>P_0x150b6_false_60_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_false_60_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b8_60 :: state_pred where
  \<open>Q_0x150b8_60 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b8_60_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_60[blocks]:
  assumes \<open>(P_0x150b6_false_60 && P_0x150b6_false_60_regions && ! jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 60 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b8_60 ?\<sigma> \<and> block_usage P_0x150b6_false_60_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_false_60_def P_0x150b6_false_60_regions_def post: Q_0x150b8_60_def regionset: P_0x150b6_false_60_regions_set_def)

definition P_0x150b8_61 :: state_pred where
  \<open>P_0x150b8_61 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b8_61_def[Ps]

definition P_0x150b8_61_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b8_61_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150b8_61_regions :: state_pred where
  \<open>P_0x150b8_61_regions \<sigma> \<equiv> \<exists>regions. P_0x150b8_61_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150d5_61 :: state_pred where
  \<open>Q_0x150d5_61 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150d5_61_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x150b8_0x150d0_61[blocks]:
  assumes \<open>(P_0x150b8_61 && P_0x150b8_61_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x150d0 61 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150d5_61 ?\<sigma> \<and> block_usage P_0x150b8_61_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b8_61_def P_0x150b8_61_regions_def post: Q_0x150d5_61_def regionset: P_0x150b8_61_regions_set_def)

definition P_0x150d5_62 :: state_pred where
  \<open>P_0x150d5_62 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150d5_62_def[Ps]

definition P_0x150d5_62_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150d5_62_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150d5_62_regions :: state_pred where
  \<open>P_0x150d5_62_regions \<sigma> \<equiv> \<exists>regions. P_0x150d5_62_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x150d5_62 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x150d5_62 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x150d5_62_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150d5_0x150d5_62[blocks]:
  assumes \<open>(P_0x150d5_62 && P_0x150d5_62_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150d5 62 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x150d5_62 ?\<sigma> \<and> block_usage P_0x150d5_62_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150d5_62_def P_0x150d5_62_regions_def post: Q_bdrv_pwrite_addr_0x150d5_62_def regionset: P_0x150d5_62_regions_set_def)

definition P_0x150da_63 :: state_pred where
  \<open>P_0x150da_63 \<sigma> \<equiv> RIP \<sigma> = 0x150da \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150da_63_def[Ps]

definition P_0x150da_63_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150da_63_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150da_63_regions :: state_pred where
  \<open>P_0x150da_63_regions \<sigma> \<equiv> \<exists>regions. P_0x150da_63_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150e8_63 :: state_pred where
  \<open>Q_0x150e8_63 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150e8_63_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x150da_0x150e5_63[blocks]:
  assumes \<open>(P_0x150da_63 && P_0x150da_63_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x150e5 63 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150e8_63 ?\<sigma> \<and> block_usage P_0x150da_63_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150da_63_def P_0x150da_63_regions_def post: Q_0x150e8_63_def regionset: P_0x150da_63_regions_set_def)

definition P_0x150e8_true_64 :: state_pred where
  \<open>P_0x150e8_true_64 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_true_64_def[Ps]

definition P_0x150e8_true_64_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_true_64_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_true_64_regions :: state_pred where
  \<open>P_0x150e8_true_64_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_true_64_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_64 :: state_pred where
  \<open>Q_0x15166_64 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_64_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x15160_64[blocks]:
  assumes \<open>(P_0x150e8_true_64 && P_0x150e8_true_64_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 64 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_64 ?\<sigma> \<and> block_usage P_0x150e8_true_64_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_true_64_def P_0x150e8_true_64_regions_def post: Q_0x15166_64_def regionset: P_0x150e8_true_64_regions_set_def)

definition P_0x150e8_false_65 :: state_pred where
  \<open>P_0x150e8_false_65 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_false_65_def[Ps]

definition P_0x150e8_false_65_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_false_65_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_false_65_regions :: state_pred where
  \<open>P_0x150e8_false_65_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_false_65_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150ed_65 :: state_pred where
  \<open>Q_0x150ed_65 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150ed_65_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x150ea_65[blocks]:
  assumes \<open>(P_0x150e8_false_65 && P_0x150e8_false_65_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x150ea 65 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150ed_65 ?\<sigma> \<and> block_usage P_0x150e8_false_65_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_false_65_def P_0x150e8_false_65_regions_def post: Q_0x150ed_65_def regionset: P_0x150e8_false_65_regions_set_def)

definition P_0x150ed_true_66 :: state_pred where
  \<open>P_0x150ed_true_66 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_true_66_def[Ps]

definition P_0x150ed_true_66_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_true_66_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_true_66_regions :: state_pred where
  \<open>P_0x150ed_true_66_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_true_66_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_66 :: state_pred where
  \<open>Q_0x1511a_66 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_66_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150ed_0x150ed_66[blocks]:
  assumes \<open>(P_0x150ed_true_66 && P_0x150ed_true_66_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150ed 66 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_66 ?\<sigma> \<and> block_usage P_0x150ed_true_66_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_true_66_def P_0x150ed_true_66_regions_def post: Q_0x1511a_66_def regionset: P_0x150ed_true_66_regions_set_def)

definition P_0x150ed_false_67 :: state_pred where
  \<open>P_0x150ed_false_67 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_false_67_def[Ps]

definition P_0x150ed_false_67_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_false_67_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_false_67_regions :: state_pred where
  \<open>P_0x150ed_false_67_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_false_67_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_67 :: state_pred where
  \<open>Q_0x15100_67 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_67_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x150ed_0x150fb_67[blocks]:
  assumes \<open>(P_0x150ed_false_67 && P_0x150ed_false_67_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x150fb 67 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_67 ?\<sigma> \<and> block_usage P_0x150ed_false_67_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_false_67_def P_0x150ed_false_67_regions_def post: Q_0x15100_67_def regionset: P_0x150ed_false_67_regions_set_def)

definition P_0x15100_68 :: state_pred where
  \<open>P_0x15100_68 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15100_68_def[Ps]

definition P_0x15100_68_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15100_68_regions_set \<sigma> \<equiv> {
    (0, R12 \<sigma>, 8),
    (1, RDX\<^sub>0, 8),
    (2, RSP\<^sub>0, 8),
    (3, ((FS\<^sub>0::64 word) + 0x28), 8),
    (4, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (5, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (6, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (7, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15100_68_regions :: state_pred where
  \<open>P_0x15100_68_regions \<sigma> \<equiv> \<exists>regions. P_0x15100_68_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15110_68 :: state_pred where
  \<open>Q_0x15110_68 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15110_68_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15100_0x1510c_68[blocks]:
  assumes \<open>(P_0x15100_68 && P_0x15100_68_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1510c 68 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15110_68 ?\<sigma> \<and> block_usage P_0x15100_68_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15100_68_def P_0x15100_68_regions_def post: Q_0x15110_68_def regionset: P_0x15100_68_regions_set_def)

definition P_0x15110_69 :: state_pred where
  \<open>P_0x15110_69 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15110_69_def[Ps]

definition P_0x15110_69_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15110_69_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15110_69_regions :: state_pred where
  \<open>P_0x15110_69_regions \<sigma> \<equiv> \<exists>regions. P_0x15110_69_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_free_any_clusters_addr_0x15110_69 :: state_pred where
  \<open>Q_free_any_clusters_addr_0x15110_69 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = free_any_clusters_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_free_any_clusters_addr_0x15110_69_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15110_0x15110_69[blocks]:
  assumes \<open>(P_0x15110_69 && P_0x15110_69_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15110 69 \<sigma> \<triangleq> ?\<sigma> \<and> Q_free_any_clusters_addr_0x15110_69 ?\<sigma> \<and> block_usage P_0x15110_69_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15110_69_def P_0x15110_69_regions_def post: Q_free_any_clusters_addr_0x15110_69_def regionset: P_0x15110_69_regions_set_def)

definition P_0x15115_70 :: state_pred where
  \<open>P_0x15115_70 \<sigma> \<equiv> RIP \<sigma> = 0x15115 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15115_70_def[Ps]

definition P_0x15115_70_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15115_70_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (21, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15115_70_regions :: state_pred where
  \<open>P_0x15115_70_regions \<sigma> \<equiv> \<exists>regions. P_0x15115_70_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15118_70 :: state_pred where
  \<open>Q_0x15118_70 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15118_70_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15115_0x15115_70[blocks]:
  assumes \<open>(P_0x15115_70 && P_0x15115_70_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15115 70 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15118_70 ?\<sigma> \<and> block_usage P_0x15115_70_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15115_70_def P_0x15115_70_regions_def post: Q_0x15118_70_def regionset: P_0x15115_70_regions_set_def)

definition P_0x15118_true_71 :: state_pred where
  \<open>P_0x15118_true_71 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_true_71_def[Ps]

definition P_0x15118_true_71_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_true_71_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_true_71_regions :: state_pred where
  \<open>P_0x15118_true_71_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_true_71_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_71 :: state_pred where
  \<open>Q_0x15100_71 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_71_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_71[blocks]:
  assumes \<open>(P_0x15118_true_71 && P_0x15118_true_71_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 71 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_71 ?\<sigma> \<and> block_usage P_0x15118_true_71_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_true_71_def P_0x15118_true_71_regions_def post: Q_0x15100_71_def regionset: P_0x15118_true_71_regions_set_def)

definition P_0x15118_false_72 :: state_pred where
  \<open>P_0x15118_false_72 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_false_72_def[Ps]

definition P_0x15118_false_72_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_false_72_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_false_72_regions :: state_pred where
  \<open>P_0x15118_false_72_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_false_72_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_72 :: state_pred where
  \<open>Q_0x1511a_72 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_72_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_72[blocks]:
  assumes \<open>(P_0x15118_false_72 && P_0x15118_false_72_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 72 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_72 ?\<sigma> \<and> block_usage P_0x15118_false_72_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_false_72_def P_0x15118_false_72_regions_def post: Q_0x1511a_72_def regionset: P_0x15118_false_72_regions_set_def)

definition P_0x1511a_73 :: state_pred where
  \<open>P_0x1511a_73 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x1511a_73_def[Ps]

definition P_0x1511a_73_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1511a_73_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x1511a_73_regions :: state_pred where
  \<open>P_0x1511a_73_regions \<sigma> \<equiv> \<exists>regions. P_0x1511a_73_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_73 :: state_pred where
  \<open>Q_0x15166_73 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_73_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x1511a_0x1511d_73[blocks]:
  assumes \<open>(P_0x1511a_73 && P_0x1511a_73_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1511d 73 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_73 ?\<sigma> \<and> block_usage P_0x1511a_73_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1511a_73_def P_0x1511a_73_regions_def post: Q_0x15166_73_def regionset: P_0x1511a_73_regions_set_def)

definition P_0x15194_false_74 :: state_pred where
  \<open>P_0x15194_false_74 \<sigma> \<equiv> RIP \<sigma> = 0x15194 \<and> RAX \<sigma> = copy_sectors_0x15185_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = 0x0 \<and> RDX \<sigma> = RSI\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x15185_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x60),8]::64 word) = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1518a\<close>
declare P_0x15194_false_74_def[Ps]

definition P_0x15194_false_74_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15194_false_74_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x60), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15194_false_74_regions :: state_pred where
  \<open>P_0x15194_false_74_regions \<sigma> \<equiv> \<exists>regions. P_0x15194_false_74_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_74 :: state_pred where
  \<open>Q_0x15166_74 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_74_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15194_0x1519a_74[blocks]:
  assumes \<open>(P_0x15194_false_74 && P_0x15194_false_74_regions && ! !SF) \<sigma>\<close>
  shows \<open>exec_block 2 0x1519a 74 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_74 ?\<sigma> \<and> block_usage P_0x15194_false_74_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15194_false_74_def P_0x15194_false_74_regions_def post: Q_0x15166_74_def regionset: P_0x15194_false_74_regions_set_def)

definition P_0x14fd8_false_75 :: state_pred where
  \<open>P_0x14fd8_false_75 \<sigma> \<equiv> RIP \<sigma> = 0x14fd8 \<and> RAX \<sigma> = qemu_malloc_0x14fb4_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x14fd8_false_75_def[Ps]

definition P_0x14fd8_false_75_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fd8_false_75_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fd8_false_75_regions :: state_pred where
  \<open>P_0x14fd8_false_75_regions \<sigma> \<equiv> \<exists>regions. P_0x14fd8_false_75_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14fed_75 :: state_pred where
  \<open>Q_0x14fed_75 \<sigma> \<equiv> RIP \<sigma> = 0x14fed \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare Q_0x14fed_75_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x14fd8_0x14feb_75[blocks]:
  assumes \<open>(P_0x14fd8_false_75 && P_0x14fd8_false_75_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x14feb 75 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14fed_75 ?\<sigma> \<and> block_usage P_0x14fd8_false_75_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fd8_false_75_def P_0x14fd8_false_75_regions_def post: Q_0x14fed_75_def regionset: P_0x14fd8_false_75_regions_set_def)

definition P_0x14fed_true_76 :: state_pred where
  \<open>P_0x14fed_true_76 \<sigma> \<equiv> RIP \<sigma> = 0x14fed \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x14fed_true_76_def[Ps]

definition P_0x14fed_true_76_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fed_true_76_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fed_true_76_regions :: state_pred where
  \<open>P_0x14fed_true_76_regions \<sigma> \<equiv> \<exists>regions. P_0x14fed_true_76_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15031_76 :: state_pred where
  \<open>Q_0x15031_76 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare Q_0x15031_76_def[Qs]

schematic_goal alloc_cluster_link_l2_0_6_0x14fed_0x1502c_76[blocks]:
  assumes \<open>(P_0x14fed_true_76 && P_0x14fed_true_76_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1502c 76 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15031_76 ?\<sigma> \<and> block_usage P_0x14fed_true_76_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fed_true_76_def P_0x14fed_true_76_regions_def post: Q_0x15031_76_def regionset: P_0x14fed_true_76_regions_set_def)

definition P_0x15031_77 :: state_pred where
  \<open>P_0x15031_77 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x15031_77_def[Ps]

definition P_0x15031_77_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15031_77_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15031_77_regions :: state_pred where
  \<open>P_0x15031_77_regions \<sigma> \<equiv> \<exists>regions. P_0x15031_77_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_get_cluster_table_addr_0x15031_77 :: state_pred where
  \<open>Q_get_cluster_table_addr_0x15031_77 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = get_cluster_table_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_get_cluster_table_addr_0x15031_77_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15031_0x15031_77[blocks]:
  assumes \<open>(P_0x15031_77 && P_0x15031_77_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15031 77 \<sigma> \<triangleq> ?\<sigma> \<and> Q_get_cluster_table_addr_0x15031_77 ?\<sigma> \<and> block_usage P_0x15031_77_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15031_77_def P_0x15031_77_regions_def post: Q_get_cluster_table_addr_0x15031_77_def regionset: P_0x15031_77_regions_set_def)

definition P_0x15036_78 :: state_pred where
  \<open>P_0x15036_78 \<sigma> \<equiv> RIP \<sigma> = 0x15036 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15036_78_def[Ps]

definition P_0x15036_78_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15036_78_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15036_78_regions :: state_pred where
  \<open>P_0x15036_78_regions \<sigma> \<equiv> \<exists>regions. P_0x15036_78_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15038_78 :: state_pred where
  \<open>Q_0x15038_78 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15038_78_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15036_0x15036_78[blocks]:
  assumes \<open>(P_0x15036_78 && P_0x15036_78_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15036 78 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15038_78 ?\<sigma> \<and> block_usage P_0x15036_78_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15036_78_def P_0x15036_78_regions_def post: Q_0x15038_78_def regionset: P_0x15036_78_regions_set_def)

definition P_0x15038_true_79 :: state_pred where
  \<open>P_0x15038_true_79 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_true_79_def[Ps]

definition P_0x15038_true_79_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_true_79_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_true_79_regions :: state_pred where
  \<open>P_0x15038_true_79_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_true_79_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_79 :: state_pred where
  \<open>Q_0x15166_79 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_79_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15038_0x15160_79[blocks]:
  assumes \<open>(P_0x15038_true_79 && P_0x15038_true_79_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 79 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_79 ?\<sigma> \<and> block_usage P_0x15038_true_79_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_true_79_def P_0x15038_true_79_regions_def post: Q_0x15166_79_def regionset: P_0x15038_true_79_regions_set_def)

definition P_0x15038_false_80 :: state_pred where
  \<open>P_0x15038_false_80 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_false_80_def[Ps]

definition P_0x15038_false_80_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_false_80_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_false_80_regions :: state_pred where
  \<open>P_0x15038_false_80_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_false_80_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15045_80 :: state_pred where
  \<open>Q_0x15045_80 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15045_80_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15038_0x15043_80[blocks]:
  assumes \<open>(P_0x15038_false_80 && P_0x15038_false_80_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x15043 80 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15045_80 ?\<sigma> \<and> block_usage P_0x15038_false_80_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_false_80_def P_0x15038_false_80_regions_def post: Q_0x15045_80_def regionset: P_0x15038_false_80_regions_set_def)

definition P_0x15045_true_81 :: state_pred where
  \<open>P_0x15045_true_81 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_true_81_def[Ps]

definition P_0x15045_true_81_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_true_81_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15045_true_81_regions :: state_pred where
  \<open>P_0x15045_true_81_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_true_81_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15141_81 :: state_pred where
  \<open>Q_0x15141_81 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15141_81_def[Qs]

schematic_goal alloc_cluster_link_l2_0_8_0x15045_0x1513c_81[blocks]:
  assumes \<open>(P_0x15045_true_81 && P_0x15045_true_81_regions && jle) \<sigma>\<close>
  shows \<open>exec_block 8 0x1513c 81 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15141_81 ?\<sigma> \<and> block_usage P_0x15045_true_81_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_true_81_def P_0x15045_true_81_regions_def post: Q_0x15141_81_def regionset: P_0x15045_true_81_regions_set_def)

definition P_0x15141_82 :: state_pred where
  \<open>P_0x15141_82 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15141_82_def[Ps]

definition P_0x15141_82_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15141_82_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15141_82_regions :: state_pred where
  \<open>P_0x15141_82_regions \<sigma> \<equiv> \<exists>regions. P_0x15141_82_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x15141_82 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x15141_82 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x15141_82_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15141_0x15141_82[blocks]:
  assumes \<open>(P_0x15141_82 && P_0x15141_82_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15141 82 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x15141_82 ?\<sigma> \<and> block_usage P_0x15141_82_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15141_82_def P_0x15141_82_regions_def post: Q_bdrv_pwrite_addr_0x15141_82_def regionset: P_0x15141_82_regions_set_def)

definition P_0x15146_83 :: state_pred where
  \<open>P_0x15146_83 \<sigma> \<equiv> RIP \<sigma> = 0x15146 \<and> RAX \<sigma> = bdrv_pwrite_0x15141_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15146_83_def[Ps]

definition P_0x15146_83_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15146_83_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15146_83_regions :: state_pred where
  \<open>P_0x15146_83_regions \<sigma> \<equiv> \<exists>regions. P_0x15146_83_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15154_83 :: state_pred where
  \<open>Q_0x15154_83 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15154_83_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15146_0x15151_83[blocks]:
  assumes \<open>(P_0x15146_83 && P_0x15146_83_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x15151 83 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15154_83 ?\<sigma> \<and> block_usage P_0x15146_83_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15146_83_def P_0x15146_83_regions_def post: Q_0x15154_83_def regionset: P_0x15146_83_regions_set_def)

definition P_0x15154_true_84 :: state_pred where
  \<open>P_0x15154_true_84 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_true_84_def[Ps]

definition P_0x15154_true_84_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_true_84_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_true_84_regions :: state_pred where
  \<open>P_0x15154_true_84_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_true_84_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_84 :: state_pred where
  \<open>Q_0x15166_84 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_84_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15154_0x1511d_84[blocks]:
  assumes \<open>(P_0x15154_true_84 && P_0x15154_true_84_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1511d 84 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_84 ?\<sigma> \<and> block_usage P_0x15154_true_84_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_true_84_def P_0x15154_true_84_regions_def post: Q_0x15166_84_def regionset: P_0x15154_true_84_regions_set_def)

definition P_0x15154_false_85 :: state_pred where
  \<open>P_0x15154_false_85 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_false_85_def[Ps]

definition P_0x15154_false_85_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_false_85_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_false_85_regions :: state_pred where
  \<open>P_0x15154_false_85_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_false_85_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15160_85 :: state_pred where
  \<open>Q_0x15160_85 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15160_85_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15154_0x15156_85[blocks]:
  assumes \<open>(P_0x15154_false_85 && P_0x15154_false_85_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15156 85 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15160_85 ?\<sigma> \<and> block_usage P_0x15154_false_85_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_false_85_def P_0x15154_false_85_regions_def post: Q_0x15160_85_def regionset: P_0x15154_false_85_regions_set_def)

definition P_0x15160_86 :: state_pred where
  \<open>P_0x15160_86 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15160_86_def[Ps]

definition P_0x15160_86_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15160_86_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15160_86_regions :: state_pred where
  \<open>P_0x15160_86_regions \<sigma> \<equiv> \<exists>regions. P_0x15160_86_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_86 :: state_pred where
  \<open>Q_0x15166_86 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_86_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15160_0x15160_86[blocks]:
  assumes \<open>(P_0x15160_86 && P_0x15160_86_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15160 86 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_86 ?\<sigma> \<and> block_usage P_0x15160_86_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15160_86_def P_0x15160_86_regions_def post: Q_0x15166_86_def regionset: P_0x15160_86_regions_set_def)

definition P_0x15045_false_87 :: state_pred where
  \<open>P_0x15045_false_87 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_false_87_def[Ps]

definition P_0x15045_false_87_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_false_87_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15045_false_87_regions :: state_pred where
  \<open>P_0x15045_false_87_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_false_87_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_87 :: state_pred where
  \<open>Q_0x15060_87 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_87_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x15045_0x1505a_87[blocks]:
  assumes \<open>(P_0x15045_false_87 && P_0x15045_false_87_regions && ! jle) \<sigma>\<close>
  shows \<open>exec_block 5 0x1505a 87 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_87 ?\<sigma> \<and> block_usage P_0x15045_false_87_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_false_87_def P_0x15045_false_87_regions_def post: Q_0x15060_87_def regionset: P_0x15045_false_87_regions_set_def)

definition P_0x15060_88 :: state_pred where
  \<open>P_0x15060_88 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15060_88_def[Ps]

definition P_0x15060_88_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15060_88_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15060_88_regions :: state_pred where
  \<open>P_0x15060_88_regions \<sigma> \<equiv> \<exists>regions. P_0x15060_88_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15077_88 :: state_pred where
  \<open>Q_0x15077_88 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15077_88_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x15060_0x15074_88[blocks]:
  assumes \<open>(P_0x15060_88 && P_0x15060_88_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x15074 88 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15077_88 ?\<sigma> \<and> block_usage P_0x15060_88_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15060_88_def P_0x15060_88_regions_def post: Q_0x15077_88_def regionset: P_0x15060_88_regions_set_def)

definition P_0x15077_true_89 :: state_pred where
  \<open>P_0x15077_true_89 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_true_89_def[Ps]

definition P_0x15077_true_89_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_true_89_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_true_89_regions :: state_pred where
  \<open>P_0x15077_true_89_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_true_89_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_89 :: state_pred where
  \<open>Q_0x15096_89 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_89_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15077_0x15077_89[blocks]:
  assumes \<open>(P_0x15077_true_89 && P_0x15077_true_89_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15077 89 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_89 ?\<sigma> \<and> block_usage P_0x15077_true_89_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_true_89_def P_0x15077_true_89_regions_def post: Q_0x15096_89_def regionset: P_0x15077_true_89_regions_set_def)

definition P_0x15077_false_90 :: state_pred where
  \<open>P_0x15077_false_90 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_false_90_def[Ps]

definition P_0x15077_false_90_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_false_90_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, ((qemu_malloc_0x14fb4_retval::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_false_90_regions :: state_pred where
  \<open>P_0x15077_false_90_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_false_90_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_90 :: state_pred where
  \<open>Q_0x15096_90 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_90_def[Qs]

schematic_goal alloc_cluster_link_l2_0_9_0x15077_0x15092_90[blocks]:
  assumes \<open>(P_0x15077_false_90 && P_0x15077_false_90_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 9 0x15092 90 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_90 ?\<sigma> \<and> block_usage P_0x15077_false_90_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_false_90_def P_0x15077_false_90_regions_def post: Q_0x15096_90_def regionset: P_0x15077_false_90_regions_set_def)

definition P_0x15096_91 :: state_pred where
  \<open>P_0x15096_91 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15096_91_def[Ps]

definition P_0x15096_91_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15096_91_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x8), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15096_91_regions :: state_pred where
  \<open>P_0x15096_91_regions \<sigma> \<equiv> \<exists>regions. P_0x15096_91_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b6_91 :: state_pred where
  \<open>Q_0x150b6_91 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b6_91_def[Qs]

schematic_goal alloc_cluster_link_l2_0_11_0x15096_0x150b4_91[blocks]:
  assumes \<open>(P_0x15096_91 && P_0x15096_91_regions) \<sigma>\<close>
  shows \<open>exec_block 11 0x150b4 91 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b6_91 ?\<sigma> \<and> block_usage P_0x15096_91_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15096_91_def P_0x15096_91_regions_def post: Q_0x150b6_91_def regionset: P_0x15096_91_regions_set_def)

definition P_0x150b6_true_92 :: state_pred where
  \<open>P_0x150b6_true_92 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_true_92_def[Ps]

definition P_0x150b6_true_92_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_true_92_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_true_92_regions :: state_pred where
  \<open>P_0x150b6_true_92_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_true_92_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_92 :: state_pred where
  \<open>Q_0x15060_92 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_92_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_92[blocks]:
  assumes \<open>(P_0x150b6_true_92 && P_0x150b6_true_92_regions && jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 92 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_92 ?\<sigma> \<and> block_usage P_0x150b6_true_92_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_true_92_def P_0x150b6_true_92_regions_def post: Q_0x15060_92_def regionset: P_0x150b6_true_92_regions_set_def)

definition P_0x150b6_false_93 :: state_pred where
  \<open>P_0x150b6_false_93 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_false_93_def[Ps]

definition P_0x150b6_false_93_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_false_93_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_false_93_regions :: state_pred where
  \<open>P_0x150b6_false_93_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_false_93_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b8_93 :: state_pred where
  \<open>Q_0x150b8_93 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b8_93_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_93[blocks]:
  assumes \<open>(P_0x150b6_false_93 && P_0x150b6_false_93_regions && ! jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 93 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b8_93 ?\<sigma> \<and> block_usage P_0x150b6_false_93_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_false_93_def P_0x150b6_false_93_regions_def post: Q_0x150b8_93_def regionset: P_0x150b6_false_93_regions_set_def)

definition P_0x150b8_94 :: state_pred where
  \<open>P_0x150b8_94 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b8_94_def[Ps]

definition P_0x150b8_94_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b8_94_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150b8_94_regions :: state_pred where
  \<open>P_0x150b8_94_regions \<sigma> \<equiv> \<exists>regions. P_0x150b8_94_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150d5_94 :: state_pred where
  \<open>Q_0x150d5_94 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150d5_94_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x150b8_0x150d0_94[blocks]:
  assumes \<open>(P_0x150b8_94 && P_0x150b8_94_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x150d0 94 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150d5_94 ?\<sigma> \<and> block_usage P_0x150b8_94_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b8_94_def P_0x150b8_94_regions_def post: Q_0x150d5_94_def regionset: P_0x150b8_94_regions_set_def)

definition P_0x150d5_95 :: state_pred where
  \<open>P_0x150d5_95 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150d5_95_def[Ps]

definition P_0x150d5_95_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150d5_95_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150d5_95_regions :: state_pred where
  \<open>P_0x150d5_95_regions \<sigma> \<equiv> \<exists>regions. P_0x150d5_95_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x150d5_95 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x150d5_95 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x150d5_95_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150d5_0x150d5_95[blocks]:
  assumes \<open>(P_0x150d5_95 && P_0x150d5_95_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150d5 95 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x150d5_95 ?\<sigma> \<and> block_usage P_0x150d5_95_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150d5_95_def P_0x150d5_95_regions_def post: Q_bdrv_pwrite_addr_0x150d5_95_def regionset: P_0x150d5_95_regions_set_def)

definition P_0x150da_96 :: state_pred where
  \<open>P_0x150da_96 \<sigma> \<equiv> RIP \<sigma> = 0x150da \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150da_96_def[Ps]

definition P_0x150da_96_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150da_96_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150da_96_regions :: state_pred where
  \<open>P_0x150da_96_regions \<sigma> \<equiv> \<exists>regions. P_0x150da_96_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150e8_96 :: state_pred where
  \<open>Q_0x150e8_96 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150e8_96_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x150da_0x150e5_96[blocks]:
  assumes \<open>(P_0x150da_96 && P_0x150da_96_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x150e5 96 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150e8_96 ?\<sigma> \<and> block_usage P_0x150da_96_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150da_96_def P_0x150da_96_regions_def post: Q_0x150e8_96_def regionset: P_0x150da_96_regions_set_def)

definition P_0x150e8_true_97 :: state_pred where
  \<open>P_0x150e8_true_97 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_true_97_def[Ps]

definition P_0x150e8_true_97_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_true_97_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_true_97_regions :: state_pred where
  \<open>P_0x150e8_true_97_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_true_97_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_97 :: state_pred where
  \<open>Q_0x15166_97 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_97_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x15160_97[blocks]:
  assumes \<open>(P_0x150e8_true_97 && P_0x150e8_true_97_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 97 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_97 ?\<sigma> \<and> block_usage P_0x150e8_true_97_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_true_97_def P_0x150e8_true_97_regions_def post: Q_0x15166_97_def regionset: P_0x150e8_true_97_regions_set_def)

definition P_0x150e8_false_98 :: state_pred where
  \<open>P_0x150e8_false_98 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_false_98_def[Ps]

definition P_0x150e8_false_98_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_false_98_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_false_98_regions :: state_pred where
  \<open>P_0x150e8_false_98_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_false_98_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150ed_98 :: state_pred where
  \<open>Q_0x150ed_98 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150ed_98_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x150ea_98[blocks]:
  assumes \<open>(P_0x150e8_false_98 && P_0x150e8_false_98_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x150ea 98 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150ed_98 ?\<sigma> \<and> block_usage P_0x150e8_false_98_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_false_98_def P_0x150e8_false_98_regions_def post: Q_0x150ed_98_def regionset: P_0x150e8_false_98_regions_set_def)

definition P_0x150ed_true_99 :: state_pred where
  \<open>P_0x150ed_true_99 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_true_99_def[Ps]

definition P_0x150ed_true_99_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_true_99_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_true_99_regions :: state_pred where
  \<open>P_0x150ed_true_99_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_true_99_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_99 :: state_pred where
  \<open>Q_0x1511a_99 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_99_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150ed_0x150ed_99[blocks]:
  assumes \<open>(P_0x150ed_true_99 && P_0x150ed_true_99_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150ed 99 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_99 ?\<sigma> \<and> block_usage P_0x150ed_true_99_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_true_99_def P_0x150ed_true_99_regions_def post: Q_0x1511a_99_def regionset: P_0x150ed_true_99_regions_set_def)

definition P_0x150ed_false_100 :: state_pred where
  \<open>P_0x150ed_false_100 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_false_100_def[Ps]

definition P_0x150ed_false_100_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_false_100_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_false_100_regions :: state_pred where
  \<open>P_0x150ed_false_100_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_false_100_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_100 :: state_pred where
  \<open>Q_0x15100_100 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_100_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x150ed_0x150fb_100[blocks]:
  assumes \<open>(P_0x150ed_false_100 && P_0x150ed_false_100_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x150fb 100 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_100 ?\<sigma> \<and> block_usage P_0x150ed_false_100_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_false_100_def P_0x150ed_false_100_regions_def post: Q_0x15100_100_def regionset: P_0x150ed_false_100_regions_set_def)

definition P_0x15100_101 :: state_pred where
  \<open>P_0x15100_101 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15100_101_def[Ps]

definition P_0x15100_101_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15100_101_regions_set \<sigma> \<equiv> {
    (0, R12 \<sigma>, 8),
    (1, RDX\<^sub>0, 8),
    (2, RSP\<^sub>0, 8),
    (3, ((FS\<^sub>0::64 word) + 0x28), 8),
    (4, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (5, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (6, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (7, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15100_101_regions :: state_pred where
  \<open>P_0x15100_101_regions \<sigma> \<equiv> \<exists>regions. P_0x15100_101_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15110_101 :: state_pred where
  \<open>Q_0x15110_101 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15110_101_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15100_0x1510c_101[blocks]:
  assumes \<open>(P_0x15100_101 && P_0x15100_101_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1510c 101 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15110_101 ?\<sigma> \<and> block_usage P_0x15100_101_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15100_101_def P_0x15100_101_regions_def post: Q_0x15110_101_def regionset: P_0x15100_101_regions_set_def)

definition P_0x15110_102 :: state_pred where
  \<open>P_0x15110_102 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15110_102_def[Ps]

definition P_0x15110_102_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15110_102_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15110_102_regions :: state_pred where
  \<open>P_0x15110_102_regions \<sigma> \<equiv> \<exists>regions. P_0x15110_102_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_free_any_clusters_addr_0x15110_102 :: state_pred where
  \<open>Q_free_any_clusters_addr_0x15110_102 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = free_any_clusters_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_free_any_clusters_addr_0x15110_102_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15110_0x15110_102[blocks]:
  assumes \<open>(P_0x15110_102 && P_0x15110_102_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15110 102 \<sigma> \<triangleq> ?\<sigma> \<and> Q_free_any_clusters_addr_0x15110_102 ?\<sigma> \<and> block_usage P_0x15110_102_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15110_102_def P_0x15110_102_regions_def post: Q_free_any_clusters_addr_0x15110_102_def regionset: P_0x15110_102_regions_set_def)

definition P_0x15115_103 :: state_pred where
  \<open>P_0x15115_103 \<sigma> \<equiv> RIP \<sigma> = 0x15115 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15115_103_def[Ps]

definition P_0x15115_103_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15115_103_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15115_103_regions :: state_pred where
  \<open>P_0x15115_103_regions \<sigma> \<equiv> \<exists>regions. P_0x15115_103_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15118_103 :: state_pred where
  \<open>Q_0x15118_103 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15118_103_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15115_0x15115_103[blocks]:
  assumes \<open>(P_0x15115_103 && P_0x15115_103_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15115 103 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15118_103 ?\<sigma> \<and> block_usage P_0x15115_103_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15115_103_def P_0x15115_103_regions_def post: Q_0x15118_103_def regionset: P_0x15115_103_regions_set_def)

definition P_0x15118_true_104 :: state_pred where
  \<open>P_0x15118_true_104 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_true_104_def[Ps]

definition P_0x15118_true_104_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_true_104_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_true_104_regions :: state_pred where
  \<open>P_0x15118_true_104_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_true_104_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_104 :: state_pred where
  \<open>Q_0x15100_104 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_104_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_104[blocks]:
  assumes \<open>(P_0x15118_true_104 && P_0x15118_true_104_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 104 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_104 ?\<sigma> \<and> block_usage P_0x15118_true_104_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_true_104_def P_0x15118_true_104_regions_def post: Q_0x15100_104_def regionset: P_0x15118_true_104_regions_set_def)

definition P_0x15118_false_105 :: state_pred where
  \<open>P_0x15118_false_105 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_false_105_def[Ps]

definition P_0x15118_false_105_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_false_105_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_false_105_regions :: state_pred where
  \<open>P_0x15118_false_105_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_false_105_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_105 :: state_pred where
  \<open>Q_0x1511a_105 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_105_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_105[blocks]:
  assumes \<open>(P_0x15118_false_105 && P_0x15118_false_105_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 105 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_105 ?\<sigma> \<and> block_usage P_0x15118_false_105_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_false_105_def P_0x15118_false_105_regions_def post: Q_0x1511a_105_def regionset: P_0x15118_false_105_regions_set_def)

definition P_0x1511a_106 :: state_pred where
  \<open>P_0x1511a_106 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x1511a_106_def[Ps]

definition P_0x1511a_106_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1511a_106_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x1511a_106_regions :: state_pred where
  \<open>P_0x1511a_106_regions \<sigma> \<equiv> \<exists>regions. P_0x1511a_106_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_106 :: state_pred where
  \<open>Q_0x15166_106 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_106_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x1511a_0x1511d_106[blocks]:
  assumes \<open>(P_0x1511a_106 && P_0x1511a_106_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1511d 106 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_106 ?\<sigma> \<and> block_usage P_0x1511a_106_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1511a_106_def P_0x1511a_106_regions_def post: Q_0x15166_106_def regionset: P_0x1511a_106_regions_set_def)

definition P_0x14fed_false_107 :: state_pred where
  \<open>P_0x14fed_false_107 \<sigma> \<equiv> RIP \<sigma> = 0x14fed \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>(((\<langle>31,0\<rangle>(\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)::64 word)::64 word) - 0x1)::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RSI \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x14fed_false_107_def[Ps]

definition P_0x14fed_false_107_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14fed_false_107_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x14fed_false_107_regions :: state_pred where
  \<open>P_0x14fed_false_107_regions \<sigma> \<equiv> \<exists>regions. P_0x14fed_false_107_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1500b_107 :: state_pred where
  \<open>Q_0x1500b_107 \<sigma> \<equiv> RIP \<sigma> = 0x1500b \<and> RAX \<sigma> = ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word))) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare Q_0x1500b_107_def[Qs]

schematic_goal alloc_cluster_link_l2_0_11_0x14fed_0x15008_107[blocks]:
  assumes \<open>(P_0x14fed_false_107 && P_0x14fed_false_107_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 11 0x15008 107 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1500b_107 ?\<sigma> \<and> block_usage P_0x14fed_false_107_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14fed_false_107_def P_0x14fed_false_107_regions_def post: Q_0x1500b_107_def regionset: P_0x14fed_false_107_regions_set_def)

definition P_0x1500b_108 :: state_pred where
  \<open>P_0x1500b_108 \<sigma> \<equiv> RIP \<sigma> = 0x1500b \<and> RAX \<sigma> = ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word))) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x14fb9\<close>
declare P_0x1500b_108_def[Ps]

definition P_0x1500b_108_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1500b_108_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x1500b_108_regions :: state_pred where
  \<open>P_0x1500b_108_regions \<sigma> \<equiv> \<exists>regions. P_0x1500b_108_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_copy_sectors_addr_0x1500b_108 :: state_pred where
  \<open>Q_copy_sectors_addr_0x1500b_108 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = copy_sectors_addr \<and> RAX \<sigma> = ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word))) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare Q_copy_sectors_addr_0x1500b_108_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x1500b_0x1500b_108[blocks]:
  assumes \<open>(P_0x1500b_108 && P_0x1500b_108_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1500b 108 \<sigma> \<triangleq> ?\<sigma> \<and> Q_copy_sectors_addr_0x1500b_108 ?\<sigma> \<and> block_usage P_0x1500b_108_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1500b_108_def P_0x1500b_108_regions_def post: Q_copy_sectors_addr_0x1500b_108_def regionset: P_0x1500b_108_regions_set_def)

definition P_0x15010_109 :: state_pred where
  \<open>P_0x15010_109 \<sigma> \<equiv> RIP \<sigma> = 0x15010 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15010_109_def[Ps]

definition P_0x15010_109_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15010_109_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15010_109_regions :: state_pred where
  \<open>P_0x15010_109_regions \<sigma> \<equiv> \<exists>regions. P_0x15010_109_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15015_109 :: state_pred where
  \<open>Q_0x15015_109 \<sigma> \<equiv> RIP \<sigma> = 0x15015 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare Q_0x15015_109_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15010_0x15013_109[blocks]:
  assumes \<open>(P_0x15010_109 && P_0x15010_109_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x15013 109 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15015_109 ?\<sigma> \<and> block_usage P_0x15010_109_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15010_109_def P_0x15010_109_regions_def post: Q_0x15015_109_def regionset: P_0x15010_109_regions_set_def)

definition P_0x15015_true_110 :: state_pred where
  \<open>P_0x15015_true_110 \<sigma> \<equiv> RIP \<sigma> = 0x15015 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15015_true_110_def[Ps]

definition P_0x15015_true_110_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15015_true_110_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15015_true_110_regions :: state_pred where
  \<open>P_0x15015_true_110_regions \<sigma> \<equiv> \<exists>regions. P_0x15015_true_110_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_110 :: state_pred where
  \<open>Q_0x15166_110 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_110_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15015_0x15015_110[blocks]:
  assumes \<open>(P_0x15015_true_110 && P_0x15015_true_110_regions && SF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15015 110 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_110 ?\<sigma> \<and> block_usage P_0x15015_true_110_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15015_true_110_def P_0x15015_true_110_regions_def post: Q_0x15166_110_def regionset: P_0x15015_true_110_regions_set_def)

definition P_0x15015_false_111 :: state_pred where
  \<open>P_0x15015_false_111 \<sigma> \<equiv> RIP \<sigma> = 0x15015 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)::32 word) - (((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) \<and> RDX \<sigma> = ((((ucast (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word))::64 word) << 9)::64 word) + RSI\<^sub>0) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (((sextend (ucast ((((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word))::32 word) AND (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) + ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15015_false_111_def[Ps]

definition P_0x15015_false_111_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15015_false_111_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15015_false_111_regions :: state_pred where
  \<open>P_0x15015_false_111_regions \<sigma> \<equiv> \<exists>regions. P_0x15015_false_111_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15031_111 :: state_pred where
  \<open>Q_0x15031_111 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare Q_0x15031_111_def[Qs]

schematic_goal alloc_cluster_link_l2_0_6_0x15015_0x1502c_111[blocks]:
  assumes \<open>(P_0x15015_false_111 && P_0x15015_false_111_regions && ! SF) \<sigma>\<close>
  shows \<open>exec_block 6 0x1502c 111 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15031_111 ?\<sigma> \<and> block_usage P_0x15015_false_111_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15015_false_111_def P_0x15015_false_111_regions_def post: Q_0x15031_111_def regionset: P_0x15015_false_111_regions_set_def)

definition P_0x15031_112 :: state_pred where
  \<open>P_0x15031_112 \<sigma> \<equiv> RIP \<sigma> = 0x15031 \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15010\<close>
declare P_0x15031_112_def[Ps]

definition P_0x15031_112_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15031_112_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15031_112_regions :: state_pred where
  \<open>P_0x15031_112_regions \<sigma> \<equiv> \<exists>regions. P_0x15031_112_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_get_cluster_table_addr_0x15031_112 :: state_pred where
  \<open>Q_get_cluster_table_addr_0x15031_112 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = get_cluster_table_addr \<and> RAX \<sigma> = copy_sectors_0x1500b_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_get_cluster_table_addr_0x15031_112_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15031_0x15031_112[blocks]:
  assumes \<open>(P_0x15031_112 && P_0x15031_112_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15031 112 \<sigma> \<triangleq> ?\<sigma> \<and> Q_get_cluster_table_addr_0x15031_112 ?\<sigma> \<and> block_usage P_0x15031_112_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15031_112_def P_0x15031_112_regions_def post: Q_get_cluster_table_addr_0x15031_112_def regionset: P_0x15031_112_regions_set_def)

definition P_0x15036_113 :: state_pred where
  \<open>P_0x15036_113 \<sigma> \<equiv> RIP \<sigma> = 0x15036 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15036_113_def[Ps]

definition P_0x15036_113_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15036_113_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15036_113_regions :: state_pred where
  \<open>P_0x15036_113_regions \<sigma> \<equiv> \<exists>regions. P_0x15036_113_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15038_113 :: state_pred where
  \<open>Q_0x15038_113 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15038_113_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15036_0x15036_113[blocks]:
  assumes \<open>(P_0x15036_113 && P_0x15036_113_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15036 113 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15038_113 ?\<sigma> \<and> block_usage P_0x15036_113_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15036_113_def P_0x15036_113_regions_def post: Q_0x15038_113_def regionset: P_0x15036_113_regions_set_def)

definition P_0x15038_true_114 :: state_pred where
  \<open>P_0x15038_true_114 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_true_114_def[Ps]

definition P_0x15038_true_114_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_true_114_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_true_114_regions :: state_pred where
  \<open>P_0x15038_true_114_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_true_114_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_114 :: state_pred where
  \<open>Q_0x15166_114 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_114_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15038_0x15160_114[blocks]:
  assumes \<open>(P_0x15038_true_114 && P_0x15038_true_114_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 114 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_114 ?\<sigma> \<and> block_usage P_0x15038_true_114_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_true_114_def P_0x15038_true_114_regions_def post: Q_0x15166_114_def regionset: P_0x15038_true_114_regions_set_def)

definition P_0x15038_false_115 :: state_pred where
  \<open>P_0x15038_false_115 \<sigma> \<equiv> RIP \<sigma> = 0x15038 \<and> RAX \<sigma> = get_cluster_table_0x15031_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15038_false_115_def[Ps]

definition P_0x15038_false_115_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15038_false_115_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15038_false_115_regions :: state_pred where
  \<open>P_0x15038_false_115_regions \<sigma> \<equiv> \<exists>regions. P_0x15038_false_115_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15045_115 :: state_pred where
  \<open>Q_0x15045_115 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15045_115_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15038_0x15043_115[blocks]:
  assumes \<open>(P_0x15038_false_115 && P_0x15038_false_115_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x15043 115 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15045_115 ?\<sigma> \<and> block_usage P_0x15038_false_115_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15038_false_115_def P_0x15038_false_115_regions_def post: Q_0x15045_115_def regionset: P_0x15038_false_115_regions_set_def)

definition P_0x15045_true_116 :: state_pred where
  \<open>P_0x15045_true_116 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_true_116_def[Ps]

definition P_0x15045_true_116_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_true_116_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15045_true_116_regions :: state_pred where
  \<open>P_0x15045_true_116_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_true_116_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15141_116 :: state_pred where
  \<open>Q_0x15141_116 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15141_116_def[Qs]

schematic_goal alloc_cluster_link_l2_0_8_0x15045_0x1513c_116[blocks]:
  assumes \<open>(P_0x15045_true_116 && P_0x15045_true_116_regions && jle) \<sigma>\<close>
  shows \<open>exec_block 8 0x1513c 116 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15141_116 ?\<sigma> \<and> block_usage P_0x15045_true_116_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_true_116_def P_0x15045_true_116_regions_def post: Q_0x15141_116_def regionset: P_0x15045_true_116_regions_set_def)

definition P_0x15141_117 :: state_pred where
  \<open>P_0x15141_117 \<sigma> \<equiv> RIP \<sigma> = 0x15141 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15141_117_def[Ps]

definition P_0x15141_117_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15141_117_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15141_117_regions :: state_pred where
  \<open>P_0x15141_117_regions \<sigma> \<equiv> \<exists>regions. P_0x15141_117_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x15141_117 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x15141_117 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x15141_117_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15141_0x15141_117[blocks]:
  assumes \<open>(P_0x15141_117 && P_0x15141_117_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15141 117 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x15141_117 ?\<sigma> \<and> block_usage P_0x15141_117_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15141_117_def P_0x15141_117_regions_def post: Q_bdrv_pwrite_addr_0x15141_117_def regionset: P_0x15141_117_regions_set_def)

definition P_0x15146_118 :: state_pred where
  \<open>P_0x15146_118 \<sigma> \<equiv> RIP \<sigma> = 0x15146 \<and> RAX \<sigma> = bdrv_pwrite_0x15141_retval \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15146_118_def[Ps]

definition P_0x15146_118_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15146_118_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15146_118_regions :: state_pred where
  \<open>P_0x15146_118_regions \<sigma> \<equiv> \<exists>regions. P_0x15146_118_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15154_118 :: state_pred where
  \<open>Q_0x15154_118 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15154_118_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15146_0x15151_118[blocks]:
  assumes \<open>(P_0x15146_118 && P_0x15146_118_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x15151 118 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15154_118 ?\<sigma> \<and> block_usage P_0x15146_118_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15146_118_def P_0x15146_118_regions_def post: Q_0x15154_118_def regionset: P_0x15146_118_regions_set_def)

definition P_0x15154_true_119 :: state_pred where
  \<open>P_0x15154_true_119 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_true_119_def[Ps]

definition P_0x15154_true_119_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_true_119_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_true_119_regions :: state_pred where
  \<open>P_0x15154_true_119_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_true_119_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_119 :: state_pred where
  \<open>Q_0x15166_119 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_119_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x15154_0x1511d_119[blocks]:
  assumes \<open>(P_0x15154_true_119 && P_0x15154_true_119_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block 3 0x1511d 119 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_119 ?\<sigma> \<and> block_usage P_0x15154_true_119_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_true_119_def P_0x15154_true_119_regions_def post: Q_0x15166_119_def regionset: P_0x15154_true_119_regions_set_def)

definition P_0x15154_false_120 :: state_pred where
  \<open>P_0x15154_false_120 \<sigma> \<equiv> RIP \<sigma> = 0x15154 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15154_false_120_def[Ps]

definition P_0x15154_false_120_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15154_false_120_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15154_false_120_regions :: state_pred where
  \<open>P_0x15154_false_120_regions \<sigma> \<equiv> \<exists>regions. P_0x15154_false_120_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15160_120 :: state_pred where
  \<open>Q_0x15160_120 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15160_120_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x15154_0x15156_120[blocks]:
  assumes \<open>(P_0x15154_false_120 && P_0x15154_false_120_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15156 120 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15160_120 ?\<sigma> \<and> block_usage P_0x15154_false_120_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15154_false_120_def P_0x15154_false_120_regions_def post: Q_0x15160_120_def regionset: P_0x15154_false_120_regions_set_def)

definition P_0x15160_121 :: state_pred where
  \<open>P_0x15160_121 \<sigma> \<equiv> RIP \<sigma> = 0x15160 \<and> RAX \<sigma> = (sextend (ucast ((\<langle>31,0\<rangle>bdrv_pwrite_0x15141_retval::32 word))) 32 64::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ucast ((\<langle>31,0\<rangle>((ucast (((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)::32 word))::64 word) * (0x8::64 word))::32 word)) \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15146 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15160_121_def[Ps]

definition P_0x15160_121_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15160_121_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15160_121_regions :: state_pred where
  \<open>P_0x15160_121_regions \<sigma> \<equiv> \<exists>regions. P_0x15160_121_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_121 :: state_pred where
  \<open>Q_0x15166_121 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_121_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15160_0x15160_121[blocks]:
  assumes \<open>(P_0x15160_121 && P_0x15160_121_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15160 121 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_121 ?\<sigma> \<and> block_usage P_0x15160_121_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15160_121_def P_0x15160_121_regions_def post: Q_0x15166_121_def regionset: P_0x15160_121_regions_set_def)

definition P_0x15045_false_122 :: state_pred where
  \<open>P_0x15045_false_122 \<sigma> \<equiv> RIP \<sigma> = 0x15045 \<and> RAX \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = ((RSP\<^sub>0::64 word) - 0x50) \<and> RDX \<sigma> = ((RSP\<^sub>0::64 word) - 0x48) \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R15 \<sigma> = ucast ((\<langle>31,0\<rangle>copy_sectors_0x1500b_retval::32 word)) \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15045_false_122_def[Ps]

definition P_0x15045_false_122_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15045_false_122_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15045_false_122_regions :: state_pred where
  \<open>P_0x15045_false_122_regions \<sigma> \<equiv> \<exists>regions. P_0x15045_false_122_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_122 :: state_pred where
  \<open>Q_0x15060_122 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_122_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x15045_0x1505a_122[blocks]:
  assumes \<open>(P_0x15045_false_122 && P_0x15045_false_122_regions && ! jle) \<sigma>\<close>
  shows \<open>exec_block 5 0x1505a 122 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_122 ?\<sigma> \<and> block_usage P_0x15045_false_122_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15045_false_122_def P_0x15045_false_122_regions_def post: Q_0x15060_122_def regionset: P_0x15045_false_122_regions_set_def)

definition P_0x15060_123 :: state_pred where
  \<open>P_0x15060_123 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15060_123_def[Ps]

definition P_0x15060_123_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15060_123_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15060_123_regions :: state_pred where
  \<open>P_0x15060_123_regions \<sigma> \<equiv> \<exists>regions. P_0x15060_123_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15077_123 :: state_pred where
  \<open>Q_0x15077_123 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15077_123_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x15060_0x15074_123[blocks]:
  assumes \<open>(P_0x15060_123 && P_0x15060_123_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x15074 123 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15077_123 ?\<sigma> \<and> block_usage P_0x15060_123_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15060_123_def P_0x15060_123_regions_def post: Q_0x15077_123_def regionset: P_0x15060_123_regions_set_def)

definition P_0x15077_true_124 :: state_pred where
  \<open>P_0x15077_true_124 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_true_124_def[Ps]

definition P_0x15077_true_124_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_true_124_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_true_124_regions :: state_pred where
  \<open>P_0x15077_true_124_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_true_124_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_124 :: state_pred where
  \<open>Q_0x15096_124 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_124_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15077_0x15077_124[blocks]:
  assumes \<open>(P_0x15077_true_124 && P_0x15077_true_124_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15077 124 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_124 ?\<sigma> \<and> block_usage P_0x15077_true_124_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_true_124_def P_0x15077_true_124_regions_def post: Q_0x15096_124_def regionset: P_0x15077_true_124_regions_set_def)

definition P_0x15077_false_125 :: state_pred where
  \<open>P_0x15077_false_125 \<sigma> \<equiv> RIP \<sigma> = 0x15077 \<and> RAX \<sigma> = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15077_false_125_def[Ps]

definition P_0x15077_false_125_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15077_false_125_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, ((qemu_malloc_0x14fb4_retval::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15077_false_125_regions :: state_pred where
  \<open>P_0x15077_false_125_regions \<sigma> \<equiv> \<exists>regions. P_0x15077_false_125_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15096_125 :: state_pred where
  \<open>Q_0x15096_125 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15096_125_def[Qs]

schematic_goal alloc_cluster_link_l2_0_9_0x15077_0x15092_125[blocks]:
  assumes \<open>(P_0x15077_false_125 && P_0x15077_false_125_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 9 0x15092 125 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15096_125 ?\<sigma> \<and> block_usage P_0x15077_false_125_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15077_false_125_def P_0x15077_false_125_regions_def post: Q_0x15096_125_def regionset: P_0x15077_false_125_regions_set_def)

definition P_0x15096_126 :: state_pred where
  \<open>P_0x15096_126 \<sigma> \<equiv> RIP \<sigma> = 0x15096 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RCX \<sigma> = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> RDI \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)) \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) = (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x15096_126_def[Ps]

definition P_0x15096_126_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15096_126_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x8), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + (\<langle>63,0\<rangle>(((\<langle>63,0\<rangle>(sextend (ucast ((((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)::32 word) + (\<langle>31,0\<rangle>RDX \<sigma>::32 word)))) 32 64::64 word)::64 word)::64 word) * 0x8)::64 word)), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15096_126_regions :: state_pred where
  \<open>P_0x15096_126_regions \<sigma> \<equiv> \<exists>regions. P_0x15096_126_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b6_126 :: state_pred where
  \<open>Q_0x150b6_126 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b6_126_def[Qs]

schematic_goal alloc_cluster_link_l2_0_11_0x15096_0x150b4_126[blocks]:
  assumes \<open>(P_0x15096_126 && P_0x15096_126_regions) \<sigma>\<close>
  shows \<open>exec_block 11 0x150b4 126 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b6_126 ?\<sigma> \<and> block_usage P_0x15096_126_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15096_126_def P_0x15096_126_regions_def post: Q_0x150b6_126_def regionset: P_0x15096_126_regions_set_def)

definition P_0x150b6_true_127 :: state_pred where
  \<open>P_0x150b6_true_127 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_true_127_def[Ps]

definition P_0x150b6_true_127_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_true_127_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_true_127_regions :: state_pred where
  \<open>P_0x150b6_true_127_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_true_127_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15060_127 :: state_pred where
  \<open>Q_0x15060_127 \<sigma> \<equiv> RIP \<sigma> = 0x15060 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x15060_127_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_127[blocks]:
  assumes \<open>(P_0x150b6_true_127 && P_0x150b6_true_127_regions && jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 127 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15060_127 ?\<sigma> \<and> block_usage P_0x150b6_true_127_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_true_127_def P_0x150b6_true_127_regions_def post: Q_0x15060_127_def regionset: P_0x150b6_true_127_regions_set_def)

definition P_0x150b6_false_128 :: state_pred where
  \<open>P_0x150b6_false_128 \<sigma> \<equiv> RIP \<sigma> = 0x150b6 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b6_false_128_def[Ps]

definition P_0x150b6_false_128_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b6_false_128_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x150b6_false_128_regions :: state_pred where
  \<open>P_0x150b6_false_128_regions \<sigma> \<equiv> \<exists>regions. P_0x150b6_false_128_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150b8_128 :: state_pred where
  \<open>Q_0x150b8_128 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare Q_0x150b8_128_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150b6_0x150b6_128[blocks]:
  assumes \<open>(P_0x150b6_false_128 && P_0x150b6_false_128_regions && ! jg) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150b6 128 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150b8_128 ?\<sigma> \<and> block_usage P_0x150b6_false_128_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b6_false_128_def P_0x150b6_false_128_regions_def post: Q_0x150b8_128_def regionset: P_0x150b6_false_128_regions_set_def)

definition P_0x150b8_129 :: state_pred where
  \<open>P_0x150b8_129 \<sigma> \<equiv> RIP \<sigma> = 0x150b8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = 0x8000000000000000 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036\<close>
declare P_0x150b8_129_def[Ps]

definition P_0x150b8_129_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150b8_129_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150b8_129_regions :: state_pred where
  \<open>P_0x150b8_129_regions \<sigma> \<equiv> \<exists>regions. P_0x150b8_129_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150d5_129 :: state_pred where
  \<open>Q_0x150d5_129 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150d5_129_def[Qs]

schematic_goal alloc_cluster_link_l2_0_7_0x150b8_0x150d0_129[blocks]:
  assumes \<open>(P_0x150b8_129 && P_0x150b8_129_regions) \<sigma>\<close>
  shows \<open>exec_block 7 0x150d0 129 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150d5_129 ?\<sigma> \<and> block_usage P_0x150b8_129_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150b8_129_def P_0x150b8_129_regions_def post: Q_0x150d5_129_def regionset: P_0x150b8_129_regions_set_def)

definition P_0x150d5_130 :: state_pred where
  \<open>P_0x150d5_130 \<sigma> \<equiv> RIP \<sigma> = 0x150d5 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15036 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150d5_130_def[Ps]

definition P_0x150d5_130_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150d5_130_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150d5_130_regions :: state_pred where
  \<open>P_0x150d5_130_regions \<sigma> \<equiv> \<exists>regions. P_0x150d5_130_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_bdrv_pwrite_addr_0x150d5_130 :: state_pred where
  \<open>Q_bdrv_pwrite_addr_0x150d5_130 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = bdrv_pwrite_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_bdrv_pwrite_addr_0x150d5_130_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150d5_0x150d5_130[blocks]:
  assumes \<open>(P_0x150d5_130 && P_0x150d5_130_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150d5 130 \<sigma> \<triangleq> ?\<sigma> \<and> Q_bdrv_pwrite_addr_0x150d5_130 ?\<sigma> \<and> block_usage P_0x150d5_130_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150d5_130_def P_0x150d5_130_regions_def post: Q_bdrv_pwrite_addr_0x150d5_130_def regionset: P_0x150d5_130_regions_set_def)

definition P_0x150da_131 :: state_pred where
  \<open>P_0x150da_131 \<sigma> \<equiv> RIP \<sigma> = 0x150da \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = (((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word)::64 word) + ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150da_131_def[Ps]

definition P_0x150da_131_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150da_131_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150da_131_regions :: state_pred where
  \<open>P_0x150da_131_regions \<sigma> \<equiv> \<exists>regions. P_0x150da_131_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150e8_131 :: state_pred where
  \<open>Q_0x150e8_131 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150e8_131_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x150da_0x150e5_131[blocks]:
  assumes \<open>(P_0x150da_131 && P_0x150da_131_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x150e5 131 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150e8_131 ?\<sigma> \<and> block_usage P_0x150da_131_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150da_131_def P_0x150da_131_regions_def post: Q_0x150e8_131_def regionset: P_0x150da_131_regions_set_def)

definition P_0x150e8_true_132 :: state_pred where
  \<open>P_0x150e8_true_132 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_true_132_def[Ps]

definition P_0x150e8_true_132_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_true_132_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_true_132_regions :: state_pred where
  \<open>P_0x150e8_true_132_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_true_132_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_132 :: state_pred where
  \<open>Q_0x15166_132 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_132_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x15160_132[blocks]:
  assumes \<open>(P_0x150e8_true_132 && P_0x150e8_true_132_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x15160 132 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_132 ?\<sigma> \<and> block_usage P_0x150e8_true_132_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_true_132_def P_0x150e8_true_132_regions_def post: Q_0x15166_132_def regionset: P_0x150e8_true_132_regions_set_def)

definition P_0x150e8_false_133 :: state_pred where
  \<open>P_0x150e8_false_133 \<sigma> \<equiv> RIP \<sigma> = 0x150e8 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150e8_false_133_def[Ps]

definition P_0x150e8_false_133_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150e8_false_133_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150e8_false_133_regions :: state_pred where
  \<open>P_0x150e8_false_133_regions \<sigma> \<equiv> \<exists>regions. P_0x150e8_false_133_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x150ed_133 :: state_pred where
  \<open>Q_0x150ed_133 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x150ed_133_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x150e8_0x150ea_133[blocks]:
  assumes \<open>(P_0x150e8_false_133 && P_0x150e8_false_133_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 2 0x150ea 133 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x150ed_133 ?\<sigma> \<and> block_usage P_0x150e8_false_133_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150e8_false_133_def P_0x150e8_false_133_regions_def post: Q_0x150ed_133_def regionset: P_0x150e8_false_133_regions_set_def)

definition P_0x150ed_true_134 :: state_pred where
  \<open>P_0x150ed_true_134 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_true_134_def[Ps]

definition P_0x150ed_true_134_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_true_134_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_true_134_regions :: state_pred where
  \<open>P_0x150ed_true_134_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_true_134_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_134 :: state_pred where
  \<open>Q_0x1511a_134 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_134_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x150ed_0x150ed_134[blocks]:
  assumes \<open>(P_0x150ed_true_134 && P_0x150ed_true_134_regions && ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x150ed 134 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_134 ?\<sigma> \<and> block_usage P_0x150ed_true_134_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_true_134_def P_0x150ed_true_134_regions_def post: Q_0x1511a_134_def regionset: P_0x150ed_true_134_regions_set_def)

definition P_0x150ed_false_135 :: state_pred where
  \<open>P_0x150ed_false_135 \<sigma> \<equiv> RIP \<sigma> = 0x150ed \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = ((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3) \<and> RDI \<sigma> = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) \<and> RSI \<sigma> = ((((ucast (((sextend (ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word))) 32 64::64 word)::64 word))::64 word) << 3)::64 word) + (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word)) \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> R12 \<sigma> = RDX\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x150da \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x150ed_false_135_def[Ps]

definition P_0x150ed_false_135_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x150ed_false_135_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x150ed_false_135_regions :: state_pred where
  \<open>P_0x150ed_false_135_regions \<sigma> \<equiv> \<exists>regions. P_0x150ed_false_135_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_135 :: state_pred where
  \<open>Q_0x15100_135 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_135_def[Qs]

schematic_goal alloc_cluster_link_l2_0_5_0x150ed_0x150fb_135[blocks]:
  assumes \<open>(P_0x150ed_false_135 && P_0x150ed_false_135_regions && ! ZF) \<sigma>\<close>
  shows \<open>exec_block 5 0x150fb 135 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_135 ?\<sigma> \<and> block_usage P_0x150ed_false_135_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x150ed_false_135_def P_0x150ed_false_135_regions_def post: Q_0x15100_135_def regionset: P_0x150ed_false_135_regions_set_def)

definition P_0x15100_136 :: state_pred where
  \<open>P_0x15100_136 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15100_136_def[Ps]

definition P_0x15100_136_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15100_136_regions_set \<sigma> \<equiv> {
    (0, R12 \<sigma>, 8),
    (1, RDX\<^sub>0, 8),
    (2, RSP\<^sub>0, 8),
    (3, ((FS\<^sub>0::64 word) + 0x28), 8),
    (4, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (5, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (6, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (7, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (9, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (10, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (19, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15100_136_regions :: state_pred where
  \<open>P_0x15100_136_regions \<sigma> \<equiv> \<exists>regions. P_0x15100_136_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15110_136 :: state_pred where
  \<open>Q_0x15110_136 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15110_136_def[Qs]

schematic_goal alloc_cluster_link_l2_0_4_0x15100_0x1510c_136[blocks]:
  assumes \<open>(P_0x15100_136 && P_0x15100_136_regions) \<sigma>\<close>
  shows \<open>exec_block 4 0x1510c 136 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15110_136 ?\<sigma> \<and> block_usage P_0x15100_136_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15100_136_def P_0x15100_136_regions_def post: Q_0x15110_136_def regionset: P_0x15100_136_regions_set_def)

definition P_0x15110_137 :: state_pred where
  \<open>P_0x15110_137 \<sigma> \<equiv> RIP \<sigma> = 0x15110 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15110_137_def[Ps]

definition P_0x15110_137_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15110_137_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15110_137_regions :: state_pred where
  \<open>P_0x15110_137_regions \<sigma> \<equiv> \<exists>regions. P_0x15110_137_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_free_any_clusters_addr_0x15110_137 :: state_pred where
  \<open>Q_free_any_clusters_addr_0x15110_137 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = free_any_clusters_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_free_any_clusters_addr_0x15110_137_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15110_0x15110_137[blocks]:
  assumes \<open>(P_0x15110_137 && P_0x15110_137_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15110 137 \<sigma> \<triangleq> ?\<sigma> \<and> Q_free_any_clusters_addr_0x15110_137 ?\<sigma> \<and> block_usage P_0x15110_137_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15110_137_def P_0x15110_137_regions_def post: Q_free_any_clusters_addr_0x15110_137_def regionset: P_0x15110_137_regions_set_def)

definition P_0x15115_138 :: state_pred where
  \<open>P_0x15115_138 \<sigma> \<equiv> RIP \<sigma> = 0x15115 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RDX \<sigma> = 0x1 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x15115 \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15115_138_def[Ps]

definition P_0x15115_138_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15115_138_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, ((RSP\<^sub>0::64 word) - 0x70), 8),
    (20, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15115_138_regions :: state_pred where
  \<open>P_0x15115_138_regions \<sigma> \<equiv> \<exists>regions. P_0x15115_138_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15118_138 :: state_pred where
  \<open>Q_0x15118_138 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15118_138_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15115_0x15115_138[blocks]:
  assumes \<open>(P_0x15115_138 && P_0x15115_138_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15115 138 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15118_138 ?\<sigma> \<and> block_usage P_0x15115_138_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15115_138_def P_0x15115_138_regions_def post: Q_0x15118_138_def regionset: P_0x15115_138_regions_set_def)

definition P_0x15118_true_139 :: state_pred where
  \<open>P_0x15118_true_139 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_true_139_def[Ps]

definition P_0x15118_true_139_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_true_139_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_true_139_regions :: state_pred where
  \<open>P_0x15118_true_139_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_true_139_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15100_139 :: state_pred where
  \<open>Q_0x15100_139 \<sigma> \<equiv> RIP \<sigma> = 0x15100 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x15100_139_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_139[blocks]:
  assumes \<open>(P_0x15118_true_139 && P_0x15118_true_139_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 139 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15100_139 ?\<sigma> \<and> block_usage P_0x15118_true_139_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_true_139_def P_0x15118_true_139_regions_def post: Q_0x15100_139_def regionset: P_0x15118_true_139_regions_set_def)

definition P_0x15118_false_140 :: state_pred where
  \<open>P_0x15118_false_140 \<sigma> \<equiv> RIP \<sigma> = 0x15118 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x15118_false_140_def[Ps]

definition P_0x15118_false_140_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15118_false_140_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x15118_false_140_regions :: state_pred where
  \<open>P_0x15118_false_140_regions \<sigma> \<equiv> \<exists>regions. P_0x15118_false_140_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1511a_140 :: state_pred where
  \<open>Q_0x1511a_140 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R13 \<sigma> = ((qemu_malloc_0x14fb4_retval::64 word) + (((\<langle>63,0\<rangle>((ucast (((\<langle>31,0\<rangle>((R15 \<sigma>::64 word) - 0x1)::32 word)::32 word))::64 word) * (0x8::64 word))::64 word)::64 word) + 0x8)) \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare Q_0x1511a_140_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15118_0x15118_140[blocks]:
  assumes \<open>(P_0x15118_false_140 && P_0x15118_false_140_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15118 140 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1511a_140 ?\<sigma> \<and> block_usage P_0x15118_false_140_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15118_false_140_def P_0x15118_false_140_regions_def post: Q_0x1511a_140_def regionset: P_0x15118_false_140_regions_set_def)

definition P_0x1511a_141 :: state_pred where
  \<open>P_0x1511a_141 \<sigma> \<equiv> RIP \<sigma> = 0x1511a \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> R8 \<sigma> = ((RSP\<^sub>0::64 word) - 0x54) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x48),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) = (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x50),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x54),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word) = (\<sigma> \<turnstile> *[(\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word),8]::64 word)\<close>
declare P_0x1511a_141_def[Ps]

definition P_0x1511a_141_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1511a_141_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0xc), 4),
    (6, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (7, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (8, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0x10), 4),
    (9, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (15, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (16, ((RSP\<^sub>0::64 word) - 0x48), 8),
    (17, ((RSP\<^sub>0::64 word) - 0x50), 8),
    (18, ((RSP\<^sub>0::64 word) - 0x54), 4),
    (19, (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word), 8)
  }\<close>

definition P_0x1511a_141_regions :: state_pred where
  \<open>P_0x1511a_141_regions \<sigma> \<equiv> \<exists>regions. P_0x1511a_141_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15166_141 :: state_pred where
  \<open>Q_0x15166_141 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15166_141_def[Qs]

schematic_goal alloc_cluster_link_l2_0_2_0x1511a_0x1511d_141[blocks]:
  assumes \<open>(P_0x1511a_141 && P_0x1511a_141_regions) \<sigma>\<close>
  shows \<open>exec_block 2 0x1511d 141 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15166_141 ?\<sigma> \<and> block_usage P_0x1511a_141_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1511a_141_def P_0x1511a_141_regions_def post: Q_0x15166_141_def regionset: P_0x1511a_141_regions_set_def)

definition P_0x15166_142 :: state_pred where
  \<open>P_0x15166_142 \<sigma> \<equiv> RIP \<sigma> = 0x15166 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x15166_142_def[Ps]

definition P_0x15166_142_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15166_142_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8)
  }\<close>

definition P_0x15166_142_regions :: state_pred where
  \<open>P_0x15166_142_regions \<sigma> \<equiv> \<exists>regions. P_0x15166_142_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x15169_142 :: state_pred where
  \<open>Q_0x15169_142 \<sigma> \<equiv> RIP \<sigma> = 0x15169 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x15169_142_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15166_0x15166_142[blocks]:
  assumes \<open>(P_0x15166_142 && P_0x15166_142_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15166 142 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x15169_142 ?\<sigma> \<and> block_usage P_0x15166_142_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15166_142_def P_0x15166_142_regions_def post: Q_0x15169_142_def regionset: P_0x15166_142_regions_set_def)

definition P_0x15169_143 :: state_pred where
  \<open>P_0x15169_143 \<sigma> \<equiv> RIP \<sigma> = 0x15169 \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x15169_143_def[Ps]

definition P_0x15169_143_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x15169_143_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x15169_143_regions :: state_pred where
  \<open>P_0x15169_143_regions \<sigma> \<equiv> \<exists>regions. P_0x15169_143_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_qemu_free_addr_0x15169_143 :: state_pred where
  \<open>Q_qemu_free_addr_0x15169_143 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = qemu_free_addr \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1516e\<close>
declare Q_qemu_free_addr_0x15169_143_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x15169_0x15169_143[blocks]:
  assumes \<open>(P_0x15169_143 && P_0x15169_143_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x15169 143 \<sigma> \<triangleq> ?\<sigma> \<and> Q_qemu_free_addr_0x15169_143 ?\<sigma> \<and> block_usage P_0x15169_143_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x15169_143_def P_0x15169_143_regions_def post: Q_qemu_free_addr_0x15169_143_def regionset: P_0x15169_143_regions_set_def)

definition P_0x1516e_144 :: state_pred where
  \<open>P_0x1516e_144 \<sigma> \<equiv> RIP \<sigma> = 0x1516e \<and> RBX \<sigma> = RDI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = qemu_malloc_0x14fb4_retval \<and> R14 \<sigma> = RSI\<^sub>0 \<and> R9 \<sigma> = ((ucast (((((sextend (ucast ((- (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)))) 32 64::64 word)::64 word) AND (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word))::64 word))::64 word) >> 9) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) = (\<sigma> \<turnstile> *[RDX\<^sub>0,8]::64 word) \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x8),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word) = ucast ((\<sigma> \<turnstile> *[(((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x70),8]::64 word) = 0x1516e\<close>
declare P_0x1516e_144_def[Ps]

definition P_0x1516e_144_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1516e_144_regions_set \<sigma> \<equiv> {
    (0, RDX\<^sub>0, 8),
    (1, RSP\<^sub>0, 8),
    (2, ((FS\<^sub>0::64 word) + 0x28), 8),
    (3, ((RDI\<^sub>0::64 word) + 0x40), 8),
    (4, ((RDX\<^sub>0::64 word) + 0x8), 4),
    (5, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (6, (((\<sigma> \<turnstile> *[((RDI\<^sub>0::64 word) + 0x40),8]::64 word)::64 word) + 0xc), 4),
    (7, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (11, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (12, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (13, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (14, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x1516e_144_regions :: state_pred where
  \<open>P_0x1516e_144_regions \<sigma> \<equiv> \<exists>regions. P_0x1516e_144_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14f77_144 :: state_pred where
  \<open>Q_0x14f77_144 \<sigma> \<equiv> RIP \<sigma> = 0x14f77 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x14f77_144_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x1516e_0x1516e_144[blocks]:
  assumes \<open>(P_0x1516e_144 && P_0x1516e_144_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1516e 144 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14f77_144 ?\<sigma> \<and> block_usage P_0x1516e_144_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1516e_144_def P_0x1516e_144_regions_def post: Q_0x14f77_144_def regionset: P_0x1516e_144_regions_set_def)

definition P_0x14f75_false_145 :: state_pred where
  \<open>P_0x14f75_false_145 \<sigma> \<equiv> RIP \<sigma> = 0x14f75 \<and> RAX \<sigma> = 0x0 \<and> RBX \<sigma> = RBX\<^sub>0 \<and> RCX \<sigma> = RCX\<^sub>0 \<and> RDX \<sigma> = RDX\<^sub>0 \<and> RDI \<sigma> = RDI\<^sub>0 \<and> RSI \<sigma> = RSI\<^sub>0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> RBP \<sigma> = RBP\<^sub>0 \<and> R15 \<sigma> = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> R14 \<sigma> = R14\<^sub>0 \<and> R13 \<sigma> = R13\<^sub>0 \<and> R12 \<sigma> = R12\<^sub>0 \<and> R9 \<sigma> = R9\<^sub>0 \<and> R8 \<sigma> = R8\<^sub>0 \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x14f75_false_145_def[Ps]

definition P_0x14f75_false_145_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14f75_false_145_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8)
  }\<close>

definition P_0x14f75_false_145_regions :: state_pred where
  \<open>P_0x14f75_false_145_regions \<sigma> \<equiv> \<exists>regions. P_0x14f75_false_145_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14f77_145 :: state_pred where
  \<open>Q_0x14f77_145 \<sigma> \<equiv> RIP \<sigma> = 0x14f77 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x14f77_145_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x14f75_0x14f75_145[blocks]:
  assumes \<open>(P_0x14f75_false_145 && P_0x14f75_false_145_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x14f75 145 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14f77_145 ?\<sigma> \<and> block_usage P_0x14f75_false_145_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14f75_false_145_def P_0x14f75_false_145_regions_def post: Q_0x14f77_145_def regionset: P_0x14f75_false_145_regions_set_def)

definition P_0x14f77_146 :: state_pred where
  \<open>P_0x14f77_146 \<sigma> \<equiv> RIP \<sigma> = 0x14f77 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x14f77_146_def[Ps]

definition P_0x14f77_146_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14f77_146_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8)
  }\<close>

definition P_0x14f77_146_regions :: state_pred where
  \<open>P_0x14f77_146_regions \<sigma> \<equiv> \<exists>regions. P_0x14f77_146_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x14f88_146 :: state_pred where
  \<open>Q_0x14f88_146 \<sigma> \<equiv> RIP \<sigma> = 0x14f88 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RBX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x14f88_146_def[Qs]

schematic_goal alloc_cluster_link_l2_0_3_0x14f77_0x14f85_146[blocks]:
  assumes \<open>(P_0x14f77_146 && P_0x14f77_146_regions) \<sigma>\<close>
  shows \<open>exec_block 3 0x14f85 146 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x14f88_146 ?\<sigma> \<and> block_usage P_0x14f77_146_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14f77_146_def P_0x14f77_146_regions_def post: Q_0x14f88_146_def regionset: P_0x14f77_146_regions_set_def)

definition P_0x14f88_true_147 :: state_pred where
  \<open>P_0x14f88_true_147 \<sigma> \<equiv> RIP \<sigma> = 0x14f88 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RBX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x14f88_true_147_def[Ps]

definition P_0x14f88_true_147_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14f88_true_147_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8)
  }\<close>

definition P_0x14f88_true_147_regions :: state_pred where
  \<open>P_0x14f88_true_147_regions \<sigma> \<equiv> \<exists>regions. P_0x14f88_true_147_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_0x1519c_147 :: state_pred where
  \<open>Q_0x1519c_147 \<sigma> \<equiv> RIP \<sigma> = 0x1519c \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RBX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_0x1519c_147_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x14f88_0x14f88_147[blocks]:
  assumes \<open>(P_0x14f88_true_147 && P_0x14f88_true_147_regions && !ZF) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x14f88 147 \<sigma> \<triangleq> ?\<sigma> \<and> Q_0x1519c_147 ?\<sigma> \<and> block_usage P_0x14f88_true_147_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14f88_true_147_def P_0x14f88_true_147_regions_def post: Q_0x1519c_147_def regionset: P_0x14f88_true_147_regions_set_def)

definition P_0x1519c_148 :: state_pred where
  \<open>P_0x1519c_148 \<sigma> \<equiv> RIP \<sigma> = 0x1519c \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RBX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x1519c_148_def[Ps]

definition P_0x1519c_148_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x1519c_148_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8),
    (10, ((RSP\<^sub>0::64 word) - 0x70), 8)
  }\<close>

definition P_0x1519c_148_regions :: state_pred where
  \<open>P_0x1519c_148_regions \<sigma> \<equiv> \<exists>regions. P_0x1519c_148_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_stack_chk_fail_addr_0x1519c_148 :: state_pred where
  \<open>Q_stack_chk_fail_addr_0x1519c_148 \<sigma> \<equiv> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x70) \<and> RIP \<sigma> = stack_chk_fail_addr \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_stack_chk_fail_addr_0x1519c_148_def[Qs]

schematic_goal alloc_cluster_link_l2_0_1_0x1519c_0x1519c_148[blocks]:
  assumes \<open>(P_0x1519c_148 && P_0x1519c_148_regions) \<sigma>\<close>
  shows \<open>exec_block (Suc 0) 0x1519c 148 \<sigma> \<triangleq> ?\<sigma> \<and> Q_stack_chk_fail_addr_0x1519c_148 ?\<sigma> \<and> block_usage P_0x1519c_148_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x1519c_148_def P_0x1519c_148_regions_def post: Q_stack_chk_fail_addr_0x1519c_148_def regionset: P_0x1519c_148_regions_set_def)

definition P_0x14f88_false_149 :: state_pred where
  \<open>P_0x14f88_false_149 \<sigma> \<equiv> RIP \<sigma> = 0x14f88 \<and> RAX \<sigma> = ucast ((\<langle>31,0\<rangle>R15 \<sigma>::32 word)) \<and> RBX \<sigma> = 0x0 \<and> RSP \<sigma> = ((RSP\<^sub>0::64 word) - 0x68) \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare P_0x14f88_false_149_def[Ps]

definition P_0x14f88_false_149_regions_set :: \<open>state \<Rightarrow> (nat \<times> 64 word \<times> nat) set\<close> where
  \<open>P_0x14f88_false_149_regions_set \<sigma> \<equiv> {
    (0, RSP\<^sub>0, 8),
    (1, ((FS\<^sub>0::64 word) + 0x28), 8),
    (2, ((RDX\<^sub>0::64 word) + 0x10), 4),
    (3, ((RSP\<^sub>0::64 word) - 0x8), 8),
    (4, ((RSP\<^sub>0::64 word) - 0x10), 8),
    (5, ((RSP\<^sub>0::64 word) - 0x18), 8),
    (6, ((RSP\<^sub>0::64 word) - 0x20), 8),
    (7, ((RSP\<^sub>0::64 word) - 0x28), 8),
    (8, ((RSP\<^sub>0::64 word) - 0x30), 8),
    (9, ((RSP\<^sub>0::64 word) - 0x40), 8)
  }\<close>

definition P_0x14f88_false_149_regions :: state_pred where
  \<open>P_0x14f88_false_149_regions \<sigma> \<equiv> \<exists>regions. P_0x14f88_false_149_regions_set \<sigma> \<subseteq> regions
  \<and> (\<forall>i r. (i, r) \<in> regions \<longrightarrow> no_block_overflow r)
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<sqsubseteq> r' = (i = i' \<or> (i, i') \<in> {}))
  \<and> (\<forall>i r i' r'. (i, r) \<in> regions \<longrightarrow> (i', r') \<in> regions \<longrightarrow> r \<bowtie> r' = (i \<noteq> i' \<and> (i, i') \<notin> {}))
\<close>

definition Q_ret_address_149 :: state_pred where
  \<open>Q_ret_address_149 \<sigma> \<equiv> RIP \<sigma> = ret_address \<and> FS \<sigma> = FS\<^sub>0 \<and> (\<sigma> \<turnstile> *[RSP\<^sub>0,8]::64 word) = ret_address \<and> (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word) \<and> (\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word) = ucast ((\<sigma> \<turnstile> *[((RDX\<^sub>0::64 word) + 0x10),4]::32 word)) \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x8),8]::64 word) = R15\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x10),8]::64 word) = R14\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x18),8]::64 word) = R13\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x20),8]::64 word) = R12\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x28),8]::64 word) = RBP\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x30),8]::64 word) = RBX\<^sub>0 \<and> (\<sigma> \<turnstile> *[((RSP\<^sub>0::64 word) - 0x40),8]::64 word) = (\<sigma> \<turnstile> *[((FS\<^sub>0::64 word) + 0x28),8]::64 word)\<close>
declare Q_ret_address_149_def[Qs]

schematic_goal alloc_cluster_link_l2_0_9_0x14f88_0x14f9c_149[blocks]:
  assumes \<open>(P_0x14f88_false_149 && P_0x14f88_false_149_regions && ! !ZF) \<sigma>\<close>
  shows \<open>exec_block 9 0x14f9c 149 \<sigma> \<triangleq> ?\<sigma> \<and> Q_ret_address_149 ?\<sigma> \<and> block_usage P_0x14f88_false_149_regions_set \<sigma> ?\<sigma>\<close>
  using assms
  by (steps pre: P_0x14f88_false_149_def P_0x14f88_false_149_regions_def post: Q_ret_address_149_def regionset: P_0x14f88_false_149_regions_set_def)

definition alloc_cluster_link_l2_acode :: ACode where
  \<open>alloc_cluster_link_l2_acode =
    Block 12 0x14f72 0;
    IF !ZF THEN
      Block 7 0x14fb1 (Suc 0);
      Block (Suc 0) 0x14fb4 2;
      CALL qemu_malloc_acode;
      Block 9 0x14fd5 3;
      IF !ZF THEN
        Block 5 0x15180 4;
        Block (Suc 0) 0x15185 5;
        CALL copy_sectors_acode;
        Block 3 0x15191 6;
        IF !SF THEN
          Block 5 0x14feb 7;
          IF ZF THEN
            Block 6 0x1502c 8;
            Block (Suc 0) 0x15031 9;
            CALL get_cluster_table_acode;
            Block (Suc 0) 0x15036 10;
            IF ZF THEN
              Block 2 0x15160 11
            ELSE
              Block 3 0x15043 12;
              IF jle THEN
                Block 8 0x1513c 13;
                Block (Suc 0) 0x15141 14;
                CALL bdrv_pwrite_acode;
                Block 4 0x15151 15;
                IF ZF THEN
                  Block 3 0x1511d 16
                ELSE
                  Block 2 0x15156 17;
                  Block (Suc 0) 0x15160 18
                FI
              ELSE
                Block 5 0x1505a 19;
                WHILE P_0x15060_20 DO
                  Block 7 0x15074 20;
                  IF ZF THEN
                    Block (Suc 0) 0x15077 21
                  ELSE
                    Block 9 0x15092 22
                  FI;
                  Block 11 0x150b4 23;
                  IF jg THEN
                    Block (Suc 0) 0x150b6 24
                  ELSE
                    Block (Suc 0) 0x150b6 25
                  FI
                OD;
                Block 7 0x150d0 26;
                Block (Suc 0) 0x150d5 27;
                CALL bdrv_pwrite_acode;
                Block 4 0x150e5 28;
                IF !ZF THEN
                  Block 2 0x15160 29
                ELSE
                  Block 2 0x150ea 30;
                  IF ZF THEN
                    Block (Suc 0) 0x150ed 31
                  ELSE
                    Block 5 0x150fb 32;
                    WHILE P_0x15100_33 DO
                      Block 4 0x1510c 33;
                      Block (Suc 0) 0x15110 34;
                      CALL free_any_clusters_acode;
                      Block (Suc 0) 0x15115 35;
                      IF !ZF THEN
                        Block (Suc 0) 0x15118 36
                      ELSE
                        Block (Suc 0) 0x15118 37
                      FI
                    OD
                  FI;
                  Block 2 0x1511d 38
                FI
              FI
            FI
          ELSE
            Block 11 0x15008 39;
            Block (Suc 0) 0x1500b 40;
            CALL copy_sectors_acode;
            Block 2 0x15013 41;
            IF SF THEN
              Block (Suc 0) 0x15015 42
            ELSE
              Block 6 0x1502c 43;
              Block (Suc 0) 0x15031 44;
              CALL get_cluster_table_acode;
              Block (Suc 0) 0x15036 45;
              IF ZF THEN
                Block 2 0x15160 46
              ELSE
                Block 3 0x15043 47;
                IF jle THEN
                  Block 8 0x1513c 48;
                  Block (Suc 0) 0x15141 49;
                  CALL bdrv_pwrite_acode;
                  Block 4 0x15151 50;
                  IF ZF THEN
                    Block 3 0x1511d 51
                  ELSE
                    Block 2 0x15156 52;
                    Block (Suc 0) 0x15160 53
                  FI
                ELSE
                  Block 5 0x1505a 54;
                  WHILE P_0x15060_55 DO
                    Block 7 0x15074 55;
                    IF ZF THEN
                      Block (Suc 0) 0x15077 56
                    ELSE
                      Block 9 0x15092 57
                    FI;
                    Block 11 0x150b4 58;
                    IF jg THEN
                      Block (Suc 0) 0x150b6 59
                    ELSE
                      Block (Suc 0) 0x150b6 60
                    FI
                  OD;
                  Block 7 0x150d0 61;
                  Block (Suc 0) 0x150d5 62;
                  CALL bdrv_pwrite_acode;
                  Block 4 0x150e5 63;
                  IF !ZF THEN
                    Block 2 0x15160 64
                  ELSE
                    Block 2 0x150ea 65;
                    IF ZF THEN
                      Block (Suc 0) 0x150ed 66
                    ELSE
                      Block 5 0x150fb 67;
                      WHILE P_0x15100_68 DO
                        Block 4 0x1510c 68;
                        Block (Suc 0) 0x15110 69;
                        CALL free_any_clusters_acode;
                        Block (Suc 0) 0x15115 70;
                        IF !ZF THEN
                          Block (Suc 0) 0x15118 71
                        ELSE
                          Block (Suc 0) 0x15118 72
                        FI
                      OD
                    FI;
                    Block 2 0x1511d 73
                  FI
                FI
              FI
            FI
          FI
        ELSE
          Block 2 0x1519a 74
        FI
      ELSE
        Block 5 0x14feb 75;
        IF ZF THEN
          Block 6 0x1502c 76;
          Block (Suc 0) 0x15031 77;
          CALL get_cluster_table_acode;
          Block (Suc 0) 0x15036 78;
          IF ZF THEN
            Block 2 0x15160 79
          ELSE
            Block 3 0x15043 80;
            IF jle THEN
              Block 8 0x1513c 81;
              Block (Suc 0) 0x15141 82;
              CALL bdrv_pwrite_acode;
              Block 4 0x15151 83;
              IF ZF THEN
                Block 3 0x1511d 84
              ELSE
                Block 2 0x15156 85;
                Block (Suc 0) 0x15160 86
              FI
            ELSE
              Block 5 0x1505a 87;
              WHILE P_0x15060_88 DO
                Block 7 0x15074 88;
                IF ZF THEN
                  Block (Suc 0) 0x15077 89
                ELSE
                  Block 9 0x15092 90
                FI;
                Block 11 0x150b4 91;
                IF jg THEN
                  Block (Suc 0) 0x150b6 92
                ELSE
                  Block (Suc 0) 0x150b6 93
                FI
              OD;
              Block 7 0x150d0 94;
              Block (Suc 0) 0x150d5 95;
              CALL bdrv_pwrite_acode;
              Block 4 0x150e5 96;
              IF !ZF THEN
                Block 2 0x15160 97
              ELSE
                Block 2 0x150ea 98;
                IF ZF THEN
                  Block (Suc 0) 0x150ed 99
                ELSE
                  Block 5 0x150fb 100;
                  WHILE P_0x15100_101 DO
                    Block 4 0x1510c 101;
                    Block (Suc 0) 0x15110 102;
                    CALL free_any_clusters_acode;
                    Block (Suc 0) 0x15115 103;
                    IF !ZF THEN
                      Block (Suc 0) 0x15118 104
                    ELSE
                      Block (Suc 0) 0x15118 105
                    FI
                  OD
                FI;
                Block 2 0x1511d 106
              FI
            FI
          FI
        ELSE
          Block 11 0x15008 107;
          Block (Suc 0) 0x1500b 108;
          CALL copy_sectors_acode;
          Block 2 0x15013 109;
          IF SF THEN
            Block (Suc 0) 0x15015 110
          ELSE
            Block 6 0x1502c 111;
            Block (Suc 0) 0x15031 112;
            CALL get_cluster_table_acode;
            Block (Suc 0) 0x15036 113;
            IF ZF THEN
              Block 2 0x15160 114
            ELSE
              Block 3 0x15043 115;
              IF jle THEN
                Block 8 0x1513c 116;
                Block (Suc 0) 0x15141 117;
                CALL bdrv_pwrite_acode;
                Block 4 0x15151 118;
                IF ZF THEN
                  Block 3 0x1511d 119
                ELSE
                  Block 2 0x15156 120;
                  Block (Suc 0) 0x15160 121
                FI
              ELSE
                Block 5 0x1505a 122;
                WHILE P_0x15060_123 DO
                  Block 7 0x15074 123;
                  IF ZF THEN
                    Block (Suc 0) 0x15077 124
                  ELSE
                    Block 9 0x15092 125
                  FI;
                  Block 11 0x150b4 126;
                  IF jg THEN
                    Block (Suc 0) 0x150b6 127
                  ELSE
                    Block (Suc 0) 0x150b6 128
                  FI
                OD;
                Block 7 0x150d0 129;
                Block (Suc 0) 0x150d5 130;
                CALL bdrv_pwrite_acode;
                Block 4 0x150e5 131;
                IF !ZF THEN
                  Block 2 0x15160 132
                ELSE
                  Block 2 0x150ea 133;
                  IF ZF THEN
                    Block (Suc 0) 0x150ed 134
                  ELSE
                    Block 5 0x150fb 135;
                    WHILE P_0x15100_136 DO
                      Block 4 0x1510c 136;
                      Block (Suc 0) 0x15110 137;
                      CALL free_any_clusters_acode;
                      Block (Suc 0) 0x15115 138;
                      IF !ZF THEN
                        Block (Suc 0) 0x15118 139
                      ELSE
                        Block (Suc 0) 0x15118 140
                      FI
                    OD
                  FI;
                  Block 2 0x1511d 141
                FI
              FI
            FI
          FI
        FI
      FI;
      Block (Suc 0) 0x15166 142;
      Block (Suc 0) 0x15169 143;
      CALL qemu_free_acode;
      Block (Suc 0) 0x1516e 144
    ELSE
      Block (Suc 0) 0x14f75 145
    FI;
    Block 3 0x14f85 146;
    IF !ZF THEN
      Block (Suc 0) 0x14f88 147;
      Block (Suc 0) 0x1519c 148;
      CALL stack_chk_fail_acode
    ELSE
      Block 9 0x14f9c 149
    FI
  \<close>

schematic_goal "alloc_cluster_link_l2":
  assumes
    \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14f75 \<longrightarrow> P_0x14f75_true_1_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fb4 \<longrightarrow> P_0x14fb4_2_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fb9 \<longrightarrow> P_0x14fb9_3_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fd8 \<longrightarrow> P_0x14fd8_true_4_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15185 \<longrightarrow> P_0x15185_5_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1518a \<longrightarrow> P_0x1518a_6_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15194 \<longrightarrow> P_0x15194_true_7_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fed \<longrightarrow> P_0x14fed_true_8_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15031 \<longrightarrow> P_0x15031_9_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15036 \<longrightarrow> P_0x15036_10_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_true_11_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_false_12_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_true_13_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15141 \<longrightarrow> P_0x15141_14_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15146 \<longrightarrow> P_0x15146_15_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_true_16_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_false_17_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15160 \<longrightarrow> P_0x15160_18_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_false_19_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15060 \<longrightarrow> P_0x15060_20_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_true_21_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_false_22_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15096 \<longrightarrow> P_0x15096_23_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_true_24_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_false_25_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b8 \<longrightarrow> P_0x150b8_26_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150d5 \<longrightarrow> P_0x150d5_27_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150da \<longrightarrow> P_0x150da_28_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_true_29_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_false_30_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_true_31_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_false_32_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15100 \<longrightarrow> P_0x15100_33_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15110 \<longrightarrow> P_0x15110_34_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15115 \<longrightarrow> P_0x15115_35_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_true_36_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_false_37_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1511a \<longrightarrow> P_0x1511a_38_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fed \<longrightarrow> P_0x14fed_false_39_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1500b \<longrightarrow> P_0x1500b_40_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15010 \<longrightarrow> P_0x15010_41_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15015 \<longrightarrow> P_0x15015_true_42_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15015 \<longrightarrow> P_0x15015_false_43_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15031 \<longrightarrow> P_0x15031_44_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15036 \<longrightarrow> P_0x15036_45_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_true_46_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_false_47_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_true_48_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15141 \<longrightarrow> P_0x15141_49_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15146 \<longrightarrow> P_0x15146_50_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_true_51_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_false_52_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15160 \<longrightarrow> P_0x15160_53_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_false_54_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15060 \<longrightarrow> P_0x15060_55_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_true_56_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_false_57_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15096 \<longrightarrow> P_0x15096_58_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_true_59_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_false_60_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b8 \<longrightarrow> P_0x150b8_61_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150d5 \<longrightarrow> P_0x150d5_62_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150da \<longrightarrow> P_0x150da_63_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_true_64_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_false_65_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_true_66_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_false_67_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15100 \<longrightarrow> P_0x15100_68_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15110 \<longrightarrow> P_0x15110_69_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15115 \<longrightarrow> P_0x15115_70_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_true_71_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_false_72_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1511a \<longrightarrow> P_0x1511a_73_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15194 \<longrightarrow> P_0x15194_false_74_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fd8 \<longrightarrow> P_0x14fd8_false_75_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fed \<longrightarrow> P_0x14fed_true_76_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15031 \<longrightarrow> P_0x15031_77_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15036 \<longrightarrow> P_0x15036_78_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_true_79_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_false_80_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_true_81_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15141 \<longrightarrow> P_0x15141_82_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15146 \<longrightarrow> P_0x15146_83_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_true_84_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_false_85_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15160 \<longrightarrow> P_0x15160_86_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_false_87_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15060 \<longrightarrow> P_0x15060_88_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_true_89_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_false_90_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15096 \<longrightarrow> P_0x15096_91_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_true_92_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_false_93_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b8 \<longrightarrow> P_0x150b8_94_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150d5 \<longrightarrow> P_0x150d5_95_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150da \<longrightarrow> P_0x150da_96_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_true_97_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_false_98_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_true_99_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_false_100_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15100 \<longrightarrow> P_0x15100_101_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15110 \<longrightarrow> P_0x15110_102_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15115 \<longrightarrow> P_0x15115_103_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_true_104_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_false_105_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1511a \<longrightarrow> P_0x1511a_106_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14fed \<longrightarrow> P_0x14fed_false_107_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1500b \<longrightarrow> P_0x1500b_108_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15010 \<longrightarrow> P_0x15010_109_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15015 \<longrightarrow> P_0x15015_true_110_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15015 \<longrightarrow> P_0x15015_false_111_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15031 \<longrightarrow> P_0x15031_112_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15036 \<longrightarrow> P_0x15036_113_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_true_114_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15038 \<longrightarrow> P_0x15038_false_115_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_true_116_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15141 \<longrightarrow> P_0x15141_117_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15146 \<longrightarrow> P_0x15146_118_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_true_119_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15154 \<longrightarrow> P_0x15154_false_120_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15160 \<longrightarrow> P_0x15160_121_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15045 \<longrightarrow> P_0x15045_false_122_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15060 \<longrightarrow> P_0x15060_123_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_true_124_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15077 \<longrightarrow> P_0x15077_false_125_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15096 \<longrightarrow> P_0x15096_126_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_true_127_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b6 \<longrightarrow> P_0x150b6_false_128_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150b8 \<longrightarrow> P_0x150b8_129_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150d5 \<longrightarrow> P_0x150d5_130_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150da \<longrightarrow> P_0x150da_131_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_true_132_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150e8 \<longrightarrow> P_0x150e8_false_133_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_true_134_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x150ed \<longrightarrow> P_0x150ed_false_135_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15100 \<longrightarrow> P_0x15100_136_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15110 \<longrightarrow> P_0x15110_137_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15115 \<longrightarrow> P_0x15115_138_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_true_139_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15118 \<longrightarrow> P_0x15118_false_140_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1511a \<longrightarrow> P_0x1511a_141_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15166 \<longrightarrow> P_0x15166_142_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x15169 \<longrightarrow> P_0x15169_143_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1516e \<longrightarrow> P_0x1516e_144_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14f75 \<longrightarrow> P_0x14f75_false_145_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14f77 \<longrightarrow> P_0x14f77_146_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14f88 \<longrightarrow> P_0x14f88_true_147_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x1519c \<longrightarrow> P_0x1519c_148_regions \<sigma>\<close>
    and \<open>\<forall>\<sigma>. RIP \<sigma> = 0x14f88 \<longrightarrow> P_0x14f88_false_149_regions \<sigma>\<close>
    and [blocks]: \<open>{{Q_qemu_malloc_addr_0x14fb4_2}} \<box>qemu_malloc_acode {{P_0x14fb9_3;M_0x14fb4}}\<close>
    and [blocks]: \<open>{{Q_copy_sectors_addr_0x15185_5}} \<box>copy_sectors_acode {{P_0x1518a_6;M_0x15185}}\<close>
    and [blocks]: \<open>{{Q_get_cluster_table_addr_0x15031_9}} \<box>get_cluster_table_acode {{P_0x15036_10;M_0x15031}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x15141_14}} \<box>bdrv_pwrite_acode {{P_0x15146_15;M_0x15141}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x150d5_27}} \<box>bdrv_pwrite_acode {{P_0x150da_28;M_0x150d5}}\<close>
    and [blocks]: \<open>{{Q_free_any_clusters_addr_0x15110_34}} \<box>free_any_clusters_acode {{P_0x15115_35;M_0x15110}}\<close>
    and [blocks]: \<open>{{Q_copy_sectors_addr_0x1500b_40}} \<box>copy_sectors_acode {{P_0x15010_41;M_0x1500b}}\<close>
    and [blocks]: \<open>{{Q_get_cluster_table_addr_0x15031_44}} \<box>get_cluster_table_acode {{P_0x15036_45;M_0x15031}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x15141_49}} \<box>bdrv_pwrite_acode {{P_0x15146_50;M_0x15141}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x150d5_62}} \<box>bdrv_pwrite_acode {{P_0x150da_63;M_0x150d5}}\<close>
    and [blocks]: \<open>{{Q_free_any_clusters_addr_0x15110_69}} \<box>free_any_clusters_acode {{P_0x15115_70;M_0x15110}}\<close>
    and [blocks]: \<open>{{Q_get_cluster_table_addr_0x15031_77}} \<box>get_cluster_table_acode {{P_0x15036_78;M_0x15031}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x15141_82}} \<box>bdrv_pwrite_acode {{P_0x15146_83;M_0x15141}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x150d5_95}} \<box>bdrv_pwrite_acode {{P_0x150da_96;M_0x150d5}}\<close>
    and [blocks]: \<open>{{Q_free_any_clusters_addr_0x15110_102}} \<box>free_any_clusters_acode {{P_0x15115_103;M_0x15110}}\<close>
    and [blocks]: \<open>{{Q_copy_sectors_addr_0x1500b_108}} \<box>copy_sectors_acode {{P_0x15010_109;M_0x1500b}}\<close>
    and [blocks]: \<open>{{Q_get_cluster_table_addr_0x15031_112}} \<box>get_cluster_table_acode {{P_0x15036_113;M_0x15031}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x15141_117}} \<box>bdrv_pwrite_acode {{P_0x15146_118;M_0x15141}}\<close>
    and [blocks]: \<open>{{Q_bdrv_pwrite_addr_0x150d5_130}} \<box>bdrv_pwrite_acode {{P_0x150da_131;M_0x150d5}}\<close>
    and [blocks]: \<open>{{Q_free_any_clusters_addr_0x15110_137}} \<box>free_any_clusters_acode {{P_0x15115_138;M_0x15110}}\<close>
    and [blocks]: \<open>{{Q_qemu_free_addr_0x15169_143}} \<box>qemu_free_acode {{P_0x1516e_144;M_0x15169}}\<close>
    and [blocks]: \<open>{{Q_stack_chk_fail_addr_0x1519c_148}} \<box>stack_chk_fail_acode {{Q_fail;M_0x1519c}}\<close>
  shows \<open>{{?P}} alloc_cluster_link_l2_acode {{?Q;?M}}\<close>
  apply (vcg acode: alloc_cluster_link_l2_acode_def assms: assms)
  apply ((rule htriples)+)?
  apply (rule HTriple_weaken[where P="P_0x15060_20 || P_0x150b8_26"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp
  apply (vcg_step assms: assms)+
  apply (rule HTriple_weaken[where P="P_0x15100_33 || P_0x1511a_38"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp
  apply simp
  apply simp
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply simp
  apply (vcg_step assms: assms)+
  apply (rule htriples)+
  apply (rule HTriple_weaken[where P="P_0x15060_55 || P_0x150b8_61"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp
  apply (vcg_step assms: assms)+
  apply (rule HTriple_weaken[where P="P_0x15100_68 || P_0x1511a_73"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp+
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp+
  apply (vcg_step assms: assms)+
  apply (rule htriples)+
  apply (rule HTriple_weaken[where P="P_0x15060_88 || P_0x150b8_94"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp
  apply (vcg_step assms: assms)+
  apply (rule HTriple_weaken[where P="P_0x15100_101 || P_0x1511a_106"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp+
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp+
  apply (vcg_step assms: assms)+
  apply (rule htriples)+
  apply (rule HTriple_weaken[where P="P_0x15060_123 || P_0x150b8_129"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp
  apply (vcg_step assms: assms)+
  apply (rule HTriple_weaken[where P="P_0x15100_136 || P_0x1511a_141"])
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (rule HTriple_while)
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp+
  apply (vcg_step assms: assms)+
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply (auto simp add: pred_logic Ps Qs assms)[1]
  apply simp+
  apply (vcg_step assms: assms)+
  done
end
