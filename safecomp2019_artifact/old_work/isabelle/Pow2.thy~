(*

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 
 *)

theory Pow2
  imports "reassembly_all_execution_debug.Leviathan_Setup"
          "HOL-Library.Rewrite"
          "Monads/Abstract_System"
begin


(*5 flags generation CF,SF,OF,ZF,PF *)
instruction_semantics_parser "../InstructionSemantics/strata_rules_5flags"   
lemmas strata_rules_5flags.semantics_def [code]         

text \<open>Load the pow2.s file.\<close>
x86_64_parser "../examples/pow2/pow2.s"

lemmas pow2.assembly_def [code]

text \<open>
  A Floyd invariant is a partial map from locations to state predicates.
  A location consists of an address which stores the current text section and the program
  counter.
\<close>
type_synonym floyd_invar = \<open>64 word \<rightharpoonup> (state \<Rightarrow> bool)\<close>

locale assembly = pow2 + execution_context + strata_rules_5flags
begin

abbreviation "\<alpha> \<equiv> assembly"

schematic_goal unfold_semantics:
  shows \<open>instr_semantics semantics instr_sig = ?x\<close>
  by (simp add: semantics_def simp_rules)

lemma binary_offset[simp]:
  shows "binary_offset assembly = boffset"
  by (simp add: assembly_def assembly.defs)
schematic_goal unfold_labels[simp]:
  shows "label_to_address assembly = ?x"
  apply (rule ext)
  apply (unfold label_to_address_def)
  apply (unfold binary_offset)
  by (auto simp add: label_to_address_def assembly_def assembly.defs)

fun pow2_flag_annotation :: flag_annotation where
  \<open>pow2_flag_annotation loc = (if loc = boffset + 35 then {flag_cf} else {})\<close>

text \<open>
  The step function fetches the next instruction and executes it.
  This matches exactly what method rewrite\_one\_instruction is able to rewrite.
\<close>
definition step :: \<open>(unit, state) se\<close> where
  \<open>step \<sigma> \<equiv>
    let' pc = get_rip \<sigma>;
         index = the (instr_index lookup_table boffset pc);
         (_,i,s) = (text_sections \<alpha>)!index;
         \<sigma> = exec_instr \<alpha> pow2_flag_annotation semantics i s \<sigma>
    in
      Some ((), \<sigma>)\<close>

lemma wps_stepI[wps_intros]:
  assumes \<open>let' pc = get_rip \<sigma>;
                index = the (instr_index lookup_table boffset pc);
                (_,i,s) = (text_sections \<alpha>)!index;
                \<sigma> = exec_instr \<alpha> pow2_flag_annotation semantics i s \<sigma>
           in
             Q () \<sigma>\<close>
  shows \<open>wps step Q \<sigma>\<close>
  using assms
  unfolding step_def
  by (auto simp add: Let'_def Let_def wps_def)

definition halted :: \<open>state \<Rightarrow> bool\<close> where
  \<open>halted \<sigma> = (get_rip \<sigma> = boffset + 45)\<close>

definition wf_state :: \<open>state \<Rightarrow> bool\<close> where
  \<open>wf_state _ = True\<close>

interpretation cfg_system step halted wf_state get_rip
  by standard (simp add: wf_state_def det_system.is_weak_invar_def)

abbreviation \<open>EDI \<sigma> \<equiv> (\<langle>31,0\<rangle>regs \<sigma> rdi) :: 32 word\<close>
abbreviation \<open>RBP \<sigma> \<equiv> regs \<sigma> rbp\<close>
abbreviation \<open>RIP \<sigma> \<equiv> regs \<sigma> rip\<close>
abbreviation \<open>RSP \<sigma> \<equiv> regs \<sigma> rsp\<close>
abbreviation \<open>RAX \<sigma> \<equiv> regs \<sigma> rax\<close>
abbreviation \<open>EAX \<sigma> \<equiv> (\<langle>31,0\<rangle>regs \<sigma> rax) :: 32 word\<close>

text \<open>The Floyd invariant expresses for some locations properties that are invariably true.\<close>
definition pp_\<Theta> :: \<open>_ \<Rightarrow> floyd_invar\<close> where \<open>pp_\<Theta> rsp\<^sub>0 \<equiv> [
  \<comment> \<open>The precondition of the program:\<close>
  boffset \<mapsto> (\<lambda>\<sigma>. 28 \<le> rsp\<^sub>0
               \<and> RSP \<sigma> = rsp\<^sub>0
               \<and> EDI \<sigma> \<le> 64),
  \<comment> \<open> The loop invariant \<close>
  boffset + 35 \<mapsto> \<lambda>\<sigma>. (\<sigma> \<turnstile> *[rsp\<^sub>0 - 16, 8]::64 word) = 2 ^ unat (EAX \<sigma>)
               \<and> EAX \<sigma> \<le> EDI \<sigma>
               \<and> RBP \<sigma> = rsp\<^sub>0 - 8
               \<and> 28 \<le> rsp\<^sub>0
               \<and> \<sigma> \<turnstile> *[rsp\<^sub>0 - 20, 4] = EAX \<sigma>
               \<and> \<sigma> \<turnstile> *[rsp\<^sub>0 - 28, 4] = EDI \<sigma>
               \<and> EDI \<sigma> \<le> 64,
  \<comment> \<open> The postcondition \<close>
  boffset + 45 \<mapsto> (\<lambda>\<sigma>. RAX \<sigma> = 2 ^ unat (EDI \<sigma>))
]\<close>

method symbolic_execution uses masters add del =
  (rule wps_rls),
  rewrite_one_let' del: del,
  rewrite_one_let' add: lookup_table_def instr_index_def entry_size_def del: del,
  rewrite_one_let' add: assembly_def del: del,
  rewrite_one_let' del: del,
  rewrite_one_let' add: exec_instr.simps del: del,
  rewrite_one_let' add: unfold_semantics del: del,
  insert masters,
  (rewrite_one_let' add: add del: del)+,
  (thin_tac \<open>master _ _ _\<close>)+,
  rule linvar_unfoldI,
  simp (no_asm_simp) del: del

method restart_symbolic_execution uses add del =
  ((rewrite_one_let' add: add del: del)+,
  (thin_tac \<open>master _ _ _\<close>)+,
  rule linvar_unfoldI,
  simp (no_asm_simp) del: del)
|
  (((thin_tac "master _ _ _")+)?,
  rule linvar_unfoldI,
  simp (no_asm_simp) del: del)

method finish_symbolic_execution uses add del masters =
  (insert masters,
   simp add: simp_rules add del: del,
   (rewrite_one_let' add: add del: del)+,
   (simp add: simp_rules add: add del: del)?,
   ((thin_tac "master _ _ _")+)?)


text \<open>Add some rules to the simplifier to simplify proofs.\<close>
schematic_goal pp_\<Theta>_zero[simp]:
  shows \<open>pp_\<Theta> rsp\<^sub>0 boffset = ?x\<close>
  unfolding pp_\<Theta>_def
  by simp
schematic_goal pp_\<Theta>_numeral_l[simp]:
  shows \<open>pp_\<Theta> rsp\<^sub>0 (n + boffset) = ?x\<close>
  unfolding pp_\<Theta>_def
  by simp
schematic_goal pp_\<Theta>_numeral_r[simp]:
  shows \<open>pp_\<Theta> rsp\<^sub>0 (boffset + n) = ?x\<close>
  unfolding pp_\<Theta>_def
  by simp
declare halted_def[simp]
declare wf_state_def[simp]


lemma shiftl_is_exp2: \<open>(2 :: 'a::len word) ^ i << n = 2 ^ (i + n)\<close>
  by (simp add: power_add shiftl_t2n)



lemma rewrite_pow2:
  assumes \<open>seps blocks\<close>
      and \<open>(2, rsp\<^sub>0 - 28, 28) \<in> blocks\<close>
      and \<open>28 \<le> rsp\<^sub>0\<close>
    shows \<open>is_std_invar (floyd.invar (pp_\<Theta> rsp\<^sub>0))\<close>
proof -
  (* Boilerplate code for setting up the master blocks: *)
  note 2 = order_trans[OF _ assms(3)]
  note 1 = word_sub_le[OF 2]
  have \<open>master blocks (rsp\<^sub>0 - 8, 8) 2\<close>
   and \<open>master blocks (rsp\<^sub>0 - 16, 8) 2\<close>
   and \<open>master blocks (rsp\<^sub>0 - 20, 4) 2\<close>
   and \<open>master blocks (rsp\<^sub>0 - 28, 4) 2\<close> \<comment> \<open>4-byte alignment gap at @{text rsp\<^sub>0} - 24\<close>
    by (find_master assms: assms add: 1 2)+
  note masters = this

  show ?thesis
    (* Boilerplate code from Peter to start the VCG *)
    apply (rule floyd_invarI)
    apply (rewrite at \<open>floyd_vcs \<hole> _\<close> pp_\<Theta>_def)
    apply (intro floyd_vcsI;clarsimp?)

    (* Subgoal for (ts, pc) = (0, 0) to (0, 9) *)
    subgoal premises prems for \<sigma>
    proof -
      show ?thesis
        (* Insert relevant knowledge *)
        thm prems
        apply (insert prems(1-3) prems(4)[symmetric] assms 1 2)
        (* Apply symbolic execution *)
        apply (symbolic_execution masters: masters)
        apply (symbolic_execution masters: masters)
        apply (symbolic_execution masters: masters)
        apply (symbolic_execution masters: masters)
        apply (symbolic_execution masters: masters)
        apply (symbolic_execution masters: masters)
        apply (symbolic_execution masters: masters)
        (* Proof that the reached state indeed satisfies the invariant. This is the part
           that is manual, up to here it should all be automated / boilerplate *)
        using masters apply (simp add: simp_rules)
        apply rewrite_one_let'+
        by (auto simp add: simp_rules split: if_split_asm)
    qed

    (* Subgoal for (ts, pc) = (0, 9) to (0, 9) and to (0, 13) *)
    subgoal premises prems for \<sigma>
    proof -
      show ?thesis
        apply (insert prems assms 1 2)
        apply (symbolic_execution masters: masters)+
        subgoal
          (* This subgoal corresponds to jumping back and looping.
             The jump provides the assumption: eax < edi.
             This proves the loop invariant. *)
          apply (insert masters)
          apply (rewrite_one_let')+
          apply (simp (no_asm_simp) add: simp_rules shiftl_is_exp2)
          apply (auto simp add: unat_word_ariths(1))[1]
          apply unat_arith
          apply (auto simp add: unat_word_ariths(1))[1]
          apply (auto simp add: unat_word_ariths(1))[1]
          apply (auto simp add: unat_word_ariths(1))[1]
          apply (auto simp add: unat_word_ariths(1))[1]
          apply (insert masters 1 2)
          apply (rewrite_one_let')+
          apply unat_arith
          apply (rewrite_one_let')+
          by (auto simp add: simp_rules shiftl_is_exp2)
        subgoal
          (* This subgoal corresponds to terminating the loop. *)
          apply (restart_symbolic_execution)
          apply (symbolic_execution masters: masters)
          by (symbolic_execution masters: masters)
        done
    qed
    done
qed

theorem pow_prog_htriple:
  assumes \<open>seps blocks\<close>
      and \<open>(2, rsp\<^sub>0 - 28, 28) \<in> blocks\<close>
      and \<open>28 \<le> rsp\<^sub>0\<close>
  shows \<open>htriple (\<lambda>\<sigma>. RIP \<sigma> = boffset \<and> EDI \<sigma> \<le> 64 \<and> RSP \<sigma> = rsp\<^sub>0)
                 (\<lambda>\<sigma>. RIP \<sigma> = boffset + 45 \<and> RAX \<sigma> = 2 ^ unat (EDI \<sigma>))\<close>
  apply (insert assms)
  apply (rule floyd_htripleI[where \<Theta> = \<open>pp_\<Theta> rsp\<^sub>0\<close>])
  subgoal
    apply (rule linvar_unfoldI)
    by auto
  subgoal
    using assms
    by (simp add: rewrite_pow2)
  subgoal for \<sigma> \<phi>
    unfolding pp_\<Theta>_def
    by (auto split: if_split_asm)
  done

theorem pow_prog_correct: 
  fixes \<sigma> :: state
  assumes \<open>seps blocks\<close>
      and \<open>(2, RSP \<sigma> - 28, 28) \<in> blocks\<close>
      and \<open>28 \<le> RSP \<sigma>\<close>
      and \<open>RIP \<sigma> = boffset\<close>
      and \<open>EDI \<sigma> \<le> 64\<close>
      and \<open>yields' \<sigma> = Some (Some \<sigma>')\<close>
  shows \<open>RAX \<sigma>' = 2 ^ unat (EDI \<sigma>')\<close>
proof -
  note htriple = pow_prog_htriple[OF assms(1-3), unfolded htriple_def, THEN spec, of \<sigma>]
  thus ?thesis
    using assms
    unfolding htriple_def
    by (auto split: option.splits)
qed


end

end



(*
        apply (rule wps_rls)?
        apply (rewrite_one_let' del:)
        apply (rewrite_one_let' add: lookup_table_def instr_index_def entry_size_def del:)
        apply (rewrite_one_let' add: assembly_def del:)
        apply (rewrite_one_let' del: )
        apply (rewrite_one_let' add: exec_instr.simps del: )
        apply (rewrite_one_let' add: unfold_semantics del: )
        apply (insert masters)
        apply (rewrite_one_let' add: del:)+
        apply (thin_tac \<open>master _ _ _\<close>)+
        apply (rule linvar_unfoldI)
        apply (simp (no_asm_simp) del: add:)
*)
